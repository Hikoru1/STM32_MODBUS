
007_UART_MODBUS_DATA_TRANSFER_SIM_!.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f9c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080030a8  080030a8  000040a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003120  08003120  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  08003120  08003120  00004120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003128  08003128  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003128  08003128  00004128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800312c  0800312c  0000412c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003130  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  2000005c  0800318c  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000368  0800318c  00005368  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000767a  00000000  00000000  00005085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001700  00000000  00000000  0000c6ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c8  00000000  00000000  0000de00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000529  00000000  00000000  0000e4c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b51  00000000  00000000  0000e9f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000089fa  00000000  00000000  00025542  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081bc0  00000000  00000000  0002df3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000afafc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f44  00000000  00000000  000afb40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  000b1a84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003090 	.word	0x08003090

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08003090 	.word	0x08003090

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b090      	sub	sp, #64	@ 0x40
 8000160:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f000 fb91 	bl	8000888 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f82d 	bl	80001c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 f8f1 	bl	8000350 <MX_GPIO_Init>
  MX_DMA_Init();
 800016e:	f000 f8b9 	bl	80002e4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000172:	f000 f863 	bl	800023c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000176:	f000 f88b 	bl	8000290 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  uint8_t BUFFER[] = {SLAVEADRESS, 0x05, PB8COILLOW, PB8COILHIGH, 0xFF, CRCLOW,CRCHIGH };
 800017a:	4a0f      	ldr	r2, [pc, #60]	@ (80001b8 <main+0x5c>)
 800017c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000180:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000184:	6018      	str	r0, [r3, #0]
 8000186:	3304      	adds	r3, #4
 8000188:	8019      	strh	r1, [r3, #0]
 800018a:	3302      	adds	r3, #2
 800018c:	0c0a      	lsrs	r2, r1, #16
 800018e:	701a      	strb	r2, [r3, #0]
	  }


	  else{ //DIGER DURUMDA HATA MESAJI GONDER.
		  char HATA[50];
		  sprintf(HATA,"HATA KODU: %d",404);
 8000190:	1d3b      	adds	r3, r7, #4
 8000192:	f44f 72ca 	mov.w	r2, #404	@ 0x194
 8000196:	4909      	ldr	r1, [pc, #36]	@ (80001bc <main+0x60>)
 8000198:	4618      	mov	r0, r3
 800019a:	f002 fac9 	bl	8002730 <siprintf>
		  HAL_UART_Transmit(&huart1, (uint8_t*)HATA, strlen(HATA), HAL_MAX_DELAY);
 800019e:	1d3b      	adds	r3, r7, #4
 80001a0:	4618      	mov	r0, r3
 80001a2:	f7ff ffd3 	bl	800014c <strlen>
 80001a6:	4603      	mov	r3, r0
 80001a8:	b29a      	uxth	r2, r3
 80001aa:	1d39      	adds	r1, r7, #4
 80001ac:	f04f 33ff 	mov.w	r3, #4294967295
 80001b0:	4803      	ldr	r0, [pc, #12]	@ (80001c0 <main+0x64>)
 80001b2:	f001 fce9 	bl	8001b88 <HAL_UART_Transmit>
	  if(BUTTON_PIN_Pin==SET){	//EGER BUTON ON ISE VERIYI GONDER.
 80001b6:	e7eb      	b.n	8000190 <main+0x34>
 80001b8:	080030b8 	.word	0x080030b8
 80001bc:	080030a8 	.word	0x080030a8
 80001c0:	20000078 	.word	0x20000078

080001c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b090      	sub	sp, #64	@ 0x40
 80001c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ca:	f107 0318 	add.w	r3, r7, #24
 80001ce:	2228      	movs	r2, #40	@ 0x28
 80001d0:	2100      	movs	r1, #0
 80001d2:	4618      	mov	r0, r3
 80001d4:	f002 facc 	bl	8002770 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d8:	1d3b      	adds	r3, r7, #4
 80001da:	2200      	movs	r2, #0
 80001dc:	601a      	str	r2, [r3, #0]
 80001de:	605a      	str	r2, [r3, #4]
 80001e0:	609a      	str	r2, [r3, #8]
 80001e2:	60da      	str	r2, [r3, #12]
 80001e4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001e6:	2302      	movs	r3, #2
 80001e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ea:	2301      	movs	r3, #1
 80001ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001ee:	2310      	movs	r3, #16
 80001f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001f2:	2300      	movs	r3, #0
 80001f4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001f6:	f107 0318 	add.w	r3, r7, #24
 80001fa:	4618      	mov	r0, r3
 80001fc:	f001 f864 	bl	80012c8 <HAL_RCC_OscConfig>
 8000200:	4603      	mov	r3, r0
 8000202:	2b00      	cmp	r3, #0
 8000204:	d001      	beq.n	800020a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000206:	f000 f911 	bl	800042c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800020a:	230f      	movs	r3, #15
 800020c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800020e:	2300      	movs	r3, #0
 8000210:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000212:	2300      	movs	r3, #0
 8000214:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000216:	2300      	movs	r3, #0
 8000218:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800021a:	2300      	movs	r3, #0
 800021c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800021e:	1d3b      	adds	r3, r7, #4
 8000220:	2100      	movs	r1, #0
 8000222:	4618      	mov	r0, r3
 8000224:	f001 fad2 	bl	80017cc <HAL_RCC_ClockConfig>
 8000228:	4603      	mov	r3, r0
 800022a:	2b00      	cmp	r3, #0
 800022c:	d001      	beq.n	8000232 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800022e:	f000 f8fd 	bl	800042c <Error_Handler>
  }
}
 8000232:	bf00      	nop
 8000234:	3740      	adds	r7, #64	@ 0x40
 8000236:	46bd      	mov	sp, r7
 8000238:	bd80      	pop	{r7, pc}
	...

0800023c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000240:	4b11      	ldr	r3, [pc, #68]	@ (8000288 <MX_USART1_UART_Init+0x4c>)
 8000242:	4a12      	ldr	r2, [pc, #72]	@ (800028c <MX_USART1_UART_Init+0x50>)
 8000244:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000246:	4b10      	ldr	r3, [pc, #64]	@ (8000288 <MX_USART1_UART_Init+0x4c>)
 8000248:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800024c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800024e:	4b0e      	ldr	r3, [pc, #56]	@ (8000288 <MX_USART1_UART_Init+0x4c>)
 8000250:	2200      	movs	r2, #0
 8000252:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000254:	4b0c      	ldr	r3, [pc, #48]	@ (8000288 <MX_USART1_UART_Init+0x4c>)
 8000256:	2200      	movs	r2, #0
 8000258:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800025a:	4b0b      	ldr	r3, [pc, #44]	@ (8000288 <MX_USART1_UART_Init+0x4c>)
 800025c:	2200      	movs	r2, #0
 800025e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000260:	4b09      	ldr	r3, [pc, #36]	@ (8000288 <MX_USART1_UART_Init+0x4c>)
 8000262:	220c      	movs	r2, #12
 8000264:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000266:	4b08      	ldr	r3, [pc, #32]	@ (8000288 <MX_USART1_UART_Init+0x4c>)
 8000268:	2200      	movs	r2, #0
 800026a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800026c:	4b06      	ldr	r3, [pc, #24]	@ (8000288 <MX_USART1_UART_Init+0x4c>)
 800026e:	2200      	movs	r2, #0
 8000270:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000272:	4805      	ldr	r0, [pc, #20]	@ (8000288 <MX_USART1_UART_Init+0x4c>)
 8000274:	f001 fc38 	bl	8001ae8 <HAL_UART_Init>
 8000278:	4603      	mov	r3, r0
 800027a:	2b00      	cmp	r3, #0
 800027c:	d001      	beq.n	8000282 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800027e:	f000 f8d5 	bl	800042c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000282:	bf00      	nop
 8000284:	bd80      	pop	{r7, pc}
 8000286:	bf00      	nop
 8000288:	20000078 	.word	0x20000078
 800028c:	40013800 	.word	0x40013800

08000290 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000294:	4b11      	ldr	r3, [pc, #68]	@ (80002dc <MX_USART2_UART_Init+0x4c>)
 8000296:	4a12      	ldr	r2, [pc, #72]	@ (80002e0 <MX_USART2_UART_Init+0x50>)
 8000298:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800029a:	4b10      	ldr	r3, [pc, #64]	@ (80002dc <MX_USART2_UART_Init+0x4c>)
 800029c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80002a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002a2:	4b0e      	ldr	r3, [pc, #56]	@ (80002dc <MX_USART2_UART_Init+0x4c>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002a8:	4b0c      	ldr	r3, [pc, #48]	@ (80002dc <MX_USART2_UART_Init+0x4c>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002ae:	4b0b      	ldr	r3, [pc, #44]	@ (80002dc <MX_USART2_UART_Init+0x4c>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002b4:	4b09      	ldr	r3, [pc, #36]	@ (80002dc <MX_USART2_UART_Init+0x4c>)
 80002b6:	220c      	movs	r2, #12
 80002b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002ba:	4b08      	ldr	r3, [pc, #32]	@ (80002dc <MX_USART2_UART_Init+0x4c>)
 80002bc:	2200      	movs	r2, #0
 80002be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80002c0:	4b06      	ldr	r3, [pc, #24]	@ (80002dc <MX_USART2_UART_Init+0x4c>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80002c6:	4805      	ldr	r0, [pc, #20]	@ (80002dc <MX_USART2_UART_Init+0x4c>)
 80002c8:	f001 fc0e 	bl	8001ae8 <HAL_UART_Init>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80002d2:	f000 f8ab 	bl	800042c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80002d6:	bf00      	nop
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	200000c0 	.word	0x200000c0
 80002e0:	40004400 	.word	0x40004400

080002e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002ea:	4b18      	ldr	r3, [pc, #96]	@ (800034c <MX_DMA_Init+0x68>)
 80002ec:	695b      	ldr	r3, [r3, #20]
 80002ee:	4a17      	ldr	r2, [pc, #92]	@ (800034c <MX_DMA_Init+0x68>)
 80002f0:	f043 0301 	orr.w	r3, r3, #1
 80002f4:	6153      	str	r3, [r2, #20]
 80002f6:	4b15      	ldr	r3, [pc, #84]	@ (800034c <MX_DMA_Init+0x68>)
 80002f8:	695b      	ldr	r3, [r3, #20]
 80002fa:	f003 0301 	and.w	r3, r3, #1
 80002fe:	607b      	str	r3, [r7, #4]
 8000300:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000302:	2200      	movs	r2, #0
 8000304:	2100      	movs	r1, #0
 8000306:	200e      	movs	r0, #14
 8000308:	f000 fbf7 	bl	8000afa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800030c:	200e      	movs	r0, #14
 800030e:	f000 fc10 	bl	8000b32 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000312:	2200      	movs	r2, #0
 8000314:	2100      	movs	r1, #0
 8000316:	200f      	movs	r0, #15
 8000318:	f000 fbef 	bl	8000afa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800031c:	200f      	movs	r0, #15
 800031e:	f000 fc08 	bl	8000b32 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000322:	2200      	movs	r2, #0
 8000324:	2100      	movs	r1, #0
 8000326:	2010      	movs	r0, #16
 8000328:	f000 fbe7 	bl	8000afa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800032c:	2010      	movs	r0, #16
 800032e:	f000 fc00 	bl	8000b32 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000332:	2200      	movs	r2, #0
 8000334:	2100      	movs	r1, #0
 8000336:	2011      	movs	r0, #17
 8000338:	f000 fbdf 	bl	8000afa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800033c:	2011      	movs	r0, #17
 800033e:	f000 fbf8 	bl	8000b32 <HAL_NVIC_EnableIRQ>

}
 8000342:	bf00      	nop
 8000344:	3708      	adds	r7, #8
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	40021000 	.word	0x40021000

08000350 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b088      	sub	sp, #32
 8000354:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000356:	f107 0310 	add.w	r3, r7, #16
 800035a:	2200      	movs	r2, #0
 800035c:	601a      	str	r2, [r3, #0]
 800035e:	605a      	str	r2, [r3, #4]
 8000360:	609a      	str	r2, [r3, #8]
 8000362:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000364:	4b2e      	ldr	r3, [pc, #184]	@ (8000420 <MX_GPIO_Init+0xd0>)
 8000366:	699b      	ldr	r3, [r3, #24]
 8000368:	4a2d      	ldr	r2, [pc, #180]	@ (8000420 <MX_GPIO_Init+0xd0>)
 800036a:	f043 0310 	orr.w	r3, r3, #16
 800036e:	6193      	str	r3, [r2, #24]
 8000370:	4b2b      	ldr	r3, [pc, #172]	@ (8000420 <MX_GPIO_Init+0xd0>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	f003 0310 	and.w	r3, r3, #16
 8000378:	60fb      	str	r3, [r7, #12]
 800037a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800037c:	4b28      	ldr	r3, [pc, #160]	@ (8000420 <MX_GPIO_Init+0xd0>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	4a27      	ldr	r2, [pc, #156]	@ (8000420 <MX_GPIO_Init+0xd0>)
 8000382:	f043 0320 	orr.w	r3, r3, #32
 8000386:	6193      	str	r3, [r2, #24]
 8000388:	4b25      	ldr	r3, [pc, #148]	@ (8000420 <MX_GPIO_Init+0xd0>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	f003 0320 	and.w	r3, r3, #32
 8000390:	60bb      	str	r3, [r7, #8]
 8000392:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000394:	4b22      	ldr	r3, [pc, #136]	@ (8000420 <MX_GPIO_Init+0xd0>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	4a21      	ldr	r2, [pc, #132]	@ (8000420 <MX_GPIO_Init+0xd0>)
 800039a:	f043 0304 	orr.w	r3, r3, #4
 800039e:	6193      	str	r3, [r2, #24]
 80003a0:	4b1f      	ldr	r3, [pc, #124]	@ (8000420 <MX_GPIO_Init+0xd0>)
 80003a2:	699b      	ldr	r3, [r3, #24]
 80003a4:	f003 0304 	and.w	r3, r3, #4
 80003a8:	607b      	str	r3, [r7, #4]
 80003aa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ac:	4b1c      	ldr	r3, [pc, #112]	@ (8000420 <MX_GPIO_Init+0xd0>)
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	4a1b      	ldr	r2, [pc, #108]	@ (8000420 <MX_GPIO_Init+0xd0>)
 80003b2:	f043 0308 	orr.w	r3, r3, #8
 80003b6:	6193      	str	r3, [r2, #24]
 80003b8:	4b19      	ldr	r3, [pc, #100]	@ (8000420 <MX_GPIO_Init+0xd0>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	f003 0308 	and.w	r3, r3, #8
 80003c0:	603b      	str	r3, [r7, #0]
 80003c2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENABLE_PIN_GPIO_Port, ENABLE_PIN_Pin, GPIO_PIN_RESET);
 80003c4:	2200      	movs	r2, #0
 80003c6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80003ca:	4816      	ldr	r0, [pc, #88]	@ (8000424 <MX_GPIO_Init+0xd4>)
 80003cc:	f000 ff64 	bl	8001298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUTTON_PIN_GPIO_Port, BUTTON_PIN_Pin, GPIO_PIN_RESET);
 80003d0:	2200      	movs	r2, #0
 80003d2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80003d6:	4814      	ldr	r0, [pc, #80]	@ (8000428 <MX_GPIO_Init+0xd8>)
 80003d8:	f000 ff5e 	bl	8001298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ENABLE_PIN_Pin */
  GPIO_InitStruct.Pin = ENABLE_PIN_Pin;
 80003dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80003e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003e2:	2301      	movs	r3, #1
 80003e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e6:	2300      	movs	r3, #0
 80003e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ea:	2302      	movs	r3, #2
 80003ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENABLE_PIN_GPIO_Port, &GPIO_InitStruct);
 80003ee:	f107 0310 	add.w	r3, r7, #16
 80003f2:	4619      	mov	r1, r3
 80003f4:	480b      	ldr	r0, [pc, #44]	@ (8000424 <MX_GPIO_Init+0xd4>)
 80003f6:	f000 fdcb 	bl	8000f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_PIN_Pin */
  GPIO_InitStruct.Pin = BUTTON_PIN_Pin;
 80003fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80003fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000400:	2301      	movs	r3, #1
 8000402:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000404:	2300      	movs	r3, #0
 8000406:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000408:	2302      	movs	r3, #2
 800040a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_PIN_GPIO_Port, &GPIO_InitStruct);
 800040c:	f107 0310 	add.w	r3, r7, #16
 8000410:	4619      	mov	r1, r3
 8000412:	4805      	ldr	r0, [pc, #20]	@ (8000428 <MX_GPIO_Init+0xd8>)
 8000414:	f000 fdbc 	bl	8000f90 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000418:	bf00      	nop
 800041a:	3720      	adds	r7, #32
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}
 8000420:	40021000 	.word	0x40021000
 8000424:	40010800 	.word	0x40010800
 8000428:	40010c00 	.word	0x40010c00

0800042c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000430:	b672      	cpsid	i
}
 8000432:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000434:	bf00      	nop
 8000436:	e7fd      	b.n	8000434 <Error_Handler+0x8>

08000438 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000438:	b480      	push	{r7}
 800043a:	b085      	sub	sp, #20
 800043c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800043e:	4b15      	ldr	r3, [pc, #84]	@ (8000494 <HAL_MspInit+0x5c>)
 8000440:	699b      	ldr	r3, [r3, #24]
 8000442:	4a14      	ldr	r2, [pc, #80]	@ (8000494 <HAL_MspInit+0x5c>)
 8000444:	f043 0301 	orr.w	r3, r3, #1
 8000448:	6193      	str	r3, [r2, #24]
 800044a:	4b12      	ldr	r3, [pc, #72]	@ (8000494 <HAL_MspInit+0x5c>)
 800044c:	699b      	ldr	r3, [r3, #24]
 800044e:	f003 0301 	and.w	r3, r3, #1
 8000452:	60bb      	str	r3, [r7, #8]
 8000454:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000456:	4b0f      	ldr	r3, [pc, #60]	@ (8000494 <HAL_MspInit+0x5c>)
 8000458:	69db      	ldr	r3, [r3, #28]
 800045a:	4a0e      	ldr	r2, [pc, #56]	@ (8000494 <HAL_MspInit+0x5c>)
 800045c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000460:	61d3      	str	r3, [r2, #28]
 8000462:	4b0c      	ldr	r3, [pc, #48]	@ (8000494 <HAL_MspInit+0x5c>)
 8000464:	69db      	ldr	r3, [r3, #28]
 8000466:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800046a:	607b      	str	r3, [r7, #4]
 800046c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800046e:	4b0a      	ldr	r3, [pc, #40]	@ (8000498 <HAL_MspInit+0x60>)
 8000470:	685b      	ldr	r3, [r3, #4]
 8000472:	60fb      	str	r3, [r7, #12]
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800047a:	60fb      	str	r3, [r7, #12]
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000482:	60fb      	str	r3, [r7, #12]
 8000484:	4a04      	ldr	r2, [pc, #16]	@ (8000498 <HAL_MspInit+0x60>)
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800048a:	bf00      	nop
 800048c:	3714      	adds	r7, #20
 800048e:	46bd      	mov	sp, r7
 8000490:	bc80      	pop	{r7}
 8000492:	4770      	bx	lr
 8000494:	40021000 	.word	0x40021000
 8000498:	40010000 	.word	0x40010000

0800049c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b08a      	sub	sp, #40	@ 0x28
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a4:	f107 0318 	add.w	r3, r7, #24
 80004a8:	2200      	movs	r2, #0
 80004aa:	601a      	str	r2, [r3, #0]
 80004ac:	605a      	str	r2, [r3, #4]
 80004ae:	609a      	str	r2, [r3, #8]
 80004b0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	4a88      	ldr	r2, [pc, #544]	@ (80006d8 <HAL_UART_MspInit+0x23c>)
 80004b8:	4293      	cmp	r3, r2
 80004ba:	f040 8087 	bne.w	80005cc <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80004be:	4b87      	ldr	r3, [pc, #540]	@ (80006dc <HAL_UART_MspInit+0x240>)
 80004c0:	699b      	ldr	r3, [r3, #24]
 80004c2:	4a86      	ldr	r2, [pc, #536]	@ (80006dc <HAL_UART_MspInit+0x240>)
 80004c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80004c8:	6193      	str	r3, [r2, #24]
 80004ca:	4b84      	ldr	r3, [pc, #528]	@ (80006dc <HAL_UART_MspInit+0x240>)
 80004cc:	699b      	ldr	r3, [r3, #24]
 80004ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80004d2:	617b      	str	r3, [r7, #20]
 80004d4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d6:	4b81      	ldr	r3, [pc, #516]	@ (80006dc <HAL_UART_MspInit+0x240>)
 80004d8:	699b      	ldr	r3, [r3, #24]
 80004da:	4a80      	ldr	r2, [pc, #512]	@ (80006dc <HAL_UART_MspInit+0x240>)
 80004dc:	f043 0304 	orr.w	r3, r3, #4
 80004e0:	6193      	str	r3, [r2, #24]
 80004e2:	4b7e      	ldr	r3, [pc, #504]	@ (80006dc <HAL_UART_MspInit+0x240>)
 80004e4:	699b      	ldr	r3, [r3, #24]
 80004e6:	f003 0304 	and.w	r3, r3, #4
 80004ea:	613b      	str	r3, [r7, #16]
 80004ec:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80004ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80004f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004f4:	2302      	movs	r3, #2
 80004f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004f8:	2303      	movs	r3, #3
 80004fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004fc:	f107 0318 	add.w	r3, r7, #24
 8000500:	4619      	mov	r1, r3
 8000502:	4877      	ldr	r0, [pc, #476]	@ (80006e0 <HAL_UART_MspInit+0x244>)
 8000504:	f000 fd44 	bl	8000f90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000508:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800050c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800050e:	2300      	movs	r3, #0
 8000510:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000512:	2300      	movs	r3, #0
 8000514:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000516:	f107 0318 	add.w	r3, r7, #24
 800051a:	4619      	mov	r1, r3
 800051c:	4870      	ldr	r0, [pc, #448]	@ (80006e0 <HAL_UART_MspInit+0x244>)
 800051e:	f000 fd37 	bl	8000f90 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000522:	4b70      	ldr	r3, [pc, #448]	@ (80006e4 <HAL_UART_MspInit+0x248>)
 8000524:	4a70      	ldr	r2, [pc, #448]	@ (80006e8 <HAL_UART_MspInit+0x24c>)
 8000526:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000528:	4b6e      	ldr	r3, [pc, #440]	@ (80006e4 <HAL_UART_MspInit+0x248>)
 800052a:	2200      	movs	r2, #0
 800052c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800052e:	4b6d      	ldr	r3, [pc, #436]	@ (80006e4 <HAL_UART_MspInit+0x248>)
 8000530:	2200      	movs	r2, #0
 8000532:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000534:	4b6b      	ldr	r3, [pc, #428]	@ (80006e4 <HAL_UART_MspInit+0x248>)
 8000536:	2280      	movs	r2, #128	@ 0x80
 8000538:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800053a:	4b6a      	ldr	r3, [pc, #424]	@ (80006e4 <HAL_UART_MspInit+0x248>)
 800053c:	2200      	movs	r2, #0
 800053e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000540:	4b68      	ldr	r3, [pc, #416]	@ (80006e4 <HAL_UART_MspInit+0x248>)
 8000542:	2200      	movs	r2, #0
 8000544:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000546:	4b67      	ldr	r3, [pc, #412]	@ (80006e4 <HAL_UART_MspInit+0x248>)
 8000548:	2220      	movs	r2, #32
 800054a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800054c:	4b65      	ldr	r3, [pc, #404]	@ (80006e4 <HAL_UART_MspInit+0x248>)
 800054e:	2200      	movs	r2, #0
 8000550:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000552:	4864      	ldr	r0, [pc, #400]	@ (80006e4 <HAL_UART_MspInit+0x248>)
 8000554:	f000 fb08 	bl	8000b68 <HAL_DMA_Init>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 800055e:	f7ff ff65 	bl	800042c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	4a5f      	ldr	r2, [pc, #380]	@ (80006e4 <HAL_UART_MspInit+0x248>)
 8000566:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000568:	4a5e      	ldr	r2, [pc, #376]	@ (80006e4 <HAL_UART_MspInit+0x248>)
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800056e:	4b5f      	ldr	r3, [pc, #380]	@ (80006ec <HAL_UART_MspInit+0x250>)
 8000570:	4a5f      	ldr	r2, [pc, #380]	@ (80006f0 <HAL_UART_MspInit+0x254>)
 8000572:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000574:	4b5d      	ldr	r3, [pc, #372]	@ (80006ec <HAL_UART_MspInit+0x250>)
 8000576:	2210      	movs	r2, #16
 8000578:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800057a:	4b5c      	ldr	r3, [pc, #368]	@ (80006ec <HAL_UART_MspInit+0x250>)
 800057c:	2200      	movs	r2, #0
 800057e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000580:	4b5a      	ldr	r3, [pc, #360]	@ (80006ec <HAL_UART_MspInit+0x250>)
 8000582:	2280      	movs	r2, #128	@ 0x80
 8000584:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000586:	4b59      	ldr	r3, [pc, #356]	@ (80006ec <HAL_UART_MspInit+0x250>)
 8000588:	2200      	movs	r2, #0
 800058a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800058c:	4b57      	ldr	r3, [pc, #348]	@ (80006ec <HAL_UART_MspInit+0x250>)
 800058e:	2200      	movs	r2, #0
 8000590:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8000592:	4b56      	ldr	r3, [pc, #344]	@ (80006ec <HAL_UART_MspInit+0x250>)
 8000594:	2220      	movs	r2, #32
 8000596:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000598:	4b54      	ldr	r3, [pc, #336]	@ (80006ec <HAL_UART_MspInit+0x250>)
 800059a:	2200      	movs	r2, #0
 800059c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800059e:	4853      	ldr	r0, [pc, #332]	@ (80006ec <HAL_UART_MspInit+0x250>)
 80005a0:	f000 fae2 	bl	8000b68 <HAL_DMA_Init>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 80005aa:	f7ff ff3f 	bl	800042c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	4a4e      	ldr	r2, [pc, #312]	@ (80006ec <HAL_UART_MspInit+0x250>)
 80005b2:	639a      	str	r2, [r3, #56]	@ 0x38
 80005b4:	4a4d      	ldr	r2, [pc, #308]	@ (80006ec <HAL_UART_MspInit+0x250>)
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80005ba:	2200      	movs	r2, #0
 80005bc:	2100      	movs	r1, #0
 80005be:	2025      	movs	r0, #37	@ 0x25
 80005c0:	f000 fa9b 	bl	8000afa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80005c4:	2025      	movs	r0, #37	@ 0x25
 80005c6:	f000 fab4 	bl	8000b32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80005ca:	e080      	b.n	80006ce <HAL_UART_MspInit+0x232>
  else if(huart->Instance==USART2)
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a48      	ldr	r2, [pc, #288]	@ (80006f4 <HAL_UART_MspInit+0x258>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d17b      	bne.n	80006ce <HAL_UART_MspInit+0x232>
    __HAL_RCC_USART2_CLK_ENABLE();
 80005d6:	4b41      	ldr	r3, [pc, #260]	@ (80006dc <HAL_UART_MspInit+0x240>)
 80005d8:	69db      	ldr	r3, [r3, #28]
 80005da:	4a40      	ldr	r2, [pc, #256]	@ (80006dc <HAL_UART_MspInit+0x240>)
 80005dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005e0:	61d3      	str	r3, [r2, #28]
 80005e2:	4b3e      	ldr	r3, [pc, #248]	@ (80006dc <HAL_UART_MspInit+0x240>)
 80005e4:	69db      	ldr	r3, [r3, #28]
 80005e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ee:	4b3b      	ldr	r3, [pc, #236]	@ (80006dc <HAL_UART_MspInit+0x240>)
 80005f0:	699b      	ldr	r3, [r3, #24]
 80005f2:	4a3a      	ldr	r2, [pc, #232]	@ (80006dc <HAL_UART_MspInit+0x240>)
 80005f4:	f043 0304 	orr.w	r3, r3, #4
 80005f8:	6193      	str	r3, [r2, #24]
 80005fa:	4b38      	ldr	r3, [pc, #224]	@ (80006dc <HAL_UART_MspInit+0x240>)
 80005fc:	699b      	ldr	r3, [r3, #24]
 80005fe:	f003 0304 	and.w	r3, r3, #4
 8000602:	60bb      	str	r3, [r7, #8]
 8000604:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000606:	2304      	movs	r3, #4
 8000608:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800060a:	2302      	movs	r3, #2
 800060c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800060e:	2303      	movs	r3, #3
 8000610:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000612:	f107 0318 	add.w	r3, r7, #24
 8000616:	4619      	mov	r1, r3
 8000618:	4831      	ldr	r0, [pc, #196]	@ (80006e0 <HAL_UART_MspInit+0x244>)
 800061a:	f000 fcb9 	bl	8000f90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800061e:	2308      	movs	r3, #8
 8000620:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000622:	2300      	movs	r3, #0
 8000624:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000626:	2300      	movs	r3, #0
 8000628:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800062a:	f107 0318 	add.w	r3, r7, #24
 800062e:	4619      	mov	r1, r3
 8000630:	482b      	ldr	r0, [pc, #172]	@ (80006e0 <HAL_UART_MspInit+0x244>)
 8000632:	f000 fcad 	bl	8000f90 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000636:	4b30      	ldr	r3, [pc, #192]	@ (80006f8 <HAL_UART_MspInit+0x25c>)
 8000638:	4a30      	ldr	r2, [pc, #192]	@ (80006fc <HAL_UART_MspInit+0x260>)
 800063a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800063c:	4b2e      	ldr	r3, [pc, #184]	@ (80006f8 <HAL_UART_MspInit+0x25c>)
 800063e:	2200      	movs	r2, #0
 8000640:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000642:	4b2d      	ldr	r3, [pc, #180]	@ (80006f8 <HAL_UART_MspInit+0x25c>)
 8000644:	2200      	movs	r2, #0
 8000646:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000648:	4b2b      	ldr	r3, [pc, #172]	@ (80006f8 <HAL_UART_MspInit+0x25c>)
 800064a:	2280      	movs	r2, #128	@ 0x80
 800064c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800064e:	4b2a      	ldr	r3, [pc, #168]	@ (80006f8 <HAL_UART_MspInit+0x25c>)
 8000650:	2200      	movs	r2, #0
 8000652:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000654:	4b28      	ldr	r3, [pc, #160]	@ (80006f8 <HAL_UART_MspInit+0x25c>)
 8000656:	2200      	movs	r2, #0
 8000658:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800065a:	4b27      	ldr	r3, [pc, #156]	@ (80006f8 <HAL_UART_MspInit+0x25c>)
 800065c:	2220      	movs	r2, #32
 800065e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000660:	4b25      	ldr	r3, [pc, #148]	@ (80006f8 <HAL_UART_MspInit+0x25c>)
 8000662:	2200      	movs	r2, #0
 8000664:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000666:	4824      	ldr	r0, [pc, #144]	@ (80006f8 <HAL_UART_MspInit+0x25c>)
 8000668:	f000 fa7e 	bl	8000b68 <HAL_DMA_Init>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <HAL_UART_MspInit+0x1da>
      Error_Handler();
 8000672:	f7ff fedb 	bl	800042c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	4a1f      	ldr	r2, [pc, #124]	@ (80006f8 <HAL_UART_MspInit+0x25c>)
 800067a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800067c:	4a1e      	ldr	r2, [pc, #120]	@ (80006f8 <HAL_UART_MspInit+0x25c>)
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	6253      	str	r3, [r2, #36]	@ 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000682:	4b1f      	ldr	r3, [pc, #124]	@ (8000700 <HAL_UART_MspInit+0x264>)
 8000684:	4a1f      	ldr	r2, [pc, #124]	@ (8000704 <HAL_UART_MspInit+0x268>)
 8000686:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000688:	4b1d      	ldr	r3, [pc, #116]	@ (8000700 <HAL_UART_MspInit+0x264>)
 800068a:	2210      	movs	r2, #16
 800068c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800068e:	4b1c      	ldr	r3, [pc, #112]	@ (8000700 <HAL_UART_MspInit+0x264>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000694:	4b1a      	ldr	r3, [pc, #104]	@ (8000700 <HAL_UART_MspInit+0x264>)
 8000696:	2280      	movs	r2, #128	@ 0x80
 8000698:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800069a:	4b19      	ldr	r3, [pc, #100]	@ (8000700 <HAL_UART_MspInit+0x264>)
 800069c:	2200      	movs	r2, #0
 800069e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80006a0:	4b17      	ldr	r3, [pc, #92]	@ (8000700 <HAL_UART_MspInit+0x264>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 80006a6:	4b16      	ldr	r3, [pc, #88]	@ (8000700 <HAL_UART_MspInit+0x264>)
 80006a8:	2220      	movs	r2, #32
 80006aa:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80006ac:	4b14      	ldr	r3, [pc, #80]	@ (8000700 <HAL_UART_MspInit+0x264>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80006b2:	4813      	ldr	r0, [pc, #76]	@ (8000700 <HAL_UART_MspInit+0x264>)
 80006b4:	f000 fa58 	bl	8000b68 <HAL_DMA_Init>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <HAL_UART_MspInit+0x226>
      Error_Handler();
 80006be:	f7ff feb5 	bl	800042c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	4a0e      	ldr	r2, [pc, #56]	@ (8000700 <HAL_UART_MspInit+0x264>)
 80006c6:	639a      	str	r2, [r3, #56]	@ 0x38
 80006c8:	4a0d      	ldr	r2, [pc, #52]	@ (8000700 <HAL_UART_MspInit+0x264>)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	6253      	str	r3, [r2, #36]	@ 0x24
}
 80006ce:	bf00      	nop
 80006d0:	3728      	adds	r7, #40	@ 0x28
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40013800 	.word	0x40013800
 80006dc:	40021000 	.word	0x40021000
 80006e0:	40010800 	.word	0x40010800
 80006e4:	20000108 	.word	0x20000108
 80006e8:	40020058 	.word	0x40020058
 80006ec:	2000014c 	.word	0x2000014c
 80006f0:	40020044 	.word	0x40020044
 80006f4:	40004400 	.word	0x40004400
 80006f8:	20000190 	.word	0x20000190
 80006fc:	4002006c 	.word	0x4002006c
 8000700:	200001d4 	.word	0x200001d4
 8000704:	40020080 	.word	0x40020080

08000708 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800070c:	bf00      	nop
 800070e:	e7fd      	b.n	800070c <NMI_Handler+0x4>

08000710 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000714:	bf00      	nop
 8000716:	e7fd      	b.n	8000714 <HardFault_Handler+0x4>

08000718 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800071c:	bf00      	nop
 800071e:	e7fd      	b.n	800071c <MemManage_Handler+0x4>

08000720 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000724:	bf00      	nop
 8000726:	e7fd      	b.n	8000724 <BusFault_Handler+0x4>

08000728 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800072c:	bf00      	nop
 800072e:	e7fd      	b.n	800072c <UsageFault_Handler+0x4>

08000730 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000734:	bf00      	nop
 8000736:	46bd      	mov	sp, r7
 8000738:	bc80      	pop	{r7}
 800073a:	4770      	bx	lr

0800073c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000740:	bf00      	nop
 8000742:	46bd      	mov	sp, r7
 8000744:	bc80      	pop	{r7}
 8000746:	4770      	bx	lr

08000748 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800074c:	bf00      	nop
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr

08000754 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000758:	f000 f8dc 	bl	8000914 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}

08000760 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000764:	4802      	ldr	r0, [pc, #8]	@ (8000770 <DMA1_Channel4_IRQHandler+0x10>)
 8000766:	f000 fb0d 	bl	8000d84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	2000014c 	.word	0x2000014c

08000774 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000778:	4802      	ldr	r0, [pc, #8]	@ (8000784 <DMA1_Channel5_IRQHandler+0x10>)
 800077a:	f000 fb03 	bl	8000d84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000108 	.word	0x20000108

08000788 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800078c:	4802      	ldr	r0, [pc, #8]	@ (8000798 <DMA1_Channel6_IRQHandler+0x10>)
 800078e:	f000 faf9 	bl	8000d84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	20000190 	.word	0x20000190

0800079c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80007a0:	4802      	ldr	r0, [pc, #8]	@ (80007ac <DMA1_Channel7_IRQHandler+0x10>)
 80007a2:	f000 faef 	bl	8000d84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	200001d4 	.word	0x200001d4

080007b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80007b4:	4802      	ldr	r0, [pc, #8]	@ (80007c0 <USART1_IRQHandler+0x10>)
 80007b6:	f001 fa6b 	bl	8001c90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000078 	.word	0x20000078

080007c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b086      	sub	sp, #24
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007cc:	4a14      	ldr	r2, [pc, #80]	@ (8000820 <_sbrk+0x5c>)
 80007ce:	4b15      	ldr	r3, [pc, #84]	@ (8000824 <_sbrk+0x60>)
 80007d0:	1ad3      	subs	r3, r2, r3
 80007d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007d8:	4b13      	ldr	r3, [pc, #76]	@ (8000828 <_sbrk+0x64>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d102      	bne.n	80007e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007e0:	4b11      	ldr	r3, [pc, #68]	@ (8000828 <_sbrk+0x64>)
 80007e2:	4a12      	ldr	r2, [pc, #72]	@ (800082c <_sbrk+0x68>)
 80007e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007e6:	4b10      	ldr	r3, [pc, #64]	@ (8000828 <_sbrk+0x64>)
 80007e8:	681a      	ldr	r2, [r3, #0]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	4413      	add	r3, r2
 80007ee:	693a      	ldr	r2, [r7, #16]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	d207      	bcs.n	8000804 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007f4:	f001 ffc4 	bl	8002780 <__errno>
 80007f8:	4603      	mov	r3, r0
 80007fa:	220c      	movs	r2, #12
 80007fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000802:	e009      	b.n	8000818 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000804:	4b08      	ldr	r3, [pc, #32]	@ (8000828 <_sbrk+0x64>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800080a:	4b07      	ldr	r3, [pc, #28]	@ (8000828 <_sbrk+0x64>)
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	4413      	add	r3, r2
 8000812:	4a05      	ldr	r2, [pc, #20]	@ (8000828 <_sbrk+0x64>)
 8000814:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000816:	68fb      	ldr	r3, [r7, #12]
}
 8000818:	4618      	mov	r0, r3
 800081a:	3718      	adds	r7, #24
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	20005000 	.word	0x20005000
 8000824:	00000400 	.word	0x00000400
 8000828:	20000218 	.word	0x20000218
 800082c:	20000368 	.word	0x20000368

08000830 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr

0800083c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800083c:	f7ff fff8 	bl	8000830 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000840:	480b      	ldr	r0, [pc, #44]	@ (8000870 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000842:	490c      	ldr	r1, [pc, #48]	@ (8000874 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000844:	4a0c      	ldr	r2, [pc, #48]	@ (8000878 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000846:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000848:	e002      	b.n	8000850 <LoopCopyDataInit>

0800084a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800084a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800084c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800084e:	3304      	adds	r3, #4

08000850 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000850:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000852:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000854:	d3f9      	bcc.n	800084a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000856:	4a09      	ldr	r2, [pc, #36]	@ (800087c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000858:	4c09      	ldr	r4, [pc, #36]	@ (8000880 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800085a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800085c:	e001      	b.n	8000862 <LoopFillZerobss>

0800085e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800085e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000860:	3204      	adds	r2, #4

08000862 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000862:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000864:	d3fb      	bcc.n	800085e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000866:	f001 ff91 	bl	800278c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800086a:	f7ff fc77 	bl	800015c <main>
  bx lr
 800086e:	4770      	bx	lr
  ldr r0, =_sdata
 8000870:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000874:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000878:	08003130 	.word	0x08003130
  ldr r2, =_sbss
 800087c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000880:	20000368 	.word	0x20000368

08000884 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000884:	e7fe      	b.n	8000884 <ADC1_2_IRQHandler>
	...

08000888 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800088c:	4b08      	ldr	r3, [pc, #32]	@ (80008b0 <HAL_Init+0x28>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a07      	ldr	r2, [pc, #28]	@ (80008b0 <HAL_Init+0x28>)
 8000892:	f043 0310 	orr.w	r3, r3, #16
 8000896:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000898:	2003      	movs	r0, #3
 800089a:	f000 f923 	bl	8000ae4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800089e:	200f      	movs	r0, #15
 80008a0:	f000 f808 	bl	80008b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008a4:	f7ff fdc8 	bl	8000438 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008a8:	2300      	movs	r3, #0
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40022000 	.word	0x40022000

080008b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008bc:	4b12      	ldr	r3, [pc, #72]	@ (8000908 <HAL_InitTick+0x54>)
 80008be:	681a      	ldr	r2, [r3, #0]
 80008c0:	4b12      	ldr	r3, [pc, #72]	@ (800090c <HAL_InitTick+0x58>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	4619      	mov	r1, r3
 80008c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80008d2:	4618      	mov	r0, r3
 80008d4:	f000 f93b 	bl	8000b4e <HAL_SYSTICK_Config>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008de:	2301      	movs	r3, #1
 80008e0:	e00e      	b.n	8000900 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	2b0f      	cmp	r3, #15
 80008e6:	d80a      	bhi.n	80008fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008e8:	2200      	movs	r2, #0
 80008ea:	6879      	ldr	r1, [r7, #4]
 80008ec:	f04f 30ff 	mov.w	r0, #4294967295
 80008f0:	f000 f903 	bl	8000afa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008f4:	4a06      	ldr	r2, [pc, #24]	@ (8000910 <HAL_InitTick+0x5c>)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008fa:	2300      	movs	r3, #0
 80008fc:	e000      	b.n	8000900 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008fe:	2301      	movs	r3, #1
}
 8000900:	4618      	mov	r0, r3
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	20000000 	.word	0x20000000
 800090c:	20000008 	.word	0x20000008
 8000910:	20000004 	.word	0x20000004

08000914 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000918:	4b05      	ldr	r3, [pc, #20]	@ (8000930 <HAL_IncTick+0x1c>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	461a      	mov	r2, r3
 800091e:	4b05      	ldr	r3, [pc, #20]	@ (8000934 <HAL_IncTick+0x20>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4413      	add	r3, r2
 8000924:	4a03      	ldr	r2, [pc, #12]	@ (8000934 <HAL_IncTick+0x20>)
 8000926:	6013      	str	r3, [r2, #0]
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr
 8000930:	20000008 	.word	0x20000008
 8000934:	2000021c 	.word	0x2000021c

08000938 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  return uwTick;
 800093c:	4b02      	ldr	r3, [pc, #8]	@ (8000948 <HAL_GetTick+0x10>)
 800093e:	681b      	ldr	r3, [r3, #0]
}
 8000940:	4618      	mov	r0, r3
 8000942:	46bd      	mov	sp, r7
 8000944:	bc80      	pop	{r7}
 8000946:	4770      	bx	lr
 8000948:	2000021c 	.word	0x2000021c

0800094c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800094c:	b480      	push	{r7}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	f003 0307 	and.w	r3, r3, #7
 800095a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800095c:	4b0c      	ldr	r3, [pc, #48]	@ (8000990 <__NVIC_SetPriorityGrouping+0x44>)
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000962:	68ba      	ldr	r2, [r7, #8]
 8000964:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000968:	4013      	ands	r3, r2
 800096a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000974:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000978:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800097c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800097e:	4a04      	ldr	r2, [pc, #16]	@ (8000990 <__NVIC_SetPriorityGrouping+0x44>)
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	60d3      	str	r3, [r2, #12]
}
 8000984:	bf00      	nop
 8000986:	3714      	adds	r7, #20
 8000988:	46bd      	mov	sp, r7
 800098a:	bc80      	pop	{r7}
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	e000ed00 	.word	0xe000ed00

08000994 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000998:	4b04      	ldr	r3, [pc, #16]	@ (80009ac <__NVIC_GetPriorityGrouping+0x18>)
 800099a:	68db      	ldr	r3, [r3, #12]
 800099c:	0a1b      	lsrs	r3, r3, #8
 800099e:	f003 0307 	and.w	r3, r3, #7
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bc80      	pop	{r7}
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	e000ed00 	.word	0xe000ed00

080009b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	db0b      	blt.n	80009da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	f003 021f 	and.w	r2, r3, #31
 80009c8:	4906      	ldr	r1, [pc, #24]	@ (80009e4 <__NVIC_EnableIRQ+0x34>)
 80009ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ce:	095b      	lsrs	r3, r3, #5
 80009d0:	2001      	movs	r0, #1
 80009d2:	fa00 f202 	lsl.w	r2, r0, r2
 80009d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009da:	bf00      	nop
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	bc80      	pop	{r7}
 80009e2:	4770      	bx	lr
 80009e4:	e000e100 	.word	0xe000e100

080009e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	6039      	str	r1, [r7, #0]
 80009f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	db0a      	blt.n	8000a12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	b2da      	uxtb	r2, r3
 8000a00:	490c      	ldr	r1, [pc, #48]	@ (8000a34 <__NVIC_SetPriority+0x4c>)
 8000a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a06:	0112      	lsls	r2, r2, #4
 8000a08:	b2d2      	uxtb	r2, r2
 8000a0a:	440b      	add	r3, r1
 8000a0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a10:	e00a      	b.n	8000a28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	b2da      	uxtb	r2, r3
 8000a16:	4908      	ldr	r1, [pc, #32]	@ (8000a38 <__NVIC_SetPriority+0x50>)
 8000a18:	79fb      	ldrb	r3, [r7, #7]
 8000a1a:	f003 030f 	and.w	r3, r3, #15
 8000a1e:	3b04      	subs	r3, #4
 8000a20:	0112      	lsls	r2, r2, #4
 8000a22:	b2d2      	uxtb	r2, r2
 8000a24:	440b      	add	r3, r1
 8000a26:	761a      	strb	r2, [r3, #24]
}
 8000a28:	bf00      	nop
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bc80      	pop	{r7}
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	e000e100 	.word	0xe000e100
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b089      	sub	sp, #36	@ 0x24
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	f003 0307 	and.w	r3, r3, #7
 8000a4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a50:	69fb      	ldr	r3, [r7, #28]
 8000a52:	f1c3 0307 	rsb	r3, r3, #7
 8000a56:	2b04      	cmp	r3, #4
 8000a58:	bf28      	it	cs
 8000a5a:	2304      	movcs	r3, #4
 8000a5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	3304      	adds	r3, #4
 8000a62:	2b06      	cmp	r3, #6
 8000a64:	d902      	bls.n	8000a6c <NVIC_EncodePriority+0x30>
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	3b03      	subs	r3, #3
 8000a6a:	e000      	b.n	8000a6e <NVIC_EncodePriority+0x32>
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a70:	f04f 32ff 	mov.w	r2, #4294967295
 8000a74:	69bb      	ldr	r3, [r7, #24]
 8000a76:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7a:	43da      	mvns	r2, r3
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	401a      	ands	r2, r3
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a84:	f04f 31ff 	mov.w	r1, #4294967295
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a8e:	43d9      	mvns	r1, r3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a94:	4313      	orrs	r3, r2
         );
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3724      	adds	r7, #36	@ 0x24
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bc80      	pop	{r7}
 8000a9e:	4770      	bx	lr

08000aa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	3b01      	subs	r3, #1
 8000aac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ab0:	d301      	bcc.n	8000ab6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	e00f      	b.n	8000ad6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ab6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae0 <SysTick_Config+0x40>)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	3b01      	subs	r3, #1
 8000abc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000abe:	210f      	movs	r1, #15
 8000ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac4:	f7ff ff90 	bl	80009e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ac8:	4b05      	ldr	r3, [pc, #20]	@ (8000ae0 <SysTick_Config+0x40>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ace:	4b04      	ldr	r3, [pc, #16]	@ (8000ae0 <SysTick_Config+0x40>)
 8000ad0:	2207      	movs	r2, #7
 8000ad2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ad4:	2300      	movs	r3, #0
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	e000e010 	.word	0xe000e010

08000ae4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f7ff ff2d 	bl	800094c <__NVIC_SetPriorityGrouping>
}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b086      	sub	sp, #24
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	4603      	mov	r3, r0
 8000b02:	60b9      	str	r1, [r7, #8]
 8000b04:	607a      	str	r2, [r7, #4]
 8000b06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b0c:	f7ff ff42 	bl	8000994 <__NVIC_GetPriorityGrouping>
 8000b10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b12:	687a      	ldr	r2, [r7, #4]
 8000b14:	68b9      	ldr	r1, [r7, #8]
 8000b16:	6978      	ldr	r0, [r7, #20]
 8000b18:	f7ff ff90 	bl	8000a3c <NVIC_EncodePriority>
 8000b1c:	4602      	mov	r2, r0
 8000b1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b22:	4611      	mov	r1, r2
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff ff5f 	bl	80009e8 <__NVIC_SetPriority>
}
 8000b2a:	bf00      	nop
 8000b2c:	3718      	adds	r7, #24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b32:	b580      	push	{r7, lr}
 8000b34:	b082      	sub	sp, #8
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	4603      	mov	r3, r0
 8000b3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff ff35 	bl	80009b0 <__NVIC_EnableIRQ>
}
 8000b46:	bf00      	nop
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b082      	sub	sp, #8
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f7ff ffa2 	bl	8000aa0 <SysTick_Config>
 8000b5c:	4603      	mov	r3, r0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
	...

08000b68 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b085      	sub	sp, #20
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000b70:	2300      	movs	r3, #0
 8000b72:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d101      	bne.n	8000b7e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e043      	b.n	8000c06 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	461a      	mov	r2, r3
 8000b84:	4b22      	ldr	r3, [pc, #136]	@ (8000c10 <HAL_DMA_Init+0xa8>)
 8000b86:	4413      	add	r3, r2
 8000b88:	4a22      	ldr	r2, [pc, #136]	@ (8000c14 <HAL_DMA_Init+0xac>)
 8000b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b8e:	091b      	lsrs	r3, r3, #4
 8000b90:	009a      	lsls	r2, r3, #2
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4a1f      	ldr	r2, [pc, #124]	@ (8000c18 <HAL_DMA_Init+0xb0>)
 8000b9a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2202      	movs	r2, #2
 8000ba0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000bb2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000bb6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000bc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	68db      	ldr	r3, [r3, #12]
 8000bc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	695b      	ldr	r3, [r3, #20]
 8000bd2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bd8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	69db      	ldr	r3, [r3, #28]
 8000bde:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000be0:	68fa      	ldr	r2, [r7, #12]
 8000be2:	4313      	orrs	r3, r2
 8000be4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	68fa      	ldr	r2, [r7, #12]
 8000bec:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2200      	movs	r2, #0
 8000c00:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000c04:	2300      	movs	r3, #0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3714      	adds	r7, #20
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bc80      	pop	{r7}
 8000c0e:	4770      	bx	lr
 8000c10:	bffdfff8 	.word	0xbffdfff8
 8000c14:	cccccccd 	.word	0xcccccccd
 8000c18:	40020000 	.word	0x40020000

08000c1c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c24:	2300      	movs	r3, #0
 8000c26:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	2b02      	cmp	r3, #2
 8000c32:	d008      	beq.n	8000c46 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2204      	movs	r2, #4
 8000c38:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
 8000c44:	e020      	b.n	8000c88 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f022 020e 	bic.w	r2, r2, #14
 8000c54:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f022 0201 	bic.w	r2, r2, #1
 8000c64:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c6e:	2101      	movs	r1, #1
 8000c70:	fa01 f202 	lsl.w	r2, r1, r2
 8000c74:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2201      	movs	r2, #1
 8000c7a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2200      	movs	r2, #0
 8000c82:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3714      	adds	r7, #20
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bc80      	pop	{r7}
 8000c90:	4770      	bx	lr
	...

08000c94 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	2b02      	cmp	r3, #2
 8000caa:	d005      	beq.n	8000cb8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2204      	movs	r2, #4
 8000cb0:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	73fb      	strb	r3, [r7, #15]
 8000cb6:	e051      	b.n	8000d5c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f022 020e 	bic.w	r2, r2, #14
 8000cc6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f022 0201 	bic.w	r2, r2, #1
 8000cd6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a22      	ldr	r2, [pc, #136]	@ (8000d68 <HAL_DMA_Abort_IT+0xd4>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d029      	beq.n	8000d36 <HAL_DMA_Abort_IT+0xa2>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a21      	ldr	r2, [pc, #132]	@ (8000d6c <HAL_DMA_Abort_IT+0xd8>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d022      	beq.n	8000d32 <HAL_DMA_Abort_IT+0x9e>
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a1f      	ldr	r2, [pc, #124]	@ (8000d70 <HAL_DMA_Abort_IT+0xdc>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d01a      	beq.n	8000d2c <HAL_DMA_Abort_IT+0x98>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a1e      	ldr	r2, [pc, #120]	@ (8000d74 <HAL_DMA_Abort_IT+0xe0>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d012      	beq.n	8000d26 <HAL_DMA_Abort_IT+0x92>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a1c      	ldr	r2, [pc, #112]	@ (8000d78 <HAL_DMA_Abort_IT+0xe4>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d00a      	beq.n	8000d20 <HAL_DMA_Abort_IT+0x8c>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a1b      	ldr	r2, [pc, #108]	@ (8000d7c <HAL_DMA_Abort_IT+0xe8>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d102      	bne.n	8000d1a <HAL_DMA_Abort_IT+0x86>
 8000d14:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000d18:	e00e      	b.n	8000d38 <HAL_DMA_Abort_IT+0xa4>
 8000d1a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000d1e:	e00b      	b.n	8000d38 <HAL_DMA_Abort_IT+0xa4>
 8000d20:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d24:	e008      	b.n	8000d38 <HAL_DMA_Abort_IT+0xa4>
 8000d26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d2a:	e005      	b.n	8000d38 <HAL_DMA_Abort_IT+0xa4>
 8000d2c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d30:	e002      	b.n	8000d38 <HAL_DMA_Abort_IT+0xa4>
 8000d32:	2310      	movs	r3, #16
 8000d34:	e000      	b.n	8000d38 <HAL_DMA_Abort_IT+0xa4>
 8000d36:	2301      	movs	r3, #1
 8000d38:	4a11      	ldr	r2, [pc, #68]	@ (8000d80 <HAL_DMA_Abort_IT+0xec>)
 8000d3a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2201      	movs	r2, #1
 8000d40:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2200      	movs	r2, #0
 8000d48:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d003      	beq.n	8000d5c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	4798      	blx	r3
    } 
  }
  return status;
 8000d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3710      	adds	r7, #16
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40020008 	.word	0x40020008
 8000d6c:	4002001c 	.word	0x4002001c
 8000d70:	40020030 	.word	0x40020030
 8000d74:	40020044 	.word	0x40020044
 8000d78:	40020058 	.word	0x40020058
 8000d7c:	4002006c 	.word	0x4002006c
 8000d80:	40020000 	.word	0x40020000

08000d84 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da0:	2204      	movs	r2, #4
 8000da2:	409a      	lsls	r2, r3
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	4013      	ands	r3, r2
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d04f      	beq.n	8000e4c <HAL_DMA_IRQHandler+0xc8>
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	f003 0304 	and.w	r3, r3, #4
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d04a      	beq.n	8000e4c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f003 0320 	and.w	r3, r3, #32
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d107      	bne.n	8000dd4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f022 0204 	bic.w	r2, r2, #4
 8000dd2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a66      	ldr	r2, [pc, #408]	@ (8000f74 <HAL_DMA_IRQHandler+0x1f0>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d029      	beq.n	8000e32 <HAL_DMA_IRQHandler+0xae>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a65      	ldr	r2, [pc, #404]	@ (8000f78 <HAL_DMA_IRQHandler+0x1f4>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d022      	beq.n	8000e2e <HAL_DMA_IRQHandler+0xaa>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a63      	ldr	r2, [pc, #396]	@ (8000f7c <HAL_DMA_IRQHandler+0x1f8>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d01a      	beq.n	8000e28 <HAL_DMA_IRQHandler+0xa4>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a62      	ldr	r2, [pc, #392]	@ (8000f80 <HAL_DMA_IRQHandler+0x1fc>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d012      	beq.n	8000e22 <HAL_DMA_IRQHandler+0x9e>
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a60      	ldr	r2, [pc, #384]	@ (8000f84 <HAL_DMA_IRQHandler+0x200>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d00a      	beq.n	8000e1c <HAL_DMA_IRQHandler+0x98>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a5f      	ldr	r2, [pc, #380]	@ (8000f88 <HAL_DMA_IRQHandler+0x204>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d102      	bne.n	8000e16 <HAL_DMA_IRQHandler+0x92>
 8000e10:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000e14:	e00e      	b.n	8000e34 <HAL_DMA_IRQHandler+0xb0>
 8000e16:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000e1a:	e00b      	b.n	8000e34 <HAL_DMA_IRQHandler+0xb0>
 8000e1c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000e20:	e008      	b.n	8000e34 <HAL_DMA_IRQHandler+0xb0>
 8000e22:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000e26:	e005      	b.n	8000e34 <HAL_DMA_IRQHandler+0xb0>
 8000e28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e2c:	e002      	b.n	8000e34 <HAL_DMA_IRQHandler+0xb0>
 8000e2e:	2340      	movs	r3, #64	@ 0x40
 8000e30:	e000      	b.n	8000e34 <HAL_DMA_IRQHandler+0xb0>
 8000e32:	2304      	movs	r3, #4
 8000e34:	4a55      	ldr	r2, [pc, #340]	@ (8000f8c <HAL_DMA_IRQHandler+0x208>)
 8000e36:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	f000 8094 	beq.w	8000f6a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000e4a:	e08e      	b.n	8000f6a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e50:	2202      	movs	r2, #2
 8000e52:	409a      	lsls	r2, r3
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	4013      	ands	r3, r2
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d056      	beq.n	8000f0a <HAL_DMA_IRQHandler+0x186>
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	f003 0302 	and.w	r3, r3, #2
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d051      	beq.n	8000f0a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f003 0320 	and.w	r3, r3, #32
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d10b      	bne.n	8000e8c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f022 020a 	bic.w	r2, r2, #10
 8000e82:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2201      	movs	r2, #1
 8000e88:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a38      	ldr	r2, [pc, #224]	@ (8000f74 <HAL_DMA_IRQHandler+0x1f0>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d029      	beq.n	8000eea <HAL_DMA_IRQHandler+0x166>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a37      	ldr	r2, [pc, #220]	@ (8000f78 <HAL_DMA_IRQHandler+0x1f4>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d022      	beq.n	8000ee6 <HAL_DMA_IRQHandler+0x162>
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a35      	ldr	r2, [pc, #212]	@ (8000f7c <HAL_DMA_IRQHandler+0x1f8>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d01a      	beq.n	8000ee0 <HAL_DMA_IRQHandler+0x15c>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a34      	ldr	r2, [pc, #208]	@ (8000f80 <HAL_DMA_IRQHandler+0x1fc>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d012      	beq.n	8000eda <HAL_DMA_IRQHandler+0x156>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a32      	ldr	r2, [pc, #200]	@ (8000f84 <HAL_DMA_IRQHandler+0x200>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d00a      	beq.n	8000ed4 <HAL_DMA_IRQHandler+0x150>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a31      	ldr	r2, [pc, #196]	@ (8000f88 <HAL_DMA_IRQHandler+0x204>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d102      	bne.n	8000ece <HAL_DMA_IRQHandler+0x14a>
 8000ec8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000ecc:	e00e      	b.n	8000eec <HAL_DMA_IRQHandler+0x168>
 8000ece:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000ed2:	e00b      	b.n	8000eec <HAL_DMA_IRQHandler+0x168>
 8000ed4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000ed8:	e008      	b.n	8000eec <HAL_DMA_IRQHandler+0x168>
 8000eda:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ede:	e005      	b.n	8000eec <HAL_DMA_IRQHandler+0x168>
 8000ee0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ee4:	e002      	b.n	8000eec <HAL_DMA_IRQHandler+0x168>
 8000ee6:	2320      	movs	r3, #32
 8000ee8:	e000      	b.n	8000eec <HAL_DMA_IRQHandler+0x168>
 8000eea:	2302      	movs	r3, #2
 8000eec:	4a27      	ldr	r2, [pc, #156]	@ (8000f8c <HAL_DMA_IRQHandler+0x208>)
 8000eee:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d034      	beq.n	8000f6a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000f08:	e02f      	b.n	8000f6a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f0e:	2208      	movs	r2, #8
 8000f10:	409a      	lsls	r2, r3
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	4013      	ands	r3, r2
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d028      	beq.n	8000f6c <HAL_DMA_IRQHandler+0x1e8>
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	f003 0308 	and.w	r3, r3, #8
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d023      	beq.n	8000f6c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f022 020e 	bic.w	r2, r2, #14
 8000f32:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f42:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2201      	movs	r2, #1
 8000f48:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2200      	movs	r2, #0
 8000f56:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d004      	beq.n	8000f6c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	4798      	blx	r3
    }
  }
  return;
 8000f6a:	bf00      	nop
 8000f6c:	bf00      	nop
}
 8000f6e:	3710      	adds	r7, #16
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	40020008 	.word	0x40020008
 8000f78:	4002001c 	.word	0x4002001c
 8000f7c:	40020030 	.word	0x40020030
 8000f80:	40020044 	.word	0x40020044
 8000f84:	40020058 	.word	0x40020058
 8000f88:	4002006c 	.word	0x4002006c
 8000f8c:	40020000 	.word	0x40020000

08000f90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b08b      	sub	sp, #44	@ 0x2c
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fa2:	e169      	b.n	8001278 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	69fa      	ldr	r2, [r7, #28]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	f040 8158 	bne.w	8001272 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	4a9a      	ldr	r2, [pc, #616]	@ (8001230 <HAL_GPIO_Init+0x2a0>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d05e      	beq.n	800108a <HAL_GPIO_Init+0xfa>
 8000fcc:	4a98      	ldr	r2, [pc, #608]	@ (8001230 <HAL_GPIO_Init+0x2a0>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d875      	bhi.n	80010be <HAL_GPIO_Init+0x12e>
 8000fd2:	4a98      	ldr	r2, [pc, #608]	@ (8001234 <HAL_GPIO_Init+0x2a4>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d058      	beq.n	800108a <HAL_GPIO_Init+0xfa>
 8000fd8:	4a96      	ldr	r2, [pc, #600]	@ (8001234 <HAL_GPIO_Init+0x2a4>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d86f      	bhi.n	80010be <HAL_GPIO_Init+0x12e>
 8000fde:	4a96      	ldr	r2, [pc, #600]	@ (8001238 <HAL_GPIO_Init+0x2a8>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d052      	beq.n	800108a <HAL_GPIO_Init+0xfa>
 8000fe4:	4a94      	ldr	r2, [pc, #592]	@ (8001238 <HAL_GPIO_Init+0x2a8>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d869      	bhi.n	80010be <HAL_GPIO_Init+0x12e>
 8000fea:	4a94      	ldr	r2, [pc, #592]	@ (800123c <HAL_GPIO_Init+0x2ac>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d04c      	beq.n	800108a <HAL_GPIO_Init+0xfa>
 8000ff0:	4a92      	ldr	r2, [pc, #584]	@ (800123c <HAL_GPIO_Init+0x2ac>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d863      	bhi.n	80010be <HAL_GPIO_Init+0x12e>
 8000ff6:	4a92      	ldr	r2, [pc, #584]	@ (8001240 <HAL_GPIO_Init+0x2b0>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d046      	beq.n	800108a <HAL_GPIO_Init+0xfa>
 8000ffc:	4a90      	ldr	r2, [pc, #576]	@ (8001240 <HAL_GPIO_Init+0x2b0>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d85d      	bhi.n	80010be <HAL_GPIO_Init+0x12e>
 8001002:	2b12      	cmp	r3, #18
 8001004:	d82a      	bhi.n	800105c <HAL_GPIO_Init+0xcc>
 8001006:	2b12      	cmp	r3, #18
 8001008:	d859      	bhi.n	80010be <HAL_GPIO_Init+0x12e>
 800100a:	a201      	add	r2, pc, #4	@ (adr r2, 8001010 <HAL_GPIO_Init+0x80>)
 800100c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001010:	0800108b 	.word	0x0800108b
 8001014:	08001065 	.word	0x08001065
 8001018:	08001077 	.word	0x08001077
 800101c:	080010b9 	.word	0x080010b9
 8001020:	080010bf 	.word	0x080010bf
 8001024:	080010bf 	.word	0x080010bf
 8001028:	080010bf 	.word	0x080010bf
 800102c:	080010bf 	.word	0x080010bf
 8001030:	080010bf 	.word	0x080010bf
 8001034:	080010bf 	.word	0x080010bf
 8001038:	080010bf 	.word	0x080010bf
 800103c:	080010bf 	.word	0x080010bf
 8001040:	080010bf 	.word	0x080010bf
 8001044:	080010bf 	.word	0x080010bf
 8001048:	080010bf 	.word	0x080010bf
 800104c:	080010bf 	.word	0x080010bf
 8001050:	080010bf 	.word	0x080010bf
 8001054:	0800106d 	.word	0x0800106d
 8001058:	08001081 	.word	0x08001081
 800105c:	4a79      	ldr	r2, [pc, #484]	@ (8001244 <HAL_GPIO_Init+0x2b4>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d013      	beq.n	800108a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001062:	e02c      	b.n	80010be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	623b      	str	r3, [r7, #32]
          break;
 800106a:	e029      	b.n	80010c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	3304      	adds	r3, #4
 8001072:	623b      	str	r3, [r7, #32]
          break;
 8001074:	e024      	b.n	80010c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	68db      	ldr	r3, [r3, #12]
 800107a:	3308      	adds	r3, #8
 800107c:	623b      	str	r3, [r7, #32]
          break;
 800107e:	e01f      	b.n	80010c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	330c      	adds	r3, #12
 8001086:	623b      	str	r3, [r7, #32]
          break;
 8001088:	e01a      	b.n	80010c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d102      	bne.n	8001098 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001092:	2304      	movs	r3, #4
 8001094:	623b      	str	r3, [r7, #32]
          break;
 8001096:	e013      	b.n	80010c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	2b01      	cmp	r3, #1
 800109e:	d105      	bne.n	80010ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010a0:	2308      	movs	r3, #8
 80010a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	69fa      	ldr	r2, [r7, #28]
 80010a8:	611a      	str	r2, [r3, #16]
          break;
 80010aa:	e009      	b.n	80010c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010ac:	2308      	movs	r3, #8
 80010ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	69fa      	ldr	r2, [r7, #28]
 80010b4:	615a      	str	r2, [r3, #20]
          break;
 80010b6:	e003      	b.n	80010c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010b8:	2300      	movs	r3, #0
 80010ba:	623b      	str	r3, [r7, #32]
          break;
 80010bc:	e000      	b.n	80010c0 <HAL_GPIO_Init+0x130>
          break;
 80010be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	2bff      	cmp	r3, #255	@ 0xff
 80010c4:	d801      	bhi.n	80010ca <HAL_GPIO_Init+0x13a>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	e001      	b.n	80010ce <HAL_GPIO_Init+0x13e>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	3304      	adds	r3, #4
 80010ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	2bff      	cmp	r3, #255	@ 0xff
 80010d4:	d802      	bhi.n	80010dc <HAL_GPIO_Init+0x14c>
 80010d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	e002      	b.n	80010e2 <HAL_GPIO_Init+0x152>
 80010dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010de:	3b08      	subs	r3, #8
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	210f      	movs	r1, #15
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	fa01 f303 	lsl.w	r3, r1, r3
 80010f0:	43db      	mvns	r3, r3
 80010f2:	401a      	ands	r2, r3
 80010f4:	6a39      	ldr	r1, [r7, #32]
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	fa01 f303 	lsl.w	r3, r1, r3
 80010fc:	431a      	orrs	r2, r3
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800110a:	2b00      	cmp	r3, #0
 800110c:	f000 80b1 	beq.w	8001272 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001110:	4b4d      	ldr	r3, [pc, #308]	@ (8001248 <HAL_GPIO_Init+0x2b8>)
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	4a4c      	ldr	r2, [pc, #304]	@ (8001248 <HAL_GPIO_Init+0x2b8>)
 8001116:	f043 0301 	orr.w	r3, r3, #1
 800111a:	6193      	str	r3, [r2, #24]
 800111c:	4b4a      	ldr	r3, [pc, #296]	@ (8001248 <HAL_GPIO_Init+0x2b8>)
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	f003 0301 	and.w	r3, r3, #1
 8001124:	60bb      	str	r3, [r7, #8]
 8001126:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001128:	4a48      	ldr	r2, [pc, #288]	@ (800124c <HAL_GPIO_Init+0x2bc>)
 800112a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800112c:	089b      	lsrs	r3, r3, #2
 800112e:	3302      	adds	r3, #2
 8001130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001134:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001138:	f003 0303 	and.w	r3, r3, #3
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	220f      	movs	r2, #15
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	43db      	mvns	r3, r3
 8001146:	68fa      	ldr	r2, [r7, #12]
 8001148:	4013      	ands	r3, r2
 800114a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4a40      	ldr	r2, [pc, #256]	@ (8001250 <HAL_GPIO_Init+0x2c0>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d013      	beq.n	800117c <HAL_GPIO_Init+0x1ec>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4a3f      	ldr	r2, [pc, #252]	@ (8001254 <HAL_GPIO_Init+0x2c4>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d00d      	beq.n	8001178 <HAL_GPIO_Init+0x1e8>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4a3e      	ldr	r2, [pc, #248]	@ (8001258 <HAL_GPIO_Init+0x2c8>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d007      	beq.n	8001174 <HAL_GPIO_Init+0x1e4>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a3d      	ldr	r2, [pc, #244]	@ (800125c <HAL_GPIO_Init+0x2cc>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d101      	bne.n	8001170 <HAL_GPIO_Init+0x1e0>
 800116c:	2303      	movs	r3, #3
 800116e:	e006      	b.n	800117e <HAL_GPIO_Init+0x1ee>
 8001170:	2304      	movs	r3, #4
 8001172:	e004      	b.n	800117e <HAL_GPIO_Init+0x1ee>
 8001174:	2302      	movs	r3, #2
 8001176:	e002      	b.n	800117e <HAL_GPIO_Init+0x1ee>
 8001178:	2301      	movs	r3, #1
 800117a:	e000      	b.n	800117e <HAL_GPIO_Init+0x1ee>
 800117c:	2300      	movs	r3, #0
 800117e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001180:	f002 0203 	and.w	r2, r2, #3
 8001184:	0092      	lsls	r2, r2, #2
 8001186:	4093      	lsls	r3, r2
 8001188:	68fa      	ldr	r2, [r7, #12]
 800118a:	4313      	orrs	r3, r2
 800118c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800118e:	492f      	ldr	r1, [pc, #188]	@ (800124c <HAL_GPIO_Init+0x2bc>)
 8001190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001192:	089b      	lsrs	r3, r3, #2
 8001194:	3302      	adds	r3, #2
 8001196:	68fa      	ldr	r2, [r7, #12]
 8001198:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d006      	beq.n	80011b6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011a8:	4b2d      	ldr	r3, [pc, #180]	@ (8001260 <HAL_GPIO_Init+0x2d0>)
 80011aa:	689a      	ldr	r2, [r3, #8]
 80011ac:	492c      	ldr	r1, [pc, #176]	@ (8001260 <HAL_GPIO_Init+0x2d0>)
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	608b      	str	r3, [r1, #8]
 80011b4:	e006      	b.n	80011c4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011b6:	4b2a      	ldr	r3, [pc, #168]	@ (8001260 <HAL_GPIO_Init+0x2d0>)
 80011b8:	689a      	ldr	r2, [r3, #8]
 80011ba:	69bb      	ldr	r3, [r7, #24]
 80011bc:	43db      	mvns	r3, r3
 80011be:	4928      	ldr	r1, [pc, #160]	@ (8001260 <HAL_GPIO_Init+0x2d0>)
 80011c0:	4013      	ands	r3, r2
 80011c2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d006      	beq.n	80011de <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011d0:	4b23      	ldr	r3, [pc, #140]	@ (8001260 <HAL_GPIO_Init+0x2d0>)
 80011d2:	68da      	ldr	r2, [r3, #12]
 80011d4:	4922      	ldr	r1, [pc, #136]	@ (8001260 <HAL_GPIO_Init+0x2d0>)
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	4313      	orrs	r3, r2
 80011da:	60cb      	str	r3, [r1, #12]
 80011dc:	e006      	b.n	80011ec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011de:	4b20      	ldr	r3, [pc, #128]	@ (8001260 <HAL_GPIO_Init+0x2d0>)
 80011e0:	68da      	ldr	r2, [r3, #12]
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	43db      	mvns	r3, r3
 80011e6:	491e      	ldr	r1, [pc, #120]	@ (8001260 <HAL_GPIO_Init+0x2d0>)
 80011e8:	4013      	ands	r3, r2
 80011ea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d006      	beq.n	8001206 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011f8:	4b19      	ldr	r3, [pc, #100]	@ (8001260 <HAL_GPIO_Init+0x2d0>)
 80011fa:	685a      	ldr	r2, [r3, #4]
 80011fc:	4918      	ldr	r1, [pc, #96]	@ (8001260 <HAL_GPIO_Init+0x2d0>)
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	4313      	orrs	r3, r2
 8001202:	604b      	str	r3, [r1, #4]
 8001204:	e006      	b.n	8001214 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001206:	4b16      	ldr	r3, [pc, #88]	@ (8001260 <HAL_GPIO_Init+0x2d0>)
 8001208:	685a      	ldr	r2, [r3, #4]
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	43db      	mvns	r3, r3
 800120e:	4914      	ldr	r1, [pc, #80]	@ (8001260 <HAL_GPIO_Init+0x2d0>)
 8001210:	4013      	ands	r3, r2
 8001212:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d021      	beq.n	8001264 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001220:	4b0f      	ldr	r3, [pc, #60]	@ (8001260 <HAL_GPIO_Init+0x2d0>)
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	490e      	ldr	r1, [pc, #56]	@ (8001260 <HAL_GPIO_Init+0x2d0>)
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	4313      	orrs	r3, r2
 800122a:	600b      	str	r3, [r1, #0]
 800122c:	e021      	b.n	8001272 <HAL_GPIO_Init+0x2e2>
 800122e:	bf00      	nop
 8001230:	10320000 	.word	0x10320000
 8001234:	10310000 	.word	0x10310000
 8001238:	10220000 	.word	0x10220000
 800123c:	10210000 	.word	0x10210000
 8001240:	10120000 	.word	0x10120000
 8001244:	10110000 	.word	0x10110000
 8001248:	40021000 	.word	0x40021000
 800124c:	40010000 	.word	0x40010000
 8001250:	40010800 	.word	0x40010800
 8001254:	40010c00 	.word	0x40010c00
 8001258:	40011000 	.word	0x40011000
 800125c:	40011400 	.word	0x40011400
 8001260:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001264:	4b0b      	ldr	r3, [pc, #44]	@ (8001294 <HAL_GPIO_Init+0x304>)
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	43db      	mvns	r3, r3
 800126c:	4909      	ldr	r1, [pc, #36]	@ (8001294 <HAL_GPIO_Init+0x304>)
 800126e:	4013      	ands	r3, r2
 8001270:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001274:	3301      	adds	r3, #1
 8001276:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800127e:	fa22 f303 	lsr.w	r3, r2, r3
 8001282:	2b00      	cmp	r3, #0
 8001284:	f47f ae8e 	bne.w	8000fa4 <HAL_GPIO_Init+0x14>
  }
}
 8001288:	bf00      	nop
 800128a:	bf00      	nop
 800128c:	372c      	adds	r7, #44	@ 0x2c
 800128e:	46bd      	mov	sp, r7
 8001290:	bc80      	pop	{r7}
 8001292:	4770      	bx	lr
 8001294:	40010400 	.word	0x40010400

08001298 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	460b      	mov	r3, r1
 80012a2:	807b      	strh	r3, [r7, #2]
 80012a4:	4613      	mov	r3, r2
 80012a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012a8:	787b      	ldrb	r3, [r7, #1]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d003      	beq.n	80012b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012ae:	887a      	ldrh	r2, [r7, #2]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80012b4:	e003      	b.n	80012be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012b6:	887b      	ldrh	r3, [r7, #2]
 80012b8:	041a      	lsls	r2, r3, #16
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	611a      	str	r2, [r3, #16]
}
 80012be:	bf00      	nop
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bc80      	pop	{r7}
 80012c6:	4770      	bx	lr

080012c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d101      	bne.n	80012da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e272      	b.n	80017c0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	f000 8087 	beq.w	80013f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012e8:	4b92      	ldr	r3, [pc, #584]	@ (8001534 <HAL_RCC_OscConfig+0x26c>)
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f003 030c 	and.w	r3, r3, #12
 80012f0:	2b04      	cmp	r3, #4
 80012f2:	d00c      	beq.n	800130e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012f4:	4b8f      	ldr	r3, [pc, #572]	@ (8001534 <HAL_RCC_OscConfig+0x26c>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f003 030c 	and.w	r3, r3, #12
 80012fc:	2b08      	cmp	r3, #8
 80012fe:	d112      	bne.n	8001326 <HAL_RCC_OscConfig+0x5e>
 8001300:	4b8c      	ldr	r3, [pc, #560]	@ (8001534 <HAL_RCC_OscConfig+0x26c>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001308:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800130c:	d10b      	bne.n	8001326 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800130e:	4b89      	ldr	r3, [pc, #548]	@ (8001534 <HAL_RCC_OscConfig+0x26c>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d06c      	beq.n	80013f4 <HAL_RCC_OscConfig+0x12c>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d168      	bne.n	80013f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e24c      	b.n	80017c0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800132e:	d106      	bne.n	800133e <HAL_RCC_OscConfig+0x76>
 8001330:	4b80      	ldr	r3, [pc, #512]	@ (8001534 <HAL_RCC_OscConfig+0x26c>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a7f      	ldr	r2, [pc, #508]	@ (8001534 <HAL_RCC_OscConfig+0x26c>)
 8001336:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800133a:	6013      	str	r3, [r2, #0]
 800133c:	e02e      	b.n	800139c <HAL_RCC_OscConfig+0xd4>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d10c      	bne.n	8001360 <HAL_RCC_OscConfig+0x98>
 8001346:	4b7b      	ldr	r3, [pc, #492]	@ (8001534 <HAL_RCC_OscConfig+0x26c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a7a      	ldr	r2, [pc, #488]	@ (8001534 <HAL_RCC_OscConfig+0x26c>)
 800134c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001350:	6013      	str	r3, [r2, #0]
 8001352:	4b78      	ldr	r3, [pc, #480]	@ (8001534 <HAL_RCC_OscConfig+0x26c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a77      	ldr	r2, [pc, #476]	@ (8001534 <HAL_RCC_OscConfig+0x26c>)
 8001358:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800135c:	6013      	str	r3, [r2, #0]
 800135e:	e01d      	b.n	800139c <HAL_RCC_OscConfig+0xd4>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001368:	d10c      	bne.n	8001384 <HAL_RCC_OscConfig+0xbc>
 800136a:	4b72      	ldr	r3, [pc, #456]	@ (8001534 <HAL_RCC_OscConfig+0x26c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a71      	ldr	r2, [pc, #452]	@ (8001534 <HAL_RCC_OscConfig+0x26c>)
 8001370:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001374:	6013      	str	r3, [r2, #0]
 8001376:	4b6f      	ldr	r3, [pc, #444]	@ (8001534 <HAL_RCC_OscConfig+0x26c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a6e      	ldr	r2, [pc, #440]	@ (8001534 <HAL_RCC_OscConfig+0x26c>)
 800137c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001380:	6013      	str	r3, [r2, #0]
 8001382:	e00b      	b.n	800139c <HAL_RCC_OscConfig+0xd4>
 8001384:	4b6b      	ldr	r3, [pc, #428]	@ (8001534 <HAL_RCC_OscConfig+0x26c>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a6a      	ldr	r2, [pc, #424]	@ (8001534 <HAL_RCC_OscConfig+0x26c>)
 800138a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800138e:	6013      	str	r3, [r2, #0]
 8001390:	4b68      	ldr	r3, [pc, #416]	@ (8001534 <HAL_RCC_OscConfig+0x26c>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a67      	ldr	r2, [pc, #412]	@ (8001534 <HAL_RCC_OscConfig+0x26c>)
 8001396:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800139a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d013      	beq.n	80013cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a4:	f7ff fac8 	bl	8000938 <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013aa:	e008      	b.n	80013be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013ac:	f7ff fac4 	bl	8000938 <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b64      	cmp	r3, #100	@ 0x64
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e200      	b.n	80017c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013be:	4b5d      	ldr	r3, [pc, #372]	@ (8001534 <HAL_RCC_OscConfig+0x26c>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d0f0      	beq.n	80013ac <HAL_RCC_OscConfig+0xe4>
 80013ca:	e014      	b.n	80013f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013cc:	f7ff fab4 	bl	8000938 <HAL_GetTick>
 80013d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013d2:	e008      	b.n	80013e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013d4:	f7ff fab0 	bl	8000938 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	2b64      	cmp	r3, #100	@ 0x64
 80013e0:	d901      	bls.n	80013e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e1ec      	b.n	80017c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013e6:	4b53      	ldr	r3, [pc, #332]	@ (8001534 <HAL_RCC_OscConfig+0x26c>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d1f0      	bne.n	80013d4 <HAL_RCC_OscConfig+0x10c>
 80013f2:	e000      	b.n	80013f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d063      	beq.n	80014ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001402:	4b4c      	ldr	r3, [pc, #304]	@ (8001534 <HAL_RCC_OscConfig+0x26c>)
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f003 030c 	and.w	r3, r3, #12
 800140a:	2b00      	cmp	r3, #0
 800140c:	d00b      	beq.n	8001426 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800140e:	4b49      	ldr	r3, [pc, #292]	@ (8001534 <HAL_RCC_OscConfig+0x26c>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f003 030c 	and.w	r3, r3, #12
 8001416:	2b08      	cmp	r3, #8
 8001418:	d11c      	bne.n	8001454 <HAL_RCC_OscConfig+0x18c>
 800141a:	4b46      	ldr	r3, [pc, #280]	@ (8001534 <HAL_RCC_OscConfig+0x26c>)
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d116      	bne.n	8001454 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001426:	4b43      	ldr	r3, [pc, #268]	@ (8001534 <HAL_RCC_OscConfig+0x26c>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	2b00      	cmp	r3, #0
 8001430:	d005      	beq.n	800143e <HAL_RCC_OscConfig+0x176>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	691b      	ldr	r3, [r3, #16]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d001      	beq.n	800143e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e1c0      	b.n	80017c0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800143e:	4b3d      	ldr	r3, [pc, #244]	@ (8001534 <HAL_RCC_OscConfig+0x26c>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	695b      	ldr	r3, [r3, #20]
 800144a:	00db      	lsls	r3, r3, #3
 800144c:	4939      	ldr	r1, [pc, #228]	@ (8001534 <HAL_RCC_OscConfig+0x26c>)
 800144e:	4313      	orrs	r3, r2
 8001450:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001452:	e03a      	b.n	80014ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	691b      	ldr	r3, [r3, #16]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d020      	beq.n	800149e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800145c:	4b36      	ldr	r3, [pc, #216]	@ (8001538 <HAL_RCC_OscConfig+0x270>)
 800145e:	2201      	movs	r2, #1
 8001460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001462:	f7ff fa69 	bl	8000938 <HAL_GetTick>
 8001466:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001468:	e008      	b.n	800147c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800146a:	f7ff fa65 	bl	8000938 <HAL_GetTick>
 800146e:	4602      	mov	r2, r0
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	2b02      	cmp	r3, #2
 8001476:	d901      	bls.n	800147c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001478:	2303      	movs	r3, #3
 800147a:	e1a1      	b.n	80017c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800147c:	4b2d      	ldr	r3, [pc, #180]	@ (8001534 <HAL_RCC_OscConfig+0x26c>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0302 	and.w	r3, r3, #2
 8001484:	2b00      	cmp	r3, #0
 8001486:	d0f0      	beq.n	800146a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001488:	4b2a      	ldr	r3, [pc, #168]	@ (8001534 <HAL_RCC_OscConfig+0x26c>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	695b      	ldr	r3, [r3, #20]
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	4927      	ldr	r1, [pc, #156]	@ (8001534 <HAL_RCC_OscConfig+0x26c>)
 8001498:	4313      	orrs	r3, r2
 800149a:	600b      	str	r3, [r1, #0]
 800149c:	e015      	b.n	80014ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800149e:	4b26      	ldr	r3, [pc, #152]	@ (8001538 <HAL_RCC_OscConfig+0x270>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a4:	f7ff fa48 	bl	8000938 <HAL_GetTick>
 80014a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014aa:	e008      	b.n	80014be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014ac:	f7ff fa44 	bl	8000938 <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e180      	b.n	80017c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014be:	4b1d      	ldr	r3, [pc, #116]	@ (8001534 <HAL_RCC_OscConfig+0x26c>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1f0      	bne.n	80014ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0308 	and.w	r3, r3, #8
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d03a      	beq.n	800154c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	699b      	ldr	r3, [r3, #24]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d019      	beq.n	8001512 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014de:	4b17      	ldr	r3, [pc, #92]	@ (800153c <HAL_RCC_OscConfig+0x274>)
 80014e0:	2201      	movs	r2, #1
 80014e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e4:	f7ff fa28 	bl	8000938 <HAL_GetTick>
 80014e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ea:	e008      	b.n	80014fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014ec:	f7ff fa24 	bl	8000938 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e160      	b.n	80017c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001534 <HAL_RCC_OscConfig+0x26c>)
 8001500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d0f0      	beq.n	80014ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800150a:	2001      	movs	r0, #1
 800150c:	f000 face 	bl	8001aac <RCC_Delay>
 8001510:	e01c      	b.n	800154c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001512:	4b0a      	ldr	r3, [pc, #40]	@ (800153c <HAL_RCC_OscConfig+0x274>)
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001518:	f7ff fa0e 	bl	8000938 <HAL_GetTick>
 800151c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800151e:	e00f      	b.n	8001540 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001520:	f7ff fa0a 	bl	8000938 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b02      	cmp	r3, #2
 800152c:	d908      	bls.n	8001540 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e146      	b.n	80017c0 <HAL_RCC_OscConfig+0x4f8>
 8001532:	bf00      	nop
 8001534:	40021000 	.word	0x40021000
 8001538:	42420000 	.word	0x42420000
 800153c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001540:	4b92      	ldr	r3, [pc, #584]	@ (800178c <HAL_RCC_OscConfig+0x4c4>)
 8001542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001544:	f003 0302 	and.w	r3, r3, #2
 8001548:	2b00      	cmp	r3, #0
 800154a:	d1e9      	bne.n	8001520 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0304 	and.w	r3, r3, #4
 8001554:	2b00      	cmp	r3, #0
 8001556:	f000 80a6 	beq.w	80016a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800155a:	2300      	movs	r3, #0
 800155c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800155e:	4b8b      	ldr	r3, [pc, #556]	@ (800178c <HAL_RCC_OscConfig+0x4c4>)
 8001560:	69db      	ldr	r3, [r3, #28]
 8001562:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d10d      	bne.n	8001586 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800156a:	4b88      	ldr	r3, [pc, #544]	@ (800178c <HAL_RCC_OscConfig+0x4c4>)
 800156c:	69db      	ldr	r3, [r3, #28]
 800156e:	4a87      	ldr	r2, [pc, #540]	@ (800178c <HAL_RCC_OscConfig+0x4c4>)
 8001570:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001574:	61d3      	str	r3, [r2, #28]
 8001576:	4b85      	ldr	r3, [pc, #532]	@ (800178c <HAL_RCC_OscConfig+0x4c4>)
 8001578:	69db      	ldr	r3, [r3, #28]
 800157a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800157e:	60bb      	str	r3, [r7, #8]
 8001580:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001582:	2301      	movs	r3, #1
 8001584:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001586:	4b82      	ldr	r3, [pc, #520]	@ (8001790 <HAL_RCC_OscConfig+0x4c8>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800158e:	2b00      	cmp	r3, #0
 8001590:	d118      	bne.n	80015c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001592:	4b7f      	ldr	r3, [pc, #508]	@ (8001790 <HAL_RCC_OscConfig+0x4c8>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a7e      	ldr	r2, [pc, #504]	@ (8001790 <HAL_RCC_OscConfig+0x4c8>)
 8001598:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800159c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800159e:	f7ff f9cb 	bl	8000938 <HAL_GetTick>
 80015a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015a4:	e008      	b.n	80015b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015a6:	f7ff f9c7 	bl	8000938 <HAL_GetTick>
 80015aa:	4602      	mov	r2, r0
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	2b64      	cmp	r3, #100	@ 0x64
 80015b2:	d901      	bls.n	80015b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80015b4:	2303      	movs	r3, #3
 80015b6:	e103      	b.n	80017c0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b8:	4b75      	ldr	r3, [pc, #468]	@ (8001790 <HAL_RCC_OscConfig+0x4c8>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d0f0      	beq.n	80015a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d106      	bne.n	80015da <HAL_RCC_OscConfig+0x312>
 80015cc:	4b6f      	ldr	r3, [pc, #444]	@ (800178c <HAL_RCC_OscConfig+0x4c4>)
 80015ce:	6a1b      	ldr	r3, [r3, #32]
 80015d0:	4a6e      	ldr	r2, [pc, #440]	@ (800178c <HAL_RCC_OscConfig+0x4c4>)
 80015d2:	f043 0301 	orr.w	r3, r3, #1
 80015d6:	6213      	str	r3, [r2, #32]
 80015d8:	e02d      	b.n	8001636 <HAL_RCC_OscConfig+0x36e>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d10c      	bne.n	80015fc <HAL_RCC_OscConfig+0x334>
 80015e2:	4b6a      	ldr	r3, [pc, #424]	@ (800178c <HAL_RCC_OscConfig+0x4c4>)
 80015e4:	6a1b      	ldr	r3, [r3, #32]
 80015e6:	4a69      	ldr	r2, [pc, #420]	@ (800178c <HAL_RCC_OscConfig+0x4c4>)
 80015e8:	f023 0301 	bic.w	r3, r3, #1
 80015ec:	6213      	str	r3, [r2, #32]
 80015ee:	4b67      	ldr	r3, [pc, #412]	@ (800178c <HAL_RCC_OscConfig+0x4c4>)
 80015f0:	6a1b      	ldr	r3, [r3, #32]
 80015f2:	4a66      	ldr	r2, [pc, #408]	@ (800178c <HAL_RCC_OscConfig+0x4c4>)
 80015f4:	f023 0304 	bic.w	r3, r3, #4
 80015f8:	6213      	str	r3, [r2, #32]
 80015fa:	e01c      	b.n	8001636 <HAL_RCC_OscConfig+0x36e>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	2b05      	cmp	r3, #5
 8001602:	d10c      	bne.n	800161e <HAL_RCC_OscConfig+0x356>
 8001604:	4b61      	ldr	r3, [pc, #388]	@ (800178c <HAL_RCC_OscConfig+0x4c4>)
 8001606:	6a1b      	ldr	r3, [r3, #32]
 8001608:	4a60      	ldr	r2, [pc, #384]	@ (800178c <HAL_RCC_OscConfig+0x4c4>)
 800160a:	f043 0304 	orr.w	r3, r3, #4
 800160e:	6213      	str	r3, [r2, #32]
 8001610:	4b5e      	ldr	r3, [pc, #376]	@ (800178c <HAL_RCC_OscConfig+0x4c4>)
 8001612:	6a1b      	ldr	r3, [r3, #32]
 8001614:	4a5d      	ldr	r2, [pc, #372]	@ (800178c <HAL_RCC_OscConfig+0x4c4>)
 8001616:	f043 0301 	orr.w	r3, r3, #1
 800161a:	6213      	str	r3, [r2, #32]
 800161c:	e00b      	b.n	8001636 <HAL_RCC_OscConfig+0x36e>
 800161e:	4b5b      	ldr	r3, [pc, #364]	@ (800178c <HAL_RCC_OscConfig+0x4c4>)
 8001620:	6a1b      	ldr	r3, [r3, #32]
 8001622:	4a5a      	ldr	r2, [pc, #360]	@ (800178c <HAL_RCC_OscConfig+0x4c4>)
 8001624:	f023 0301 	bic.w	r3, r3, #1
 8001628:	6213      	str	r3, [r2, #32]
 800162a:	4b58      	ldr	r3, [pc, #352]	@ (800178c <HAL_RCC_OscConfig+0x4c4>)
 800162c:	6a1b      	ldr	r3, [r3, #32]
 800162e:	4a57      	ldr	r2, [pc, #348]	@ (800178c <HAL_RCC_OscConfig+0x4c4>)
 8001630:	f023 0304 	bic.w	r3, r3, #4
 8001634:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d015      	beq.n	800166a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800163e:	f7ff f97b 	bl	8000938 <HAL_GetTick>
 8001642:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001644:	e00a      	b.n	800165c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001646:	f7ff f977 	bl	8000938 <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001654:	4293      	cmp	r3, r2
 8001656:	d901      	bls.n	800165c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e0b1      	b.n	80017c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800165c:	4b4b      	ldr	r3, [pc, #300]	@ (800178c <HAL_RCC_OscConfig+0x4c4>)
 800165e:	6a1b      	ldr	r3, [r3, #32]
 8001660:	f003 0302 	and.w	r3, r3, #2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d0ee      	beq.n	8001646 <HAL_RCC_OscConfig+0x37e>
 8001668:	e014      	b.n	8001694 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800166a:	f7ff f965 	bl	8000938 <HAL_GetTick>
 800166e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001670:	e00a      	b.n	8001688 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001672:	f7ff f961 	bl	8000938 <HAL_GetTick>
 8001676:	4602      	mov	r2, r0
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001680:	4293      	cmp	r3, r2
 8001682:	d901      	bls.n	8001688 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e09b      	b.n	80017c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001688:	4b40      	ldr	r3, [pc, #256]	@ (800178c <HAL_RCC_OscConfig+0x4c4>)
 800168a:	6a1b      	ldr	r3, [r3, #32]
 800168c:	f003 0302 	and.w	r3, r3, #2
 8001690:	2b00      	cmp	r3, #0
 8001692:	d1ee      	bne.n	8001672 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001694:	7dfb      	ldrb	r3, [r7, #23]
 8001696:	2b01      	cmp	r3, #1
 8001698:	d105      	bne.n	80016a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800169a:	4b3c      	ldr	r3, [pc, #240]	@ (800178c <HAL_RCC_OscConfig+0x4c4>)
 800169c:	69db      	ldr	r3, [r3, #28]
 800169e:	4a3b      	ldr	r2, [pc, #236]	@ (800178c <HAL_RCC_OscConfig+0x4c4>)
 80016a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80016a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	69db      	ldr	r3, [r3, #28]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	f000 8087 	beq.w	80017be <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016b0:	4b36      	ldr	r3, [pc, #216]	@ (800178c <HAL_RCC_OscConfig+0x4c4>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f003 030c 	and.w	r3, r3, #12
 80016b8:	2b08      	cmp	r3, #8
 80016ba:	d061      	beq.n	8001780 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	69db      	ldr	r3, [r3, #28]
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d146      	bne.n	8001752 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016c4:	4b33      	ldr	r3, [pc, #204]	@ (8001794 <HAL_RCC_OscConfig+0x4cc>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ca:	f7ff f935 	bl	8000938 <HAL_GetTick>
 80016ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016d0:	e008      	b.n	80016e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016d2:	f7ff f931 	bl	8000938 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e06d      	b.n	80017c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016e4:	4b29      	ldr	r3, [pc, #164]	@ (800178c <HAL_RCC_OscConfig+0x4c4>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d1f0      	bne.n	80016d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6a1b      	ldr	r3, [r3, #32]
 80016f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016f8:	d108      	bne.n	800170c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80016fa:	4b24      	ldr	r3, [pc, #144]	@ (800178c <HAL_RCC_OscConfig+0x4c4>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	4921      	ldr	r1, [pc, #132]	@ (800178c <HAL_RCC_OscConfig+0x4c4>)
 8001708:	4313      	orrs	r3, r2
 800170a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800170c:	4b1f      	ldr	r3, [pc, #124]	@ (800178c <HAL_RCC_OscConfig+0x4c4>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6a19      	ldr	r1, [r3, #32]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800171c:	430b      	orrs	r3, r1
 800171e:	491b      	ldr	r1, [pc, #108]	@ (800178c <HAL_RCC_OscConfig+0x4c4>)
 8001720:	4313      	orrs	r3, r2
 8001722:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001724:	4b1b      	ldr	r3, [pc, #108]	@ (8001794 <HAL_RCC_OscConfig+0x4cc>)
 8001726:	2201      	movs	r2, #1
 8001728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800172a:	f7ff f905 	bl	8000938 <HAL_GetTick>
 800172e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001730:	e008      	b.n	8001744 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001732:	f7ff f901 	bl	8000938 <HAL_GetTick>
 8001736:	4602      	mov	r2, r0
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	2b02      	cmp	r3, #2
 800173e:	d901      	bls.n	8001744 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e03d      	b.n	80017c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001744:	4b11      	ldr	r3, [pc, #68]	@ (800178c <HAL_RCC_OscConfig+0x4c4>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d0f0      	beq.n	8001732 <HAL_RCC_OscConfig+0x46a>
 8001750:	e035      	b.n	80017be <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001752:	4b10      	ldr	r3, [pc, #64]	@ (8001794 <HAL_RCC_OscConfig+0x4cc>)
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001758:	f7ff f8ee 	bl	8000938 <HAL_GetTick>
 800175c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800175e:	e008      	b.n	8001772 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001760:	f7ff f8ea 	bl	8000938 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b02      	cmp	r3, #2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e026      	b.n	80017c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001772:	4b06      	ldr	r3, [pc, #24]	@ (800178c <HAL_RCC_OscConfig+0x4c4>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d1f0      	bne.n	8001760 <HAL_RCC_OscConfig+0x498>
 800177e:	e01e      	b.n	80017be <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	69db      	ldr	r3, [r3, #28]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d107      	bne.n	8001798 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e019      	b.n	80017c0 <HAL_RCC_OscConfig+0x4f8>
 800178c:	40021000 	.word	0x40021000
 8001790:	40007000 	.word	0x40007000
 8001794:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001798:	4b0b      	ldr	r3, [pc, #44]	@ (80017c8 <HAL_RCC_OscConfig+0x500>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a1b      	ldr	r3, [r3, #32]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d106      	bne.n	80017ba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d001      	beq.n	80017be <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e000      	b.n	80017c0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80017be:	2300      	movs	r3, #0
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3718      	adds	r7, #24
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40021000 	.word	0x40021000

080017cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d101      	bne.n	80017e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e0d0      	b.n	8001982 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017e0:	4b6a      	ldr	r3, [pc, #424]	@ (800198c <HAL_RCC_ClockConfig+0x1c0>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0307 	and.w	r3, r3, #7
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d910      	bls.n	8001810 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ee:	4b67      	ldr	r3, [pc, #412]	@ (800198c <HAL_RCC_ClockConfig+0x1c0>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f023 0207 	bic.w	r2, r3, #7
 80017f6:	4965      	ldr	r1, [pc, #404]	@ (800198c <HAL_RCC_ClockConfig+0x1c0>)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017fe:	4b63      	ldr	r3, [pc, #396]	@ (800198c <HAL_RCC_ClockConfig+0x1c0>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0307 	and.w	r3, r3, #7
 8001806:	683a      	ldr	r2, [r7, #0]
 8001808:	429a      	cmp	r2, r3
 800180a:	d001      	beq.n	8001810 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e0b8      	b.n	8001982 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d020      	beq.n	800185e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0304 	and.w	r3, r3, #4
 8001824:	2b00      	cmp	r3, #0
 8001826:	d005      	beq.n	8001834 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001828:	4b59      	ldr	r3, [pc, #356]	@ (8001990 <HAL_RCC_ClockConfig+0x1c4>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	4a58      	ldr	r2, [pc, #352]	@ (8001990 <HAL_RCC_ClockConfig+0x1c4>)
 800182e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001832:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0308 	and.w	r3, r3, #8
 800183c:	2b00      	cmp	r3, #0
 800183e:	d005      	beq.n	800184c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001840:	4b53      	ldr	r3, [pc, #332]	@ (8001990 <HAL_RCC_ClockConfig+0x1c4>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	4a52      	ldr	r2, [pc, #328]	@ (8001990 <HAL_RCC_ClockConfig+0x1c4>)
 8001846:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800184a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800184c:	4b50      	ldr	r3, [pc, #320]	@ (8001990 <HAL_RCC_ClockConfig+0x1c4>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	494d      	ldr	r1, [pc, #308]	@ (8001990 <HAL_RCC_ClockConfig+0x1c4>)
 800185a:	4313      	orrs	r3, r2
 800185c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	2b00      	cmp	r3, #0
 8001868:	d040      	beq.n	80018ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d107      	bne.n	8001882 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001872:	4b47      	ldr	r3, [pc, #284]	@ (8001990 <HAL_RCC_ClockConfig+0x1c4>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d115      	bne.n	80018aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e07f      	b.n	8001982 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	2b02      	cmp	r3, #2
 8001888:	d107      	bne.n	800189a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800188a:	4b41      	ldr	r3, [pc, #260]	@ (8001990 <HAL_RCC_ClockConfig+0x1c4>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d109      	bne.n	80018aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e073      	b.n	8001982 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800189a:	4b3d      	ldr	r3, [pc, #244]	@ (8001990 <HAL_RCC_ClockConfig+0x1c4>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d101      	bne.n	80018aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e06b      	b.n	8001982 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018aa:	4b39      	ldr	r3, [pc, #228]	@ (8001990 <HAL_RCC_ClockConfig+0x1c4>)
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f023 0203 	bic.w	r2, r3, #3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	4936      	ldr	r1, [pc, #216]	@ (8001990 <HAL_RCC_ClockConfig+0x1c4>)
 80018b8:	4313      	orrs	r3, r2
 80018ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018bc:	f7ff f83c 	bl	8000938 <HAL_GetTick>
 80018c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018c2:	e00a      	b.n	80018da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018c4:	f7ff f838 	bl	8000938 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d901      	bls.n	80018da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e053      	b.n	8001982 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018da:	4b2d      	ldr	r3, [pc, #180]	@ (8001990 <HAL_RCC_ClockConfig+0x1c4>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f003 020c 	and.w	r2, r3, #12
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d1eb      	bne.n	80018c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018ec:	4b27      	ldr	r3, [pc, #156]	@ (800198c <HAL_RCC_ClockConfig+0x1c0>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0307 	and.w	r3, r3, #7
 80018f4:	683a      	ldr	r2, [r7, #0]
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d210      	bcs.n	800191c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018fa:	4b24      	ldr	r3, [pc, #144]	@ (800198c <HAL_RCC_ClockConfig+0x1c0>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f023 0207 	bic.w	r2, r3, #7
 8001902:	4922      	ldr	r1, [pc, #136]	@ (800198c <HAL_RCC_ClockConfig+0x1c0>)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	4313      	orrs	r3, r2
 8001908:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800190a:	4b20      	ldr	r3, [pc, #128]	@ (800198c <HAL_RCC_ClockConfig+0x1c0>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	683a      	ldr	r2, [r7, #0]
 8001914:	429a      	cmp	r2, r3
 8001916:	d001      	beq.n	800191c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e032      	b.n	8001982 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0304 	and.w	r3, r3, #4
 8001924:	2b00      	cmp	r3, #0
 8001926:	d008      	beq.n	800193a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001928:	4b19      	ldr	r3, [pc, #100]	@ (8001990 <HAL_RCC_ClockConfig+0x1c4>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	4916      	ldr	r1, [pc, #88]	@ (8001990 <HAL_RCC_ClockConfig+0x1c4>)
 8001936:	4313      	orrs	r3, r2
 8001938:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0308 	and.w	r3, r3, #8
 8001942:	2b00      	cmp	r3, #0
 8001944:	d009      	beq.n	800195a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001946:	4b12      	ldr	r3, [pc, #72]	@ (8001990 <HAL_RCC_ClockConfig+0x1c4>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	691b      	ldr	r3, [r3, #16]
 8001952:	00db      	lsls	r3, r3, #3
 8001954:	490e      	ldr	r1, [pc, #56]	@ (8001990 <HAL_RCC_ClockConfig+0x1c4>)
 8001956:	4313      	orrs	r3, r2
 8001958:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800195a:	f000 f821 	bl	80019a0 <HAL_RCC_GetSysClockFreq>
 800195e:	4602      	mov	r2, r0
 8001960:	4b0b      	ldr	r3, [pc, #44]	@ (8001990 <HAL_RCC_ClockConfig+0x1c4>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	091b      	lsrs	r3, r3, #4
 8001966:	f003 030f 	and.w	r3, r3, #15
 800196a:	490a      	ldr	r1, [pc, #40]	@ (8001994 <HAL_RCC_ClockConfig+0x1c8>)
 800196c:	5ccb      	ldrb	r3, [r1, r3]
 800196e:	fa22 f303 	lsr.w	r3, r2, r3
 8001972:	4a09      	ldr	r2, [pc, #36]	@ (8001998 <HAL_RCC_ClockConfig+0x1cc>)
 8001974:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001976:	4b09      	ldr	r3, [pc, #36]	@ (800199c <HAL_RCC_ClockConfig+0x1d0>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4618      	mov	r0, r3
 800197c:	f7fe ff9a 	bl	80008b4 <HAL_InitTick>

  return HAL_OK;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40022000 	.word	0x40022000
 8001990:	40021000 	.word	0x40021000
 8001994:	080030c0 	.word	0x080030c0
 8001998:	20000000 	.word	0x20000000
 800199c:	20000004 	.word	0x20000004

080019a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b087      	sub	sp, #28
 80019a4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80019a6:	2300      	movs	r3, #0
 80019a8:	60fb      	str	r3, [r7, #12]
 80019aa:	2300      	movs	r3, #0
 80019ac:	60bb      	str	r3, [r7, #8]
 80019ae:	2300      	movs	r3, #0
 80019b0:	617b      	str	r3, [r7, #20]
 80019b2:	2300      	movs	r3, #0
 80019b4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80019b6:	2300      	movs	r3, #0
 80019b8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80019ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001a34 <HAL_RCC_GetSysClockFreq+0x94>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f003 030c 	and.w	r3, r3, #12
 80019c6:	2b04      	cmp	r3, #4
 80019c8:	d002      	beq.n	80019d0 <HAL_RCC_GetSysClockFreq+0x30>
 80019ca:	2b08      	cmp	r3, #8
 80019cc:	d003      	beq.n	80019d6 <HAL_RCC_GetSysClockFreq+0x36>
 80019ce:	e027      	b.n	8001a20 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019d0:	4b19      	ldr	r3, [pc, #100]	@ (8001a38 <HAL_RCC_GetSysClockFreq+0x98>)
 80019d2:	613b      	str	r3, [r7, #16]
      break;
 80019d4:	e027      	b.n	8001a26 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	0c9b      	lsrs	r3, r3, #18
 80019da:	f003 030f 	and.w	r3, r3, #15
 80019de:	4a17      	ldr	r2, [pc, #92]	@ (8001a3c <HAL_RCC_GetSysClockFreq+0x9c>)
 80019e0:	5cd3      	ldrb	r3, [r2, r3]
 80019e2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d010      	beq.n	8001a10 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019ee:	4b11      	ldr	r3, [pc, #68]	@ (8001a34 <HAL_RCC_GetSysClockFreq+0x94>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	0c5b      	lsrs	r3, r3, #17
 80019f4:	f003 0301 	and.w	r3, r3, #1
 80019f8:	4a11      	ldr	r2, [pc, #68]	@ (8001a40 <HAL_RCC_GetSysClockFreq+0xa0>)
 80019fa:	5cd3      	ldrb	r3, [r2, r3]
 80019fc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a0d      	ldr	r2, [pc, #52]	@ (8001a38 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a02:	fb03 f202 	mul.w	r2, r3, r2
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a0c:	617b      	str	r3, [r7, #20]
 8001a0e:	e004      	b.n	8001a1a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4a0c      	ldr	r2, [pc, #48]	@ (8001a44 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001a14:	fb02 f303 	mul.w	r3, r2, r3
 8001a18:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	613b      	str	r3, [r7, #16]
      break;
 8001a1e:	e002      	b.n	8001a26 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a20:	4b05      	ldr	r3, [pc, #20]	@ (8001a38 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a22:	613b      	str	r3, [r7, #16]
      break;
 8001a24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a26:	693b      	ldr	r3, [r7, #16]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	371c      	adds	r7, #28
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bc80      	pop	{r7}
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	40021000 	.word	0x40021000
 8001a38:	007a1200 	.word	0x007a1200
 8001a3c:	080030d8 	.word	0x080030d8
 8001a40:	080030e8 	.word	0x080030e8
 8001a44:	003d0900 	.word	0x003d0900

08001a48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a4c:	4b02      	ldr	r3, [pc, #8]	@ (8001a58 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bc80      	pop	{r7}
 8001a56:	4770      	bx	lr
 8001a58:	20000000 	.word	0x20000000

08001a5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a60:	f7ff fff2 	bl	8001a48 <HAL_RCC_GetHCLKFreq>
 8001a64:	4602      	mov	r2, r0
 8001a66:	4b05      	ldr	r3, [pc, #20]	@ (8001a7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	0a1b      	lsrs	r3, r3, #8
 8001a6c:	f003 0307 	and.w	r3, r3, #7
 8001a70:	4903      	ldr	r1, [pc, #12]	@ (8001a80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a72:	5ccb      	ldrb	r3, [r1, r3]
 8001a74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	080030d0 	.word	0x080030d0

08001a84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a88:	f7ff ffde 	bl	8001a48 <HAL_RCC_GetHCLKFreq>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	4b05      	ldr	r3, [pc, #20]	@ (8001aa4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	0adb      	lsrs	r3, r3, #11
 8001a94:	f003 0307 	and.w	r3, r3, #7
 8001a98:	4903      	ldr	r1, [pc, #12]	@ (8001aa8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a9a:	5ccb      	ldrb	r3, [r1, r3]
 8001a9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	080030d0 	.word	0x080030d0

08001aac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae0 <RCC_Delay+0x34>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a0a      	ldr	r2, [pc, #40]	@ (8001ae4 <RCC_Delay+0x38>)
 8001aba:	fba2 2303 	umull	r2, r3, r2, r3
 8001abe:	0a5b      	lsrs	r3, r3, #9
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	fb02 f303 	mul.w	r3, r2, r3
 8001ac6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ac8:	bf00      	nop
  }
  while (Delay --);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	1e5a      	subs	r2, r3, #1
 8001ace:	60fa      	str	r2, [r7, #12]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d1f9      	bne.n	8001ac8 <RCC_Delay+0x1c>
}
 8001ad4:	bf00      	nop
 8001ad6:	bf00      	nop
 8001ad8:	3714      	adds	r7, #20
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bc80      	pop	{r7}
 8001ade:	4770      	bx	lr
 8001ae0:	20000000 	.word	0x20000000
 8001ae4:	10624dd3 	.word	0x10624dd3

08001ae8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d101      	bne.n	8001afa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e042      	b.n	8001b80 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d106      	bne.n	8001b14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f7fe fcc4 	bl	800049c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2224      	movs	r2, #36	@ 0x24
 8001b18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	68da      	ldr	r2, [r3, #12]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001b2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f000 fd71 	bl	8002614 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	691a      	ldr	r2, [r3, #16]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001b40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	695a      	ldr	r2, [r3, #20]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001b50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	68da      	ldr	r2, [r3, #12]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001b60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2220      	movs	r2, #32
 8001b6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2220      	movs	r2, #32
 8001b74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001b7e:	2300      	movs	r3, #0
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b08a      	sub	sp, #40	@ 0x28
 8001b8c:	af02      	add	r7, sp, #8
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	603b      	str	r3, [r7, #0]
 8001b94:	4613      	mov	r3, r2
 8001b96:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	2b20      	cmp	r3, #32
 8001ba6:	d16d      	bne.n	8001c84 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d002      	beq.n	8001bb4 <HAL_UART_Transmit+0x2c>
 8001bae:	88fb      	ldrh	r3, [r7, #6]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d101      	bne.n	8001bb8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e066      	b.n	8001c86 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2221      	movs	r2, #33	@ 0x21
 8001bc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001bc6:	f7fe feb7 	bl	8000938 <HAL_GetTick>
 8001bca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	88fa      	ldrh	r2, [r7, #6]
 8001bd0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	88fa      	ldrh	r2, [r7, #6]
 8001bd6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001be0:	d108      	bne.n	8001bf4 <HAL_UART_Transmit+0x6c>
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d104      	bne.n	8001bf4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001bea:	2300      	movs	r3, #0
 8001bec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	61bb      	str	r3, [r7, #24]
 8001bf2:	e003      	b.n	8001bfc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001bfc:	e02a      	b.n	8001c54 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	9300      	str	r3, [sp, #0]
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	2200      	movs	r2, #0
 8001c06:	2180      	movs	r1, #128	@ 0x80
 8001c08:	68f8      	ldr	r0, [r7, #12]
 8001c0a:	f000 faf9 	bl	8002200 <UART_WaitOnFlagUntilTimeout>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e036      	b.n	8001c86 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d10b      	bne.n	8001c36 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	881b      	ldrh	r3, [r3, #0]
 8001c22:	461a      	mov	r2, r3
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c2c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	3302      	adds	r3, #2
 8001c32:	61bb      	str	r3, [r7, #24]
 8001c34:	e007      	b.n	8001c46 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	781a      	ldrb	r2, [r3, #0]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	3301      	adds	r3, #1
 8001c44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	3b01      	subs	r3, #1
 8001c4e:	b29a      	uxth	r2, r3
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1cf      	bne.n	8001bfe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	9300      	str	r3, [sp, #0]
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	2200      	movs	r2, #0
 8001c66:	2140      	movs	r1, #64	@ 0x40
 8001c68:	68f8      	ldr	r0, [r7, #12]
 8001c6a:	f000 fac9 	bl	8002200 <UART_WaitOnFlagUntilTimeout>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e006      	b.n	8001c86 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2220      	movs	r2, #32
 8001c7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001c80:	2300      	movs	r3, #0
 8001c82:	e000      	b.n	8001c86 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001c84:	2302      	movs	r3, #2
  }
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3720      	adds	r7, #32
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
	...

08001c90 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b0ba      	sub	sp, #232	@ 0xe8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001cc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001cc6:	f003 030f 	and.w	r3, r3, #15
 8001cca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8001cce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d10f      	bne.n	8001cf6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001cda:	f003 0320 	and.w	r3, r3, #32
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d009      	beq.n	8001cf6 <HAL_UART_IRQHandler+0x66>
 8001ce2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001ce6:	f003 0320 	and.w	r3, r3, #32
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d003      	beq.n	8001cf6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 fbd1 	bl	8002496 <UART_Receive_IT>
      return;
 8001cf4:	e25b      	b.n	80021ae <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001cf6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	f000 80de 	beq.w	8001ebc <HAL_UART_IRQHandler+0x22c>
 8001d00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001d04:	f003 0301 	and.w	r3, r3, #1
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d106      	bne.n	8001d1a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001d0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001d10:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	f000 80d1 	beq.w	8001ebc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001d1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d00b      	beq.n	8001d3e <HAL_UART_IRQHandler+0xae>
 8001d26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001d2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d005      	beq.n	8001d3e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d36:	f043 0201 	orr.w	r2, r3, #1
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d42:	f003 0304 	and.w	r3, r3, #4
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d00b      	beq.n	8001d62 <HAL_UART_IRQHandler+0xd2>
 8001d4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d005      	beq.n	8001d62 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d5a:	f043 0202 	orr.w	r2, r3, #2
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d00b      	beq.n	8001d86 <HAL_UART_IRQHandler+0xf6>
 8001d6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d005      	beq.n	8001d86 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d7e:	f043 0204 	orr.w	r2, r3, #4
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001d86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d8a:	f003 0308 	and.w	r3, r3, #8
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d011      	beq.n	8001db6 <HAL_UART_IRQHandler+0x126>
 8001d92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001d96:	f003 0320 	and.w	r3, r3, #32
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d105      	bne.n	8001daa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001d9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d005      	beq.n	8001db6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dae:	f043 0208 	orr.w	r2, r3, #8
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	f000 81f2 	beq.w	80021a4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001dc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001dc4:	f003 0320 	and.w	r3, r3, #32
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d008      	beq.n	8001dde <HAL_UART_IRQHandler+0x14e>
 8001dcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001dd0:	f003 0320 	and.w	r3, r3, #32
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d002      	beq.n	8001dde <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f000 fb5c 	bl	8002496 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	695b      	ldr	r3, [r3, #20]
 8001de4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	bf14      	ite	ne
 8001dec:	2301      	movne	r3, #1
 8001dee:	2300      	moveq	r3, #0
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dfa:	f003 0308 	and.w	r3, r3, #8
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d103      	bne.n	8001e0a <HAL_UART_IRQHandler+0x17a>
 8001e02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d04f      	beq.n	8001eaa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 fa66 	bl	80022dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	695b      	ldr	r3, [r3, #20]
 8001e16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d041      	beq.n	8001ea2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	3314      	adds	r3, #20
 8001e24:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e28:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001e2c:	e853 3f00 	ldrex	r3, [r3]
 8001e30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8001e34:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001e38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001e3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	3314      	adds	r3, #20
 8001e46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8001e4a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8001e4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8001e56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001e5a:	e841 2300 	strex	r3, r2, [r1]
 8001e5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8001e62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1d9      	bne.n	8001e1e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d013      	beq.n	8001e9a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e76:	4a7e      	ldr	r2, [pc, #504]	@ (8002070 <HAL_UART_IRQHandler+0x3e0>)
 8001e78:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7fe ff08 	bl	8000c94 <HAL_DMA_Abort_IT>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d016      	beq.n	8001eb8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001e94:	4610      	mov	r0, r2
 8001e96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e98:	e00e      	b.n	8001eb8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 f99c 	bl	80021d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ea0:	e00a      	b.n	8001eb8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 f998 	bl	80021d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ea8:	e006      	b.n	8001eb8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 f994 	bl	80021d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8001eb6:	e175      	b.n	80021a4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001eb8:	bf00      	nop
    return;
 8001eba:	e173      	b.n	80021a4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	f040 814f 	bne.w	8002164 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001eca:	f003 0310 	and.w	r3, r3, #16
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	f000 8148 	beq.w	8002164 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001ed4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001ed8:	f003 0310 	and.w	r3, r3, #16
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	f000 8141 	beq.w	8002164 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60bb      	str	r3, [r7, #8]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	60bb      	str	r3, [r7, #8]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	60bb      	str	r3, [r7, #8]
 8001ef6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	695b      	ldr	r3, [r3, #20]
 8001efe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	f000 80b6 	beq.w	8002074 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001f14:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	f000 8145 	beq.w	80021a8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001f22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001f26:	429a      	cmp	r2, r3
 8001f28:	f080 813e 	bcs.w	80021a8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001f32:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	2b20      	cmp	r3, #32
 8001f3c:	f000 8088 	beq.w	8002050 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	330c      	adds	r3, #12
 8001f46:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001f4e:	e853 3f00 	ldrex	r3, [r3]
 8001f52:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8001f56:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001f5a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f5e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	330c      	adds	r3, #12
 8001f68:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8001f6c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001f70:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f74:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8001f78:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001f7c:	e841 2300 	strex	r3, r2, [r1]
 8001f80:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8001f84:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d1d9      	bne.n	8001f40 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	3314      	adds	r3, #20
 8001f92:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f94:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001f96:	e853 3f00 	ldrex	r3, [r3]
 8001f9a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8001f9c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001f9e:	f023 0301 	bic.w	r3, r3, #1
 8001fa2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	3314      	adds	r3, #20
 8001fac:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001fb0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8001fb4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fb6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8001fb8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001fbc:	e841 2300 	strex	r3, r2, [r1]
 8001fc0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8001fc2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d1e1      	bne.n	8001f8c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	3314      	adds	r3, #20
 8001fce:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fd0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001fd2:	e853 3f00 	ldrex	r3, [r3]
 8001fd6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8001fd8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001fda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001fde:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	3314      	adds	r3, #20
 8001fe8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001fec:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001fee:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ff0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8001ff2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001ff4:	e841 2300 	strex	r3, r2, [r1]
 8001ff8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8001ffa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d1e3      	bne.n	8001fc8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2220      	movs	r2, #32
 8002004:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	330c      	adds	r3, #12
 8002014:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002016:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002018:	e853 3f00 	ldrex	r3, [r3]
 800201c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800201e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002020:	f023 0310 	bic.w	r3, r3, #16
 8002024:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	330c      	adds	r3, #12
 800202e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002032:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002034:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002036:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002038:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800203a:	e841 2300 	strex	r3, r2, [r1]
 800203e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002040:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1e3      	bne.n	800200e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800204a:	4618      	mov	r0, r3
 800204c:	f7fe fde6 	bl	8000c1c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2202      	movs	r2, #2
 8002054:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800205e:	b29b      	uxth	r3, r3
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	b29b      	uxth	r3, r3
 8002064:	4619      	mov	r1, r3
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 f8bf 	bl	80021ea <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800206c:	e09c      	b.n	80021a8 <HAL_UART_IRQHandler+0x518>
 800206e:	bf00      	nop
 8002070:	080023a1 	.word	0x080023a1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800207c:	b29b      	uxth	r3, r3
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002088:	b29b      	uxth	r3, r3
 800208a:	2b00      	cmp	r3, #0
 800208c:	f000 808e 	beq.w	80021ac <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002090:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002094:	2b00      	cmp	r3, #0
 8002096:	f000 8089 	beq.w	80021ac <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	330c      	adds	r3, #12
 80020a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020a4:	e853 3f00 	ldrex	r3, [r3]
 80020a8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80020aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80020b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	330c      	adds	r3, #12
 80020ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80020be:	647a      	str	r2, [r7, #68]	@ 0x44
 80020c0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020c2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80020c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80020c6:	e841 2300 	strex	r3, r2, [r1]
 80020ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80020cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1e3      	bne.n	800209a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	3314      	adds	r3, #20
 80020d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020dc:	e853 3f00 	ldrex	r3, [r3]
 80020e0:	623b      	str	r3, [r7, #32]
   return(result);
 80020e2:	6a3b      	ldr	r3, [r7, #32]
 80020e4:	f023 0301 	bic.w	r3, r3, #1
 80020e8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	3314      	adds	r3, #20
 80020f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80020f6:	633a      	str	r2, [r7, #48]	@ 0x30
 80020f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80020fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80020fe:	e841 2300 	strex	r3, r2, [r1]
 8002102:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002106:	2b00      	cmp	r3, #0
 8002108:	d1e3      	bne.n	80020d2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2220      	movs	r2, #32
 800210e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	330c      	adds	r3, #12
 800211e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	e853 3f00 	ldrex	r3, [r3]
 8002126:	60fb      	str	r3, [r7, #12]
   return(result);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f023 0310 	bic.w	r3, r3, #16
 800212e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	330c      	adds	r3, #12
 8002138:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800213c:	61fa      	str	r2, [r7, #28]
 800213e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002140:	69b9      	ldr	r1, [r7, #24]
 8002142:	69fa      	ldr	r2, [r7, #28]
 8002144:	e841 2300 	strex	r3, r2, [r1]
 8002148:	617b      	str	r3, [r7, #20]
   return(result);
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d1e3      	bne.n	8002118 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2202      	movs	r2, #2
 8002154:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002156:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800215a:	4619      	mov	r1, r3
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f000 f844 	bl	80021ea <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002162:	e023      	b.n	80021ac <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002168:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800216c:	2b00      	cmp	r3, #0
 800216e:	d009      	beq.n	8002184 <HAL_UART_IRQHandler+0x4f4>
 8002170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002174:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002178:	2b00      	cmp	r3, #0
 800217a:	d003      	beq.n	8002184 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f000 f923 	bl	80023c8 <UART_Transmit_IT>
    return;
 8002182:	e014      	b.n	80021ae <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002188:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800218c:	2b00      	cmp	r3, #0
 800218e:	d00e      	beq.n	80021ae <HAL_UART_IRQHandler+0x51e>
 8002190:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002194:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002198:	2b00      	cmp	r3, #0
 800219a:	d008      	beq.n	80021ae <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f000 f962 	bl	8002466 <UART_EndTransmit_IT>
    return;
 80021a2:	e004      	b.n	80021ae <HAL_UART_IRQHandler+0x51e>
    return;
 80021a4:	bf00      	nop
 80021a6:	e002      	b.n	80021ae <HAL_UART_IRQHandler+0x51e>
      return;
 80021a8:	bf00      	nop
 80021aa:	e000      	b.n	80021ae <HAL_UART_IRQHandler+0x51e>
      return;
 80021ac:	bf00      	nop
  }
}
 80021ae:	37e8      	adds	r7, #232	@ 0xe8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bc80      	pop	{r7}
 80021c4:	4770      	bx	lr

080021c6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b083      	sub	sp, #12
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80021ce:	bf00      	nop
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bc80      	pop	{r7}
 80021d6:	4770      	bx	lr

080021d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80021e0:	bf00      	nop
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bc80      	pop	{r7}
 80021e8:	4770      	bx	lr

080021ea <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
 80021f2:	460b      	mov	r3, r1
 80021f4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80021f6:	bf00      	nop
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bc80      	pop	{r7}
 80021fe:	4770      	bx	lr

08002200 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b090      	sub	sp, #64	@ 0x40
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	603b      	str	r3, [r7, #0]
 800220c:	4613      	mov	r3, r2
 800220e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002210:	e050      	b.n	80022b4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002212:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002218:	d04c      	beq.n	80022b4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800221a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800221c:	2b00      	cmp	r3, #0
 800221e:	d007      	beq.n	8002230 <UART_WaitOnFlagUntilTimeout+0x30>
 8002220:	f7fe fb8a 	bl	8000938 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800222c:	429a      	cmp	r2, r3
 800222e:	d241      	bcs.n	80022b4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	330c      	adds	r3, #12
 8002236:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800223a:	e853 3f00 	ldrex	r3, [r3]
 800223e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002242:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8002246:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	330c      	adds	r3, #12
 800224e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002250:	637a      	str	r2, [r7, #52]	@ 0x34
 8002252:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002254:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002256:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002258:	e841 2300 	strex	r3, r2, [r1]
 800225c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800225e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1e5      	bne.n	8002230 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	3314      	adds	r3, #20
 800226a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	e853 3f00 	ldrex	r3, [r3]
 8002272:	613b      	str	r3, [r7, #16]
   return(result);
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	f023 0301 	bic.w	r3, r3, #1
 800227a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	3314      	adds	r3, #20
 8002282:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002284:	623a      	str	r2, [r7, #32]
 8002286:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002288:	69f9      	ldr	r1, [r7, #28]
 800228a:	6a3a      	ldr	r2, [r7, #32]
 800228c:	e841 2300 	strex	r3, r2, [r1]
 8002290:	61bb      	str	r3, [r7, #24]
   return(result);
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d1e5      	bne.n	8002264 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2220      	movs	r2, #32
 800229c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2220      	movs	r2, #32
 80022a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e00f      	b.n	80022d4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	4013      	ands	r3, r2
 80022be:	68ba      	ldr	r2, [r7, #8]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	bf0c      	ite	eq
 80022c4:	2301      	moveq	r3, #1
 80022c6:	2300      	movne	r3, #0
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	461a      	mov	r2, r3
 80022cc:	79fb      	ldrb	r3, [r7, #7]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d09f      	beq.n	8002212 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3740      	adds	r7, #64	@ 0x40
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80022dc:	b480      	push	{r7}
 80022de:	b095      	sub	sp, #84	@ 0x54
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	330c      	adds	r3, #12
 80022ea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022ee:	e853 3f00 	ldrex	r3, [r3]
 80022f2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80022f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80022fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	330c      	adds	r3, #12
 8002302:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002304:	643a      	str	r2, [r7, #64]	@ 0x40
 8002306:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002308:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800230a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800230c:	e841 2300 	strex	r3, r2, [r1]
 8002310:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002314:	2b00      	cmp	r3, #0
 8002316:	d1e5      	bne.n	80022e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	3314      	adds	r3, #20
 800231e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002320:	6a3b      	ldr	r3, [r7, #32]
 8002322:	e853 3f00 	ldrex	r3, [r3]
 8002326:	61fb      	str	r3, [r7, #28]
   return(result);
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	f023 0301 	bic.w	r3, r3, #1
 800232e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	3314      	adds	r3, #20
 8002336:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002338:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800233a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800233c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800233e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002340:	e841 2300 	strex	r3, r2, [r1]
 8002344:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002348:	2b00      	cmp	r3, #0
 800234a:	d1e5      	bne.n	8002318 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002350:	2b01      	cmp	r3, #1
 8002352:	d119      	bne.n	8002388 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	330c      	adds	r3, #12
 800235a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	e853 3f00 	ldrex	r3, [r3]
 8002362:	60bb      	str	r3, [r7, #8]
   return(result);
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	f023 0310 	bic.w	r3, r3, #16
 800236a:	647b      	str	r3, [r7, #68]	@ 0x44
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	330c      	adds	r3, #12
 8002372:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002374:	61ba      	str	r2, [r7, #24]
 8002376:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002378:	6979      	ldr	r1, [r7, #20]
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	e841 2300 	strex	r3, r2, [r1]
 8002380:	613b      	str	r3, [r7, #16]
   return(result);
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d1e5      	bne.n	8002354 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2220      	movs	r2, #32
 800238c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002396:	bf00      	nop
 8002398:	3754      	adds	r7, #84	@ 0x54
 800239a:	46bd      	mov	sp, r7
 800239c:	bc80      	pop	{r7}
 800239e:	4770      	bx	lr

080023a0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2200      	movs	r2, #0
 80023b2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2200      	movs	r2, #0
 80023b8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80023ba:	68f8      	ldr	r0, [r7, #12]
 80023bc:	f7ff ff0c 	bl	80021d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80023c0:	bf00      	nop
 80023c2:	3710      	adds	r7, #16
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	2b21      	cmp	r3, #33	@ 0x21
 80023da:	d13e      	bne.n	800245a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023e4:	d114      	bne.n	8002410 <UART_Transmit_IT+0x48>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d110      	bne.n	8002410 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a1b      	ldr	r3, [r3, #32]
 80023f2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	881b      	ldrh	r3, [r3, #0]
 80023f8:	461a      	mov	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002402:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a1b      	ldr	r3, [r3, #32]
 8002408:	1c9a      	adds	r2, r3, #2
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	621a      	str	r2, [r3, #32]
 800240e:	e008      	b.n	8002422 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a1b      	ldr	r3, [r3, #32]
 8002414:	1c59      	adds	r1, r3, #1
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	6211      	str	r1, [r2, #32]
 800241a:	781a      	ldrb	r2, [r3, #0]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002426:	b29b      	uxth	r3, r3
 8002428:	3b01      	subs	r3, #1
 800242a:	b29b      	uxth	r3, r3
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	4619      	mov	r1, r3
 8002430:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002432:	2b00      	cmp	r3, #0
 8002434:	d10f      	bne.n	8002456 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	68da      	ldr	r2, [r3, #12]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002444:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	68da      	ldr	r2, [r3, #12]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002454:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002456:	2300      	movs	r3, #0
 8002458:	e000      	b.n	800245c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800245a:	2302      	movs	r3, #2
  }
}
 800245c:	4618      	mov	r0, r3
 800245e:	3714      	adds	r7, #20
 8002460:	46bd      	mov	sp, r7
 8002462:	bc80      	pop	{r7}
 8002464:	4770      	bx	lr

08002466 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b082      	sub	sp, #8
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68da      	ldr	r2, [r3, #12]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800247c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2220      	movs	r2, #32
 8002482:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f7ff fe94 	bl	80021b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b08c      	sub	sp, #48	@ 0x30
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b22      	cmp	r3, #34	@ 0x22
 80024a8:	f040 80ae 	bne.w	8002608 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024b4:	d117      	bne.n	80024e6 <UART_Receive_IT+0x50>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d113      	bne.n	80024e6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80024be:	2300      	movs	r3, #0
 80024c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024c6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024d4:	b29a      	uxth	r2, r3
 80024d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024d8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024de:	1c9a      	adds	r2, r3, #2
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	629a      	str	r2, [r3, #40]	@ 0x28
 80024e4:	e026      	b.n	8002534 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80024ec:	2300      	movs	r3, #0
 80024ee:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024f8:	d007      	beq.n	800250a <UART_Receive_IT+0x74>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d10a      	bne.n	8002518 <UART_Receive_IT+0x82>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d106      	bne.n	8002518 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	b2da      	uxtb	r2, r3
 8002512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002514:	701a      	strb	r2, [r3, #0]
 8002516:	e008      	b.n	800252a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	b2db      	uxtb	r3, r3
 8002520:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002524:	b2da      	uxtb	r2, r3
 8002526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002528:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800252e:	1c5a      	adds	r2, r3, #1
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002538:	b29b      	uxth	r3, r3
 800253a:	3b01      	subs	r3, #1
 800253c:	b29b      	uxth	r3, r3
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	4619      	mov	r1, r3
 8002542:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002544:	2b00      	cmp	r3, #0
 8002546:	d15d      	bne.n	8002604 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68da      	ldr	r2, [r3, #12]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f022 0220 	bic.w	r2, r2, #32
 8002556:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68da      	ldr	r2, [r3, #12]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002566:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	695a      	ldr	r2, [r3, #20]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f022 0201 	bic.w	r2, r2, #1
 8002576:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2220      	movs	r2, #32
 800257c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800258a:	2b01      	cmp	r3, #1
 800258c:	d135      	bne.n	80025fa <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	330c      	adds	r3, #12
 800259a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	e853 3f00 	ldrex	r3, [r3]
 80025a2:	613b      	str	r3, [r7, #16]
   return(result);
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	f023 0310 	bic.w	r3, r3, #16
 80025aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	330c      	adds	r3, #12
 80025b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025b4:	623a      	str	r2, [r7, #32]
 80025b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025b8:	69f9      	ldr	r1, [r7, #28]
 80025ba:	6a3a      	ldr	r2, [r7, #32]
 80025bc:	e841 2300 	strex	r3, r2, [r1]
 80025c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d1e5      	bne.n	8002594 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0310 	and.w	r3, r3, #16
 80025d2:	2b10      	cmp	r3, #16
 80025d4:	d10a      	bne.n	80025ec <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80025d6:	2300      	movs	r3, #0
 80025d8:	60fb      	str	r3, [r7, #12]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	60fb      	str	r3, [r7, #12]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	60fb      	str	r3, [r7, #12]
 80025ea:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80025f0:	4619      	mov	r1, r3
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f7ff fdf9 	bl	80021ea <HAL_UARTEx_RxEventCallback>
 80025f8:	e002      	b.n	8002600 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f7ff fde3 	bl	80021c6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002600:	2300      	movs	r3, #0
 8002602:	e002      	b.n	800260a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002604:	2300      	movs	r3, #0
 8002606:	e000      	b.n	800260a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002608:	2302      	movs	r3, #2
  }
}
 800260a:	4618      	mov	r0, r3
 800260c:	3730      	adds	r7, #48	@ 0x30
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
	...

08002614 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	68da      	ldr	r2, [r3, #12]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	430a      	orrs	r2, r1
 8002630:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	689a      	ldr	r2, [r3, #8]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	431a      	orrs	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	695b      	ldr	r3, [r3, #20]
 8002640:	4313      	orrs	r3, r2
 8002642:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800264e:	f023 030c 	bic.w	r3, r3, #12
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	6812      	ldr	r2, [r2, #0]
 8002656:	68b9      	ldr	r1, [r7, #8]
 8002658:	430b      	orrs	r3, r1
 800265a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	699a      	ldr	r2, [r3, #24]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	430a      	orrs	r2, r1
 8002670:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a2c      	ldr	r2, [pc, #176]	@ (8002728 <UART_SetConfig+0x114>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d103      	bne.n	8002684 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800267c:	f7ff fa02 	bl	8001a84 <HAL_RCC_GetPCLK2Freq>
 8002680:	60f8      	str	r0, [r7, #12]
 8002682:	e002      	b.n	800268a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002684:	f7ff f9ea 	bl	8001a5c <HAL_RCC_GetPCLK1Freq>
 8002688:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	4613      	mov	r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	4413      	add	r3, r2
 8002692:	009a      	lsls	r2, r3, #2
 8002694:	441a      	add	r2, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a0:	4a22      	ldr	r2, [pc, #136]	@ (800272c <UART_SetConfig+0x118>)
 80026a2:	fba2 2303 	umull	r2, r3, r2, r3
 80026a6:	095b      	lsrs	r3, r3, #5
 80026a8:	0119      	lsls	r1, r3, #4
 80026aa:	68fa      	ldr	r2, [r7, #12]
 80026ac:	4613      	mov	r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	4413      	add	r3, r2
 80026b2:	009a      	lsls	r2, r3, #2
 80026b4:	441a      	add	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80026c0:	4b1a      	ldr	r3, [pc, #104]	@ (800272c <UART_SetConfig+0x118>)
 80026c2:	fba3 0302 	umull	r0, r3, r3, r2
 80026c6:	095b      	lsrs	r3, r3, #5
 80026c8:	2064      	movs	r0, #100	@ 0x64
 80026ca:	fb00 f303 	mul.w	r3, r0, r3
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	011b      	lsls	r3, r3, #4
 80026d2:	3332      	adds	r3, #50	@ 0x32
 80026d4:	4a15      	ldr	r2, [pc, #84]	@ (800272c <UART_SetConfig+0x118>)
 80026d6:	fba2 2303 	umull	r2, r3, r2, r3
 80026da:	095b      	lsrs	r3, r3, #5
 80026dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80026e0:	4419      	add	r1, r3
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	4613      	mov	r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	4413      	add	r3, r2
 80026ea:	009a      	lsls	r2, r3, #2
 80026ec:	441a      	add	r2, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80026f8:	4b0c      	ldr	r3, [pc, #48]	@ (800272c <UART_SetConfig+0x118>)
 80026fa:	fba3 0302 	umull	r0, r3, r3, r2
 80026fe:	095b      	lsrs	r3, r3, #5
 8002700:	2064      	movs	r0, #100	@ 0x64
 8002702:	fb00 f303 	mul.w	r3, r0, r3
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	011b      	lsls	r3, r3, #4
 800270a:	3332      	adds	r3, #50	@ 0x32
 800270c:	4a07      	ldr	r2, [pc, #28]	@ (800272c <UART_SetConfig+0x118>)
 800270e:	fba2 2303 	umull	r2, r3, r2, r3
 8002712:	095b      	lsrs	r3, r3, #5
 8002714:	f003 020f 	and.w	r2, r3, #15
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	440a      	add	r2, r1
 800271e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002720:	bf00      	nop
 8002722:	3710      	adds	r7, #16
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40013800 	.word	0x40013800
 800272c:	51eb851f 	.word	0x51eb851f

08002730 <siprintf>:
 8002730:	b40e      	push	{r1, r2, r3}
 8002732:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002736:	b500      	push	{lr}
 8002738:	b09c      	sub	sp, #112	@ 0x70
 800273a:	ab1d      	add	r3, sp, #116	@ 0x74
 800273c:	9002      	str	r0, [sp, #8]
 800273e:	9006      	str	r0, [sp, #24]
 8002740:	9107      	str	r1, [sp, #28]
 8002742:	9104      	str	r1, [sp, #16]
 8002744:	4808      	ldr	r0, [pc, #32]	@ (8002768 <siprintf+0x38>)
 8002746:	4909      	ldr	r1, [pc, #36]	@ (800276c <siprintf+0x3c>)
 8002748:	f853 2b04 	ldr.w	r2, [r3], #4
 800274c:	9105      	str	r1, [sp, #20]
 800274e:	6800      	ldr	r0, [r0, #0]
 8002750:	a902      	add	r1, sp, #8
 8002752:	9301      	str	r3, [sp, #4]
 8002754:	f000 f992 	bl	8002a7c <_svfiprintf_r>
 8002758:	2200      	movs	r2, #0
 800275a:	9b02      	ldr	r3, [sp, #8]
 800275c:	701a      	strb	r2, [r3, #0]
 800275e:	b01c      	add	sp, #112	@ 0x70
 8002760:	f85d eb04 	ldr.w	lr, [sp], #4
 8002764:	b003      	add	sp, #12
 8002766:	4770      	bx	lr
 8002768:	2000000c 	.word	0x2000000c
 800276c:	ffff0208 	.word	0xffff0208

08002770 <memset>:
 8002770:	4603      	mov	r3, r0
 8002772:	4402      	add	r2, r0
 8002774:	4293      	cmp	r3, r2
 8002776:	d100      	bne.n	800277a <memset+0xa>
 8002778:	4770      	bx	lr
 800277a:	f803 1b01 	strb.w	r1, [r3], #1
 800277e:	e7f9      	b.n	8002774 <memset+0x4>

08002780 <__errno>:
 8002780:	4b01      	ldr	r3, [pc, #4]	@ (8002788 <__errno+0x8>)
 8002782:	6818      	ldr	r0, [r3, #0]
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	2000000c 	.word	0x2000000c

0800278c <__libc_init_array>:
 800278c:	b570      	push	{r4, r5, r6, lr}
 800278e:	2600      	movs	r6, #0
 8002790:	4d0c      	ldr	r5, [pc, #48]	@ (80027c4 <__libc_init_array+0x38>)
 8002792:	4c0d      	ldr	r4, [pc, #52]	@ (80027c8 <__libc_init_array+0x3c>)
 8002794:	1b64      	subs	r4, r4, r5
 8002796:	10a4      	asrs	r4, r4, #2
 8002798:	42a6      	cmp	r6, r4
 800279a:	d109      	bne.n	80027b0 <__libc_init_array+0x24>
 800279c:	f000 fc78 	bl	8003090 <_init>
 80027a0:	2600      	movs	r6, #0
 80027a2:	4d0a      	ldr	r5, [pc, #40]	@ (80027cc <__libc_init_array+0x40>)
 80027a4:	4c0a      	ldr	r4, [pc, #40]	@ (80027d0 <__libc_init_array+0x44>)
 80027a6:	1b64      	subs	r4, r4, r5
 80027a8:	10a4      	asrs	r4, r4, #2
 80027aa:	42a6      	cmp	r6, r4
 80027ac:	d105      	bne.n	80027ba <__libc_init_array+0x2e>
 80027ae:	bd70      	pop	{r4, r5, r6, pc}
 80027b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80027b4:	4798      	blx	r3
 80027b6:	3601      	adds	r6, #1
 80027b8:	e7ee      	b.n	8002798 <__libc_init_array+0xc>
 80027ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80027be:	4798      	blx	r3
 80027c0:	3601      	adds	r6, #1
 80027c2:	e7f2      	b.n	80027aa <__libc_init_array+0x1e>
 80027c4:	08003128 	.word	0x08003128
 80027c8:	08003128 	.word	0x08003128
 80027cc:	08003128 	.word	0x08003128
 80027d0:	0800312c 	.word	0x0800312c

080027d4 <__retarget_lock_acquire_recursive>:
 80027d4:	4770      	bx	lr

080027d6 <__retarget_lock_release_recursive>:
 80027d6:	4770      	bx	lr

080027d8 <_free_r>:
 80027d8:	b538      	push	{r3, r4, r5, lr}
 80027da:	4605      	mov	r5, r0
 80027dc:	2900      	cmp	r1, #0
 80027de:	d040      	beq.n	8002862 <_free_r+0x8a>
 80027e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80027e4:	1f0c      	subs	r4, r1, #4
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	bfb8      	it	lt
 80027ea:	18e4      	addlt	r4, r4, r3
 80027ec:	f000 f8de 	bl	80029ac <__malloc_lock>
 80027f0:	4a1c      	ldr	r2, [pc, #112]	@ (8002864 <_free_r+0x8c>)
 80027f2:	6813      	ldr	r3, [r2, #0]
 80027f4:	b933      	cbnz	r3, 8002804 <_free_r+0x2c>
 80027f6:	6063      	str	r3, [r4, #4]
 80027f8:	6014      	str	r4, [r2, #0]
 80027fa:	4628      	mov	r0, r5
 80027fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002800:	f000 b8da 	b.w	80029b8 <__malloc_unlock>
 8002804:	42a3      	cmp	r3, r4
 8002806:	d908      	bls.n	800281a <_free_r+0x42>
 8002808:	6820      	ldr	r0, [r4, #0]
 800280a:	1821      	adds	r1, r4, r0
 800280c:	428b      	cmp	r3, r1
 800280e:	bf01      	itttt	eq
 8002810:	6819      	ldreq	r1, [r3, #0]
 8002812:	685b      	ldreq	r3, [r3, #4]
 8002814:	1809      	addeq	r1, r1, r0
 8002816:	6021      	streq	r1, [r4, #0]
 8002818:	e7ed      	b.n	80027f6 <_free_r+0x1e>
 800281a:	461a      	mov	r2, r3
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	b10b      	cbz	r3, 8002824 <_free_r+0x4c>
 8002820:	42a3      	cmp	r3, r4
 8002822:	d9fa      	bls.n	800281a <_free_r+0x42>
 8002824:	6811      	ldr	r1, [r2, #0]
 8002826:	1850      	adds	r0, r2, r1
 8002828:	42a0      	cmp	r0, r4
 800282a:	d10b      	bne.n	8002844 <_free_r+0x6c>
 800282c:	6820      	ldr	r0, [r4, #0]
 800282e:	4401      	add	r1, r0
 8002830:	1850      	adds	r0, r2, r1
 8002832:	4283      	cmp	r3, r0
 8002834:	6011      	str	r1, [r2, #0]
 8002836:	d1e0      	bne.n	80027fa <_free_r+0x22>
 8002838:	6818      	ldr	r0, [r3, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	4408      	add	r0, r1
 800283e:	6010      	str	r0, [r2, #0]
 8002840:	6053      	str	r3, [r2, #4]
 8002842:	e7da      	b.n	80027fa <_free_r+0x22>
 8002844:	d902      	bls.n	800284c <_free_r+0x74>
 8002846:	230c      	movs	r3, #12
 8002848:	602b      	str	r3, [r5, #0]
 800284a:	e7d6      	b.n	80027fa <_free_r+0x22>
 800284c:	6820      	ldr	r0, [r4, #0]
 800284e:	1821      	adds	r1, r4, r0
 8002850:	428b      	cmp	r3, r1
 8002852:	bf01      	itttt	eq
 8002854:	6819      	ldreq	r1, [r3, #0]
 8002856:	685b      	ldreq	r3, [r3, #4]
 8002858:	1809      	addeq	r1, r1, r0
 800285a:	6021      	streq	r1, [r4, #0]
 800285c:	6063      	str	r3, [r4, #4]
 800285e:	6054      	str	r4, [r2, #4]
 8002860:	e7cb      	b.n	80027fa <_free_r+0x22>
 8002862:	bd38      	pop	{r3, r4, r5, pc}
 8002864:	20000364 	.word	0x20000364

08002868 <sbrk_aligned>:
 8002868:	b570      	push	{r4, r5, r6, lr}
 800286a:	4e0f      	ldr	r6, [pc, #60]	@ (80028a8 <sbrk_aligned+0x40>)
 800286c:	460c      	mov	r4, r1
 800286e:	6831      	ldr	r1, [r6, #0]
 8002870:	4605      	mov	r5, r0
 8002872:	b911      	cbnz	r1, 800287a <sbrk_aligned+0x12>
 8002874:	f000 fbaa 	bl	8002fcc <_sbrk_r>
 8002878:	6030      	str	r0, [r6, #0]
 800287a:	4621      	mov	r1, r4
 800287c:	4628      	mov	r0, r5
 800287e:	f000 fba5 	bl	8002fcc <_sbrk_r>
 8002882:	1c43      	adds	r3, r0, #1
 8002884:	d103      	bne.n	800288e <sbrk_aligned+0x26>
 8002886:	f04f 34ff 	mov.w	r4, #4294967295
 800288a:	4620      	mov	r0, r4
 800288c:	bd70      	pop	{r4, r5, r6, pc}
 800288e:	1cc4      	adds	r4, r0, #3
 8002890:	f024 0403 	bic.w	r4, r4, #3
 8002894:	42a0      	cmp	r0, r4
 8002896:	d0f8      	beq.n	800288a <sbrk_aligned+0x22>
 8002898:	1a21      	subs	r1, r4, r0
 800289a:	4628      	mov	r0, r5
 800289c:	f000 fb96 	bl	8002fcc <_sbrk_r>
 80028a0:	3001      	adds	r0, #1
 80028a2:	d1f2      	bne.n	800288a <sbrk_aligned+0x22>
 80028a4:	e7ef      	b.n	8002886 <sbrk_aligned+0x1e>
 80028a6:	bf00      	nop
 80028a8:	20000360 	.word	0x20000360

080028ac <_malloc_r>:
 80028ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80028b0:	1ccd      	adds	r5, r1, #3
 80028b2:	f025 0503 	bic.w	r5, r5, #3
 80028b6:	3508      	adds	r5, #8
 80028b8:	2d0c      	cmp	r5, #12
 80028ba:	bf38      	it	cc
 80028bc:	250c      	movcc	r5, #12
 80028be:	2d00      	cmp	r5, #0
 80028c0:	4606      	mov	r6, r0
 80028c2:	db01      	blt.n	80028c8 <_malloc_r+0x1c>
 80028c4:	42a9      	cmp	r1, r5
 80028c6:	d904      	bls.n	80028d2 <_malloc_r+0x26>
 80028c8:	230c      	movs	r3, #12
 80028ca:	6033      	str	r3, [r6, #0]
 80028cc:	2000      	movs	r0, #0
 80028ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80028d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80029a8 <_malloc_r+0xfc>
 80028d6:	f000 f869 	bl	80029ac <__malloc_lock>
 80028da:	f8d8 3000 	ldr.w	r3, [r8]
 80028de:	461c      	mov	r4, r3
 80028e0:	bb44      	cbnz	r4, 8002934 <_malloc_r+0x88>
 80028e2:	4629      	mov	r1, r5
 80028e4:	4630      	mov	r0, r6
 80028e6:	f7ff ffbf 	bl	8002868 <sbrk_aligned>
 80028ea:	1c43      	adds	r3, r0, #1
 80028ec:	4604      	mov	r4, r0
 80028ee:	d158      	bne.n	80029a2 <_malloc_r+0xf6>
 80028f0:	f8d8 4000 	ldr.w	r4, [r8]
 80028f4:	4627      	mov	r7, r4
 80028f6:	2f00      	cmp	r7, #0
 80028f8:	d143      	bne.n	8002982 <_malloc_r+0xd6>
 80028fa:	2c00      	cmp	r4, #0
 80028fc:	d04b      	beq.n	8002996 <_malloc_r+0xea>
 80028fe:	6823      	ldr	r3, [r4, #0]
 8002900:	4639      	mov	r1, r7
 8002902:	4630      	mov	r0, r6
 8002904:	eb04 0903 	add.w	r9, r4, r3
 8002908:	f000 fb60 	bl	8002fcc <_sbrk_r>
 800290c:	4581      	cmp	r9, r0
 800290e:	d142      	bne.n	8002996 <_malloc_r+0xea>
 8002910:	6821      	ldr	r1, [r4, #0]
 8002912:	4630      	mov	r0, r6
 8002914:	1a6d      	subs	r5, r5, r1
 8002916:	4629      	mov	r1, r5
 8002918:	f7ff ffa6 	bl	8002868 <sbrk_aligned>
 800291c:	3001      	adds	r0, #1
 800291e:	d03a      	beq.n	8002996 <_malloc_r+0xea>
 8002920:	6823      	ldr	r3, [r4, #0]
 8002922:	442b      	add	r3, r5
 8002924:	6023      	str	r3, [r4, #0]
 8002926:	f8d8 3000 	ldr.w	r3, [r8]
 800292a:	685a      	ldr	r2, [r3, #4]
 800292c:	bb62      	cbnz	r2, 8002988 <_malloc_r+0xdc>
 800292e:	f8c8 7000 	str.w	r7, [r8]
 8002932:	e00f      	b.n	8002954 <_malloc_r+0xa8>
 8002934:	6822      	ldr	r2, [r4, #0]
 8002936:	1b52      	subs	r2, r2, r5
 8002938:	d420      	bmi.n	800297c <_malloc_r+0xd0>
 800293a:	2a0b      	cmp	r2, #11
 800293c:	d917      	bls.n	800296e <_malloc_r+0xc2>
 800293e:	1961      	adds	r1, r4, r5
 8002940:	42a3      	cmp	r3, r4
 8002942:	6025      	str	r5, [r4, #0]
 8002944:	bf18      	it	ne
 8002946:	6059      	strne	r1, [r3, #4]
 8002948:	6863      	ldr	r3, [r4, #4]
 800294a:	bf08      	it	eq
 800294c:	f8c8 1000 	streq.w	r1, [r8]
 8002950:	5162      	str	r2, [r4, r5]
 8002952:	604b      	str	r3, [r1, #4]
 8002954:	4630      	mov	r0, r6
 8002956:	f000 f82f 	bl	80029b8 <__malloc_unlock>
 800295a:	f104 000b 	add.w	r0, r4, #11
 800295e:	1d23      	adds	r3, r4, #4
 8002960:	f020 0007 	bic.w	r0, r0, #7
 8002964:	1ac2      	subs	r2, r0, r3
 8002966:	bf1c      	itt	ne
 8002968:	1a1b      	subne	r3, r3, r0
 800296a:	50a3      	strne	r3, [r4, r2]
 800296c:	e7af      	b.n	80028ce <_malloc_r+0x22>
 800296e:	6862      	ldr	r2, [r4, #4]
 8002970:	42a3      	cmp	r3, r4
 8002972:	bf0c      	ite	eq
 8002974:	f8c8 2000 	streq.w	r2, [r8]
 8002978:	605a      	strne	r2, [r3, #4]
 800297a:	e7eb      	b.n	8002954 <_malloc_r+0xa8>
 800297c:	4623      	mov	r3, r4
 800297e:	6864      	ldr	r4, [r4, #4]
 8002980:	e7ae      	b.n	80028e0 <_malloc_r+0x34>
 8002982:	463c      	mov	r4, r7
 8002984:	687f      	ldr	r7, [r7, #4]
 8002986:	e7b6      	b.n	80028f6 <_malloc_r+0x4a>
 8002988:	461a      	mov	r2, r3
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	42a3      	cmp	r3, r4
 800298e:	d1fb      	bne.n	8002988 <_malloc_r+0xdc>
 8002990:	2300      	movs	r3, #0
 8002992:	6053      	str	r3, [r2, #4]
 8002994:	e7de      	b.n	8002954 <_malloc_r+0xa8>
 8002996:	230c      	movs	r3, #12
 8002998:	4630      	mov	r0, r6
 800299a:	6033      	str	r3, [r6, #0]
 800299c:	f000 f80c 	bl	80029b8 <__malloc_unlock>
 80029a0:	e794      	b.n	80028cc <_malloc_r+0x20>
 80029a2:	6005      	str	r5, [r0, #0]
 80029a4:	e7d6      	b.n	8002954 <_malloc_r+0xa8>
 80029a6:	bf00      	nop
 80029a8:	20000364 	.word	0x20000364

080029ac <__malloc_lock>:
 80029ac:	4801      	ldr	r0, [pc, #4]	@ (80029b4 <__malloc_lock+0x8>)
 80029ae:	f7ff bf11 	b.w	80027d4 <__retarget_lock_acquire_recursive>
 80029b2:	bf00      	nop
 80029b4:	2000035c 	.word	0x2000035c

080029b8 <__malloc_unlock>:
 80029b8:	4801      	ldr	r0, [pc, #4]	@ (80029c0 <__malloc_unlock+0x8>)
 80029ba:	f7ff bf0c 	b.w	80027d6 <__retarget_lock_release_recursive>
 80029be:	bf00      	nop
 80029c0:	2000035c 	.word	0x2000035c

080029c4 <__ssputs_r>:
 80029c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029c8:	461f      	mov	r7, r3
 80029ca:	688e      	ldr	r6, [r1, #8]
 80029cc:	4682      	mov	sl, r0
 80029ce:	42be      	cmp	r6, r7
 80029d0:	460c      	mov	r4, r1
 80029d2:	4690      	mov	r8, r2
 80029d4:	680b      	ldr	r3, [r1, #0]
 80029d6:	d82d      	bhi.n	8002a34 <__ssputs_r+0x70>
 80029d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80029dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80029e0:	d026      	beq.n	8002a30 <__ssputs_r+0x6c>
 80029e2:	6965      	ldr	r5, [r4, #20]
 80029e4:	6909      	ldr	r1, [r1, #16]
 80029e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80029ea:	eba3 0901 	sub.w	r9, r3, r1
 80029ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80029f2:	1c7b      	adds	r3, r7, #1
 80029f4:	444b      	add	r3, r9
 80029f6:	106d      	asrs	r5, r5, #1
 80029f8:	429d      	cmp	r5, r3
 80029fa:	bf38      	it	cc
 80029fc:	461d      	movcc	r5, r3
 80029fe:	0553      	lsls	r3, r2, #21
 8002a00:	d527      	bpl.n	8002a52 <__ssputs_r+0x8e>
 8002a02:	4629      	mov	r1, r5
 8002a04:	f7ff ff52 	bl	80028ac <_malloc_r>
 8002a08:	4606      	mov	r6, r0
 8002a0a:	b360      	cbz	r0, 8002a66 <__ssputs_r+0xa2>
 8002a0c:	464a      	mov	r2, r9
 8002a0e:	6921      	ldr	r1, [r4, #16]
 8002a10:	f000 fafa 	bl	8003008 <memcpy>
 8002a14:	89a3      	ldrh	r3, [r4, #12]
 8002a16:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002a1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a1e:	81a3      	strh	r3, [r4, #12]
 8002a20:	6126      	str	r6, [r4, #16]
 8002a22:	444e      	add	r6, r9
 8002a24:	6026      	str	r6, [r4, #0]
 8002a26:	463e      	mov	r6, r7
 8002a28:	6165      	str	r5, [r4, #20]
 8002a2a:	eba5 0509 	sub.w	r5, r5, r9
 8002a2e:	60a5      	str	r5, [r4, #8]
 8002a30:	42be      	cmp	r6, r7
 8002a32:	d900      	bls.n	8002a36 <__ssputs_r+0x72>
 8002a34:	463e      	mov	r6, r7
 8002a36:	4632      	mov	r2, r6
 8002a38:	4641      	mov	r1, r8
 8002a3a:	6820      	ldr	r0, [r4, #0]
 8002a3c:	f000 faac 	bl	8002f98 <memmove>
 8002a40:	2000      	movs	r0, #0
 8002a42:	68a3      	ldr	r3, [r4, #8]
 8002a44:	1b9b      	subs	r3, r3, r6
 8002a46:	60a3      	str	r3, [r4, #8]
 8002a48:	6823      	ldr	r3, [r4, #0]
 8002a4a:	4433      	add	r3, r6
 8002a4c:	6023      	str	r3, [r4, #0]
 8002a4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a52:	462a      	mov	r2, r5
 8002a54:	f000 fae6 	bl	8003024 <_realloc_r>
 8002a58:	4606      	mov	r6, r0
 8002a5a:	2800      	cmp	r0, #0
 8002a5c:	d1e0      	bne.n	8002a20 <__ssputs_r+0x5c>
 8002a5e:	4650      	mov	r0, sl
 8002a60:	6921      	ldr	r1, [r4, #16]
 8002a62:	f7ff feb9 	bl	80027d8 <_free_r>
 8002a66:	230c      	movs	r3, #12
 8002a68:	f8ca 3000 	str.w	r3, [sl]
 8002a6c:	89a3      	ldrh	r3, [r4, #12]
 8002a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8002a72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a76:	81a3      	strh	r3, [r4, #12]
 8002a78:	e7e9      	b.n	8002a4e <__ssputs_r+0x8a>
	...

08002a7c <_svfiprintf_r>:
 8002a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a80:	4698      	mov	r8, r3
 8002a82:	898b      	ldrh	r3, [r1, #12]
 8002a84:	4607      	mov	r7, r0
 8002a86:	061b      	lsls	r3, r3, #24
 8002a88:	460d      	mov	r5, r1
 8002a8a:	4614      	mov	r4, r2
 8002a8c:	b09d      	sub	sp, #116	@ 0x74
 8002a8e:	d510      	bpl.n	8002ab2 <_svfiprintf_r+0x36>
 8002a90:	690b      	ldr	r3, [r1, #16]
 8002a92:	b973      	cbnz	r3, 8002ab2 <_svfiprintf_r+0x36>
 8002a94:	2140      	movs	r1, #64	@ 0x40
 8002a96:	f7ff ff09 	bl	80028ac <_malloc_r>
 8002a9a:	6028      	str	r0, [r5, #0]
 8002a9c:	6128      	str	r0, [r5, #16]
 8002a9e:	b930      	cbnz	r0, 8002aae <_svfiprintf_r+0x32>
 8002aa0:	230c      	movs	r3, #12
 8002aa2:	603b      	str	r3, [r7, #0]
 8002aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8002aa8:	b01d      	add	sp, #116	@ 0x74
 8002aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002aae:	2340      	movs	r3, #64	@ 0x40
 8002ab0:	616b      	str	r3, [r5, #20]
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	9309      	str	r3, [sp, #36]	@ 0x24
 8002ab6:	2320      	movs	r3, #32
 8002ab8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002abc:	2330      	movs	r3, #48	@ 0x30
 8002abe:	f04f 0901 	mov.w	r9, #1
 8002ac2:	f8cd 800c 	str.w	r8, [sp, #12]
 8002ac6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8002c60 <_svfiprintf_r+0x1e4>
 8002aca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002ace:	4623      	mov	r3, r4
 8002ad0:	469a      	mov	sl, r3
 8002ad2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002ad6:	b10a      	cbz	r2, 8002adc <_svfiprintf_r+0x60>
 8002ad8:	2a25      	cmp	r2, #37	@ 0x25
 8002ada:	d1f9      	bne.n	8002ad0 <_svfiprintf_r+0x54>
 8002adc:	ebba 0b04 	subs.w	fp, sl, r4
 8002ae0:	d00b      	beq.n	8002afa <_svfiprintf_r+0x7e>
 8002ae2:	465b      	mov	r3, fp
 8002ae4:	4622      	mov	r2, r4
 8002ae6:	4629      	mov	r1, r5
 8002ae8:	4638      	mov	r0, r7
 8002aea:	f7ff ff6b 	bl	80029c4 <__ssputs_r>
 8002aee:	3001      	adds	r0, #1
 8002af0:	f000 80a7 	beq.w	8002c42 <_svfiprintf_r+0x1c6>
 8002af4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002af6:	445a      	add	r2, fp
 8002af8:	9209      	str	r2, [sp, #36]	@ 0x24
 8002afa:	f89a 3000 	ldrb.w	r3, [sl]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f000 809f 	beq.w	8002c42 <_svfiprintf_r+0x1c6>
 8002b04:	2300      	movs	r3, #0
 8002b06:	f04f 32ff 	mov.w	r2, #4294967295
 8002b0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002b0e:	f10a 0a01 	add.w	sl, sl, #1
 8002b12:	9304      	str	r3, [sp, #16]
 8002b14:	9307      	str	r3, [sp, #28]
 8002b16:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002b1a:	931a      	str	r3, [sp, #104]	@ 0x68
 8002b1c:	4654      	mov	r4, sl
 8002b1e:	2205      	movs	r2, #5
 8002b20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b24:	484e      	ldr	r0, [pc, #312]	@ (8002c60 <_svfiprintf_r+0x1e4>)
 8002b26:	f000 fa61 	bl	8002fec <memchr>
 8002b2a:	9a04      	ldr	r2, [sp, #16]
 8002b2c:	b9d8      	cbnz	r0, 8002b66 <_svfiprintf_r+0xea>
 8002b2e:	06d0      	lsls	r0, r2, #27
 8002b30:	bf44      	itt	mi
 8002b32:	2320      	movmi	r3, #32
 8002b34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002b38:	0711      	lsls	r1, r2, #28
 8002b3a:	bf44      	itt	mi
 8002b3c:	232b      	movmi	r3, #43	@ 0x2b
 8002b3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002b42:	f89a 3000 	ldrb.w	r3, [sl]
 8002b46:	2b2a      	cmp	r3, #42	@ 0x2a
 8002b48:	d015      	beq.n	8002b76 <_svfiprintf_r+0xfa>
 8002b4a:	4654      	mov	r4, sl
 8002b4c:	2000      	movs	r0, #0
 8002b4e:	f04f 0c0a 	mov.w	ip, #10
 8002b52:	9a07      	ldr	r2, [sp, #28]
 8002b54:	4621      	mov	r1, r4
 8002b56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002b5a:	3b30      	subs	r3, #48	@ 0x30
 8002b5c:	2b09      	cmp	r3, #9
 8002b5e:	d94b      	bls.n	8002bf8 <_svfiprintf_r+0x17c>
 8002b60:	b1b0      	cbz	r0, 8002b90 <_svfiprintf_r+0x114>
 8002b62:	9207      	str	r2, [sp, #28]
 8002b64:	e014      	b.n	8002b90 <_svfiprintf_r+0x114>
 8002b66:	eba0 0308 	sub.w	r3, r0, r8
 8002b6a:	fa09 f303 	lsl.w	r3, r9, r3
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	46a2      	mov	sl, r4
 8002b72:	9304      	str	r3, [sp, #16]
 8002b74:	e7d2      	b.n	8002b1c <_svfiprintf_r+0xa0>
 8002b76:	9b03      	ldr	r3, [sp, #12]
 8002b78:	1d19      	adds	r1, r3, #4
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	9103      	str	r1, [sp, #12]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	bfbb      	ittet	lt
 8002b82:	425b      	neglt	r3, r3
 8002b84:	f042 0202 	orrlt.w	r2, r2, #2
 8002b88:	9307      	strge	r3, [sp, #28]
 8002b8a:	9307      	strlt	r3, [sp, #28]
 8002b8c:	bfb8      	it	lt
 8002b8e:	9204      	strlt	r2, [sp, #16]
 8002b90:	7823      	ldrb	r3, [r4, #0]
 8002b92:	2b2e      	cmp	r3, #46	@ 0x2e
 8002b94:	d10a      	bne.n	8002bac <_svfiprintf_r+0x130>
 8002b96:	7863      	ldrb	r3, [r4, #1]
 8002b98:	2b2a      	cmp	r3, #42	@ 0x2a
 8002b9a:	d132      	bne.n	8002c02 <_svfiprintf_r+0x186>
 8002b9c:	9b03      	ldr	r3, [sp, #12]
 8002b9e:	3402      	adds	r4, #2
 8002ba0:	1d1a      	adds	r2, r3, #4
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	9203      	str	r2, [sp, #12]
 8002ba6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002baa:	9305      	str	r3, [sp, #20]
 8002bac:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8002c64 <_svfiprintf_r+0x1e8>
 8002bb0:	2203      	movs	r2, #3
 8002bb2:	4650      	mov	r0, sl
 8002bb4:	7821      	ldrb	r1, [r4, #0]
 8002bb6:	f000 fa19 	bl	8002fec <memchr>
 8002bba:	b138      	cbz	r0, 8002bcc <_svfiprintf_r+0x150>
 8002bbc:	2240      	movs	r2, #64	@ 0x40
 8002bbe:	9b04      	ldr	r3, [sp, #16]
 8002bc0:	eba0 000a 	sub.w	r0, r0, sl
 8002bc4:	4082      	lsls	r2, r0
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	3401      	adds	r4, #1
 8002bca:	9304      	str	r3, [sp, #16]
 8002bcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002bd0:	2206      	movs	r2, #6
 8002bd2:	4825      	ldr	r0, [pc, #148]	@ (8002c68 <_svfiprintf_r+0x1ec>)
 8002bd4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002bd8:	f000 fa08 	bl	8002fec <memchr>
 8002bdc:	2800      	cmp	r0, #0
 8002bde:	d036      	beq.n	8002c4e <_svfiprintf_r+0x1d2>
 8002be0:	4b22      	ldr	r3, [pc, #136]	@ (8002c6c <_svfiprintf_r+0x1f0>)
 8002be2:	bb1b      	cbnz	r3, 8002c2c <_svfiprintf_r+0x1b0>
 8002be4:	9b03      	ldr	r3, [sp, #12]
 8002be6:	3307      	adds	r3, #7
 8002be8:	f023 0307 	bic.w	r3, r3, #7
 8002bec:	3308      	adds	r3, #8
 8002bee:	9303      	str	r3, [sp, #12]
 8002bf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002bf2:	4433      	add	r3, r6
 8002bf4:	9309      	str	r3, [sp, #36]	@ 0x24
 8002bf6:	e76a      	b.n	8002ace <_svfiprintf_r+0x52>
 8002bf8:	460c      	mov	r4, r1
 8002bfa:	2001      	movs	r0, #1
 8002bfc:	fb0c 3202 	mla	r2, ip, r2, r3
 8002c00:	e7a8      	b.n	8002b54 <_svfiprintf_r+0xd8>
 8002c02:	2300      	movs	r3, #0
 8002c04:	f04f 0c0a 	mov.w	ip, #10
 8002c08:	4619      	mov	r1, r3
 8002c0a:	3401      	adds	r4, #1
 8002c0c:	9305      	str	r3, [sp, #20]
 8002c0e:	4620      	mov	r0, r4
 8002c10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002c14:	3a30      	subs	r2, #48	@ 0x30
 8002c16:	2a09      	cmp	r2, #9
 8002c18:	d903      	bls.n	8002c22 <_svfiprintf_r+0x1a6>
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d0c6      	beq.n	8002bac <_svfiprintf_r+0x130>
 8002c1e:	9105      	str	r1, [sp, #20]
 8002c20:	e7c4      	b.n	8002bac <_svfiprintf_r+0x130>
 8002c22:	4604      	mov	r4, r0
 8002c24:	2301      	movs	r3, #1
 8002c26:	fb0c 2101 	mla	r1, ip, r1, r2
 8002c2a:	e7f0      	b.n	8002c0e <_svfiprintf_r+0x192>
 8002c2c:	ab03      	add	r3, sp, #12
 8002c2e:	9300      	str	r3, [sp, #0]
 8002c30:	462a      	mov	r2, r5
 8002c32:	4638      	mov	r0, r7
 8002c34:	4b0e      	ldr	r3, [pc, #56]	@ (8002c70 <_svfiprintf_r+0x1f4>)
 8002c36:	a904      	add	r1, sp, #16
 8002c38:	f3af 8000 	nop.w
 8002c3c:	1c42      	adds	r2, r0, #1
 8002c3e:	4606      	mov	r6, r0
 8002c40:	d1d6      	bne.n	8002bf0 <_svfiprintf_r+0x174>
 8002c42:	89ab      	ldrh	r3, [r5, #12]
 8002c44:	065b      	lsls	r3, r3, #25
 8002c46:	f53f af2d 	bmi.w	8002aa4 <_svfiprintf_r+0x28>
 8002c4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002c4c:	e72c      	b.n	8002aa8 <_svfiprintf_r+0x2c>
 8002c4e:	ab03      	add	r3, sp, #12
 8002c50:	9300      	str	r3, [sp, #0]
 8002c52:	462a      	mov	r2, r5
 8002c54:	4638      	mov	r0, r7
 8002c56:	4b06      	ldr	r3, [pc, #24]	@ (8002c70 <_svfiprintf_r+0x1f4>)
 8002c58:	a904      	add	r1, sp, #16
 8002c5a:	f000 f87d 	bl	8002d58 <_printf_i>
 8002c5e:	e7ed      	b.n	8002c3c <_svfiprintf_r+0x1c0>
 8002c60:	080030ea 	.word	0x080030ea
 8002c64:	080030f0 	.word	0x080030f0
 8002c68:	080030f4 	.word	0x080030f4
 8002c6c:	00000000 	.word	0x00000000
 8002c70:	080029c5 	.word	0x080029c5

08002c74 <_printf_common>:
 8002c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c78:	4616      	mov	r6, r2
 8002c7a:	4698      	mov	r8, r3
 8002c7c:	688a      	ldr	r2, [r1, #8]
 8002c7e:	690b      	ldr	r3, [r1, #16]
 8002c80:	4607      	mov	r7, r0
 8002c82:	4293      	cmp	r3, r2
 8002c84:	bfb8      	it	lt
 8002c86:	4613      	movlt	r3, r2
 8002c88:	6033      	str	r3, [r6, #0]
 8002c8a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002c8e:	460c      	mov	r4, r1
 8002c90:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002c94:	b10a      	cbz	r2, 8002c9a <_printf_common+0x26>
 8002c96:	3301      	adds	r3, #1
 8002c98:	6033      	str	r3, [r6, #0]
 8002c9a:	6823      	ldr	r3, [r4, #0]
 8002c9c:	0699      	lsls	r1, r3, #26
 8002c9e:	bf42      	ittt	mi
 8002ca0:	6833      	ldrmi	r3, [r6, #0]
 8002ca2:	3302      	addmi	r3, #2
 8002ca4:	6033      	strmi	r3, [r6, #0]
 8002ca6:	6825      	ldr	r5, [r4, #0]
 8002ca8:	f015 0506 	ands.w	r5, r5, #6
 8002cac:	d106      	bne.n	8002cbc <_printf_common+0x48>
 8002cae:	f104 0a19 	add.w	sl, r4, #25
 8002cb2:	68e3      	ldr	r3, [r4, #12]
 8002cb4:	6832      	ldr	r2, [r6, #0]
 8002cb6:	1a9b      	subs	r3, r3, r2
 8002cb8:	42ab      	cmp	r3, r5
 8002cba:	dc2b      	bgt.n	8002d14 <_printf_common+0xa0>
 8002cbc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002cc0:	6822      	ldr	r2, [r4, #0]
 8002cc2:	3b00      	subs	r3, #0
 8002cc4:	bf18      	it	ne
 8002cc6:	2301      	movne	r3, #1
 8002cc8:	0692      	lsls	r2, r2, #26
 8002cca:	d430      	bmi.n	8002d2e <_printf_common+0xba>
 8002ccc:	4641      	mov	r1, r8
 8002cce:	4638      	mov	r0, r7
 8002cd0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002cd4:	47c8      	blx	r9
 8002cd6:	3001      	adds	r0, #1
 8002cd8:	d023      	beq.n	8002d22 <_printf_common+0xae>
 8002cda:	6823      	ldr	r3, [r4, #0]
 8002cdc:	6922      	ldr	r2, [r4, #16]
 8002cde:	f003 0306 	and.w	r3, r3, #6
 8002ce2:	2b04      	cmp	r3, #4
 8002ce4:	bf14      	ite	ne
 8002ce6:	2500      	movne	r5, #0
 8002ce8:	6833      	ldreq	r3, [r6, #0]
 8002cea:	f04f 0600 	mov.w	r6, #0
 8002cee:	bf08      	it	eq
 8002cf0:	68e5      	ldreq	r5, [r4, #12]
 8002cf2:	f104 041a 	add.w	r4, r4, #26
 8002cf6:	bf08      	it	eq
 8002cf8:	1aed      	subeq	r5, r5, r3
 8002cfa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002cfe:	bf08      	it	eq
 8002d00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002d04:	4293      	cmp	r3, r2
 8002d06:	bfc4      	itt	gt
 8002d08:	1a9b      	subgt	r3, r3, r2
 8002d0a:	18ed      	addgt	r5, r5, r3
 8002d0c:	42b5      	cmp	r5, r6
 8002d0e:	d11a      	bne.n	8002d46 <_printf_common+0xd2>
 8002d10:	2000      	movs	r0, #0
 8002d12:	e008      	b.n	8002d26 <_printf_common+0xb2>
 8002d14:	2301      	movs	r3, #1
 8002d16:	4652      	mov	r2, sl
 8002d18:	4641      	mov	r1, r8
 8002d1a:	4638      	mov	r0, r7
 8002d1c:	47c8      	blx	r9
 8002d1e:	3001      	adds	r0, #1
 8002d20:	d103      	bne.n	8002d2a <_printf_common+0xb6>
 8002d22:	f04f 30ff 	mov.w	r0, #4294967295
 8002d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d2a:	3501      	adds	r5, #1
 8002d2c:	e7c1      	b.n	8002cb2 <_printf_common+0x3e>
 8002d2e:	2030      	movs	r0, #48	@ 0x30
 8002d30:	18e1      	adds	r1, r4, r3
 8002d32:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002d36:	1c5a      	adds	r2, r3, #1
 8002d38:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002d3c:	4422      	add	r2, r4
 8002d3e:	3302      	adds	r3, #2
 8002d40:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002d44:	e7c2      	b.n	8002ccc <_printf_common+0x58>
 8002d46:	2301      	movs	r3, #1
 8002d48:	4622      	mov	r2, r4
 8002d4a:	4641      	mov	r1, r8
 8002d4c:	4638      	mov	r0, r7
 8002d4e:	47c8      	blx	r9
 8002d50:	3001      	adds	r0, #1
 8002d52:	d0e6      	beq.n	8002d22 <_printf_common+0xae>
 8002d54:	3601      	adds	r6, #1
 8002d56:	e7d9      	b.n	8002d0c <_printf_common+0x98>

08002d58 <_printf_i>:
 8002d58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002d5c:	7e0f      	ldrb	r7, [r1, #24]
 8002d5e:	4691      	mov	r9, r2
 8002d60:	2f78      	cmp	r7, #120	@ 0x78
 8002d62:	4680      	mov	r8, r0
 8002d64:	460c      	mov	r4, r1
 8002d66:	469a      	mov	sl, r3
 8002d68:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002d6a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002d6e:	d807      	bhi.n	8002d80 <_printf_i+0x28>
 8002d70:	2f62      	cmp	r7, #98	@ 0x62
 8002d72:	d80a      	bhi.n	8002d8a <_printf_i+0x32>
 8002d74:	2f00      	cmp	r7, #0
 8002d76:	f000 80d3 	beq.w	8002f20 <_printf_i+0x1c8>
 8002d7a:	2f58      	cmp	r7, #88	@ 0x58
 8002d7c:	f000 80ba 	beq.w	8002ef4 <_printf_i+0x19c>
 8002d80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002d84:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002d88:	e03a      	b.n	8002e00 <_printf_i+0xa8>
 8002d8a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002d8e:	2b15      	cmp	r3, #21
 8002d90:	d8f6      	bhi.n	8002d80 <_printf_i+0x28>
 8002d92:	a101      	add	r1, pc, #4	@ (adr r1, 8002d98 <_printf_i+0x40>)
 8002d94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002d98:	08002df1 	.word	0x08002df1
 8002d9c:	08002e05 	.word	0x08002e05
 8002da0:	08002d81 	.word	0x08002d81
 8002da4:	08002d81 	.word	0x08002d81
 8002da8:	08002d81 	.word	0x08002d81
 8002dac:	08002d81 	.word	0x08002d81
 8002db0:	08002e05 	.word	0x08002e05
 8002db4:	08002d81 	.word	0x08002d81
 8002db8:	08002d81 	.word	0x08002d81
 8002dbc:	08002d81 	.word	0x08002d81
 8002dc0:	08002d81 	.word	0x08002d81
 8002dc4:	08002f07 	.word	0x08002f07
 8002dc8:	08002e2f 	.word	0x08002e2f
 8002dcc:	08002ec1 	.word	0x08002ec1
 8002dd0:	08002d81 	.word	0x08002d81
 8002dd4:	08002d81 	.word	0x08002d81
 8002dd8:	08002f29 	.word	0x08002f29
 8002ddc:	08002d81 	.word	0x08002d81
 8002de0:	08002e2f 	.word	0x08002e2f
 8002de4:	08002d81 	.word	0x08002d81
 8002de8:	08002d81 	.word	0x08002d81
 8002dec:	08002ec9 	.word	0x08002ec9
 8002df0:	6833      	ldr	r3, [r6, #0]
 8002df2:	1d1a      	adds	r2, r3, #4
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	6032      	str	r2, [r6, #0]
 8002df8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002dfc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002e00:	2301      	movs	r3, #1
 8002e02:	e09e      	b.n	8002f42 <_printf_i+0x1ea>
 8002e04:	6833      	ldr	r3, [r6, #0]
 8002e06:	6820      	ldr	r0, [r4, #0]
 8002e08:	1d19      	adds	r1, r3, #4
 8002e0a:	6031      	str	r1, [r6, #0]
 8002e0c:	0606      	lsls	r6, r0, #24
 8002e0e:	d501      	bpl.n	8002e14 <_printf_i+0xbc>
 8002e10:	681d      	ldr	r5, [r3, #0]
 8002e12:	e003      	b.n	8002e1c <_printf_i+0xc4>
 8002e14:	0645      	lsls	r5, r0, #25
 8002e16:	d5fb      	bpl.n	8002e10 <_printf_i+0xb8>
 8002e18:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002e1c:	2d00      	cmp	r5, #0
 8002e1e:	da03      	bge.n	8002e28 <_printf_i+0xd0>
 8002e20:	232d      	movs	r3, #45	@ 0x2d
 8002e22:	426d      	negs	r5, r5
 8002e24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002e28:	230a      	movs	r3, #10
 8002e2a:	4859      	ldr	r0, [pc, #356]	@ (8002f90 <_printf_i+0x238>)
 8002e2c:	e011      	b.n	8002e52 <_printf_i+0xfa>
 8002e2e:	6821      	ldr	r1, [r4, #0]
 8002e30:	6833      	ldr	r3, [r6, #0]
 8002e32:	0608      	lsls	r0, r1, #24
 8002e34:	f853 5b04 	ldr.w	r5, [r3], #4
 8002e38:	d402      	bmi.n	8002e40 <_printf_i+0xe8>
 8002e3a:	0649      	lsls	r1, r1, #25
 8002e3c:	bf48      	it	mi
 8002e3e:	b2ad      	uxthmi	r5, r5
 8002e40:	2f6f      	cmp	r7, #111	@ 0x6f
 8002e42:	6033      	str	r3, [r6, #0]
 8002e44:	bf14      	ite	ne
 8002e46:	230a      	movne	r3, #10
 8002e48:	2308      	moveq	r3, #8
 8002e4a:	4851      	ldr	r0, [pc, #324]	@ (8002f90 <_printf_i+0x238>)
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002e52:	6866      	ldr	r6, [r4, #4]
 8002e54:	2e00      	cmp	r6, #0
 8002e56:	bfa8      	it	ge
 8002e58:	6821      	ldrge	r1, [r4, #0]
 8002e5a:	60a6      	str	r6, [r4, #8]
 8002e5c:	bfa4      	itt	ge
 8002e5e:	f021 0104 	bicge.w	r1, r1, #4
 8002e62:	6021      	strge	r1, [r4, #0]
 8002e64:	b90d      	cbnz	r5, 8002e6a <_printf_i+0x112>
 8002e66:	2e00      	cmp	r6, #0
 8002e68:	d04b      	beq.n	8002f02 <_printf_i+0x1aa>
 8002e6a:	4616      	mov	r6, r2
 8002e6c:	fbb5 f1f3 	udiv	r1, r5, r3
 8002e70:	fb03 5711 	mls	r7, r3, r1, r5
 8002e74:	5dc7      	ldrb	r7, [r0, r7]
 8002e76:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002e7a:	462f      	mov	r7, r5
 8002e7c:	42bb      	cmp	r3, r7
 8002e7e:	460d      	mov	r5, r1
 8002e80:	d9f4      	bls.n	8002e6c <_printf_i+0x114>
 8002e82:	2b08      	cmp	r3, #8
 8002e84:	d10b      	bne.n	8002e9e <_printf_i+0x146>
 8002e86:	6823      	ldr	r3, [r4, #0]
 8002e88:	07df      	lsls	r7, r3, #31
 8002e8a:	d508      	bpl.n	8002e9e <_printf_i+0x146>
 8002e8c:	6923      	ldr	r3, [r4, #16]
 8002e8e:	6861      	ldr	r1, [r4, #4]
 8002e90:	4299      	cmp	r1, r3
 8002e92:	bfde      	ittt	le
 8002e94:	2330      	movle	r3, #48	@ 0x30
 8002e96:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002e9a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002e9e:	1b92      	subs	r2, r2, r6
 8002ea0:	6122      	str	r2, [r4, #16]
 8002ea2:	464b      	mov	r3, r9
 8002ea4:	4621      	mov	r1, r4
 8002ea6:	4640      	mov	r0, r8
 8002ea8:	f8cd a000 	str.w	sl, [sp]
 8002eac:	aa03      	add	r2, sp, #12
 8002eae:	f7ff fee1 	bl	8002c74 <_printf_common>
 8002eb2:	3001      	adds	r0, #1
 8002eb4:	d14a      	bne.n	8002f4c <_printf_i+0x1f4>
 8002eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8002eba:	b004      	add	sp, #16
 8002ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ec0:	6823      	ldr	r3, [r4, #0]
 8002ec2:	f043 0320 	orr.w	r3, r3, #32
 8002ec6:	6023      	str	r3, [r4, #0]
 8002ec8:	2778      	movs	r7, #120	@ 0x78
 8002eca:	4832      	ldr	r0, [pc, #200]	@ (8002f94 <_printf_i+0x23c>)
 8002ecc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002ed0:	6823      	ldr	r3, [r4, #0]
 8002ed2:	6831      	ldr	r1, [r6, #0]
 8002ed4:	061f      	lsls	r7, r3, #24
 8002ed6:	f851 5b04 	ldr.w	r5, [r1], #4
 8002eda:	d402      	bmi.n	8002ee2 <_printf_i+0x18a>
 8002edc:	065f      	lsls	r7, r3, #25
 8002ede:	bf48      	it	mi
 8002ee0:	b2ad      	uxthmi	r5, r5
 8002ee2:	6031      	str	r1, [r6, #0]
 8002ee4:	07d9      	lsls	r1, r3, #31
 8002ee6:	bf44      	itt	mi
 8002ee8:	f043 0320 	orrmi.w	r3, r3, #32
 8002eec:	6023      	strmi	r3, [r4, #0]
 8002eee:	b11d      	cbz	r5, 8002ef8 <_printf_i+0x1a0>
 8002ef0:	2310      	movs	r3, #16
 8002ef2:	e7ab      	b.n	8002e4c <_printf_i+0xf4>
 8002ef4:	4826      	ldr	r0, [pc, #152]	@ (8002f90 <_printf_i+0x238>)
 8002ef6:	e7e9      	b.n	8002ecc <_printf_i+0x174>
 8002ef8:	6823      	ldr	r3, [r4, #0]
 8002efa:	f023 0320 	bic.w	r3, r3, #32
 8002efe:	6023      	str	r3, [r4, #0]
 8002f00:	e7f6      	b.n	8002ef0 <_printf_i+0x198>
 8002f02:	4616      	mov	r6, r2
 8002f04:	e7bd      	b.n	8002e82 <_printf_i+0x12a>
 8002f06:	6833      	ldr	r3, [r6, #0]
 8002f08:	6825      	ldr	r5, [r4, #0]
 8002f0a:	1d18      	adds	r0, r3, #4
 8002f0c:	6961      	ldr	r1, [r4, #20]
 8002f0e:	6030      	str	r0, [r6, #0]
 8002f10:	062e      	lsls	r6, r5, #24
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	d501      	bpl.n	8002f1a <_printf_i+0x1c2>
 8002f16:	6019      	str	r1, [r3, #0]
 8002f18:	e002      	b.n	8002f20 <_printf_i+0x1c8>
 8002f1a:	0668      	lsls	r0, r5, #25
 8002f1c:	d5fb      	bpl.n	8002f16 <_printf_i+0x1be>
 8002f1e:	8019      	strh	r1, [r3, #0]
 8002f20:	2300      	movs	r3, #0
 8002f22:	4616      	mov	r6, r2
 8002f24:	6123      	str	r3, [r4, #16]
 8002f26:	e7bc      	b.n	8002ea2 <_printf_i+0x14a>
 8002f28:	6833      	ldr	r3, [r6, #0]
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	1d1a      	adds	r2, r3, #4
 8002f2e:	6032      	str	r2, [r6, #0]
 8002f30:	681e      	ldr	r6, [r3, #0]
 8002f32:	6862      	ldr	r2, [r4, #4]
 8002f34:	4630      	mov	r0, r6
 8002f36:	f000 f859 	bl	8002fec <memchr>
 8002f3a:	b108      	cbz	r0, 8002f40 <_printf_i+0x1e8>
 8002f3c:	1b80      	subs	r0, r0, r6
 8002f3e:	6060      	str	r0, [r4, #4]
 8002f40:	6863      	ldr	r3, [r4, #4]
 8002f42:	6123      	str	r3, [r4, #16]
 8002f44:	2300      	movs	r3, #0
 8002f46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002f4a:	e7aa      	b.n	8002ea2 <_printf_i+0x14a>
 8002f4c:	4632      	mov	r2, r6
 8002f4e:	4649      	mov	r1, r9
 8002f50:	4640      	mov	r0, r8
 8002f52:	6923      	ldr	r3, [r4, #16]
 8002f54:	47d0      	blx	sl
 8002f56:	3001      	adds	r0, #1
 8002f58:	d0ad      	beq.n	8002eb6 <_printf_i+0x15e>
 8002f5a:	6823      	ldr	r3, [r4, #0]
 8002f5c:	079b      	lsls	r3, r3, #30
 8002f5e:	d413      	bmi.n	8002f88 <_printf_i+0x230>
 8002f60:	68e0      	ldr	r0, [r4, #12]
 8002f62:	9b03      	ldr	r3, [sp, #12]
 8002f64:	4298      	cmp	r0, r3
 8002f66:	bfb8      	it	lt
 8002f68:	4618      	movlt	r0, r3
 8002f6a:	e7a6      	b.n	8002eba <_printf_i+0x162>
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	4632      	mov	r2, r6
 8002f70:	4649      	mov	r1, r9
 8002f72:	4640      	mov	r0, r8
 8002f74:	47d0      	blx	sl
 8002f76:	3001      	adds	r0, #1
 8002f78:	d09d      	beq.n	8002eb6 <_printf_i+0x15e>
 8002f7a:	3501      	adds	r5, #1
 8002f7c:	68e3      	ldr	r3, [r4, #12]
 8002f7e:	9903      	ldr	r1, [sp, #12]
 8002f80:	1a5b      	subs	r3, r3, r1
 8002f82:	42ab      	cmp	r3, r5
 8002f84:	dcf2      	bgt.n	8002f6c <_printf_i+0x214>
 8002f86:	e7eb      	b.n	8002f60 <_printf_i+0x208>
 8002f88:	2500      	movs	r5, #0
 8002f8a:	f104 0619 	add.w	r6, r4, #25
 8002f8e:	e7f5      	b.n	8002f7c <_printf_i+0x224>
 8002f90:	080030fb 	.word	0x080030fb
 8002f94:	0800310c 	.word	0x0800310c

08002f98 <memmove>:
 8002f98:	4288      	cmp	r0, r1
 8002f9a:	b510      	push	{r4, lr}
 8002f9c:	eb01 0402 	add.w	r4, r1, r2
 8002fa0:	d902      	bls.n	8002fa8 <memmove+0x10>
 8002fa2:	4284      	cmp	r4, r0
 8002fa4:	4623      	mov	r3, r4
 8002fa6:	d807      	bhi.n	8002fb8 <memmove+0x20>
 8002fa8:	1e43      	subs	r3, r0, #1
 8002faa:	42a1      	cmp	r1, r4
 8002fac:	d008      	beq.n	8002fc0 <memmove+0x28>
 8002fae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002fb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002fb6:	e7f8      	b.n	8002faa <memmove+0x12>
 8002fb8:	4601      	mov	r1, r0
 8002fba:	4402      	add	r2, r0
 8002fbc:	428a      	cmp	r2, r1
 8002fbe:	d100      	bne.n	8002fc2 <memmove+0x2a>
 8002fc0:	bd10      	pop	{r4, pc}
 8002fc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002fc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002fca:	e7f7      	b.n	8002fbc <memmove+0x24>

08002fcc <_sbrk_r>:
 8002fcc:	b538      	push	{r3, r4, r5, lr}
 8002fce:	2300      	movs	r3, #0
 8002fd0:	4d05      	ldr	r5, [pc, #20]	@ (8002fe8 <_sbrk_r+0x1c>)
 8002fd2:	4604      	mov	r4, r0
 8002fd4:	4608      	mov	r0, r1
 8002fd6:	602b      	str	r3, [r5, #0]
 8002fd8:	f7fd fbf4 	bl	80007c4 <_sbrk>
 8002fdc:	1c43      	adds	r3, r0, #1
 8002fde:	d102      	bne.n	8002fe6 <_sbrk_r+0x1a>
 8002fe0:	682b      	ldr	r3, [r5, #0]
 8002fe2:	b103      	cbz	r3, 8002fe6 <_sbrk_r+0x1a>
 8002fe4:	6023      	str	r3, [r4, #0]
 8002fe6:	bd38      	pop	{r3, r4, r5, pc}
 8002fe8:	20000358 	.word	0x20000358

08002fec <memchr>:
 8002fec:	4603      	mov	r3, r0
 8002fee:	b510      	push	{r4, lr}
 8002ff0:	b2c9      	uxtb	r1, r1
 8002ff2:	4402      	add	r2, r0
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	d101      	bne.n	8002ffe <memchr+0x12>
 8002ffa:	2000      	movs	r0, #0
 8002ffc:	e003      	b.n	8003006 <memchr+0x1a>
 8002ffe:	7804      	ldrb	r4, [r0, #0]
 8003000:	3301      	adds	r3, #1
 8003002:	428c      	cmp	r4, r1
 8003004:	d1f6      	bne.n	8002ff4 <memchr+0x8>
 8003006:	bd10      	pop	{r4, pc}

08003008 <memcpy>:
 8003008:	440a      	add	r2, r1
 800300a:	4291      	cmp	r1, r2
 800300c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003010:	d100      	bne.n	8003014 <memcpy+0xc>
 8003012:	4770      	bx	lr
 8003014:	b510      	push	{r4, lr}
 8003016:	f811 4b01 	ldrb.w	r4, [r1], #1
 800301a:	4291      	cmp	r1, r2
 800301c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003020:	d1f9      	bne.n	8003016 <memcpy+0xe>
 8003022:	bd10      	pop	{r4, pc}

08003024 <_realloc_r>:
 8003024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003028:	4680      	mov	r8, r0
 800302a:	4615      	mov	r5, r2
 800302c:	460c      	mov	r4, r1
 800302e:	b921      	cbnz	r1, 800303a <_realloc_r+0x16>
 8003030:	4611      	mov	r1, r2
 8003032:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003036:	f7ff bc39 	b.w	80028ac <_malloc_r>
 800303a:	b92a      	cbnz	r2, 8003048 <_realloc_r+0x24>
 800303c:	f7ff fbcc 	bl	80027d8 <_free_r>
 8003040:	2400      	movs	r4, #0
 8003042:	4620      	mov	r0, r4
 8003044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003048:	f000 f81a 	bl	8003080 <_malloc_usable_size_r>
 800304c:	4285      	cmp	r5, r0
 800304e:	4606      	mov	r6, r0
 8003050:	d802      	bhi.n	8003058 <_realloc_r+0x34>
 8003052:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003056:	d8f4      	bhi.n	8003042 <_realloc_r+0x1e>
 8003058:	4629      	mov	r1, r5
 800305a:	4640      	mov	r0, r8
 800305c:	f7ff fc26 	bl	80028ac <_malloc_r>
 8003060:	4607      	mov	r7, r0
 8003062:	2800      	cmp	r0, #0
 8003064:	d0ec      	beq.n	8003040 <_realloc_r+0x1c>
 8003066:	42b5      	cmp	r5, r6
 8003068:	462a      	mov	r2, r5
 800306a:	4621      	mov	r1, r4
 800306c:	bf28      	it	cs
 800306e:	4632      	movcs	r2, r6
 8003070:	f7ff ffca 	bl	8003008 <memcpy>
 8003074:	4621      	mov	r1, r4
 8003076:	4640      	mov	r0, r8
 8003078:	f7ff fbae 	bl	80027d8 <_free_r>
 800307c:	463c      	mov	r4, r7
 800307e:	e7e0      	b.n	8003042 <_realloc_r+0x1e>

08003080 <_malloc_usable_size_r>:
 8003080:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003084:	1f18      	subs	r0, r3, #4
 8003086:	2b00      	cmp	r3, #0
 8003088:	bfbc      	itt	lt
 800308a:	580b      	ldrlt	r3, [r1, r0]
 800308c:	18c0      	addlt	r0, r0, r3
 800308e:	4770      	bx	lr

08003090 <_init>:
 8003090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003092:	bf00      	nop
 8003094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003096:	bc08      	pop	{r3}
 8003098:	469e      	mov	lr, r3
 800309a:	4770      	bx	lr

0800309c <_fini>:
 800309c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800309e:	bf00      	nop
 80030a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030a2:	bc08      	pop	{r3}
 80030a4:	469e      	mov	lr, r3
 80030a6:	4770      	bx	lr
