
009_TIMER_EXAMPLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021b4  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800238c  0800238c  0000338c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800239c  0800239c  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  0800239c  0800239c  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800239c  0800239c  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800239c  0800239c  0000339c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080023a0  080023a0  000033a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080023a4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000000c  080023b0  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  080023b0  000040c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aba6  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000197d  00000000  00000000  0000ebe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf8  00000000  00000000  00010560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000939  00000000  00000000  00011158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002486e  00000000  00000000  00011a91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c17f  00000000  00000000  000362ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f10df  00000000  00000000  0004247e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013355d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003230  00000000  00000000  001335a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001367d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002374 	.word	0x08002374

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08002374 	.word	0x08002374

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 fa15 	bl	800064a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f80e 	bl	8000240 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 f8d4 	bl	80003d0 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000228:	f000 f856 	bl	80002d8 <MX_TIM1_Init>
  MX_TIM16_Init();
 800022c:	f000 f8a8 	bl	8000380 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim16);
 8000230:	4802      	ldr	r0, [pc, #8]	@ (800023c <main+0x24>)
 8000232:	f001 fb41 	bl	80018b8 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000236:	bf00      	nop
 8000238:	e7fd      	b.n	8000236 <main+0x1e>
 800023a:	bf00      	nop
 800023c:	20000074 	.word	0x20000074

08000240 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b094      	sub	sp, #80	@ 0x50
 8000244:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000246:	f107 0318 	add.w	r3, r7, #24
 800024a:	2238      	movs	r2, #56	@ 0x38
 800024c:	2100      	movs	r1, #0
 800024e:	4618      	mov	r0, r3
 8000250:	f002 f864 	bl	800231c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000254:	1d3b      	adds	r3, r7, #4
 8000256:	2200      	movs	r2, #0
 8000258:	601a      	str	r2, [r3, #0]
 800025a:	605a      	str	r2, [r3, #4]
 800025c:	609a      	str	r2, [r3, #8]
 800025e:	60da      	str	r2, [r3, #12]
 8000260:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000262:	2000      	movs	r0, #0
 8000264:	f000 fd26 	bl	8000cb4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000268:	2302      	movs	r3, #2
 800026a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800026c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000270:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000272:	2340      	movs	r3, #64	@ 0x40
 8000274:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000276:	2302      	movs	r3, #2
 8000278:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800027a:	2302      	movs	r3, #2
 800027c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800027e:	2304      	movs	r3, #4
 8000280:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000282:	2355      	movs	r3, #85	@ 0x55
 8000284:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000286:	2302      	movs	r3, #2
 8000288:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800028a:	2302      	movs	r3, #2
 800028c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800028e:	2302      	movs	r3, #2
 8000290:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000292:	f107 0318 	add.w	r3, r7, #24
 8000296:	4618      	mov	r0, r3
 8000298:	f000 fdc0 	bl	8000e1c <HAL_RCC_OscConfig>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d001      	beq.n	80002a6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002a2:	f000 f8ec 	bl	800047e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a6:	230f      	movs	r3, #15
 80002a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002aa:	2303      	movs	r3, #3
 80002ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ae:	2300      	movs	r3, #0
 80002b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002b2:	2300      	movs	r3, #0
 80002b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b6:	2300      	movs	r3, #0
 80002b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80002ba:	1d3b      	adds	r3, r7, #4
 80002bc:	2104      	movs	r1, #4
 80002be:	4618      	mov	r0, r3
 80002c0:	f001 f8be 	bl	8001440 <HAL_RCC_ClockConfig>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80002ca:	f000 f8d8 	bl	800047e <Error_Handler>
  }
}
 80002ce:	bf00      	nop
 80002d0:	3750      	adds	r7, #80	@ 0x50
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
	...

080002d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b088      	sub	sp, #32
 80002dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002de:	f107 0310 	add.w	r3, r7, #16
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
 80002ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002ec:	1d3b      	adds	r3, r7, #4
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	605a      	str	r2, [r3, #4]
 80002f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80002f6:	4b20      	ldr	r3, [pc, #128]	@ (8000378 <MX_TIM1_Init+0xa0>)
 80002f8:	4a20      	ldr	r2, [pc, #128]	@ (800037c <MX_TIM1_Init+0xa4>)
 80002fa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 17000-1;
 80002fc:	4b1e      	ldr	r3, [pc, #120]	@ (8000378 <MX_TIM1_Init+0xa0>)
 80002fe:	f244 2267 	movw	r2, #16999	@ 0x4267
 8000302:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000304:	4b1c      	ldr	r3, [pc, #112]	@ (8000378 <MX_TIM1_Init+0xa0>)
 8000306:	2200      	movs	r2, #0
 8000308:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 800030a:	4b1b      	ldr	r3, [pc, #108]	@ (8000378 <MX_TIM1_Init+0xa0>)
 800030c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000310:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000312:	4b19      	ldr	r3, [pc, #100]	@ (8000378 <MX_TIM1_Init+0xa0>)
 8000314:	2200      	movs	r2, #0
 8000316:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000318:	4b17      	ldr	r3, [pc, #92]	@ (8000378 <MX_TIM1_Init+0xa0>)
 800031a:	2200      	movs	r2, #0
 800031c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800031e:	4b16      	ldr	r3, [pc, #88]	@ (8000378 <MX_TIM1_Init+0xa0>)
 8000320:	2200      	movs	r2, #0
 8000322:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000324:	4814      	ldr	r0, [pc, #80]	@ (8000378 <MX_TIM1_Init+0xa0>)
 8000326:	f001 fa6f 	bl	8001808 <HAL_TIM_Base_Init>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d001      	beq.n	8000334 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000330:	f000 f8a5 	bl	800047e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000334:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000338:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800033a:	f107 0310 	add.w	r3, r7, #16
 800033e:	4619      	mov	r1, r3
 8000340:	480d      	ldr	r0, [pc, #52]	@ (8000378 <MX_TIM1_Init+0xa0>)
 8000342:	f001 fc81 	bl	8001c48 <HAL_TIM_ConfigClockSource>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800034c:	f000 f897 	bl	800047e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000350:	2300      	movs	r3, #0
 8000352:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000354:	2300      	movs	r3, #0
 8000356:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000358:	2300      	movs	r3, #0
 800035a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800035c:	1d3b      	adds	r3, r7, #4
 800035e:	4619      	mov	r1, r3
 8000360:	4805      	ldr	r0, [pc, #20]	@ (8000378 <MX_TIM1_Init+0xa0>)
 8000362:	f001 feff 	bl	8002164 <HAL_TIMEx_MasterConfigSynchronization>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800036c:	f000 f887 	bl	800047e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000370:	bf00      	nop
 8000372:	3720      	adds	r7, #32
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}
 8000378:	20000028 	.word	0x20000028
 800037c:	40012c00 	.word	0x40012c00

08000380 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000384:	4b10      	ldr	r3, [pc, #64]	@ (80003c8 <MX_TIM16_Init+0x48>)
 8000386:	4a11      	ldr	r2, [pc, #68]	@ (80003cc <MX_TIM16_Init+0x4c>)
 8000388:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 17000-1;
 800038a:	4b0f      	ldr	r3, [pc, #60]	@ (80003c8 <MX_TIM16_Init+0x48>)
 800038c:	f244 2267 	movw	r2, #16999	@ 0x4267
 8000390:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000392:	4b0d      	ldr	r3, [pc, #52]	@ (80003c8 <MX_TIM16_Init+0x48>)
 8000394:	2200      	movs	r2, #0
 8000396:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 9999;
 8000398:	4b0b      	ldr	r3, [pc, #44]	@ (80003c8 <MX_TIM16_Init+0x48>)
 800039a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800039e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003a0:	4b09      	ldr	r3, [pc, #36]	@ (80003c8 <MX_TIM16_Init+0x48>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80003a6:	4b08      	ldr	r3, [pc, #32]	@ (80003c8 <MX_TIM16_Init+0x48>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003ac:	4b06      	ldr	r3, [pc, #24]	@ (80003c8 <MX_TIM16_Init+0x48>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80003b2:	4805      	ldr	r0, [pc, #20]	@ (80003c8 <MX_TIM16_Init+0x48>)
 80003b4:	f001 fa28 	bl	8001808 <HAL_TIM_Base_Init>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80003be:	f000 f85e 	bl	800047e <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80003c2:	bf00      	nop
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	20000074 	.word	0x20000074
 80003cc:	40014400 	.word	0x40014400

080003d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b088      	sub	sp, #32
 80003d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003d6:	f107 030c 	add.w	r3, r7, #12
 80003da:	2200      	movs	r2, #0
 80003dc:	601a      	str	r2, [r3, #0]
 80003de:	605a      	str	r2, [r3, #4]
 80003e0:	609a      	str	r2, [r3, #8]
 80003e2:	60da      	str	r2, [r3, #12]
 80003e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003e6:	4b1e      	ldr	r3, [pc, #120]	@ (8000460 <MX_GPIO_Init+0x90>)
 80003e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003ea:	4a1d      	ldr	r2, [pc, #116]	@ (8000460 <MX_GPIO_Init+0x90>)
 80003ec:	f043 0304 	orr.w	r3, r3, #4
 80003f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003f2:	4b1b      	ldr	r3, [pc, #108]	@ (8000460 <MX_GPIO_Init+0x90>)
 80003f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003f6:	f003 0304 	and.w	r3, r3, #4
 80003fa:	60bb      	str	r3, [r7, #8]
 80003fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003fe:	4b18      	ldr	r3, [pc, #96]	@ (8000460 <MX_GPIO_Init+0x90>)
 8000400:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000402:	4a17      	ldr	r2, [pc, #92]	@ (8000460 <MX_GPIO_Init+0x90>)
 8000404:	f043 0320 	orr.w	r3, r3, #32
 8000408:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800040a:	4b15      	ldr	r3, [pc, #84]	@ (8000460 <MX_GPIO_Init+0x90>)
 800040c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800040e:	f003 0320 	and.w	r3, r3, #32
 8000412:	607b      	str	r3, [r7, #4]
 8000414:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000416:	4b12      	ldr	r3, [pc, #72]	@ (8000460 <MX_GPIO_Init+0x90>)
 8000418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800041a:	4a11      	ldr	r2, [pc, #68]	@ (8000460 <MX_GPIO_Init+0x90>)
 800041c:	f043 0301 	orr.w	r3, r3, #1
 8000420:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000422:	4b0f      	ldr	r3, [pc, #60]	@ (8000460 <MX_GPIO_Init+0x90>)
 8000424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000426:	f003 0301 	and.w	r3, r3, #1
 800042a:	603b      	str	r3, [r7, #0]
 800042c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800042e:	2200      	movs	r2, #0
 8000430:	2120      	movs	r1, #32
 8000432:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000436:	f000 fc0b 	bl	8000c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800043a:	2320      	movs	r3, #32
 800043c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800043e:	2301      	movs	r3, #1
 8000440:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000442:	2300      	movs	r3, #0
 8000444:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000446:	2300      	movs	r3, #0
 8000448:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800044a:	f107 030c 	add.w	r3, r7, #12
 800044e:	4619      	mov	r1, r3
 8000450:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000454:	f000 fa7a 	bl	800094c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000458:	bf00      	nop
 800045a:	3720      	adds	r7, #32
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}
 8000460:	40021000 	.word	0x40021000

08000464 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
HAL_GPIO_TogglePin(GPIOA, LED_Pin);
 800046c:	2120      	movs	r1, #32
 800046e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000472:	f000 fc05 	bl	8000c80 <HAL_GPIO_TogglePin>
}
 8000476:	bf00      	nop
 8000478:	3708      	adds	r7, #8
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}

0800047e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800047e:	b480      	push	{r7}
 8000480:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000482:	b672      	cpsid	i
}
 8000484:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000486:	bf00      	nop
 8000488:	e7fd      	b.n	8000486 <Error_Handler+0x8>
	...

0800048c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000492:	4b0f      	ldr	r3, [pc, #60]	@ (80004d0 <HAL_MspInit+0x44>)
 8000494:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000496:	4a0e      	ldr	r2, [pc, #56]	@ (80004d0 <HAL_MspInit+0x44>)
 8000498:	f043 0301 	orr.w	r3, r3, #1
 800049c:	6613      	str	r3, [r2, #96]	@ 0x60
 800049e:	4b0c      	ldr	r3, [pc, #48]	@ (80004d0 <HAL_MspInit+0x44>)
 80004a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80004a2:	f003 0301 	and.w	r3, r3, #1
 80004a6:	607b      	str	r3, [r7, #4]
 80004a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004aa:	4b09      	ldr	r3, [pc, #36]	@ (80004d0 <HAL_MspInit+0x44>)
 80004ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80004ae:	4a08      	ldr	r2, [pc, #32]	@ (80004d0 <HAL_MspInit+0x44>)
 80004b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80004b6:	4b06      	ldr	r3, [pc, #24]	@ (80004d0 <HAL_MspInit+0x44>)
 80004b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80004ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004be:	603b      	str	r3, [r7, #0]
 80004c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80004c2:	f000 fc9b 	bl	8000dfc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004c6:	bf00      	nop
 80004c8:	3708      	adds	r7, #8
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	40021000 	.word	0x40021000

080004d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b084      	sub	sp, #16
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a1a      	ldr	r2, [pc, #104]	@ (800054c <HAL_TIM_Base_MspInit+0x78>)
 80004e2:	4293      	cmp	r3, r2
 80004e4:	d114      	bne.n	8000510 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80004e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000550 <HAL_TIM_Base_MspInit+0x7c>)
 80004e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80004ea:	4a19      	ldr	r2, [pc, #100]	@ (8000550 <HAL_TIM_Base_MspInit+0x7c>)
 80004ec:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80004f0:	6613      	str	r3, [r2, #96]	@ 0x60
 80004f2:	4b17      	ldr	r3, [pc, #92]	@ (8000550 <HAL_TIM_Base_MspInit+0x7c>)
 80004f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80004f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80004fa:	60fb      	str	r3, [r7, #12]
 80004fc:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80004fe:	2200      	movs	r2, #0
 8000500:	2100      	movs	r1, #0
 8000502:	2019      	movs	r0, #25
 8000504:	f000 f9ed 	bl	80008e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000508:	2019      	movs	r0, #25
 800050a:	f000 fa04 	bl	8000916 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800050e:	e018      	b.n	8000542 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM16)
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a0f      	ldr	r2, [pc, #60]	@ (8000554 <HAL_TIM_Base_MspInit+0x80>)
 8000516:	4293      	cmp	r3, r2
 8000518:	d113      	bne.n	8000542 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800051a:	4b0d      	ldr	r3, [pc, #52]	@ (8000550 <HAL_TIM_Base_MspInit+0x7c>)
 800051c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800051e:	4a0c      	ldr	r2, [pc, #48]	@ (8000550 <HAL_TIM_Base_MspInit+0x7c>)
 8000520:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000524:	6613      	str	r3, [r2, #96]	@ 0x60
 8000526:	4b0a      	ldr	r3, [pc, #40]	@ (8000550 <HAL_TIM_Base_MspInit+0x7c>)
 8000528:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800052a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800052e:	60bb      	str	r3, [r7, #8]
 8000530:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000532:	2200      	movs	r2, #0
 8000534:	2100      	movs	r1, #0
 8000536:	2019      	movs	r0, #25
 8000538:	f000 f9d3 	bl	80008e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800053c:	2019      	movs	r0, #25
 800053e:	f000 f9ea 	bl	8000916 <HAL_NVIC_EnableIRQ>
}
 8000542:	bf00      	nop
 8000544:	3710      	adds	r7, #16
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	40012c00 	.word	0x40012c00
 8000550:	40021000 	.word	0x40021000
 8000554:	40014400 	.word	0x40014400

08000558 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800055c:	bf00      	nop
 800055e:	e7fd      	b.n	800055c <NMI_Handler+0x4>

08000560 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000564:	bf00      	nop
 8000566:	e7fd      	b.n	8000564 <HardFault_Handler+0x4>

08000568 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800056c:	bf00      	nop
 800056e:	e7fd      	b.n	800056c <MemManage_Handler+0x4>

08000570 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000574:	bf00      	nop
 8000576:	e7fd      	b.n	8000574 <BusFault_Handler+0x4>

08000578 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800057c:	bf00      	nop
 800057e:	e7fd      	b.n	800057c <UsageFault_Handler+0x4>

08000580 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000584:	bf00      	nop
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr

0800058e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800058e:	b480      	push	{r7}
 8000590:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000592:	bf00      	nop
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr

0800059c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005a0:	bf00      	nop
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr

080005aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005aa:	b580      	push	{r7, lr}
 80005ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005ae:	f000 f89f 	bl	80006f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
	...

080005b8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80005bc:	4803      	ldr	r0, [pc, #12]	@ (80005cc <TIM1_UP_TIM16_IRQHandler+0x14>)
 80005be:	f001 f9f3 	bl	80019a8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80005c2:	4803      	ldr	r0, [pc, #12]	@ (80005d0 <TIM1_UP_TIM16_IRQHandler+0x18>)
 80005c4:	f001 f9f0 	bl	80019a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80005c8:	bf00      	nop
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	20000028 	.word	0x20000028
 80005d0:	20000074 	.word	0x20000074

080005d4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d8:	4b06      	ldr	r3, [pc, #24]	@ (80005f4 <SystemInit+0x20>)
 80005da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005de:	4a05      	ldr	r2, [pc, #20]	@ (80005f4 <SystemInit+0x20>)
 80005e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005e8:	bf00      	nop
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	e000ed00 	.word	0xe000ed00

080005f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005f8:	480d      	ldr	r0, [pc, #52]	@ (8000630 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005fa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005fc:	f7ff ffea 	bl	80005d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000600:	480c      	ldr	r0, [pc, #48]	@ (8000634 <LoopForever+0x6>)
  ldr r1, =_edata
 8000602:	490d      	ldr	r1, [pc, #52]	@ (8000638 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000604:	4a0d      	ldr	r2, [pc, #52]	@ (800063c <LoopForever+0xe>)
  movs r3, #0
 8000606:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000608:	e002      	b.n	8000610 <LoopCopyDataInit>

0800060a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800060a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800060c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800060e:	3304      	adds	r3, #4

08000610 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000610:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000612:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000614:	d3f9      	bcc.n	800060a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000616:	4a0a      	ldr	r2, [pc, #40]	@ (8000640 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000618:	4c0a      	ldr	r4, [pc, #40]	@ (8000644 <LoopForever+0x16>)
  movs r3, #0
 800061a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800061c:	e001      	b.n	8000622 <LoopFillZerobss>

0800061e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800061e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000620:	3204      	adds	r2, #4

08000622 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000622:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000624:	d3fb      	bcc.n	800061e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000626:	f001 fe81 	bl	800232c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800062a:	f7ff fdf5 	bl	8000218 <main>

0800062e <LoopForever>:

LoopForever:
    b LoopForever
 800062e:	e7fe      	b.n	800062e <LoopForever>
  ldr   r0, =_estack
 8000630:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000634:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000638:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800063c:	080023a4 	.word	0x080023a4
  ldr r2, =_sbss
 8000640:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000644:	200000c4 	.word	0x200000c4

08000648 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000648:	e7fe      	b.n	8000648 <ADC1_2_IRQHandler>

0800064a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800064a:	b580      	push	{r7, lr}
 800064c:	b082      	sub	sp, #8
 800064e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000650:	2300      	movs	r3, #0
 8000652:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000654:	2003      	movs	r0, #3
 8000656:	f000 f939 	bl	80008cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800065a:	2000      	movs	r0, #0
 800065c:	f000 f80e 	bl	800067c <HAL_InitTick>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d002      	beq.n	800066c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000666:	2301      	movs	r3, #1
 8000668:	71fb      	strb	r3, [r7, #7]
 800066a:	e001      	b.n	8000670 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800066c:	f7ff ff0e 	bl	800048c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000670:	79fb      	ldrb	r3, [r7, #7]

}
 8000672:	4618      	mov	r0, r3
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
	...

0800067c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000684:	2300      	movs	r3, #0
 8000686:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000688:	4b16      	ldr	r3, [pc, #88]	@ (80006e4 <HAL_InitTick+0x68>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d022      	beq.n	80006d6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000690:	4b15      	ldr	r3, [pc, #84]	@ (80006e8 <HAL_InitTick+0x6c>)
 8000692:	681a      	ldr	r2, [r3, #0]
 8000694:	4b13      	ldr	r3, [pc, #76]	@ (80006e4 <HAL_InitTick+0x68>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800069c:	fbb1 f3f3 	udiv	r3, r1, r3
 80006a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80006a4:	4618      	mov	r0, r3
 80006a6:	f000 f944 	bl	8000932 <HAL_SYSTICK_Config>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d10f      	bne.n	80006d0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	2b0f      	cmp	r3, #15
 80006b4:	d809      	bhi.n	80006ca <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006b6:	2200      	movs	r2, #0
 80006b8:	6879      	ldr	r1, [r7, #4]
 80006ba:	f04f 30ff 	mov.w	r0, #4294967295
 80006be:	f000 f910 	bl	80008e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006c2:	4a0a      	ldr	r2, [pc, #40]	@ (80006ec <HAL_InitTick+0x70>)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	6013      	str	r3, [r2, #0]
 80006c8:	e007      	b.n	80006da <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80006ca:	2301      	movs	r3, #1
 80006cc:	73fb      	strb	r3, [r7, #15]
 80006ce:	e004      	b.n	80006da <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006d0:	2301      	movs	r3, #1
 80006d2:	73fb      	strb	r3, [r7, #15]
 80006d4:	e001      	b.n	80006da <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006d6:	2301      	movs	r3, #1
 80006d8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80006da:	7bfb      	ldrb	r3, [r7, #15]
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3710      	adds	r7, #16
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000008 	.word	0x20000008
 80006e8:	20000000 	.word	0x20000000
 80006ec:	20000004 	.word	0x20000004

080006f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006f4:	4b05      	ldr	r3, [pc, #20]	@ (800070c <HAL_IncTick+0x1c>)
 80006f6:	681a      	ldr	r2, [r3, #0]
 80006f8:	4b05      	ldr	r3, [pc, #20]	@ (8000710 <HAL_IncTick+0x20>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4413      	add	r3, r2
 80006fe:	4a03      	ldr	r2, [pc, #12]	@ (800070c <HAL_IncTick+0x1c>)
 8000700:	6013      	str	r3, [r2, #0]
}
 8000702:	bf00      	nop
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr
 800070c:	200000c0 	.word	0x200000c0
 8000710:	20000008 	.word	0x20000008

08000714 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  return uwTick;
 8000718:	4b03      	ldr	r3, [pc, #12]	@ (8000728 <HAL_GetTick+0x14>)
 800071a:	681b      	ldr	r3, [r3, #0]
}
 800071c:	4618      	mov	r0, r3
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	200000c0 	.word	0x200000c0

0800072c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800072c:	b480      	push	{r7}
 800072e:	b085      	sub	sp, #20
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	f003 0307 	and.w	r3, r3, #7
 800073a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800073c:	4b0c      	ldr	r3, [pc, #48]	@ (8000770 <__NVIC_SetPriorityGrouping+0x44>)
 800073e:	68db      	ldr	r3, [r3, #12]
 8000740:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000742:	68ba      	ldr	r2, [r7, #8]
 8000744:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000748:	4013      	ands	r3, r2
 800074a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000754:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000758:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800075c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800075e:	4a04      	ldr	r2, [pc, #16]	@ (8000770 <__NVIC_SetPriorityGrouping+0x44>)
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	60d3      	str	r3, [r2, #12]
}
 8000764:	bf00      	nop
 8000766:	3714      	adds	r7, #20
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr
 8000770:	e000ed00 	.word	0xe000ed00

08000774 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000778:	4b04      	ldr	r3, [pc, #16]	@ (800078c <__NVIC_GetPriorityGrouping+0x18>)
 800077a:	68db      	ldr	r3, [r3, #12]
 800077c:	0a1b      	lsrs	r3, r3, #8
 800077e:	f003 0307 	and.w	r3, r3, #7
}
 8000782:	4618      	mov	r0, r3
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	e000ed00 	.word	0xe000ed00

08000790 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800079a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	db0b      	blt.n	80007ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	f003 021f 	and.w	r2, r3, #31
 80007a8:	4907      	ldr	r1, [pc, #28]	@ (80007c8 <__NVIC_EnableIRQ+0x38>)
 80007aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ae:	095b      	lsrs	r3, r3, #5
 80007b0:	2001      	movs	r0, #1
 80007b2:	fa00 f202 	lsl.w	r2, r0, r2
 80007b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80007ba:	bf00      	nop
 80007bc:	370c      	adds	r7, #12
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	e000e100 	.word	0xe000e100

080007cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	6039      	str	r1, [r7, #0]
 80007d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	db0a      	blt.n	80007f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	b2da      	uxtb	r2, r3
 80007e4:	490c      	ldr	r1, [pc, #48]	@ (8000818 <__NVIC_SetPriority+0x4c>)
 80007e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ea:	0112      	lsls	r2, r2, #4
 80007ec:	b2d2      	uxtb	r2, r2
 80007ee:	440b      	add	r3, r1
 80007f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007f4:	e00a      	b.n	800080c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	b2da      	uxtb	r2, r3
 80007fa:	4908      	ldr	r1, [pc, #32]	@ (800081c <__NVIC_SetPriority+0x50>)
 80007fc:	79fb      	ldrb	r3, [r7, #7]
 80007fe:	f003 030f 	and.w	r3, r3, #15
 8000802:	3b04      	subs	r3, #4
 8000804:	0112      	lsls	r2, r2, #4
 8000806:	b2d2      	uxtb	r2, r2
 8000808:	440b      	add	r3, r1
 800080a:	761a      	strb	r2, [r3, #24]
}
 800080c:	bf00      	nop
 800080e:	370c      	adds	r7, #12
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr
 8000818:	e000e100 	.word	0xe000e100
 800081c:	e000ed00 	.word	0xe000ed00

08000820 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000820:	b480      	push	{r7}
 8000822:	b089      	sub	sp, #36	@ 0x24
 8000824:	af00      	add	r7, sp, #0
 8000826:	60f8      	str	r0, [r7, #12]
 8000828:	60b9      	str	r1, [r7, #8]
 800082a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	f003 0307 	and.w	r3, r3, #7
 8000832:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000834:	69fb      	ldr	r3, [r7, #28]
 8000836:	f1c3 0307 	rsb	r3, r3, #7
 800083a:	2b04      	cmp	r3, #4
 800083c:	bf28      	it	cs
 800083e:	2304      	movcs	r3, #4
 8000840:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000842:	69fb      	ldr	r3, [r7, #28]
 8000844:	3304      	adds	r3, #4
 8000846:	2b06      	cmp	r3, #6
 8000848:	d902      	bls.n	8000850 <NVIC_EncodePriority+0x30>
 800084a:	69fb      	ldr	r3, [r7, #28]
 800084c:	3b03      	subs	r3, #3
 800084e:	e000      	b.n	8000852 <NVIC_EncodePriority+0x32>
 8000850:	2300      	movs	r3, #0
 8000852:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000854:	f04f 32ff 	mov.w	r2, #4294967295
 8000858:	69bb      	ldr	r3, [r7, #24]
 800085a:	fa02 f303 	lsl.w	r3, r2, r3
 800085e:	43da      	mvns	r2, r3
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	401a      	ands	r2, r3
 8000864:	697b      	ldr	r3, [r7, #20]
 8000866:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000868:	f04f 31ff 	mov.w	r1, #4294967295
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	fa01 f303 	lsl.w	r3, r1, r3
 8000872:	43d9      	mvns	r1, r3
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000878:	4313      	orrs	r3, r2
         );
}
 800087a:	4618      	mov	r0, r3
 800087c:	3724      	adds	r7, #36	@ 0x24
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
	...

08000888 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	3b01      	subs	r3, #1
 8000894:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000898:	d301      	bcc.n	800089e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800089a:	2301      	movs	r3, #1
 800089c:	e00f      	b.n	80008be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800089e:	4a0a      	ldr	r2, [pc, #40]	@ (80008c8 <SysTick_Config+0x40>)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	3b01      	subs	r3, #1
 80008a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008a6:	210f      	movs	r1, #15
 80008a8:	f04f 30ff 	mov.w	r0, #4294967295
 80008ac:	f7ff ff8e 	bl	80007cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008b0:	4b05      	ldr	r3, [pc, #20]	@ (80008c8 <SysTick_Config+0x40>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008b6:	4b04      	ldr	r3, [pc, #16]	@ (80008c8 <SysTick_Config+0x40>)
 80008b8:	2207      	movs	r2, #7
 80008ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008bc:	2300      	movs	r3, #0
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	e000e010 	.word	0xe000e010

080008cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008d4:	6878      	ldr	r0, [r7, #4]
 80008d6:	f7ff ff29 	bl	800072c <__NVIC_SetPriorityGrouping>
}
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008e2:	b580      	push	{r7, lr}
 80008e4:	b086      	sub	sp, #24
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	4603      	mov	r3, r0
 80008ea:	60b9      	str	r1, [r7, #8]
 80008ec:	607a      	str	r2, [r7, #4]
 80008ee:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80008f0:	f7ff ff40 	bl	8000774 <__NVIC_GetPriorityGrouping>
 80008f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008f6:	687a      	ldr	r2, [r7, #4]
 80008f8:	68b9      	ldr	r1, [r7, #8]
 80008fa:	6978      	ldr	r0, [r7, #20]
 80008fc:	f7ff ff90 	bl	8000820 <NVIC_EncodePriority>
 8000900:	4602      	mov	r2, r0
 8000902:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000906:	4611      	mov	r1, r2
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff ff5f 	bl	80007cc <__NVIC_SetPriority>
}
 800090e:	bf00      	nop
 8000910:	3718      	adds	r7, #24
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}

08000916 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	b082      	sub	sp, #8
 800091a:	af00      	add	r7, sp, #0
 800091c:	4603      	mov	r3, r0
 800091e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff ff33 	bl	8000790 <__NVIC_EnableIRQ>
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}

08000932 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000932:	b580      	push	{r7, lr}
 8000934:	b082      	sub	sp, #8
 8000936:	af00      	add	r7, sp, #0
 8000938:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800093a:	6878      	ldr	r0, [r7, #4]
 800093c:	f7ff ffa4 	bl	8000888 <SysTick_Config>
 8000940:	4603      	mov	r3, r0
}
 8000942:	4618      	mov	r0, r3
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
	...

0800094c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800094c:	b480      	push	{r7}
 800094e:	b087      	sub	sp, #28
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
 8000954:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000956:	2300      	movs	r3, #0
 8000958:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800095a:	e15a      	b.n	8000c12 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	681a      	ldr	r2, [r3, #0]
 8000960:	2101      	movs	r1, #1
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	fa01 f303 	lsl.w	r3, r1, r3
 8000968:	4013      	ands	r3, r2
 800096a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	2b00      	cmp	r3, #0
 8000970:	f000 814c 	beq.w	8000c0c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	f003 0303 	and.w	r3, r3, #3
 800097c:	2b01      	cmp	r3, #1
 800097e:	d005      	beq.n	800098c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000988:	2b02      	cmp	r3, #2
 800098a:	d130      	bne.n	80009ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	689b      	ldr	r3, [r3, #8]
 8000990:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	2203      	movs	r2, #3
 8000998:	fa02 f303 	lsl.w	r3, r2, r3
 800099c:	43db      	mvns	r3, r3
 800099e:	693a      	ldr	r2, [r7, #16]
 80009a0:	4013      	ands	r3, r2
 80009a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	68da      	ldr	r2, [r3, #12]
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	fa02 f303 	lsl.w	r3, r2, r3
 80009b0:	693a      	ldr	r2, [r7, #16]
 80009b2:	4313      	orrs	r3, r2
 80009b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	693a      	ldr	r2, [r7, #16]
 80009ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80009c2:	2201      	movs	r2, #1
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ca:	43db      	mvns	r3, r3
 80009cc:	693a      	ldr	r2, [r7, #16]
 80009ce:	4013      	ands	r3, r2
 80009d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	685b      	ldr	r3, [r3, #4]
 80009d6:	091b      	lsrs	r3, r3, #4
 80009d8:	f003 0201 	and.w	r2, r3, #1
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	fa02 f303 	lsl.w	r3, r2, r3
 80009e2:	693a      	ldr	r2, [r7, #16]
 80009e4:	4313      	orrs	r3, r2
 80009e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	693a      	ldr	r2, [r7, #16]
 80009ec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	f003 0303 	and.w	r3, r3, #3
 80009f6:	2b03      	cmp	r3, #3
 80009f8:	d017      	beq.n	8000a2a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	68db      	ldr	r3, [r3, #12]
 80009fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	005b      	lsls	r3, r3, #1
 8000a04:	2203      	movs	r2, #3
 8000a06:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0a:	43db      	mvns	r3, r3
 8000a0c:	693a      	ldr	r2, [r7, #16]
 8000a0e:	4013      	ands	r3, r2
 8000a10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	689a      	ldr	r2, [r3, #8]
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	005b      	lsls	r3, r3, #1
 8000a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1e:	693a      	ldr	r2, [r7, #16]
 8000a20:	4313      	orrs	r3, r2
 8000a22:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	693a      	ldr	r2, [r7, #16]
 8000a28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	685b      	ldr	r3, [r3, #4]
 8000a2e:	f003 0303 	and.w	r3, r3, #3
 8000a32:	2b02      	cmp	r3, #2
 8000a34:	d123      	bne.n	8000a7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	08da      	lsrs	r2, r3, #3
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	3208      	adds	r2, #8
 8000a3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	f003 0307 	and.w	r3, r3, #7
 8000a4a:	009b      	lsls	r3, r3, #2
 8000a4c:	220f      	movs	r2, #15
 8000a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a52:	43db      	mvns	r3, r3
 8000a54:	693a      	ldr	r2, [r7, #16]
 8000a56:	4013      	ands	r3, r2
 8000a58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	691a      	ldr	r2, [r3, #16]
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	f003 0307 	and.w	r3, r3, #7
 8000a64:	009b      	lsls	r3, r3, #2
 8000a66:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6a:	693a      	ldr	r2, [r7, #16]
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	08da      	lsrs	r2, r3, #3
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	3208      	adds	r2, #8
 8000a78:	6939      	ldr	r1, [r7, #16]
 8000a7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	005b      	lsls	r3, r3, #1
 8000a88:	2203      	movs	r2, #3
 8000a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8e:	43db      	mvns	r3, r3
 8000a90:	693a      	ldr	r2, [r7, #16]
 8000a92:	4013      	ands	r3, r2
 8000a94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	f003 0203 	and.w	r2, r3, #3
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	005b      	lsls	r3, r3, #1
 8000aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	f000 80a6 	beq.w	8000c0c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac0:	4b5b      	ldr	r3, [pc, #364]	@ (8000c30 <HAL_GPIO_Init+0x2e4>)
 8000ac2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ac4:	4a5a      	ldr	r2, [pc, #360]	@ (8000c30 <HAL_GPIO_Init+0x2e4>)
 8000ac6:	f043 0301 	orr.w	r3, r3, #1
 8000aca:	6613      	str	r3, [r2, #96]	@ 0x60
 8000acc:	4b58      	ldr	r3, [pc, #352]	@ (8000c30 <HAL_GPIO_Init+0x2e4>)
 8000ace:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ad0:	f003 0301 	and.w	r3, r3, #1
 8000ad4:	60bb      	str	r3, [r7, #8]
 8000ad6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ad8:	4a56      	ldr	r2, [pc, #344]	@ (8000c34 <HAL_GPIO_Init+0x2e8>)
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	089b      	lsrs	r3, r3, #2
 8000ade:	3302      	adds	r3, #2
 8000ae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	f003 0303 	and.w	r3, r3, #3
 8000aec:	009b      	lsls	r3, r3, #2
 8000aee:	220f      	movs	r2, #15
 8000af0:	fa02 f303 	lsl.w	r3, r2, r3
 8000af4:	43db      	mvns	r3, r3
 8000af6:	693a      	ldr	r2, [r7, #16]
 8000af8:	4013      	ands	r3, r2
 8000afa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000b02:	d01f      	beq.n	8000b44 <HAL_GPIO_Init+0x1f8>
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	4a4c      	ldr	r2, [pc, #304]	@ (8000c38 <HAL_GPIO_Init+0x2ec>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d019      	beq.n	8000b40 <HAL_GPIO_Init+0x1f4>
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	4a4b      	ldr	r2, [pc, #300]	@ (8000c3c <HAL_GPIO_Init+0x2f0>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d013      	beq.n	8000b3c <HAL_GPIO_Init+0x1f0>
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	4a4a      	ldr	r2, [pc, #296]	@ (8000c40 <HAL_GPIO_Init+0x2f4>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d00d      	beq.n	8000b38 <HAL_GPIO_Init+0x1ec>
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4a49      	ldr	r2, [pc, #292]	@ (8000c44 <HAL_GPIO_Init+0x2f8>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d007      	beq.n	8000b34 <HAL_GPIO_Init+0x1e8>
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	4a48      	ldr	r2, [pc, #288]	@ (8000c48 <HAL_GPIO_Init+0x2fc>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d101      	bne.n	8000b30 <HAL_GPIO_Init+0x1e4>
 8000b2c:	2305      	movs	r3, #5
 8000b2e:	e00a      	b.n	8000b46 <HAL_GPIO_Init+0x1fa>
 8000b30:	2306      	movs	r3, #6
 8000b32:	e008      	b.n	8000b46 <HAL_GPIO_Init+0x1fa>
 8000b34:	2304      	movs	r3, #4
 8000b36:	e006      	b.n	8000b46 <HAL_GPIO_Init+0x1fa>
 8000b38:	2303      	movs	r3, #3
 8000b3a:	e004      	b.n	8000b46 <HAL_GPIO_Init+0x1fa>
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	e002      	b.n	8000b46 <HAL_GPIO_Init+0x1fa>
 8000b40:	2301      	movs	r3, #1
 8000b42:	e000      	b.n	8000b46 <HAL_GPIO_Init+0x1fa>
 8000b44:	2300      	movs	r3, #0
 8000b46:	697a      	ldr	r2, [r7, #20]
 8000b48:	f002 0203 	and.w	r2, r2, #3
 8000b4c:	0092      	lsls	r2, r2, #2
 8000b4e:	4093      	lsls	r3, r2
 8000b50:	693a      	ldr	r2, [r7, #16]
 8000b52:	4313      	orrs	r3, r2
 8000b54:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b56:	4937      	ldr	r1, [pc, #220]	@ (8000c34 <HAL_GPIO_Init+0x2e8>)
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	089b      	lsrs	r3, r3, #2
 8000b5c:	3302      	adds	r3, #2
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b64:	4b39      	ldr	r3, [pc, #228]	@ (8000c4c <HAL_GPIO_Init+0x300>)
 8000b66:	689b      	ldr	r3, [r3, #8]
 8000b68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	43db      	mvns	r3, r3
 8000b6e:	693a      	ldr	r2, [r7, #16]
 8000b70:	4013      	ands	r3, r2
 8000b72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d003      	beq.n	8000b88 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000b80:	693a      	ldr	r2, [r7, #16]
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	4313      	orrs	r3, r2
 8000b86:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b88:	4a30      	ldr	r2, [pc, #192]	@ (8000c4c <HAL_GPIO_Init+0x300>)
 8000b8a:	693b      	ldr	r3, [r7, #16]
 8000b8c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000b8e:	4b2f      	ldr	r3, [pc, #188]	@ (8000c4c <HAL_GPIO_Init+0x300>)
 8000b90:	68db      	ldr	r3, [r3, #12]
 8000b92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	43db      	mvns	r3, r3
 8000b98:	693a      	ldr	r2, [r7, #16]
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d003      	beq.n	8000bb2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000bb2:	4a26      	ldr	r2, [pc, #152]	@ (8000c4c <HAL_GPIO_Init+0x300>)
 8000bb4:	693b      	ldr	r3, [r7, #16]
 8000bb6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000bb8:	4b24      	ldr	r3, [pc, #144]	@ (8000c4c <HAL_GPIO_Init+0x300>)
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	43db      	mvns	r3, r3
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d003      	beq.n	8000bdc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000bd4:	693a      	ldr	r2, [r7, #16]
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000bdc:	4a1b      	ldr	r2, [pc, #108]	@ (8000c4c <HAL_GPIO_Init+0x300>)
 8000bde:	693b      	ldr	r3, [r7, #16]
 8000be0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000be2:	4b1a      	ldr	r3, [pc, #104]	@ (8000c4c <HAL_GPIO_Init+0x300>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	43db      	mvns	r3, r3
 8000bec:	693a      	ldr	r2, [r7, #16]
 8000bee:	4013      	ands	r3, r2
 8000bf0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d003      	beq.n	8000c06 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	4313      	orrs	r3, r2
 8000c04:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000c06:	4a11      	ldr	r2, [pc, #68]	@ (8000c4c <HAL_GPIO_Init+0x300>)
 8000c08:	693b      	ldr	r3, [r7, #16]
 8000c0a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	3301      	adds	r3, #1
 8000c10:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	fa22 f303 	lsr.w	r3, r2, r3
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	f47f ae9d 	bne.w	800095c <HAL_GPIO_Init+0x10>
  }
}
 8000c22:	bf00      	nop
 8000c24:	bf00      	nop
 8000c26:	371c      	adds	r7, #28
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	40021000 	.word	0x40021000
 8000c34:	40010000 	.word	0x40010000
 8000c38:	48000400 	.word	0x48000400
 8000c3c:	48000800 	.word	0x48000800
 8000c40:	48000c00 	.word	0x48000c00
 8000c44:	48001000 	.word	0x48001000
 8000c48:	48001400 	.word	0x48001400
 8000c4c:	40010400 	.word	0x40010400

08000c50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	460b      	mov	r3, r1
 8000c5a:	807b      	strh	r3, [r7, #2]
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c60:	787b      	ldrb	r3, [r7, #1]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d003      	beq.n	8000c6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c66:	887a      	ldrh	r2, [r7, #2]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c6c:	e002      	b.n	8000c74 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c6e:	887a      	ldrh	r2, [r7, #2]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	460b      	mov	r3, r1
 8000c8a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	695b      	ldr	r3, [r3, #20]
 8000c90:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000c92:	887a      	ldrh	r2, [r7, #2]
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	4013      	ands	r3, r2
 8000c98:	041a      	lsls	r2, r3, #16
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	43d9      	mvns	r1, r3
 8000c9e:	887b      	ldrh	r3, [r7, #2]
 8000ca0:	400b      	ands	r3, r1
 8000ca2:	431a      	orrs	r2, r3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	619a      	str	r2, [r3, #24]
}
 8000ca8:	bf00      	nop
 8000caa:	3714      	adds	r7, #20
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d141      	bne.n	8000d46 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000cc2:	4b4b      	ldr	r3, [pc, #300]	@ (8000df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000cca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000cce:	d131      	bne.n	8000d34 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000cd0:	4b47      	ldr	r3, [pc, #284]	@ (8000df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000cd6:	4a46      	ldr	r2, [pc, #280]	@ (8000df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000cdc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ce0:	4b43      	ldr	r3, [pc, #268]	@ (8000df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000ce8:	4a41      	ldr	r2, [pc, #260]	@ (8000df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000cf0:	4b40      	ldr	r3, [pc, #256]	@ (8000df4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2232      	movs	r2, #50	@ 0x32
 8000cf6:	fb02 f303 	mul.w	r3, r2, r3
 8000cfa:	4a3f      	ldr	r2, [pc, #252]	@ (8000df8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8000d00:	0c9b      	lsrs	r3, r3, #18
 8000d02:	3301      	adds	r3, #1
 8000d04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d06:	e002      	b.n	8000d0e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d0e:	4b38      	ldr	r3, [pc, #224]	@ (8000df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d10:	695b      	ldr	r3, [r3, #20]
 8000d12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d1a:	d102      	bne.n	8000d22 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d1f2      	bne.n	8000d08 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000d22:	4b33      	ldr	r3, [pc, #204]	@ (8000df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d24:	695b      	ldr	r3, [r3, #20]
 8000d26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d2e:	d158      	bne.n	8000de2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000d30:	2303      	movs	r3, #3
 8000d32:	e057      	b.n	8000de4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000d34:	4b2e      	ldr	r3, [pc, #184]	@ (8000df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d3a:	4a2d      	ldr	r2, [pc, #180]	@ (8000df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000d40:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8000d44:	e04d      	b.n	8000de2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000d4c:	d141      	bne.n	8000dd2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000d4e:	4b28      	ldr	r3, [pc, #160]	@ (8000df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000d56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d5a:	d131      	bne.n	8000dc0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000d5c:	4b24      	ldr	r3, [pc, #144]	@ (8000df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d62:	4a23      	ldr	r2, [pc, #140]	@ (8000df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d68:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d6c:	4b20      	ldr	r3, [pc, #128]	@ (8000df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000d74:	4a1e      	ldr	r2, [pc, #120]	@ (8000df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d7a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000d7c:	4b1d      	ldr	r3, [pc, #116]	@ (8000df4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2232      	movs	r2, #50	@ 0x32
 8000d82:	fb02 f303 	mul.w	r3, r2, r3
 8000d86:	4a1c      	ldr	r2, [pc, #112]	@ (8000df8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000d88:	fba2 2303 	umull	r2, r3, r2, r3
 8000d8c:	0c9b      	lsrs	r3, r3, #18
 8000d8e:	3301      	adds	r3, #1
 8000d90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d92:	e002      	b.n	8000d9a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	3b01      	subs	r3, #1
 8000d98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d9a:	4b15      	ldr	r3, [pc, #84]	@ (8000df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d9c:	695b      	ldr	r3, [r3, #20]
 8000d9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000da2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000da6:	d102      	bne.n	8000dae <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d1f2      	bne.n	8000d94 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000dae:	4b10      	ldr	r3, [pc, #64]	@ (8000df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000db0:	695b      	ldr	r3, [r3, #20]
 8000db2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000db6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000dba:	d112      	bne.n	8000de2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	e011      	b.n	8000de4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8000df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000dc6:	4a0a      	ldr	r2, [pc, #40]	@ (8000df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dcc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8000dd0:	e007      	b.n	8000de2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000dd2:	4b07      	ldr	r3, [pc, #28]	@ (8000df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000dda:	4a05      	ldr	r2, [pc, #20]	@ (8000df0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ddc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000de0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8000de2:	2300      	movs	r3, #0
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3714      	adds	r7, #20
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	40007000 	.word	0x40007000
 8000df4:	20000000 	.word	0x20000000
 8000df8:	431bde83 	.word	0x431bde83

08000dfc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000e00:	4b05      	ldr	r3, [pc, #20]	@ (8000e18 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000e02:	689b      	ldr	r3, [r3, #8]
 8000e04:	4a04      	ldr	r2, [pc, #16]	@ (8000e18 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000e06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e0a:	6093      	str	r3, [r2, #8]
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	40007000 	.word	0x40007000

08000e1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b088      	sub	sp, #32
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d101      	bne.n	8000e2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e2fe      	b.n	800142c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d075      	beq.n	8000f26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e3a:	4b97      	ldr	r3, [pc, #604]	@ (8001098 <HAL_RCC_OscConfig+0x27c>)
 8000e3c:	689b      	ldr	r3, [r3, #8]
 8000e3e:	f003 030c 	and.w	r3, r3, #12
 8000e42:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e44:	4b94      	ldr	r3, [pc, #592]	@ (8001098 <HAL_RCC_OscConfig+0x27c>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	f003 0303 	and.w	r3, r3, #3
 8000e4c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8000e4e:	69bb      	ldr	r3, [r7, #24]
 8000e50:	2b0c      	cmp	r3, #12
 8000e52:	d102      	bne.n	8000e5a <HAL_RCC_OscConfig+0x3e>
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	2b03      	cmp	r3, #3
 8000e58:	d002      	beq.n	8000e60 <HAL_RCC_OscConfig+0x44>
 8000e5a:	69bb      	ldr	r3, [r7, #24]
 8000e5c:	2b08      	cmp	r3, #8
 8000e5e:	d10b      	bne.n	8000e78 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e60:	4b8d      	ldr	r3, [pc, #564]	@ (8001098 <HAL_RCC_OscConfig+0x27c>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d05b      	beq.n	8000f24 <HAL_RCC_OscConfig+0x108>
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d157      	bne.n	8000f24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000e74:	2301      	movs	r3, #1
 8000e76:	e2d9      	b.n	800142c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e80:	d106      	bne.n	8000e90 <HAL_RCC_OscConfig+0x74>
 8000e82:	4b85      	ldr	r3, [pc, #532]	@ (8001098 <HAL_RCC_OscConfig+0x27c>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a84      	ldr	r2, [pc, #528]	@ (8001098 <HAL_RCC_OscConfig+0x27c>)
 8000e88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e8c:	6013      	str	r3, [r2, #0]
 8000e8e:	e01d      	b.n	8000ecc <HAL_RCC_OscConfig+0xb0>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000e98:	d10c      	bne.n	8000eb4 <HAL_RCC_OscConfig+0x98>
 8000e9a:	4b7f      	ldr	r3, [pc, #508]	@ (8001098 <HAL_RCC_OscConfig+0x27c>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a7e      	ldr	r2, [pc, #504]	@ (8001098 <HAL_RCC_OscConfig+0x27c>)
 8000ea0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ea4:	6013      	str	r3, [r2, #0]
 8000ea6:	4b7c      	ldr	r3, [pc, #496]	@ (8001098 <HAL_RCC_OscConfig+0x27c>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a7b      	ldr	r2, [pc, #492]	@ (8001098 <HAL_RCC_OscConfig+0x27c>)
 8000eac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000eb0:	6013      	str	r3, [r2, #0]
 8000eb2:	e00b      	b.n	8000ecc <HAL_RCC_OscConfig+0xb0>
 8000eb4:	4b78      	ldr	r3, [pc, #480]	@ (8001098 <HAL_RCC_OscConfig+0x27c>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a77      	ldr	r2, [pc, #476]	@ (8001098 <HAL_RCC_OscConfig+0x27c>)
 8000eba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ebe:	6013      	str	r3, [r2, #0]
 8000ec0:	4b75      	ldr	r3, [pc, #468]	@ (8001098 <HAL_RCC_OscConfig+0x27c>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a74      	ldr	r2, [pc, #464]	@ (8001098 <HAL_RCC_OscConfig+0x27c>)
 8000ec6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000eca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d013      	beq.n	8000efc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ed4:	f7ff fc1e 	bl	8000714 <HAL_GetTick>
 8000ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000eda:	e008      	b.n	8000eee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000edc:	f7ff fc1a 	bl	8000714 <HAL_GetTick>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	2b64      	cmp	r3, #100	@ 0x64
 8000ee8:	d901      	bls.n	8000eee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000eea:	2303      	movs	r3, #3
 8000eec:	e29e      	b.n	800142c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000eee:	4b6a      	ldr	r3, [pc, #424]	@ (8001098 <HAL_RCC_OscConfig+0x27c>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d0f0      	beq.n	8000edc <HAL_RCC_OscConfig+0xc0>
 8000efa:	e014      	b.n	8000f26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000efc:	f7ff fc0a 	bl	8000714 <HAL_GetTick>
 8000f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f02:	e008      	b.n	8000f16 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f04:	f7ff fc06 	bl	8000714 <HAL_GetTick>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	2b64      	cmp	r3, #100	@ 0x64
 8000f10:	d901      	bls.n	8000f16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000f12:	2303      	movs	r3, #3
 8000f14:	e28a      	b.n	800142c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f16:	4b60      	ldr	r3, [pc, #384]	@ (8001098 <HAL_RCC_OscConfig+0x27c>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d1f0      	bne.n	8000f04 <HAL_RCC_OscConfig+0xe8>
 8000f22:	e000      	b.n	8000f26 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f003 0302 	and.w	r3, r3, #2
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d075      	beq.n	800101e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f32:	4b59      	ldr	r3, [pc, #356]	@ (8001098 <HAL_RCC_OscConfig+0x27c>)
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	f003 030c 	and.w	r3, r3, #12
 8000f3a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f3c:	4b56      	ldr	r3, [pc, #344]	@ (8001098 <HAL_RCC_OscConfig+0x27c>)
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	f003 0303 	and.w	r3, r3, #3
 8000f44:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8000f46:	69bb      	ldr	r3, [r7, #24]
 8000f48:	2b0c      	cmp	r3, #12
 8000f4a:	d102      	bne.n	8000f52 <HAL_RCC_OscConfig+0x136>
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	2b02      	cmp	r3, #2
 8000f50:	d002      	beq.n	8000f58 <HAL_RCC_OscConfig+0x13c>
 8000f52:	69bb      	ldr	r3, [r7, #24]
 8000f54:	2b04      	cmp	r3, #4
 8000f56:	d11f      	bne.n	8000f98 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f58:	4b4f      	ldr	r3, [pc, #316]	@ (8001098 <HAL_RCC_OscConfig+0x27c>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d005      	beq.n	8000f70 <HAL_RCC_OscConfig+0x154>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d101      	bne.n	8000f70 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	e25d      	b.n	800142c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f70:	4b49      	ldr	r3, [pc, #292]	@ (8001098 <HAL_RCC_OscConfig+0x27c>)
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	691b      	ldr	r3, [r3, #16]
 8000f7c:	061b      	lsls	r3, r3, #24
 8000f7e:	4946      	ldr	r1, [pc, #280]	@ (8001098 <HAL_RCC_OscConfig+0x27c>)
 8000f80:	4313      	orrs	r3, r2
 8000f82:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000f84:	4b45      	ldr	r3, [pc, #276]	@ (800109c <HAL_RCC_OscConfig+0x280>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff fb77 	bl	800067c <HAL_InitTick>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d043      	beq.n	800101c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8000f94:	2301      	movs	r3, #1
 8000f96:	e249      	b.n	800142c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d023      	beq.n	8000fe8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fa0:	4b3d      	ldr	r3, [pc, #244]	@ (8001098 <HAL_RCC_OscConfig+0x27c>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a3c      	ldr	r2, [pc, #240]	@ (8001098 <HAL_RCC_OscConfig+0x27c>)
 8000fa6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000faa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fac:	f7ff fbb2 	bl	8000714 <HAL_GetTick>
 8000fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000fb2:	e008      	b.n	8000fc6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fb4:	f7ff fbae 	bl	8000714 <HAL_GetTick>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	d901      	bls.n	8000fc6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	e232      	b.n	800142c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000fc6:	4b34      	ldr	r3, [pc, #208]	@ (8001098 <HAL_RCC_OscConfig+0x27c>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d0f0      	beq.n	8000fb4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fd2:	4b31      	ldr	r3, [pc, #196]	@ (8001098 <HAL_RCC_OscConfig+0x27c>)
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	691b      	ldr	r3, [r3, #16]
 8000fde:	061b      	lsls	r3, r3, #24
 8000fe0:	492d      	ldr	r1, [pc, #180]	@ (8001098 <HAL_RCC_OscConfig+0x27c>)
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	604b      	str	r3, [r1, #4]
 8000fe6:	e01a      	b.n	800101e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fe8:	4b2b      	ldr	r3, [pc, #172]	@ (8001098 <HAL_RCC_OscConfig+0x27c>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a2a      	ldr	r2, [pc, #168]	@ (8001098 <HAL_RCC_OscConfig+0x27c>)
 8000fee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000ff2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ff4:	f7ff fb8e 	bl	8000714 <HAL_GetTick>
 8000ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000ffa:	e008      	b.n	800100e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ffc:	f7ff fb8a 	bl	8000714 <HAL_GetTick>
 8001000:	4602      	mov	r2, r0
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	2b02      	cmp	r3, #2
 8001008:	d901      	bls.n	800100e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800100a:	2303      	movs	r3, #3
 800100c:	e20e      	b.n	800142c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800100e:	4b22      	ldr	r3, [pc, #136]	@ (8001098 <HAL_RCC_OscConfig+0x27c>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001016:	2b00      	cmp	r3, #0
 8001018:	d1f0      	bne.n	8000ffc <HAL_RCC_OscConfig+0x1e0>
 800101a:	e000      	b.n	800101e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800101c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f003 0308 	and.w	r3, r3, #8
 8001026:	2b00      	cmp	r3, #0
 8001028:	d041      	beq.n	80010ae <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	695b      	ldr	r3, [r3, #20]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d01c      	beq.n	800106c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001032:	4b19      	ldr	r3, [pc, #100]	@ (8001098 <HAL_RCC_OscConfig+0x27c>)
 8001034:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001038:	4a17      	ldr	r2, [pc, #92]	@ (8001098 <HAL_RCC_OscConfig+0x27c>)
 800103a:	f043 0301 	orr.w	r3, r3, #1
 800103e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001042:	f7ff fb67 	bl	8000714 <HAL_GetTick>
 8001046:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001048:	e008      	b.n	800105c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800104a:	f7ff fb63 	bl	8000714 <HAL_GetTick>
 800104e:	4602      	mov	r2, r0
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	2b02      	cmp	r3, #2
 8001056:	d901      	bls.n	800105c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001058:	2303      	movs	r3, #3
 800105a:	e1e7      	b.n	800142c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800105c:	4b0e      	ldr	r3, [pc, #56]	@ (8001098 <HAL_RCC_OscConfig+0x27c>)
 800105e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001062:	f003 0302 	and.w	r3, r3, #2
 8001066:	2b00      	cmp	r3, #0
 8001068:	d0ef      	beq.n	800104a <HAL_RCC_OscConfig+0x22e>
 800106a:	e020      	b.n	80010ae <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800106c:	4b0a      	ldr	r3, [pc, #40]	@ (8001098 <HAL_RCC_OscConfig+0x27c>)
 800106e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001072:	4a09      	ldr	r2, [pc, #36]	@ (8001098 <HAL_RCC_OscConfig+0x27c>)
 8001074:	f023 0301 	bic.w	r3, r3, #1
 8001078:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800107c:	f7ff fb4a 	bl	8000714 <HAL_GetTick>
 8001080:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001082:	e00d      	b.n	80010a0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001084:	f7ff fb46 	bl	8000714 <HAL_GetTick>
 8001088:	4602      	mov	r2, r0
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	2b02      	cmp	r3, #2
 8001090:	d906      	bls.n	80010a0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001092:	2303      	movs	r3, #3
 8001094:	e1ca      	b.n	800142c <HAL_RCC_OscConfig+0x610>
 8001096:	bf00      	nop
 8001098:	40021000 	.word	0x40021000
 800109c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80010a0:	4b8c      	ldr	r3, [pc, #560]	@ (80012d4 <HAL_RCC_OscConfig+0x4b8>)
 80010a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010a6:	f003 0302 	and.w	r3, r3, #2
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d1ea      	bne.n	8001084 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f003 0304 	and.w	r3, r3, #4
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	f000 80a6 	beq.w	8001208 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010bc:	2300      	movs	r3, #0
 80010be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80010c0:	4b84      	ldr	r3, [pc, #528]	@ (80012d4 <HAL_RCC_OscConfig+0x4b8>)
 80010c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d101      	bne.n	80010d0 <HAL_RCC_OscConfig+0x2b4>
 80010cc:	2301      	movs	r3, #1
 80010ce:	e000      	b.n	80010d2 <HAL_RCC_OscConfig+0x2b6>
 80010d0:	2300      	movs	r3, #0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d00d      	beq.n	80010f2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010d6:	4b7f      	ldr	r3, [pc, #508]	@ (80012d4 <HAL_RCC_OscConfig+0x4b8>)
 80010d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010da:	4a7e      	ldr	r2, [pc, #504]	@ (80012d4 <HAL_RCC_OscConfig+0x4b8>)
 80010dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80010e2:	4b7c      	ldr	r3, [pc, #496]	@ (80012d4 <HAL_RCC_OscConfig+0x4b8>)
 80010e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80010ee:	2301      	movs	r3, #1
 80010f0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010f2:	4b79      	ldr	r3, [pc, #484]	@ (80012d8 <HAL_RCC_OscConfig+0x4bc>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d118      	bne.n	8001130 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80010fe:	4b76      	ldr	r3, [pc, #472]	@ (80012d8 <HAL_RCC_OscConfig+0x4bc>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a75      	ldr	r2, [pc, #468]	@ (80012d8 <HAL_RCC_OscConfig+0x4bc>)
 8001104:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001108:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800110a:	f7ff fb03 	bl	8000714 <HAL_GetTick>
 800110e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001110:	e008      	b.n	8001124 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001112:	f7ff faff 	bl	8000714 <HAL_GetTick>
 8001116:	4602      	mov	r2, r0
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	2b02      	cmp	r3, #2
 800111e:	d901      	bls.n	8001124 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001120:	2303      	movs	r3, #3
 8001122:	e183      	b.n	800142c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001124:	4b6c      	ldr	r3, [pc, #432]	@ (80012d8 <HAL_RCC_OscConfig+0x4bc>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800112c:	2b00      	cmp	r3, #0
 800112e:	d0f0      	beq.n	8001112 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	2b01      	cmp	r3, #1
 8001136:	d108      	bne.n	800114a <HAL_RCC_OscConfig+0x32e>
 8001138:	4b66      	ldr	r3, [pc, #408]	@ (80012d4 <HAL_RCC_OscConfig+0x4b8>)
 800113a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800113e:	4a65      	ldr	r2, [pc, #404]	@ (80012d4 <HAL_RCC_OscConfig+0x4b8>)
 8001140:	f043 0301 	orr.w	r3, r3, #1
 8001144:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001148:	e024      	b.n	8001194 <HAL_RCC_OscConfig+0x378>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	2b05      	cmp	r3, #5
 8001150:	d110      	bne.n	8001174 <HAL_RCC_OscConfig+0x358>
 8001152:	4b60      	ldr	r3, [pc, #384]	@ (80012d4 <HAL_RCC_OscConfig+0x4b8>)
 8001154:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001158:	4a5e      	ldr	r2, [pc, #376]	@ (80012d4 <HAL_RCC_OscConfig+0x4b8>)
 800115a:	f043 0304 	orr.w	r3, r3, #4
 800115e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001162:	4b5c      	ldr	r3, [pc, #368]	@ (80012d4 <HAL_RCC_OscConfig+0x4b8>)
 8001164:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001168:	4a5a      	ldr	r2, [pc, #360]	@ (80012d4 <HAL_RCC_OscConfig+0x4b8>)
 800116a:	f043 0301 	orr.w	r3, r3, #1
 800116e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001172:	e00f      	b.n	8001194 <HAL_RCC_OscConfig+0x378>
 8001174:	4b57      	ldr	r3, [pc, #348]	@ (80012d4 <HAL_RCC_OscConfig+0x4b8>)
 8001176:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800117a:	4a56      	ldr	r2, [pc, #344]	@ (80012d4 <HAL_RCC_OscConfig+0x4b8>)
 800117c:	f023 0301 	bic.w	r3, r3, #1
 8001180:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001184:	4b53      	ldr	r3, [pc, #332]	@ (80012d4 <HAL_RCC_OscConfig+0x4b8>)
 8001186:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800118a:	4a52      	ldr	r2, [pc, #328]	@ (80012d4 <HAL_RCC_OscConfig+0x4b8>)
 800118c:	f023 0304 	bic.w	r3, r3, #4
 8001190:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d016      	beq.n	80011ca <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800119c:	f7ff faba 	bl	8000714 <HAL_GetTick>
 80011a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011a2:	e00a      	b.n	80011ba <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011a4:	f7ff fab6 	bl	8000714 <HAL_GetTick>
 80011a8:	4602      	mov	r2, r0
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d901      	bls.n	80011ba <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80011b6:	2303      	movs	r3, #3
 80011b8:	e138      	b.n	800142c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011ba:	4b46      	ldr	r3, [pc, #280]	@ (80012d4 <HAL_RCC_OscConfig+0x4b8>)
 80011bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011c0:	f003 0302 	and.w	r3, r3, #2
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d0ed      	beq.n	80011a4 <HAL_RCC_OscConfig+0x388>
 80011c8:	e015      	b.n	80011f6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011ca:	f7ff faa3 	bl	8000714 <HAL_GetTick>
 80011ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011d0:	e00a      	b.n	80011e8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011d2:	f7ff fa9f 	bl	8000714 <HAL_GetTick>
 80011d6:	4602      	mov	r2, r0
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d901      	bls.n	80011e8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80011e4:	2303      	movs	r3, #3
 80011e6:	e121      	b.n	800142c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011e8:	4b3a      	ldr	r3, [pc, #232]	@ (80012d4 <HAL_RCC_OscConfig+0x4b8>)
 80011ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011ee:	f003 0302 	and.w	r3, r3, #2
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d1ed      	bne.n	80011d2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80011f6:	7ffb      	ldrb	r3, [r7, #31]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d105      	bne.n	8001208 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011fc:	4b35      	ldr	r3, [pc, #212]	@ (80012d4 <HAL_RCC_OscConfig+0x4b8>)
 80011fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001200:	4a34      	ldr	r2, [pc, #208]	@ (80012d4 <HAL_RCC_OscConfig+0x4b8>)
 8001202:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001206:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 0320 	and.w	r3, r3, #32
 8001210:	2b00      	cmp	r3, #0
 8001212:	d03c      	beq.n	800128e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d01c      	beq.n	8001256 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800121c:	4b2d      	ldr	r3, [pc, #180]	@ (80012d4 <HAL_RCC_OscConfig+0x4b8>)
 800121e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001222:	4a2c      	ldr	r2, [pc, #176]	@ (80012d4 <HAL_RCC_OscConfig+0x4b8>)
 8001224:	f043 0301 	orr.w	r3, r3, #1
 8001228:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800122c:	f7ff fa72 	bl	8000714 <HAL_GetTick>
 8001230:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001232:	e008      	b.n	8001246 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001234:	f7ff fa6e 	bl	8000714 <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b02      	cmp	r3, #2
 8001240:	d901      	bls.n	8001246 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e0f2      	b.n	800142c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001246:	4b23      	ldr	r3, [pc, #140]	@ (80012d4 <HAL_RCC_OscConfig+0x4b8>)
 8001248:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800124c:	f003 0302 	and.w	r3, r3, #2
 8001250:	2b00      	cmp	r3, #0
 8001252:	d0ef      	beq.n	8001234 <HAL_RCC_OscConfig+0x418>
 8001254:	e01b      	b.n	800128e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001256:	4b1f      	ldr	r3, [pc, #124]	@ (80012d4 <HAL_RCC_OscConfig+0x4b8>)
 8001258:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800125c:	4a1d      	ldr	r2, [pc, #116]	@ (80012d4 <HAL_RCC_OscConfig+0x4b8>)
 800125e:	f023 0301 	bic.w	r3, r3, #1
 8001262:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001266:	f7ff fa55 	bl	8000714 <HAL_GetTick>
 800126a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800126c:	e008      	b.n	8001280 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800126e:	f7ff fa51 	bl	8000714 <HAL_GetTick>
 8001272:	4602      	mov	r2, r0
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	2b02      	cmp	r3, #2
 800127a:	d901      	bls.n	8001280 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800127c:	2303      	movs	r3, #3
 800127e:	e0d5      	b.n	800142c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001280:	4b14      	ldr	r3, [pc, #80]	@ (80012d4 <HAL_RCC_OscConfig+0x4b8>)
 8001282:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	2b00      	cmp	r3, #0
 800128c:	d1ef      	bne.n	800126e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	69db      	ldr	r3, [r3, #28]
 8001292:	2b00      	cmp	r3, #0
 8001294:	f000 80c9 	beq.w	800142a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001298:	4b0e      	ldr	r3, [pc, #56]	@ (80012d4 <HAL_RCC_OscConfig+0x4b8>)
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	f003 030c 	and.w	r3, r3, #12
 80012a0:	2b0c      	cmp	r3, #12
 80012a2:	f000 8083 	beq.w	80013ac <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	69db      	ldr	r3, [r3, #28]
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d15e      	bne.n	800136c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012ae:	4b09      	ldr	r3, [pc, #36]	@ (80012d4 <HAL_RCC_OscConfig+0x4b8>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a08      	ldr	r2, [pc, #32]	@ (80012d4 <HAL_RCC_OscConfig+0x4b8>)
 80012b4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80012b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ba:	f7ff fa2b 	bl	8000714 <HAL_GetTick>
 80012be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012c0:	e00c      	b.n	80012dc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012c2:	f7ff fa27 	bl	8000714 <HAL_GetTick>
 80012c6:	4602      	mov	r2, r0
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d905      	bls.n	80012dc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80012d0:	2303      	movs	r3, #3
 80012d2:	e0ab      	b.n	800142c <HAL_RCC_OscConfig+0x610>
 80012d4:	40021000 	.word	0x40021000
 80012d8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012dc:	4b55      	ldr	r3, [pc, #340]	@ (8001434 <HAL_RCC_OscConfig+0x618>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d1ec      	bne.n	80012c2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012e8:	4b52      	ldr	r3, [pc, #328]	@ (8001434 <HAL_RCC_OscConfig+0x618>)
 80012ea:	68da      	ldr	r2, [r3, #12]
 80012ec:	4b52      	ldr	r3, [pc, #328]	@ (8001438 <HAL_RCC_OscConfig+0x61c>)
 80012ee:	4013      	ands	r3, r2
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	6a11      	ldr	r1, [r2, #32]
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80012f8:	3a01      	subs	r2, #1
 80012fa:	0112      	lsls	r2, r2, #4
 80012fc:	4311      	orrs	r1, r2
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001302:	0212      	lsls	r2, r2, #8
 8001304:	4311      	orrs	r1, r2
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800130a:	0852      	lsrs	r2, r2, #1
 800130c:	3a01      	subs	r2, #1
 800130e:	0552      	lsls	r2, r2, #21
 8001310:	4311      	orrs	r1, r2
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001316:	0852      	lsrs	r2, r2, #1
 8001318:	3a01      	subs	r2, #1
 800131a:	0652      	lsls	r2, r2, #25
 800131c:	4311      	orrs	r1, r2
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001322:	06d2      	lsls	r2, r2, #27
 8001324:	430a      	orrs	r2, r1
 8001326:	4943      	ldr	r1, [pc, #268]	@ (8001434 <HAL_RCC_OscConfig+0x618>)
 8001328:	4313      	orrs	r3, r2
 800132a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800132c:	4b41      	ldr	r3, [pc, #260]	@ (8001434 <HAL_RCC_OscConfig+0x618>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a40      	ldr	r2, [pc, #256]	@ (8001434 <HAL_RCC_OscConfig+0x618>)
 8001332:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001336:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001338:	4b3e      	ldr	r3, [pc, #248]	@ (8001434 <HAL_RCC_OscConfig+0x618>)
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	4a3d      	ldr	r2, [pc, #244]	@ (8001434 <HAL_RCC_OscConfig+0x618>)
 800133e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001342:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001344:	f7ff f9e6 	bl	8000714 <HAL_GetTick>
 8001348:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800134a:	e008      	b.n	800135e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800134c:	f7ff f9e2 	bl	8000714 <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	2b02      	cmp	r3, #2
 8001358:	d901      	bls.n	800135e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e066      	b.n	800142c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800135e:	4b35      	ldr	r3, [pc, #212]	@ (8001434 <HAL_RCC_OscConfig+0x618>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d0f0      	beq.n	800134c <HAL_RCC_OscConfig+0x530>
 800136a:	e05e      	b.n	800142a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800136c:	4b31      	ldr	r3, [pc, #196]	@ (8001434 <HAL_RCC_OscConfig+0x618>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a30      	ldr	r2, [pc, #192]	@ (8001434 <HAL_RCC_OscConfig+0x618>)
 8001372:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001376:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001378:	f7ff f9cc 	bl	8000714 <HAL_GetTick>
 800137c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800137e:	e008      	b.n	8001392 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001380:	f7ff f9c8 	bl	8000714 <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b02      	cmp	r3, #2
 800138c:	d901      	bls.n	8001392 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e04c      	b.n	800142c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001392:	4b28      	ldr	r3, [pc, #160]	@ (8001434 <HAL_RCC_OscConfig+0x618>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d1f0      	bne.n	8001380 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800139e:	4b25      	ldr	r3, [pc, #148]	@ (8001434 <HAL_RCC_OscConfig+0x618>)
 80013a0:	68da      	ldr	r2, [r3, #12]
 80013a2:	4924      	ldr	r1, [pc, #144]	@ (8001434 <HAL_RCC_OscConfig+0x618>)
 80013a4:	4b25      	ldr	r3, [pc, #148]	@ (800143c <HAL_RCC_OscConfig+0x620>)
 80013a6:	4013      	ands	r3, r2
 80013a8:	60cb      	str	r3, [r1, #12]
 80013aa:	e03e      	b.n	800142a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	69db      	ldr	r3, [r3, #28]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d101      	bne.n	80013b8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e039      	b.n	800142c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80013b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001434 <HAL_RCC_OscConfig+0x618>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	f003 0203 	and.w	r2, r3, #3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a1b      	ldr	r3, [r3, #32]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d12c      	bne.n	8001426 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013d6:	3b01      	subs	r3, #1
 80013d8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013da:	429a      	cmp	r2, r3
 80013dc:	d123      	bne.n	8001426 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013e8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d11b      	bne.n	8001426 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013f8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d113      	bne.n	8001426 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001408:	085b      	lsrs	r3, r3, #1
 800140a:	3b01      	subs	r3, #1
 800140c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800140e:	429a      	cmp	r2, r3
 8001410:	d109      	bne.n	8001426 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800141c:	085b      	lsrs	r3, r3, #1
 800141e:	3b01      	subs	r3, #1
 8001420:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001422:	429a      	cmp	r2, r3
 8001424:	d001      	beq.n	800142a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e000      	b.n	800142c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800142a:	2300      	movs	r3, #0
}
 800142c:	4618      	mov	r0, r3
 800142e:	3720      	adds	r7, #32
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40021000 	.word	0x40021000
 8001438:	019f800c 	.word	0x019f800c
 800143c:	feeefffc 	.word	0xfeeefffc

08001440 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800144a:	2300      	movs	r3, #0
 800144c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d101      	bne.n	8001458 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e11e      	b.n	8001696 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001458:	4b91      	ldr	r3, [pc, #580]	@ (80016a0 <HAL_RCC_ClockConfig+0x260>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 030f 	and.w	r3, r3, #15
 8001460:	683a      	ldr	r2, [r7, #0]
 8001462:	429a      	cmp	r2, r3
 8001464:	d910      	bls.n	8001488 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001466:	4b8e      	ldr	r3, [pc, #568]	@ (80016a0 <HAL_RCC_ClockConfig+0x260>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f023 020f 	bic.w	r2, r3, #15
 800146e:	498c      	ldr	r1, [pc, #560]	@ (80016a0 <HAL_RCC_ClockConfig+0x260>)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	4313      	orrs	r3, r2
 8001474:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001476:	4b8a      	ldr	r3, [pc, #552]	@ (80016a0 <HAL_RCC_ClockConfig+0x260>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 030f 	and.w	r3, r3, #15
 800147e:	683a      	ldr	r2, [r7, #0]
 8001480:	429a      	cmp	r2, r3
 8001482:	d001      	beq.n	8001488 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e106      	b.n	8001696 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0301 	and.w	r3, r3, #1
 8001490:	2b00      	cmp	r3, #0
 8001492:	d073      	beq.n	800157c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	2b03      	cmp	r3, #3
 800149a:	d129      	bne.n	80014f0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800149c:	4b81      	ldr	r3, [pc, #516]	@ (80016a4 <HAL_RCC_ClockConfig+0x264>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d101      	bne.n	80014ac <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e0f4      	b.n	8001696 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80014ac:	f000 f966 	bl	800177c <RCC_GetSysClockFreqFromPLLSource>
 80014b0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	4a7c      	ldr	r2, [pc, #496]	@ (80016a8 <HAL_RCC_ClockConfig+0x268>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d93f      	bls.n	800153a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80014ba:	4b7a      	ldr	r3, [pc, #488]	@ (80016a4 <HAL_RCC_ClockConfig+0x264>)
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d009      	beq.n	80014da <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d033      	beq.n	800153a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d12f      	bne.n	800153a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80014da:	4b72      	ldr	r3, [pc, #456]	@ (80016a4 <HAL_RCC_ClockConfig+0x264>)
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80014e2:	4a70      	ldr	r2, [pc, #448]	@ (80016a4 <HAL_RCC_ClockConfig+0x264>)
 80014e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014e8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80014ea:	2380      	movs	r3, #128	@ 0x80
 80014ec:	617b      	str	r3, [r7, #20]
 80014ee:	e024      	b.n	800153a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d107      	bne.n	8001508 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014f8:	4b6a      	ldr	r3, [pc, #424]	@ (80016a4 <HAL_RCC_ClockConfig+0x264>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d109      	bne.n	8001518 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	e0c6      	b.n	8001696 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001508:	4b66      	ldr	r3, [pc, #408]	@ (80016a4 <HAL_RCC_ClockConfig+0x264>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001510:	2b00      	cmp	r3, #0
 8001512:	d101      	bne.n	8001518 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e0be      	b.n	8001696 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001518:	f000 f8ce 	bl	80016b8 <HAL_RCC_GetSysClockFreq>
 800151c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	4a61      	ldr	r2, [pc, #388]	@ (80016a8 <HAL_RCC_ClockConfig+0x268>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d909      	bls.n	800153a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001526:	4b5f      	ldr	r3, [pc, #380]	@ (80016a4 <HAL_RCC_ClockConfig+0x264>)
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800152e:	4a5d      	ldr	r2, [pc, #372]	@ (80016a4 <HAL_RCC_ClockConfig+0x264>)
 8001530:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001534:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001536:	2380      	movs	r3, #128	@ 0x80
 8001538:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800153a:	4b5a      	ldr	r3, [pc, #360]	@ (80016a4 <HAL_RCC_ClockConfig+0x264>)
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f023 0203 	bic.w	r2, r3, #3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	4957      	ldr	r1, [pc, #348]	@ (80016a4 <HAL_RCC_ClockConfig+0x264>)
 8001548:	4313      	orrs	r3, r2
 800154a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800154c:	f7ff f8e2 	bl	8000714 <HAL_GetTick>
 8001550:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001552:	e00a      	b.n	800156a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001554:	f7ff f8de 	bl	8000714 <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001562:	4293      	cmp	r3, r2
 8001564:	d901      	bls.n	800156a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e095      	b.n	8001696 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800156a:	4b4e      	ldr	r3, [pc, #312]	@ (80016a4 <HAL_RCC_ClockConfig+0x264>)
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	f003 020c 	and.w	r2, r3, #12
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	429a      	cmp	r2, r3
 800157a:	d1eb      	bne.n	8001554 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0302 	and.w	r3, r3, #2
 8001584:	2b00      	cmp	r3, #0
 8001586:	d023      	beq.n	80015d0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0304 	and.w	r3, r3, #4
 8001590:	2b00      	cmp	r3, #0
 8001592:	d005      	beq.n	80015a0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001594:	4b43      	ldr	r3, [pc, #268]	@ (80016a4 <HAL_RCC_ClockConfig+0x264>)
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	4a42      	ldr	r2, [pc, #264]	@ (80016a4 <HAL_RCC_ClockConfig+0x264>)
 800159a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800159e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0308 	and.w	r3, r3, #8
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d007      	beq.n	80015bc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80015ac:	4b3d      	ldr	r3, [pc, #244]	@ (80016a4 <HAL_RCC_ClockConfig+0x264>)
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80015b4:	4a3b      	ldr	r2, [pc, #236]	@ (80016a4 <HAL_RCC_ClockConfig+0x264>)
 80015b6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80015ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015bc:	4b39      	ldr	r3, [pc, #228]	@ (80016a4 <HAL_RCC_ClockConfig+0x264>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	4936      	ldr	r1, [pc, #216]	@ (80016a4 <HAL_RCC_ClockConfig+0x264>)
 80015ca:	4313      	orrs	r3, r2
 80015cc:	608b      	str	r3, [r1, #8]
 80015ce:	e008      	b.n	80015e2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	2b80      	cmp	r3, #128	@ 0x80
 80015d4:	d105      	bne.n	80015e2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80015d6:	4b33      	ldr	r3, [pc, #204]	@ (80016a4 <HAL_RCC_ClockConfig+0x264>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	4a32      	ldr	r2, [pc, #200]	@ (80016a4 <HAL_RCC_ClockConfig+0x264>)
 80015dc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80015e0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015e2:	4b2f      	ldr	r3, [pc, #188]	@ (80016a0 <HAL_RCC_ClockConfig+0x260>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 030f 	and.w	r3, r3, #15
 80015ea:	683a      	ldr	r2, [r7, #0]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d21d      	bcs.n	800162c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015f0:	4b2b      	ldr	r3, [pc, #172]	@ (80016a0 <HAL_RCC_ClockConfig+0x260>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f023 020f 	bic.w	r2, r3, #15
 80015f8:	4929      	ldr	r1, [pc, #164]	@ (80016a0 <HAL_RCC_ClockConfig+0x260>)
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001600:	f7ff f888 	bl	8000714 <HAL_GetTick>
 8001604:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001606:	e00a      	b.n	800161e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001608:	f7ff f884 	bl	8000714 <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001616:	4293      	cmp	r3, r2
 8001618:	d901      	bls.n	800161e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e03b      	b.n	8001696 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800161e:	4b20      	ldr	r3, [pc, #128]	@ (80016a0 <HAL_RCC_ClockConfig+0x260>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 030f 	and.w	r3, r3, #15
 8001626:	683a      	ldr	r2, [r7, #0]
 8001628:	429a      	cmp	r2, r3
 800162a:	d1ed      	bne.n	8001608 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0304 	and.w	r3, r3, #4
 8001634:	2b00      	cmp	r3, #0
 8001636:	d008      	beq.n	800164a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001638:	4b1a      	ldr	r3, [pc, #104]	@ (80016a4 <HAL_RCC_ClockConfig+0x264>)
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	4917      	ldr	r1, [pc, #92]	@ (80016a4 <HAL_RCC_ClockConfig+0x264>)
 8001646:	4313      	orrs	r3, r2
 8001648:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0308 	and.w	r3, r3, #8
 8001652:	2b00      	cmp	r3, #0
 8001654:	d009      	beq.n	800166a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001656:	4b13      	ldr	r3, [pc, #76]	@ (80016a4 <HAL_RCC_ClockConfig+0x264>)
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	691b      	ldr	r3, [r3, #16]
 8001662:	00db      	lsls	r3, r3, #3
 8001664:	490f      	ldr	r1, [pc, #60]	@ (80016a4 <HAL_RCC_ClockConfig+0x264>)
 8001666:	4313      	orrs	r3, r2
 8001668:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800166a:	f000 f825 	bl	80016b8 <HAL_RCC_GetSysClockFreq>
 800166e:	4602      	mov	r2, r0
 8001670:	4b0c      	ldr	r3, [pc, #48]	@ (80016a4 <HAL_RCC_ClockConfig+0x264>)
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	091b      	lsrs	r3, r3, #4
 8001676:	f003 030f 	and.w	r3, r3, #15
 800167a:	490c      	ldr	r1, [pc, #48]	@ (80016ac <HAL_RCC_ClockConfig+0x26c>)
 800167c:	5ccb      	ldrb	r3, [r1, r3]
 800167e:	f003 031f 	and.w	r3, r3, #31
 8001682:	fa22 f303 	lsr.w	r3, r2, r3
 8001686:	4a0a      	ldr	r2, [pc, #40]	@ (80016b0 <HAL_RCC_ClockConfig+0x270>)
 8001688:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800168a:	4b0a      	ldr	r3, [pc, #40]	@ (80016b4 <HAL_RCC_ClockConfig+0x274>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4618      	mov	r0, r3
 8001690:	f7fe fff4 	bl	800067c <HAL_InitTick>
 8001694:	4603      	mov	r3, r0
}
 8001696:	4618      	mov	r0, r3
 8001698:	3718      	adds	r7, #24
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40022000 	.word	0x40022000
 80016a4:	40021000 	.word	0x40021000
 80016a8:	04c4b400 	.word	0x04c4b400
 80016ac:	0800238c 	.word	0x0800238c
 80016b0:	20000000 	.word	0x20000000
 80016b4:	20000004 	.word	0x20000004

080016b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b087      	sub	sp, #28
 80016bc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80016be:	4b2c      	ldr	r3, [pc, #176]	@ (8001770 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f003 030c 	and.w	r3, r3, #12
 80016c6:	2b04      	cmp	r3, #4
 80016c8:	d102      	bne.n	80016d0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80016ca:	4b2a      	ldr	r3, [pc, #168]	@ (8001774 <HAL_RCC_GetSysClockFreq+0xbc>)
 80016cc:	613b      	str	r3, [r7, #16]
 80016ce:	e047      	b.n	8001760 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80016d0:	4b27      	ldr	r3, [pc, #156]	@ (8001770 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	f003 030c 	and.w	r3, r3, #12
 80016d8:	2b08      	cmp	r3, #8
 80016da:	d102      	bne.n	80016e2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80016dc:	4b26      	ldr	r3, [pc, #152]	@ (8001778 <HAL_RCC_GetSysClockFreq+0xc0>)
 80016de:	613b      	str	r3, [r7, #16]
 80016e0:	e03e      	b.n	8001760 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80016e2:	4b23      	ldr	r3, [pc, #140]	@ (8001770 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f003 030c 	and.w	r3, r3, #12
 80016ea:	2b0c      	cmp	r3, #12
 80016ec:	d136      	bne.n	800175c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80016ee:	4b20      	ldr	r3, [pc, #128]	@ (8001770 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	f003 0303 	and.w	r3, r3, #3
 80016f6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80016f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001770 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	091b      	lsrs	r3, r3, #4
 80016fe:	f003 030f 	and.w	r3, r3, #15
 8001702:	3301      	adds	r3, #1
 8001704:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2b03      	cmp	r3, #3
 800170a:	d10c      	bne.n	8001726 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800170c:	4a1a      	ldr	r2, [pc, #104]	@ (8001778 <HAL_RCC_GetSysClockFreq+0xc0>)
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	fbb2 f3f3 	udiv	r3, r2, r3
 8001714:	4a16      	ldr	r2, [pc, #88]	@ (8001770 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001716:	68d2      	ldr	r2, [r2, #12]
 8001718:	0a12      	lsrs	r2, r2, #8
 800171a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800171e:	fb02 f303 	mul.w	r3, r2, r3
 8001722:	617b      	str	r3, [r7, #20]
      break;
 8001724:	e00c      	b.n	8001740 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001726:	4a13      	ldr	r2, [pc, #76]	@ (8001774 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	fbb2 f3f3 	udiv	r3, r2, r3
 800172e:	4a10      	ldr	r2, [pc, #64]	@ (8001770 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001730:	68d2      	ldr	r2, [r2, #12]
 8001732:	0a12      	lsrs	r2, r2, #8
 8001734:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001738:	fb02 f303 	mul.w	r3, r2, r3
 800173c:	617b      	str	r3, [r7, #20]
      break;
 800173e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001740:	4b0b      	ldr	r3, [pc, #44]	@ (8001770 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	0e5b      	lsrs	r3, r3, #25
 8001746:	f003 0303 	and.w	r3, r3, #3
 800174a:	3301      	adds	r3, #1
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001750:	697a      	ldr	r2, [r7, #20]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	fbb2 f3f3 	udiv	r3, r2, r3
 8001758:	613b      	str	r3, [r7, #16]
 800175a:	e001      	b.n	8001760 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800175c:	2300      	movs	r3, #0
 800175e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001760:	693b      	ldr	r3, [r7, #16]
}
 8001762:	4618      	mov	r0, r3
 8001764:	371c      	adds	r7, #28
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	40021000 	.word	0x40021000
 8001774:	00f42400 	.word	0x00f42400
 8001778:	016e3600 	.word	0x016e3600

0800177c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800177c:	b480      	push	{r7}
 800177e:	b087      	sub	sp, #28
 8001780:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001782:	4b1e      	ldr	r3, [pc, #120]	@ (80017fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	f003 0303 	and.w	r3, r3, #3
 800178a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800178c:	4b1b      	ldr	r3, [pc, #108]	@ (80017fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	091b      	lsrs	r3, r3, #4
 8001792:	f003 030f 	and.w	r3, r3, #15
 8001796:	3301      	adds	r3, #1
 8001798:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	2b03      	cmp	r3, #3
 800179e:	d10c      	bne.n	80017ba <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80017a0:	4a17      	ldr	r2, [pc, #92]	@ (8001800 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a8:	4a14      	ldr	r2, [pc, #80]	@ (80017fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80017aa:	68d2      	ldr	r2, [r2, #12]
 80017ac:	0a12      	lsrs	r2, r2, #8
 80017ae:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80017b2:	fb02 f303 	mul.w	r3, r2, r3
 80017b6:	617b      	str	r3, [r7, #20]
    break;
 80017b8:	e00c      	b.n	80017d4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80017ba:	4a12      	ldr	r2, [pc, #72]	@ (8001804 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c2:	4a0e      	ldr	r2, [pc, #56]	@ (80017fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80017c4:	68d2      	ldr	r2, [r2, #12]
 80017c6:	0a12      	lsrs	r2, r2, #8
 80017c8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80017cc:	fb02 f303 	mul.w	r3, r2, r3
 80017d0:	617b      	str	r3, [r7, #20]
    break;
 80017d2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80017d4:	4b09      	ldr	r3, [pc, #36]	@ (80017fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	0e5b      	lsrs	r3, r3, #25
 80017da:	f003 0303 	and.w	r3, r3, #3
 80017de:	3301      	adds	r3, #1
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80017e4:	697a      	ldr	r2, [r7, #20]
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ec:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80017ee:	687b      	ldr	r3, [r7, #4]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	371c      	adds	r7, #28
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	40021000 	.word	0x40021000
 8001800:	016e3600 	.word	0x016e3600
 8001804:	00f42400 	.word	0x00f42400

08001808 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d101      	bne.n	800181a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e049      	b.n	80018ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001820:	b2db      	uxtb	r3, r3
 8001822:	2b00      	cmp	r3, #0
 8001824:	d106      	bne.n	8001834 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f7fe fe50 	bl	80004d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2202      	movs	r2, #2
 8001838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3304      	adds	r3, #4
 8001844:	4619      	mov	r1, r3
 8001846:	4610      	mov	r0, r2
 8001848:	f000 fb3c 	bl	8001ec4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2201      	movs	r2, #1
 8001850:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2201      	movs	r2, #1
 8001858:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2201      	movs	r2, #1
 8001860:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2201      	movs	r2, #1
 8001868:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2201      	movs	r2, #1
 8001870:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2201      	movs	r2, #1
 8001878:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2201      	movs	r2, #1
 8001880:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2201      	movs	r2, #1
 8001888:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2201      	movs	r2, #1
 8001890:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2201      	movs	r2, #1
 8001898:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2201      	movs	r2, #1
 80018a0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2201      	movs	r2, #1
 80018a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
	...

080018b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d001      	beq.n	80018d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e054      	b.n	800197a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2202      	movs	r2, #2
 80018d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	68da      	ldr	r2, [r3, #12]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f042 0201 	orr.w	r2, r2, #1
 80018e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a26      	ldr	r2, [pc, #152]	@ (8001988 <HAL_TIM_Base_Start_IT+0xd0>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d022      	beq.n	8001938 <HAL_TIM_Base_Start_IT+0x80>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018fa:	d01d      	beq.n	8001938 <HAL_TIM_Base_Start_IT+0x80>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a22      	ldr	r2, [pc, #136]	@ (800198c <HAL_TIM_Base_Start_IT+0xd4>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d018      	beq.n	8001938 <HAL_TIM_Base_Start_IT+0x80>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a21      	ldr	r2, [pc, #132]	@ (8001990 <HAL_TIM_Base_Start_IT+0xd8>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d013      	beq.n	8001938 <HAL_TIM_Base_Start_IT+0x80>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a1f      	ldr	r2, [pc, #124]	@ (8001994 <HAL_TIM_Base_Start_IT+0xdc>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d00e      	beq.n	8001938 <HAL_TIM_Base_Start_IT+0x80>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a1e      	ldr	r2, [pc, #120]	@ (8001998 <HAL_TIM_Base_Start_IT+0xe0>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d009      	beq.n	8001938 <HAL_TIM_Base_Start_IT+0x80>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a1c      	ldr	r2, [pc, #112]	@ (800199c <HAL_TIM_Base_Start_IT+0xe4>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d004      	beq.n	8001938 <HAL_TIM_Base_Start_IT+0x80>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a1b      	ldr	r2, [pc, #108]	@ (80019a0 <HAL_TIM_Base_Start_IT+0xe8>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d115      	bne.n	8001964 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	689a      	ldr	r2, [r3, #8]
 800193e:	4b19      	ldr	r3, [pc, #100]	@ (80019a4 <HAL_TIM_Base_Start_IT+0xec>)
 8001940:	4013      	ands	r3, r2
 8001942:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2b06      	cmp	r3, #6
 8001948:	d015      	beq.n	8001976 <HAL_TIM_Base_Start_IT+0xbe>
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001950:	d011      	beq.n	8001976 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f042 0201 	orr.w	r2, r2, #1
 8001960:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001962:	e008      	b.n	8001976 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f042 0201 	orr.w	r2, r2, #1
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	e000      	b.n	8001978 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001976:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3714      	adds	r7, #20
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	40012c00 	.word	0x40012c00
 800198c:	40000400 	.word	0x40000400
 8001990:	40000800 	.word	0x40000800
 8001994:	40000c00 	.word	0x40000c00
 8001998:	40013400 	.word	0x40013400
 800199c:	40014000 	.word	0x40014000
 80019a0:	40015000 	.word	0x40015000
 80019a4:	00010007 	.word	0x00010007

080019a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	691b      	ldr	r3, [r3, #16]
 80019be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d020      	beq.n	8001a0c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	f003 0302 	and.w	r3, r3, #2
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d01b      	beq.n	8001a0c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f06f 0202 	mvn.w	r2, #2
 80019dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2201      	movs	r2, #1
 80019e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	699b      	ldr	r3, [r3, #24]
 80019ea:	f003 0303 	and.w	r3, r3, #3
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d003      	beq.n	80019fa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f000 fa48 	bl	8001e88 <HAL_TIM_IC_CaptureCallback>
 80019f8:	e005      	b.n	8001a06 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f000 fa3a 	bl	8001e74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f000 fa4b 	bl	8001e9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	f003 0304 	and.w	r3, r3, #4
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d020      	beq.n	8001a58 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	f003 0304 	and.w	r3, r3, #4
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d01b      	beq.n	8001a58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f06f 0204 	mvn.w	r2, #4
 8001a28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2202      	movs	r2, #2
 8001a2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	699b      	ldr	r3, [r3, #24]
 8001a36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d003      	beq.n	8001a46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f000 fa22 	bl	8001e88 <HAL_TIM_IC_CaptureCallback>
 8001a44:	e005      	b.n	8001a52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f000 fa14 	bl	8001e74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f000 fa25 	bl	8001e9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	f003 0308 	and.w	r3, r3, #8
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d020      	beq.n	8001aa4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	f003 0308 	and.w	r3, r3, #8
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d01b      	beq.n	8001aa4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f06f 0208 	mvn.w	r2, #8
 8001a74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2204      	movs	r2, #4
 8001a7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	69db      	ldr	r3, [r3, #28]
 8001a82:	f003 0303 	and.w	r3, r3, #3
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d003      	beq.n	8001a92 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f000 f9fc 	bl	8001e88 <HAL_TIM_IC_CaptureCallback>
 8001a90:	e005      	b.n	8001a9e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f000 f9ee 	bl	8001e74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f000 f9ff 	bl	8001e9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	f003 0310 	and.w	r3, r3, #16
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d020      	beq.n	8001af0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	f003 0310 	and.w	r3, r3, #16
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d01b      	beq.n	8001af0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f06f 0210 	mvn.w	r2, #16
 8001ac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2208      	movs	r2, #8
 8001ac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d003      	beq.n	8001ade <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f000 f9d6 	bl	8001e88 <HAL_TIM_IC_CaptureCallback>
 8001adc:	e005      	b.n	8001aea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f000 f9c8 	bl	8001e74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f000 f9d9 	bl	8001e9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d00c      	beq.n	8001b14 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f003 0301 	and.w	r3, r3, #1
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d007      	beq.n	8001b14 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f06f 0201 	mvn.w	r2, #1
 8001b0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f7fe fca8 	bl	8000464 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d104      	bne.n	8001b28 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d00c      	beq.n	8001b42 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d007      	beq.n	8001b42 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8001b3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f000 fbb1 	bl	80022a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d00c      	beq.n	8001b66 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d007      	beq.n	8001b66 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8001b5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f000 fba9 	bl	80022b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d00c      	beq.n	8001b8a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d007      	beq.n	8001b8a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001b82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f000 f993 	bl	8001eb0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	f003 0320 	and.w	r3, r3, #32
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d00c      	beq.n	8001bae <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f003 0320 	and.w	r3, r3, #32
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d007      	beq.n	8001bae <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f06f 0220 	mvn.w	r2, #32
 8001ba6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f000 fb71 	bl	8002290 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d00c      	beq.n	8001bd2 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d007      	beq.n	8001bd2 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8001bca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f000 fb7d 	bl	80022cc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d00c      	beq.n	8001bf6 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d007      	beq.n	8001bf6 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8001bee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f000 fb75 	bl	80022e0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d00c      	beq.n	8001c1a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d007      	beq.n	8001c1a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8001c12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f000 fb6d 	bl	80022f4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d00c      	beq.n	8001c3e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d007      	beq.n	8001c3e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8001c36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f000 fb65 	bl	8002308 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c3e:	bf00      	nop
 8001c40:	3710      	adds	r7, #16
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
	...

08001c48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c52:	2300      	movs	r3, #0
 8001c54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d101      	bne.n	8001c64 <HAL_TIM_ConfigClockSource+0x1c>
 8001c60:	2302      	movs	r3, #2
 8001c62:	e0f6      	b.n	8001e52 <HAL_TIM_ConfigClockSource+0x20a>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2202      	movs	r2, #2
 8001c70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8001c82:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001c86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001c8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	68ba      	ldr	r2, [r7, #8]
 8001c96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a6f      	ldr	r2, [pc, #444]	@ (8001e5c <HAL_TIM_ConfigClockSource+0x214>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	f000 80c1 	beq.w	8001e26 <HAL_TIM_ConfigClockSource+0x1de>
 8001ca4:	4a6d      	ldr	r2, [pc, #436]	@ (8001e5c <HAL_TIM_ConfigClockSource+0x214>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	f200 80c6 	bhi.w	8001e38 <HAL_TIM_ConfigClockSource+0x1f0>
 8001cac:	4a6c      	ldr	r2, [pc, #432]	@ (8001e60 <HAL_TIM_ConfigClockSource+0x218>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	f000 80b9 	beq.w	8001e26 <HAL_TIM_ConfigClockSource+0x1de>
 8001cb4:	4a6a      	ldr	r2, [pc, #424]	@ (8001e60 <HAL_TIM_ConfigClockSource+0x218>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	f200 80be 	bhi.w	8001e38 <HAL_TIM_ConfigClockSource+0x1f0>
 8001cbc:	4a69      	ldr	r2, [pc, #420]	@ (8001e64 <HAL_TIM_ConfigClockSource+0x21c>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	f000 80b1 	beq.w	8001e26 <HAL_TIM_ConfigClockSource+0x1de>
 8001cc4:	4a67      	ldr	r2, [pc, #412]	@ (8001e64 <HAL_TIM_ConfigClockSource+0x21c>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	f200 80b6 	bhi.w	8001e38 <HAL_TIM_ConfigClockSource+0x1f0>
 8001ccc:	4a66      	ldr	r2, [pc, #408]	@ (8001e68 <HAL_TIM_ConfigClockSource+0x220>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	f000 80a9 	beq.w	8001e26 <HAL_TIM_ConfigClockSource+0x1de>
 8001cd4:	4a64      	ldr	r2, [pc, #400]	@ (8001e68 <HAL_TIM_ConfigClockSource+0x220>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	f200 80ae 	bhi.w	8001e38 <HAL_TIM_ConfigClockSource+0x1f0>
 8001cdc:	4a63      	ldr	r2, [pc, #396]	@ (8001e6c <HAL_TIM_ConfigClockSource+0x224>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	f000 80a1 	beq.w	8001e26 <HAL_TIM_ConfigClockSource+0x1de>
 8001ce4:	4a61      	ldr	r2, [pc, #388]	@ (8001e6c <HAL_TIM_ConfigClockSource+0x224>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	f200 80a6 	bhi.w	8001e38 <HAL_TIM_ConfigClockSource+0x1f0>
 8001cec:	4a60      	ldr	r2, [pc, #384]	@ (8001e70 <HAL_TIM_ConfigClockSource+0x228>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	f000 8099 	beq.w	8001e26 <HAL_TIM_ConfigClockSource+0x1de>
 8001cf4:	4a5e      	ldr	r2, [pc, #376]	@ (8001e70 <HAL_TIM_ConfigClockSource+0x228>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	f200 809e 	bhi.w	8001e38 <HAL_TIM_ConfigClockSource+0x1f0>
 8001cfc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8001d00:	f000 8091 	beq.w	8001e26 <HAL_TIM_ConfigClockSource+0x1de>
 8001d04:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8001d08:	f200 8096 	bhi.w	8001e38 <HAL_TIM_ConfigClockSource+0x1f0>
 8001d0c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001d10:	f000 8089 	beq.w	8001e26 <HAL_TIM_ConfigClockSource+0x1de>
 8001d14:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001d18:	f200 808e 	bhi.w	8001e38 <HAL_TIM_ConfigClockSource+0x1f0>
 8001d1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d20:	d03e      	beq.n	8001da0 <HAL_TIM_ConfigClockSource+0x158>
 8001d22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d26:	f200 8087 	bhi.w	8001e38 <HAL_TIM_ConfigClockSource+0x1f0>
 8001d2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d2e:	f000 8086 	beq.w	8001e3e <HAL_TIM_ConfigClockSource+0x1f6>
 8001d32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d36:	d87f      	bhi.n	8001e38 <HAL_TIM_ConfigClockSource+0x1f0>
 8001d38:	2b70      	cmp	r3, #112	@ 0x70
 8001d3a:	d01a      	beq.n	8001d72 <HAL_TIM_ConfigClockSource+0x12a>
 8001d3c:	2b70      	cmp	r3, #112	@ 0x70
 8001d3e:	d87b      	bhi.n	8001e38 <HAL_TIM_ConfigClockSource+0x1f0>
 8001d40:	2b60      	cmp	r3, #96	@ 0x60
 8001d42:	d050      	beq.n	8001de6 <HAL_TIM_ConfigClockSource+0x19e>
 8001d44:	2b60      	cmp	r3, #96	@ 0x60
 8001d46:	d877      	bhi.n	8001e38 <HAL_TIM_ConfigClockSource+0x1f0>
 8001d48:	2b50      	cmp	r3, #80	@ 0x50
 8001d4a:	d03c      	beq.n	8001dc6 <HAL_TIM_ConfigClockSource+0x17e>
 8001d4c:	2b50      	cmp	r3, #80	@ 0x50
 8001d4e:	d873      	bhi.n	8001e38 <HAL_TIM_ConfigClockSource+0x1f0>
 8001d50:	2b40      	cmp	r3, #64	@ 0x40
 8001d52:	d058      	beq.n	8001e06 <HAL_TIM_ConfigClockSource+0x1be>
 8001d54:	2b40      	cmp	r3, #64	@ 0x40
 8001d56:	d86f      	bhi.n	8001e38 <HAL_TIM_ConfigClockSource+0x1f0>
 8001d58:	2b30      	cmp	r3, #48	@ 0x30
 8001d5a:	d064      	beq.n	8001e26 <HAL_TIM_ConfigClockSource+0x1de>
 8001d5c:	2b30      	cmp	r3, #48	@ 0x30
 8001d5e:	d86b      	bhi.n	8001e38 <HAL_TIM_ConfigClockSource+0x1f0>
 8001d60:	2b20      	cmp	r3, #32
 8001d62:	d060      	beq.n	8001e26 <HAL_TIM_ConfigClockSource+0x1de>
 8001d64:	2b20      	cmp	r3, #32
 8001d66:	d867      	bhi.n	8001e38 <HAL_TIM_ConfigClockSource+0x1f0>
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d05c      	beq.n	8001e26 <HAL_TIM_ConfigClockSource+0x1de>
 8001d6c:	2b10      	cmp	r3, #16
 8001d6e:	d05a      	beq.n	8001e26 <HAL_TIM_ConfigClockSource+0x1de>
 8001d70:	e062      	b.n	8001e38 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001d82:	f000 f9cf 	bl	8002124 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001d94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	68ba      	ldr	r2, [r7, #8]
 8001d9c:	609a      	str	r2, [r3, #8]
      break;
 8001d9e:	e04f      	b.n	8001e40 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001db0:	f000 f9b8 	bl	8002124 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	689a      	ldr	r2, [r3, #8]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001dc2:	609a      	str	r2, [r3, #8]
      break;
 8001dc4:	e03c      	b.n	8001e40 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	f000 f92a 	bl	800202c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2150      	movs	r1, #80	@ 0x50
 8001dde:	4618      	mov	r0, r3
 8001de0:	f000 f983 	bl	80020ea <TIM_ITRx_SetConfig>
      break;
 8001de4:	e02c      	b.n	8001e40 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001df2:	461a      	mov	r2, r3
 8001df4:	f000 f949 	bl	800208a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2160      	movs	r1, #96	@ 0x60
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f000 f973 	bl	80020ea <TIM_ITRx_SetConfig>
      break;
 8001e04:	e01c      	b.n	8001e40 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e12:	461a      	mov	r2, r3
 8001e14:	f000 f90a 	bl	800202c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2140      	movs	r1, #64	@ 0x40
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f000 f963 	bl	80020ea <TIM_ITRx_SetConfig>
      break;
 8001e24:	e00c      	b.n	8001e40 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4610      	mov	r0, r2
 8001e32:	f000 f95a 	bl	80020ea <TIM_ITRx_SetConfig>
      break;
 8001e36:	e003      	b.n	8001e40 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	73fb      	strb	r3, [r7, #15]
      break;
 8001e3c:	e000      	b.n	8001e40 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8001e3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	00100070 	.word	0x00100070
 8001e60:	00100060 	.word	0x00100060
 8001e64:	00100050 	.word	0x00100050
 8001e68:	00100040 	.word	0x00100040
 8001e6c:	00100030 	.word	0x00100030
 8001e70:	00100020 	.word	0x00100020

08001e74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001eb8:	bf00      	nop
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a4c      	ldr	r2, [pc, #304]	@ (8002008 <TIM_Base_SetConfig+0x144>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d017      	beq.n	8001f0c <TIM_Base_SetConfig+0x48>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ee2:	d013      	beq.n	8001f0c <TIM_Base_SetConfig+0x48>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4a49      	ldr	r2, [pc, #292]	@ (800200c <TIM_Base_SetConfig+0x148>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d00f      	beq.n	8001f0c <TIM_Base_SetConfig+0x48>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4a48      	ldr	r2, [pc, #288]	@ (8002010 <TIM_Base_SetConfig+0x14c>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d00b      	beq.n	8001f0c <TIM_Base_SetConfig+0x48>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a47      	ldr	r2, [pc, #284]	@ (8002014 <TIM_Base_SetConfig+0x150>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d007      	beq.n	8001f0c <TIM_Base_SetConfig+0x48>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a46      	ldr	r2, [pc, #280]	@ (8002018 <TIM_Base_SetConfig+0x154>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d003      	beq.n	8001f0c <TIM_Base_SetConfig+0x48>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a45      	ldr	r2, [pc, #276]	@ (800201c <TIM_Base_SetConfig+0x158>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d108      	bne.n	8001f1e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	68fa      	ldr	r2, [r7, #12]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a39      	ldr	r2, [pc, #228]	@ (8002008 <TIM_Base_SetConfig+0x144>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d023      	beq.n	8001f6e <TIM_Base_SetConfig+0xaa>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f2c:	d01f      	beq.n	8001f6e <TIM_Base_SetConfig+0xaa>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a36      	ldr	r2, [pc, #216]	@ (800200c <TIM_Base_SetConfig+0x148>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d01b      	beq.n	8001f6e <TIM_Base_SetConfig+0xaa>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a35      	ldr	r2, [pc, #212]	@ (8002010 <TIM_Base_SetConfig+0x14c>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d017      	beq.n	8001f6e <TIM_Base_SetConfig+0xaa>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a34      	ldr	r2, [pc, #208]	@ (8002014 <TIM_Base_SetConfig+0x150>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d013      	beq.n	8001f6e <TIM_Base_SetConfig+0xaa>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a33      	ldr	r2, [pc, #204]	@ (8002018 <TIM_Base_SetConfig+0x154>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d00f      	beq.n	8001f6e <TIM_Base_SetConfig+0xaa>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a33      	ldr	r2, [pc, #204]	@ (8002020 <TIM_Base_SetConfig+0x15c>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d00b      	beq.n	8001f6e <TIM_Base_SetConfig+0xaa>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a32      	ldr	r2, [pc, #200]	@ (8002024 <TIM_Base_SetConfig+0x160>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d007      	beq.n	8001f6e <TIM_Base_SetConfig+0xaa>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a31      	ldr	r2, [pc, #196]	@ (8002028 <TIM_Base_SetConfig+0x164>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d003      	beq.n	8001f6e <TIM_Base_SetConfig+0xaa>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a2c      	ldr	r2, [pc, #176]	@ (800201c <TIM_Base_SetConfig+0x158>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d108      	bne.n	8001f80 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	695b      	ldr	r3, [r3, #20]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	68fa      	ldr	r2, [r7, #12]
 8001f92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	689a      	ldr	r2, [r3, #8]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a18      	ldr	r2, [pc, #96]	@ (8002008 <TIM_Base_SetConfig+0x144>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d013      	beq.n	8001fd4 <TIM_Base_SetConfig+0x110>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a1a      	ldr	r2, [pc, #104]	@ (8002018 <TIM_Base_SetConfig+0x154>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d00f      	beq.n	8001fd4 <TIM_Base_SetConfig+0x110>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a1a      	ldr	r2, [pc, #104]	@ (8002020 <TIM_Base_SetConfig+0x15c>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d00b      	beq.n	8001fd4 <TIM_Base_SetConfig+0x110>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a19      	ldr	r2, [pc, #100]	@ (8002024 <TIM_Base_SetConfig+0x160>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d007      	beq.n	8001fd4 <TIM_Base_SetConfig+0x110>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a18      	ldr	r2, [pc, #96]	@ (8002028 <TIM_Base_SetConfig+0x164>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d003      	beq.n	8001fd4 <TIM_Base_SetConfig+0x110>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a13      	ldr	r2, [pc, #76]	@ (800201c <TIM_Base_SetConfig+0x158>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d103      	bne.n	8001fdc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	691a      	ldr	r2, [r3, #16]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d105      	bne.n	8001ffa <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	f023 0201 	bic.w	r2, r3, #1
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	611a      	str	r2, [r3, #16]
  }
}
 8001ffa:	bf00      	nop
 8001ffc:	3714      	adds	r7, #20
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	40012c00 	.word	0x40012c00
 800200c:	40000400 	.word	0x40000400
 8002010:	40000800 	.word	0x40000800
 8002014:	40000c00 	.word	0x40000c00
 8002018:	40013400 	.word	0x40013400
 800201c:	40015000 	.word	0x40015000
 8002020:	40014000 	.word	0x40014000
 8002024:	40014400 	.word	0x40014400
 8002028:	40014800 	.word	0x40014800

0800202c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800202c:	b480      	push	{r7}
 800202e:	b087      	sub	sp, #28
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6a1b      	ldr	r3, [r3, #32]
 800203c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	6a1b      	ldr	r3, [r3, #32]
 8002042:	f023 0201 	bic.w	r2, r3, #1
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002056:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	011b      	lsls	r3, r3, #4
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	4313      	orrs	r3, r2
 8002060:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	f023 030a 	bic.w	r3, r3, #10
 8002068:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800206a:	697a      	ldr	r2, [r7, #20]
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	4313      	orrs	r3, r2
 8002070:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	697a      	ldr	r2, [r7, #20]
 800207c:	621a      	str	r2, [r3, #32]
}
 800207e:	bf00      	nop
 8002080:	371c      	adds	r7, #28
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr

0800208a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800208a:	b480      	push	{r7}
 800208c:	b087      	sub	sp, #28
 800208e:	af00      	add	r7, sp, #0
 8002090:	60f8      	str	r0, [r7, #12]
 8002092:	60b9      	str	r1, [r7, #8]
 8002094:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6a1b      	ldr	r3, [r3, #32]
 800209a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6a1b      	ldr	r3, [r3, #32]
 80020a0:	f023 0210 	bic.w	r2, r3, #16
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80020b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	031b      	lsls	r3, r3, #12
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	4313      	orrs	r3, r2
 80020be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80020c6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	011b      	lsls	r3, r3, #4
 80020cc:	697a      	ldr	r2, [r7, #20]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	693a      	ldr	r2, [r7, #16]
 80020d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	697a      	ldr	r2, [r7, #20]
 80020dc:	621a      	str	r2, [r3, #32]
}
 80020de:	bf00      	nop
 80020e0:	371c      	adds	r7, #28
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr

080020ea <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80020ea:	b480      	push	{r7}
 80020ec:	b085      	sub	sp, #20
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
 80020f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8002100:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002104:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002106:	683a      	ldr	r2, [r7, #0]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	4313      	orrs	r3, r2
 800210c:	f043 0307 	orr.w	r3, r3, #7
 8002110:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	68fa      	ldr	r2, [r7, #12]
 8002116:	609a      	str	r2, [r3, #8]
}
 8002118:	bf00      	nop
 800211a:	3714      	adds	r7, #20
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002124:	b480      	push	{r7}
 8002126:	b087      	sub	sp, #28
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	607a      	str	r2, [r7, #4]
 8002130:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800213e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	021a      	lsls	r2, r3, #8
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	431a      	orrs	r2, r3
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	4313      	orrs	r3, r2
 800214c:	697a      	ldr	r2, [r7, #20]
 800214e:	4313      	orrs	r3, r2
 8002150:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	697a      	ldr	r2, [r7, #20]
 8002156:	609a      	str	r2, [r3, #8]
}
 8002158:	bf00      	nop
 800215a:	371c      	adds	r7, #28
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002174:	2b01      	cmp	r3, #1
 8002176:	d101      	bne.n	800217c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002178:	2302      	movs	r3, #2
 800217a:	e074      	b.n	8002266 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2202      	movs	r2, #2
 8002188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a34      	ldr	r2, [pc, #208]	@ (8002274 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d009      	beq.n	80021ba <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a33      	ldr	r2, [pc, #204]	@ (8002278 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d004      	beq.n	80021ba <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a31      	ldr	r2, [pc, #196]	@ (800227c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d108      	bne.n	80021cc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80021c0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80021d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	68fa      	ldr	r2, [r7, #12]
 80021de:	4313      	orrs	r3, r2
 80021e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a21      	ldr	r2, [pc, #132]	@ (8002274 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d022      	beq.n	800223a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021fc:	d01d      	beq.n	800223a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a1f      	ldr	r2, [pc, #124]	@ (8002280 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d018      	beq.n	800223a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a1d      	ldr	r2, [pc, #116]	@ (8002284 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d013      	beq.n	800223a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a1c      	ldr	r2, [pc, #112]	@ (8002288 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d00e      	beq.n	800223a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a15      	ldr	r2, [pc, #84]	@ (8002278 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d009      	beq.n	800223a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a18      	ldr	r2, [pc, #96]	@ (800228c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d004      	beq.n	800223a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a11      	ldr	r2, [pc, #68]	@ (800227c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d10c      	bne.n	8002254 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002240:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	68ba      	ldr	r2, [r7, #8]
 8002248:	4313      	orrs	r3, r2
 800224a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	68ba      	ldr	r2, [r7, #8]
 8002252:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3714      	adds	r7, #20
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	40012c00 	.word	0x40012c00
 8002278:	40013400 	.word	0x40013400
 800227c:	40015000 	.word	0x40015000
 8002280:	40000400 	.word	0x40000400
 8002284:	40000800 	.word	0x40000800
 8002288:	40000c00 	.word	0x40000c00
 800228c:	40014000 	.word	0x40014000

08002290 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80022fc:	bf00      	nop
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <memset>:
 800231c:	4402      	add	r2, r0
 800231e:	4603      	mov	r3, r0
 8002320:	4293      	cmp	r3, r2
 8002322:	d100      	bne.n	8002326 <memset+0xa>
 8002324:	4770      	bx	lr
 8002326:	f803 1b01 	strb.w	r1, [r3], #1
 800232a:	e7f9      	b.n	8002320 <memset+0x4>

0800232c <__libc_init_array>:
 800232c:	b570      	push	{r4, r5, r6, lr}
 800232e:	4d0d      	ldr	r5, [pc, #52]	@ (8002364 <__libc_init_array+0x38>)
 8002330:	4c0d      	ldr	r4, [pc, #52]	@ (8002368 <__libc_init_array+0x3c>)
 8002332:	1b64      	subs	r4, r4, r5
 8002334:	10a4      	asrs	r4, r4, #2
 8002336:	2600      	movs	r6, #0
 8002338:	42a6      	cmp	r6, r4
 800233a:	d109      	bne.n	8002350 <__libc_init_array+0x24>
 800233c:	4d0b      	ldr	r5, [pc, #44]	@ (800236c <__libc_init_array+0x40>)
 800233e:	4c0c      	ldr	r4, [pc, #48]	@ (8002370 <__libc_init_array+0x44>)
 8002340:	f000 f818 	bl	8002374 <_init>
 8002344:	1b64      	subs	r4, r4, r5
 8002346:	10a4      	asrs	r4, r4, #2
 8002348:	2600      	movs	r6, #0
 800234a:	42a6      	cmp	r6, r4
 800234c:	d105      	bne.n	800235a <__libc_init_array+0x2e>
 800234e:	bd70      	pop	{r4, r5, r6, pc}
 8002350:	f855 3b04 	ldr.w	r3, [r5], #4
 8002354:	4798      	blx	r3
 8002356:	3601      	adds	r6, #1
 8002358:	e7ee      	b.n	8002338 <__libc_init_array+0xc>
 800235a:	f855 3b04 	ldr.w	r3, [r5], #4
 800235e:	4798      	blx	r3
 8002360:	3601      	adds	r6, #1
 8002362:	e7f2      	b.n	800234a <__libc_init_array+0x1e>
 8002364:	0800239c 	.word	0x0800239c
 8002368:	0800239c 	.word	0x0800239c
 800236c:	0800239c 	.word	0x0800239c
 8002370:	080023a0 	.word	0x080023a0

08002374 <_init>:
 8002374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002376:	bf00      	nop
 8002378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800237a:	bc08      	pop	{r3}
 800237c:	469e      	mov	lr, r3
 800237e:	4770      	bx	lr

08002380 <_fini>:
 8002380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002382:	bf00      	nop
 8002384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002386:	bc08      	pop	{r3}
 8002388:	469e      	mov	lr, r3
 800238a:	4770      	bx	lr
