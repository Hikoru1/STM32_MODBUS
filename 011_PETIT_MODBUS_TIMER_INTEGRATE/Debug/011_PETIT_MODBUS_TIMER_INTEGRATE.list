
011_PETIT_MODBUS_TIMER_INTEGRATE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037cc  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080039a4  080039a4  000049a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039ec  080039ec  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  080039ec  080039ec  000049ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080039f4  080039f4  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039f4  080039f4  000049f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080039f8  080039f8  000049f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080039fc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  2000000c  08003a08  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  08003a08  00005158  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000119cd  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002206  00000000  00000000  00016a09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa8  00000000  00000000  00018c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c46  00000000  00000000  00019bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025635  00000000  00000000  0001a7fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000120af  00000000  00000000  0003fe33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7ac7  00000000  00000000  00051ee2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001499a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042dc  00000000  00000000  001499ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  0014dcc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800398c 	.word	0x0800398c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	0800398c 	.word	0x0800398c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050e:	f000 faa6 	bl	8000a5e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000512:	f000 f823 	bl	800055c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f000 f935 	bl	8000784 <MX_GPIO_Init>
  MX_TIM1_Init();
 800051a:	f000 f86b 	bl	80005f4 <MX_TIM1_Init>
  MX_TIM16_Init();
 800051e:	f000 f8bd 	bl	800069c <MX_TIM16_Init>
  MX_USART1_UART_Init();
 8000522:	f000 f8e3 	bl	80006ec <MX_USART1_UART_Init>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  char liste[]="MEHABA";
 8000526:	4a0b      	ldr	r2, [pc, #44]	@ (8000554 <main+0x4c>)
 8000528:	463b      	mov	r3, r7
 800052a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800052e:	6018      	str	r0, [r3, #0]
 8000530:	3304      	adds	r3, #4
 8000532:	8019      	strh	r1, [r3, #0]
 8000534:	3302      	adds	r3, #2
 8000536:	0c0a      	lsrs	r2, r1, #16
 8000538:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit(&huart1, liste, sizeof(liste), 100);
 800053a:	4639      	mov	r1, r7
 800053c:	2364      	movs	r3, #100	@ 0x64
 800053e:	2207      	movs	r2, #7
 8000540:	4805      	ldr	r0, [pc, #20]	@ (8000558 <main+0x50>)
 8000542:	f002 fb4b 	bl	8002bdc <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8000546:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800054a:	f000 faf9 	bl	8000b40 <HAL_Delay>
  {
 800054e:	bf00      	nop
 8000550:	e7e9      	b.n	8000526 <main+0x1e>
 8000552:	bf00      	nop
 8000554:	080039a4 	.word	0x080039a4
 8000558:	200000c0 	.word	0x200000c0

0800055c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b094      	sub	sp, #80	@ 0x50
 8000560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000562:	f107 0318 	add.w	r3, r7, #24
 8000566:	2238      	movs	r2, #56	@ 0x38
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f003 f9e2 	bl	8003934 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000570:	1d3b      	adds	r3, r7, #4
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	609a      	str	r2, [r3, #8]
 800057a:	60da      	str	r2, [r3, #12]
 800057c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800057e:	2000      	movs	r0, #0
 8000580:	f000 fd92 	bl	80010a8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000584:	2302      	movs	r3, #2
 8000586:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000588:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800058c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800058e:	2340      	movs	r3, #64	@ 0x40
 8000590:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000592:	2302      	movs	r3, #2
 8000594:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000596:	2302      	movs	r3, #2
 8000598:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800059a:	2304      	movs	r3, #4
 800059c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800059e:	2355      	movs	r3, #85	@ 0x55
 80005a0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a2:	2302      	movs	r3, #2
 80005a4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005a6:	2302      	movs	r3, #2
 80005a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005aa:	2302      	movs	r3, #2
 80005ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ae:	f107 0318 	add.w	r3, r7, #24
 80005b2:	4618      	mov	r0, r3
 80005b4:	f000 fe2c 	bl	8001210 <HAL_RCC_OscConfig>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005be:	f000 f911 	bl	80007e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c2:	230f      	movs	r3, #15
 80005c4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c6:	2303      	movs	r3, #3
 80005c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ca:	2300      	movs	r3, #0
 80005cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	2104      	movs	r1, #4
 80005da:	4618      	mov	r0, r3
 80005dc:	f001 f92a 	bl	8001834 <HAL_RCC_ClockConfig>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005e6:	f000 f8fd 	bl	80007e4 <Error_Handler>
  }
}
 80005ea:	bf00      	nop
 80005ec:	3750      	adds	r7, #80	@ 0x50
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
	...

080005f4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b088      	sub	sp, #32
 80005f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005fa:	f107 0310 	add.w	r3, r7, #16
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
 8000606:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000608:	1d3b      	adds	r3, r7, #4
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
 800060e:	605a      	str	r2, [r3, #4]
 8000610:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000612:	4b20      	ldr	r3, [pc, #128]	@ (8000694 <MX_TIM1_Init+0xa0>)
 8000614:	4a20      	ldr	r2, [pc, #128]	@ (8000698 <MX_TIM1_Init+0xa4>)
 8000616:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 17000;
 8000618:	4b1e      	ldr	r3, [pc, #120]	@ (8000694 <MX_TIM1_Init+0xa0>)
 800061a:	f244 2268 	movw	r2, #17000	@ 0x4268
 800061e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000620:	4b1c      	ldr	r3, [pc, #112]	@ (8000694 <MX_TIM1_Init+0xa0>)
 8000622:	2200      	movs	r2, #0
 8000624:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 8000626:	4b1b      	ldr	r3, [pc, #108]	@ (8000694 <MX_TIM1_Init+0xa0>)
 8000628:	f242 7210 	movw	r2, #10000	@ 0x2710
 800062c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800062e:	4b19      	ldr	r3, [pc, #100]	@ (8000694 <MX_TIM1_Init+0xa0>)
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000634:	4b17      	ldr	r3, [pc, #92]	@ (8000694 <MX_TIM1_Init+0xa0>)
 8000636:	2200      	movs	r2, #0
 8000638:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800063a:	4b16      	ldr	r3, [pc, #88]	@ (8000694 <MX_TIM1_Init+0xa0>)
 800063c:	2200      	movs	r2, #0
 800063e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000640:	4814      	ldr	r0, [pc, #80]	@ (8000694 <MX_TIM1_Init+0xa0>)
 8000642:	f001 fd61 	bl	8002108 <HAL_TIM_Base_Init>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 800064c:	f000 f8ca 	bl	80007e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000650:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000654:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000656:	f107 0310 	add.w	r3, r7, #16
 800065a:	4619      	mov	r1, r3
 800065c:	480d      	ldr	r0, [pc, #52]	@ (8000694 <MX_TIM1_Init+0xa0>)
 800065e:	f001 fef9 	bl	8002454 <HAL_TIM_ConfigClockSource>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000668:	f000 f8bc 	bl	80007e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800066c:	2300      	movs	r3, #0
 800066e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000670:	2300      	movs	r3, #0
 8000672:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000674:	2300      	movs	r3, #0
 8000676:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000678:	1d3b      	adds	r3, r7, #4
 800067a:	4619      	mov	r1, r3
 800067c:	4805      	ldr	r0, [pc, #20]	@ (8000694 <MX_TIM1_Init+0xa0>)
 800067e:	f002 f981 	bl	8002984 <HAL_TIMEx_MasterConfigSynchronization>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000688:	f000 f8ac 	bl	80007e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800068c:	bf00      	nop
 800068e:	3720      	adds	r7, #32
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000028 	.word	0x20000028
 8000698:	40012c00 	.word	0x40012c00

0800069c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80006a0:	4b10      	ldr	r3, [pc, #64]	@ (80006e4 <MX_TIM16_Init+0x48>)
 80006a2:	4a11      	ldr	r2, [pc, #68]	@ (80006e8 <MX_TIM16_Init+0x4c>)
 80006a4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 17000;
 80006a6:	4b0f      	ldr	r3, [pc, #60]	@ (80006e4 <MX_TIM16_Init+0x48>)
 80006a8:	f244 2268 	movw	r2, #17000	@ 0x4268
 80006ac:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ae:	4b0d      	ldr	r3, [pc, #52]	@ (80006e4 <MX_TIM16_Init+0x48>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000;
 80006b4:	4b0b      	ldr	r3, [pc, #44]	@ (80006e4 <MX_TIM16_Init+0x48>)
 80006b6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80006ba:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006bc:	4b09      	ldr	r3, [pc, #36]	@ (80006e4 <MX_TIM16_Init+0x48>)
 80006be:	2200      	movs	r2, #0
 80006c0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80006c2:	4b08      	ldr	r3, [pc, #32]	@ (80006e4 <MX_TIM16_Init+0x48>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006c8:	4b06      	ldr	r3, [pc, #24]	@ (80006e4 <MX_TIM16_Init+0x48>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80006ce:	4805      	ldr	r0, [pc, #20]	@ (80006e4 <MX_TIM16_Init+0x48>)
 80006d0:	f001 fd1a 	bl	8002108 <HAL_TIM_Base_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80006da:	f000 f883 	bl	80007e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	20000074 	.word	0x20000074
 80006e8:	40014400 	.word	0x40014400

080006ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006f0:	4b22      	ldr	r3, [pc, #136]	@ (800077c <MX_USART1_UART_Init+0x90>)
 80006f2:	4a23      	ldr	r2, [pc, #140]	@ (8000780 <MX_USART1_UART_Init+0x94>)
 80006f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006f6:	4b21      	ldr	r3, [pc, #132]	@ (800077c <MX_USART1_UART_Init+0x90>)
 80006f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006fe:	4b1f      	ldr	r3, [pc, #124]	@ (800077c <MX_USART1_UART_Init+0x90>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000704:	4b1d      	ldr	r3, [pc, #116]	@ (800077c <MX_USART1_UART_Init+0x90>)
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800070a:	4b1c      	ldr	r3, [pc, #112]	@ (800077c <MX_USART1_UART_Init+0x90>)
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000710:	4b1a      	ldr	r3, [pc, #104]	@ (800077c <MX_USART1_UART_Init+0x90>)
 8000712:	220c      	movs	r2, #12
 8000714:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000716:	4b19      	ldr	r3, [pc, #100]	@ (800077c <MX_USART1_UART_Init+0x90>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800071c:	4b17      	ldr	r3, [pc, #92]	@ (800077c <MX_USART1_UART_Init+0x90>)
 800071e:	2200      	movs	r2, #0
 8000720:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000722:	4b16      	ldr	r3, [pc, #88]	@ (800077c <MX_USART1_UART_Init+0x90>)
 8000724:	2200      	movs	r2, #0
 8000726:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000728:	4b14      	ldr	r3, [pc, #80]	@ (800077c <MX_USART1_UART_Init+0x90>)
 800072a:	2200      	movs	r2, #0
 800072c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800072e:	4b13      	ldr	r3, [pc, #76]	@ (800077c <MX_USART1_UART_Init+0x90>)
 8000730:	2200      	movs	r2, #0
 8000732:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000734:	4811      	ldr	r0, [pc, #68]	@ (800077c <MX_USART1_UART_Init+0x90>)
 8000736:	f002 fa01 	bl	8002b3c <HAL_UART_Init>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000740:	f000 f850 	bl	80007e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000744:	2100      	movs	r1, #0
 8000746:	480d      	ldr	r0, [pc, #52]	@ (800077c <MX_USART1_UART_Init+0x90>)
 8000748:	f003 f82a 	bl	80037a0 <HAL_UARTEx_SetTxFifoThreshold>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000752:	f000 f847 	bl	80007e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000756:	2100      	movs	r1, #0
 8000758:	4808      	ldr	r0, [pc, #32]	@ (800077c <MX_USART1_UART_Init+0x90>)
 800075a:	f003 f85f 	bl	800381c <HAL_UARTEx_SetRxFifoThreshold>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000764:	f000 f83e 	bl	80007e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000768:	4804      	ldr	r0, [pc, #16]	@ (800077c <MX_USART1_UART_Init+0x90>)
 800076a:	f002 ffe0 	bl	800372e <HAL_UARTEx_DisableFifoMode>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000774:	f000 f836 	bl	80007e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}
 800077c:	200000c0 	.word	0x200000c0
 8000780:	40013800 	.word	0x40013800

08000784 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000784:	b480      	push	{r7}
 8000786:	b085      	sub	sp, #20
 8000788:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078a:	4b15      	ldr	r3, [pc, #84]	@ (80007e0 <MX_GPIO_Init+0x5c>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800078e:	4a14      	ldr	r2, [pc, #80]	@ (80007e0 <MX_GPIO_Init+0x5c>)
 8000790:	f043 0304 	orr.w	r3, r3, #4
 8000794:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000796:	4b12      	ldr	r3, [pc, #72]	@ (80007e0 <MX_GPIO_Init+0x5c>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800079a:	f003 0304 	and.w	r3, r3, #4
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007a2:	4b0f      	ldr	r3, [pc, #60]	@ (80007e0 <MX_GPIO_Init+0x5c>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007a6:	4a0e      	ldr	r2, [pc, #56]	@ (80007e0 <MX_GPIO_Init+0x5c>)
 80007a8:	f043 0320 	orr.w	r3, r3, #32
 80007ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ae:	4b0c      	ldr	r3, [pc, #48]	@ (80007e0 <MX_GPIO_Init+0x5c>)
 80007b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007b2:	f003 0320 	and.w	r3, r3, #32
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	4b09      	ldr	r3, [pc, #36]	@ (80007e0 <MX_GPIO_Init+0x5c>)
 80007bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007be:	4a08      	ldr	r2, [pc, #32]	@ (80007e0 <MX_GPIO_Init+0x5c>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007c6:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <MX_GPIO_Init+0x5c>)
 80007c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007d2:	bf00      	nop
 80007d4:	3714      	adds	r7, #20
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	40021000 	.word	0x40021000

080007e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e8:	b672      	cpsid	i
}
 80007ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ec:	bf00      	nop
 80007ee:	e7fd      	b.n	80007ec <Error_Handler+0x8>

080007f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000834 <HAL_MspInit+0x44>)
 80007f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007fa:	4a0e      	ldr	r2, [pc, #56]	@ (8000834 <HAL_MspInit+0x44>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6613      	str	r3, [r2, #96]	@ 0x60
 8000802:	4b0c      	ldr	r3, [pc, #48]	@ (8000834 <HAL_MspInit+0x44>)
 8000804:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800080e:	4b09      	ldr	r3, [pc, #36]	@ (8000834 <HAL_MspInit+0x44>)
 8000810:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000812:	4a08      	ldr	r2, [pc, #32]	@ (8000834 <HAL_MspInit+0x44>)
 8000814:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000818:	6593      	str	r3, [r2, #88]	@ 0x58
 800081a:	4b06      	ldr	r3, [pc, #24]	@ (8000834 <HAL_MspInit+0x44>)
 800081c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800081e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000822:	603b      	str	r3, [r7, #0]
 8000824:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000826:	f000 fce3 	bl	80011f0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40021000 	.word	0x40021000

08000838 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a1a      	ldr	r2, [pc, #104]	@ (80008b0 <HAL_TIM_Base_MspInit+0x78>)
 8000846:	4293      	cmp	r3, r2
 8000848:	d114      	bne.n	8000874 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800084a:	4b1a      	ldr	r3, [pc, #104]	@ (80008b4 <HAL_TIM_Base_MspInit+0x7c>)
 800084c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800084e:	4a19      	ldr	r2, [pc, #100]	@ (80008b4 <HAL_TIM_Base_MspInit+0x7c>)
 8000850:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000854:	6613      	str	r3, [r2, #96]	@ 0x60
 8000856:	4b17      	ldr	r3, [pc, #92]	@ (80008b4 <HAL_TIM_Base_MspInit+0x7c>)
 8000858:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800085a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000862:	2200      	movs	r2, #0
 8000864:	2100      	movs	r1, #0
 8000866:	2019      	movs	r0, #25
 8000868:	f000 fa67 	bl	8000d3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800086c:	2019      	movs	r0, #25
 800086e:	f000 fa7e 	bl	8000d6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000872:	e018      	b.n	80008a6 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM16)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a0f      	ldr	r2, [pc, #60]	@ (80008b8 <HAL_TIM_Base_MspInit+0x80>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d113      	bne.n	80008a6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800087e:	4b0d      	ldr	r3, [pc, #52]	@ (80008b4 <HAL_TIM_Base_MspInit+0x7c>)
 8000880:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000882:	4a0c      	ldr	r2, [pc, #48]	@ (80008b4 <HAL_TIM_Base_MspInit+0x7c>)
 8000884:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000888:	6613      	str	r3, [r2, #96]	@ 0x60
 800088a:	4b0a      	ldr	r3, [pc, #40]	@ (80008b4 <HAL_TIM_Base_MspInit+0x7c>)
 800088c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800088e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000892:	60bb      	str	r3, [r7, #8]
 8000894:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000896:	2200      	movs	r2, #0
 8000898:	2100      	movs	r1, #0
 800089a:	2019      	movs	r0, #25
 800089c:	f000 fa4d 	bl	8000d3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80008a0:	2019      	movs	r0, #25
 80008a2:	f000 fa64 	bl	8000d6e <HAL_NVIC_EnableIRQ>
}
 80008a6:	bf00      	nop
 80008a8:	3710      	adds	r7, #16
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40012c00 	.word	0x40012c00
 80008b4:	40021000 	.word	0x40021000
 80008b8:	40014400 	.word	0x40014400

080008bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b09e      	sub	sp, #120	@ 0x78
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008d4:	f107 0310 	add.w	r3, r7, #16
 80008d8:	2254      	movs	r2, #84	@ 0x54
 80008da:	2100      	movs	r1, #0
 80008dc:	4618      	mov	r0, r3
 80008de:	f003 f829 	bl	8003934 <memset>
  if(huart->Instance==USART1)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4a1e      	ldr	r2, [pc, #120]	@ (8000960 <HAL_UART_MspInit+0xa4>)
 80008e8:	4293      	cmp	r3, r2
 80008ea:	d135      	bne.n	8000958 <HAL_UART_MspInit+0x9c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80008ec:	2301      	movs	r3, #1
 80008ee:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80008f0:	2300      	movs	r3, #0
 80008f2:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008f4:	f107 0310 	add.w	r3, r7, #16
 80008f8:	4618      	mov	r0, r3
 80008fa:	f001 f9b7 	bl	8001c6c <HAL_RCCEx_PeriphCLKConfig>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000904:	f7ff ff6e 	bl	80007e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000908:	4b16      	ldr	r3, [pc, #88]	@ (8000964 <HAL_UART_MspInit+0xa8>)
 800090a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800090c:	4a15      	ldr	r2, [pc, #84]	@ (8000964 <HAL_UART_MspInit+0xa8>)
 800090e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000912:	6613      	str	r3, [r2, #96]	@ 0x60
 8000914:	4b13      	ldr	r3, [pc, #76]	@ (8000964 <HAL_UART_MspInit+0xa8>)
 8000916:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000918:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800091c:	60fb      	str	r3, [r7, #12]
 800091e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000920:	4b10      	ldr	r3, [pc, #64]	@ (8000964 <HAL_UART_MspInit+0xa8>)
 8000922:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000924:	4a0f      	ldr	r2, [pc, #60]	@ (8000964 <HAL_UART_MspInit+0xa8>)
 8000926:	f043 0304 	orr.w	r3, r3, #4
 800092a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800092c:	4b0d      	ldr	r3, [pc, #52]	@ (8000964 <HAL_UART_MspInit+0xa8>)
 800092e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000930:	f003 0304 	and.w	r3, r3, #4
 8000934:	60bb      	str	r3, [r7, #8]
 8000936:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000938:	2330      	movs	r3, #48	@ 0x30
 800093a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093c:	2302      	movs	r3, #2
 800093e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000944:	2300      	movs	r3, #0
 8000946:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000948:	2307      	movs	r3, #7
 800094a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800094c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000950:	4619      	mov	r1, r3
 8000952:	4805      	ldr	r0, [pc, #20]	@ (8000968 <HAL_UART_MspInit+0xac>)
 8000954:	f000 fa26 	bl	8000da4 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000958:	bf00      	nop
 800095a:	3778      	adds	r7, #120	@ 0x78
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40013800 	.word	0x40013800
 8000964:	40021000 	.word	0x40021000
 8000968:	48000800 	.word	0x48000800

0800096c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000970:	bf00      	nop
 8000972:	e7fd      	b.n	8000970 <NMI_Handler+0x4>

08000974 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000978:	bf00      	nop
 800097a:	e7fd      	b.n	8000978 <HardFault_Handler+0x4>

0800097c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000980:	bf00      	nop
 8000982:	e7fd      	b.n	8000980 <MemManage_Handler+0x4>

08000984 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000988:	bf00      	nop
 800098a:	e7fd      	b.n	8000988 <BusFault_Handler+0x4>

0800098c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000990:	bf00      	nop
 8000992:	e7fd      	b.n	8000990 <UsageFault_Handler+0x4>

08000994 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr

080009a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr

080009be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c2:	f000 f89f 	bl	8000b04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
	...

080009cc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009d0:	4803      	ldr	r0, [pc, #12]	@ (80009e0 <TIM1_UP_TIM16_IRQHandler+0x14>)
 80009d2:	f001 fbf0 	bl	80021b6 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80009d6:	4803      	ldr	r0, [pc, #12]	@ (80009e4 <TIM1_UP_TIM16_IRQHandler+0x18>)
 80009d8:	f001 fbed 	bl	80021b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20000028 	.word	0x20000028
 80009e4:	20000074 	.word	0x20000074

080009e8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80009ec:	4b06      	ldr	r3, [pc, #24]	@ (8000a08 <SystemInit+0x20>)
 80009ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009f2:	4a05      	ldr	r2, [pc, #20]	@ (8000a08 <SystemInit+0x20>)
 80009f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	e000ed00 	.word	0xe000ed00

08000a0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a0c:	480d      	ldr	r0, [pc, #52]	@ (8000a44 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a0e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a10:	f7ff ffea 	bl	80009e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a14:	480c      	ldr	r0, [pc, #48]	@ (8000a48 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a16:	490d      	ldr	r1, [pc, #52]	@ (8000a4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a18:	4a0d      	ldr	r2, [pc, #52]	@ (8000a50 <LoopForever+0xe>)
  movs r3, #0
 8000a1a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000a1c:	e002      	b.n	8000a24 <LoopCopyDataInit>

08000a1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a22:	3304      	adds	r3, #4

08000a24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a28:	d3f9      	bcc.n	8000a1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a2c:	4c0a      	ldr	r4, [pc, #40]	@ (8000a58 <LoopForever+0x16>)
  movs r3, #0
 8000a2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a30:	e001      	b.n	8000a36 <LoopFillZerobss>

08000a32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a34:	3204      	adds	r2, #4

08000a36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a38:	d3fb      	bcc.n	8000a32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a3a:	f002 ff83 	bl	8003944 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a3e:	f7ff fd63 	bl	8000508 <main>

08000a42 <LoopForever>:

LoopForever:
    b LoopForever
 8000a42:	e7fe      	b.n	8000a42 <LoopForever>
  ldr   r0, =_estack
 8000a44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a4c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a50:	080039fc 	.word	0x080039fc
  ldr r2, =_sbss
 8000a54:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a58:	20000158 	.word	0x20000158

08000a5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a5c:	e7fe      	b.n	8000a5c <ADC1_2_IRQHandler>

08000a5e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b082      	sub	sp, #8
 8000a62:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a64:	2300      	movs	r3, #0
 8000a66:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a68:	2003      	movs	r0, #3
 8000a6a:	f000 f95b 	bl	8000d24 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a6e:	2000      	movs	r0, #0
 8000a70:	f000 f80e 	bl	8000a90 <HAL_InitTick>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d002      	beq.n	8000a80 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	71fb      	strb	r3, [r7, #7]
 8000a7e:	e001      	b.n	8000a84 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a80:	f7ff feb6 	bl	80007f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a84:	79fb      	ldrb	r3, [r7, #7]

}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
	...

08000a90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000a9c:	4b16      	ldr	r3, [pc, #88]	@ (8000af8 <HAL_InitTick+0x68>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d022      	beq.n	8000aea <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000aa4:	4b15      	ldr	r3, [pc, #84]	@ (8000afc <HAL_InitTick+0x6c>)
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	4b13      	ldr	r3, [pc, #76]	@ (8000af8 <HAL_InitTick+0x68>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000ab0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f000 f966 	bl	8000d8a <HAL_SYSTICK_Config>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d10f      	bne.n	8000ae4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	2b0f      	cmp	r3, #15
 8000ac8:	d809      	bhi.n	8000ade <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aca:	2200      	movs	r2, #0
 8000acc:	6879      	ldr	r1, [r7, #4]
 8000ace:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad2:	f000 f932 	bl	8000d3a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ad6:	4a0a      	ldr	r2, [pc, #40]	@ (8000b00 <HAL_InitTick+0x70>)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	6013      	str	r3, [r2, #0]
 8000adc:	e007      	b.n	8000aee <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	73fb      	strb	r3, [r7, #15]
 8000ae2:	e004      	b.n	8000aee <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	73fb      	strb	r3, [r7, #15]
 8000ae8:	e001      	b.n	8000aee <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000aea:	2301      	movs	r3, #1
 8000aec:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3710      	adds	r7, #16
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000008 	.word	0x20000008
 8000afc:	20000000 	.word	0x20000000
 8000b00:	20000004 	.word	0x20000004

08000b04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b08:	4b05      	ldr	r3, [pc, #20]	@ (8000b20 <HAL_IncTick+0x1c>)
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	4b05      	ldr	r3, [pc, #20]	@ (8000b24 <HAL_IncTick+0x20>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4413      	add	r3, r2
 8000b12:	4a03      	ldr	r2, [pc, #12]	@ (8000b20 <HAL_IncTick+0x1c>)
 8000b14:	6013      	str	r3, [r2, #0]
}
 8000b16:	bf00      	nop
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	20000154 	.word	0x20000154
 8000b24:	20000008 	.word	0x20000008

08000b28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b2c:	4b03      	ldr	r3, [pc, #12]	@ (8000b3c <HAL_GetTick+0x14>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	20000154 	.word	0x20000154

08000b40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b48:	f7ff ffee 	bl	8000b28 <HAL_GetTick>
 8000b4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b58:	d004      	beq.n	8000b64 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b5a:	4b09      	ldr	r3, [pc, #36]	@ (8000b80 <HAL_Delay+0x40>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	68fa      	ldr	r2, [r7, #12]
 8000b60:	4413      	add	r3, r2
 8000b62:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b64:	bf00      	nop
 8000b66:	f7ff ffdf 	bl	8000b28 <HAL_GetTick>
 8000b6a:	4602      	mov	r2, r0
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	1ad3      	subs	r3, r2, r3
 8000b70:	68fa      	ldr	r2, [r7, #12]
 8000b72:	429a      	cmp	r2, r3
 8000b74:	d8f7      	bhi.n	8000b66 <HAL_Delay+0x26>
  {
  }
}
 8000b76:	bf00      	nop
 8000b78:	bf00      	nop
 8000b7a:	3710      	adds	r7, #16
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20000008 	.word	0x20000008

08000b84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	f003 0307 	and.w	r3, r3, #7
 8000b92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b94:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b9a:	68ba      	ldr	r2, [r7, #8]
 8000b9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bb6:	4a04      	ldr	r2, [pc, #16]	@ (8000bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	60d3      	str	r3, [r2, #12]
}
 8000bbc:	bf00      	nop
 8000bbe:	3714      	adds	r7, #20
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bd0:	4b04      	ldr	r3, [pc, #16]	@ (8000be4 <__NVIC_GetPriorityGrouping+0x18>)
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	0a1b      	lsrs	r3, r3, #8
 8000bd6:	f003 0307 	and.w	r3, r3, #7
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	db0b      	blt.n	8000c12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	f003 021f 	and.w	r2, r3, #31
 8000c00:	4907      	ldr	r1, [pc, #28]	@ (8000c20 <__NVIC_EnableIRQ+0x38>)
 8000c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c06:	095b      	lsrs	r3, r3, #5
 8000c08:	2001      	movs	r0, #1
 8000c0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c12:	bf00      	nop
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	e000e100 	.word	0xe000e100

08000c24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	6039      	str	r1, [r7, #0]
 8000c2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	db0a      	blt.n	8000c4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	b2da      	uxtb	r2, r3
 8000c3c:	490c      	ldr	r1, [pc, #48]	@ (8000c70 <__NVIC_SetPriority+0x4c>)
 8000c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c42:	0112      	lsls	r2, r2, #4
 8000c44:	b2d2      	uxtb	r2, r2
 8000c46:	440b      	add	r3, r1
 8000c48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c4c:	e00a      	b.n	8000c64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	b2da      	uxtb	r2, r3
 8000c52:	4908      	ldr	r1, [pc, #32]	@ (8000c74 <__NVIC_SetPriority+0x50>)
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	f003 030f 	and.w	r3, r3, #15
 8000c5a:	3b04      	subs	r3, #4
 8000c5c:	0112      	lsls	r2, r2, #4
 8000c5e:	b2d2      	uxtb	r2, r2
 8000c60:	440b      	add	r3, r1
 8000c62:	761a      	strb	r2, [r3, #24]
}
 8000c64:	bf00      	nop
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	e000e100 	.word	0xe000e100
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b089      	sub	sp, #36	@ 0x24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	60f8      	str	r0, [r7, #12]
 8000c80:	60b9      	str	r1, [r7, #8]
 8000c82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	f003 0307 	and.w	r3, r3, #7
 8000c8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c8c:	69fb      	ldr	r3, [r7, #28]
 8000c8e:	f1c3 0307 	rsb	r3, r3, #7
 8000c92:	2b04      	cmp	r3, #4
 8000c94:	bf28      	it	cs
 8000c96:	2304      	movcs	r3, #4
 8000c98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	3304      	adds	r3, #4
 8000c9e:	2b06      	cmp	r3, #6
 8000ca0:	d902      	bls.n	8000ca8 <NVIC_EncodePriority+0x30>
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	3b03      	subs	r3, #3
 8000ca6:	e000      	b.n	8000caa <NVIC_EncodePriority+0x32>
 8000ca8:	2300      	movs	r3, #0
 8000caa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cac:	f04f 32ff 	mov.w	r2, #4294967295
 8000cb0:	69bb      	ldr	r3, [r7, #24]
 8000cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb6:	43da      	mvns	r2, r3
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	401a      	ands	r2, r3
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cca:	43d9      	mvns	r1, r3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd0:	4313      	orrs	r3, r2
         );
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3724      	adds	r7, #36	@ 0x24
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
	...

08000ce0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	3b01      	subs	r3, #1
 8000cec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000cf0:	d301      	bcc.n	8000cf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e00f      	b.n	8000d16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cf6:	4a0a      	ldr	r2, [pc, #40]	@ (8000d20 <SysTick_Config+0x40>)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	3b01      	subs	r3, #1
 8000cfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cfe:	210f      	movs	r1, #15
 8000d00:	f04f 30ff 	mov.w	r0, #4294967295
 8000d04:	f7ff ff8e 	bl	8000c24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d08:	4b05      	ldr	r3, [pc, #20]	@ (8000d20 <SysTick_Config+0x40>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d0e:	4b04      	ldr	r3, [pc, #16]	@ (8000d20 <SysTick_Config+0x40>)
 8000d10:	2207      	movs	r2, #7
 8000d12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d14:	2300      	movs	r3, #0
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	e000e010 	.word	0xe000e010

08000d24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d2c:	6878      	ldr	r0, [r7, #4]
 8000d2e:	f7ff ff29 	bl	8000b84 <__NVIC_SetPriorityGrouping>
}
 8000d32:	bf00      	nop
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b086      	sub	sp, #24
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	4603      	mov	r3, r0
 8000d42:	60b9      	str	r1, [r7, #8]
 8000d44:	607a      	str	r2, [r7, #4]
 8000d46:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d48:	f7ff ff40 	bl	8000bcc <__NVIC_GetPriorityGrouping>
 8000d4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d4e:	687a      	ldr	r2, [r7, #4]
 8000d50:	68b9      	ldr	r1, [r7, #8]
 8000d52:	6978      	ldr	r0, [r7, #20]
 8000d54:	f7ff ff90 	bl	8000c78 <NVIC_EncodePriority>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d5e:	4611      	mov	r1, r2
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff ff5f 	bl	8000c24 <__NVIC_SetPriority>
}
 8000d66:	bf00      	nop
 8000d68:	3718      	adds	r7, #24
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b082      	sub	sp, #8
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	4603      	mov	r3, r0
 8000d76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff ff33 	bl	8000be8 <__NVIC_EnableIRQ>
}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b082      	sub	sp, #8
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f7ff ffa4 	bl	8000ce0 <SysTick_Config>
 8000d98:	4603      	mov	r3, r0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
	...

08000da4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b087      	sub	sp, #28
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000dae:	2300      	movs	r3, #0
 8000db0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000db2:	e15a      	b.n	800106a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	2101      	movs	r1, #1
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	f000 814c 	beq.w	8001064 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f003 0303 	and.w	r3, r3, #3
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d005      	beq.n	8000de4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000de0:	2b02      	cmp	r3, #2
 8000de2:	d130      	bne.n	8000e46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	689b      	ldr	r3, [r3, #8]
 8000de8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	2203      	movs	r2, #3
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	43db      	mvns	r3, r3
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	68da      	ldr	r2, [r3, #12]
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	43db      	mvns	r3, r3
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	4013      	ands	r3, r2
 8000e28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	091b      	lsrs	r3, r3, #4
 8000e30:	f003 0201 	and.w	r2, r3, #1
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	f003 0303 	and.w	r3, r3, #3
 8000e4e:	2b03      	cmp	r3, #3
 8000e50:	d017      	beq.n	8000e82 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	68db      	ldr	r3, [r3, #12]
 8000e56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	2203      	movs	r2, #3
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	43db      	mvns	r3, r3
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	4013      	ands	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	689a      	ldr	r2, [r3, #8]
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f003 0303 	and.w	r3, r3, #3
 8000e8a:	2b02      	cmp	r3, #2
 8000e8c:	d123      	bne.n	8000ed6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	08da      	lsrs	r2, r3, #3
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	3208      	adds	r2, #8
 8000e96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	f003 0307 	and.w	r3, r3, #7
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	220f      	movs	r2, #15
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	43db      	mvns	r3, r3
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	691a      	ldr	r2, [r3, #16]
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	f003 0307 	and.w	r3, r3, #7
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	08da      	lsrs	r2, r3, #3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3208      	adds	r2, #8
 8000ed0:	6939      	ldr	r1, [r7, #16]
 8000ed2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	2203      	movs	r2, #3
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	4013      	ands	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f003 0203 	and.w	r2, r3, #3
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	f000 80a6 	beq.w	8001064 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f18:	4b5b      	ldr	r3, [pc, #364]	@ (8001088 <HAL_GPIO_Init+0x2e4>)
 8000f1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f1c:	4a5a      	ldr	r2, [pc, #360]	@ (8001088 <HAL_GPIO_Init+0x2e4>)
 8000f1e:	f043 0301 	orr.w	r3, r3, #1
 8000f22:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f24:	4b58      	ldr	r3, [pc, #352]	@ (8001088 <HAL_GPIO_Init+0x2e4>)
 8000f26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f28:	f003 0301 	and.w	r3, r3, #1
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f30:	4a56      	ldr	r2, [pc, #344]	@ (800108c <HAL_GPIO_Init+0x2e8>)
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	089b      	lsrs	r3, r3, #2
 8000f36:	3302      	adds	r3, #2
 8000f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	f003 0303 	and.w	r3, r3, #3
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	220f      	movs	r2, #15
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	4013      	ands	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000f5a:	d01f      	beq.n	8000f9c <HAL_GPIO_Init+0x1f8>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4a4c      	ldr	r2, [pc, #304]	@ (8001090 <HAL_GPIO_Init+0x2ec>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d019      	beq.n	8000f98 <HAL_GPIO_Init+0x1f4>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4a4b      	ldr	r2, [pc, #300]	@ (8001094 <HAL_GPIO_Init+0x2f0>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d013      	beq.n	8000f94 <HAL_GPIO_Init+0x1f0>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	4a4a      	ldr	r2, [pc, #296]	@ (8001098 <HAL_GPIO_Init+0x2f4>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d00d      	beq.n	8000f90 <HAL_GPIO_Init+0x1ec>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4a49      	ldr	r2, [pc, #292]	@ (800109c <HAL_GPIO_Init+0x2f8>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d007      	beq.n	8000f8c <HAL_GPIO_Init+0x1e8>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4a48      	ldr	r2, [pc, #288]	@ (80010a0 <HAL_GPIO_Init+0x2fc>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d101      	bne.n	8000f88 <HAL_GPIO_Init+0x1e4>
 8000f84:	2305      	movs	r3, #5
 8000f86:	e00a      	b.n	8000f9e <HAL_GPIO_Init+0x1fa>
 8000f88:	2306      	movs	r3, #6
 8000f8a:	e008      	b.n	8000f9e <HAL_GPIO_Init+0x1fa>
 8000f8c:	2304      	movs	r3, #4
 8000f8e:	e006      	b.n	8000f9e <HAL_GPIO_Init+0x1fa>
 8000f90:	2303      	movs	r3, #3
 8000f92:	e004      	b.n	8000f9e <HAL_GPIO_Init+0x1fa>
 8000f94:	2302      	movs	r3, #2
 8000f96:	e002      	b.n	8000f9e <HAL_GPIO_Init+0x1fa>
 8000f98:	2301      	movs	r3, #1
 8000f9a:	e000      	b.n	8000f9e <HAL_GPIO_Init+0x1fa>
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	697a      	ldr	r2, [r7, #20]
 8000fa0:	f002 0203 	and.w	r2, r2, #3
 8000fa4:	0092      	lsls	r2, r2, #2
 8000fa6:	4093      	lsls	r3, r2
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fae:	4937      	ldr	r1, [pc, #220]	@ (800108c <HAL_GPIO_Init+0x2e8>)
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	089b      	lsrs	r3, r3, #2
 8000fb4:	3302      	adds	r3, #2
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fbc:	4b39      	ldr	r3, [pc, #228]	@ (80010a4 <HAL_GPIO_Init+0x300>)
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d003      	beq.n	8000fe0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fe0:	4a30      	ldr	r2, [pc, #192]	@ (80010a4 <HAL_GPIO_Init+0x300>)
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000fe6:	4b2f      	ldr	r3, [pc, #188]	@ (80010a4 <HAL_GPIO_Init+0x300>)
 8000fe8:	68db      	ldr	r3, [r3, #12]
 8000fea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d003      	beq.n	800100a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	4313      	orrs	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800100a:	4a26      	ldr	r2, [pc, #152]	@ (80010a4 <HAL_GPIO_Init+0x300>)
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001010:	4b24      	ldr	r3, [pc, #144]	@ (80010a4 <HAL_GPIO_Init+0x300>)
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	43db      	mvns	r3, r3
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	4013      	ands	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001028:	2b00      	cmp	r3, #0
 800102a:	d003      	beq.n	8001034 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	4313      	orrs	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001034:	4a1b      	ldr	r2, [pc, #108]	@ (80010a4 <HAL_GPIO_Init+0x300>)
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800103a:	4b1a      	ldr	r3, [pc, #104]	@ (80010a4 <HAL_GPIO_Init+0x300>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	43db      	mvns	r3, r3
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	4013      	ands	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d003      	beq.n	800105e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	4313      	orrs	r3, r2
 800105c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800105e:	4a11      	ldr	r2, [pc, #68]	@ (80010a4 <HAL_GPIO_Init+0x300>)
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	3301      	adds	r3, #1
 8001068:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	fa22 f303 	lsr.w	r3, r2, r3
 8001074:	2b00      	cmp	r3, #0
 8001076:	f47f ae9d 	bne.w	8000db4 <HAL_GPIO_Init+0x10>
  }
}
 800107a:	bf00      	nop
 800107c:	bf00      	nop
 800107e:	371c      	adds	r7, #28
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	40021000 	.word	0x40021000
 800108c:	40010000 	.word	0x40010000
 8001090:	48000400 	.word	0x48000400
 8001094:	48000800 	.word	0x48000800
 8001098:	48000c00 	.word	0x48000c00
 800109c:	48001000 	.word	0x48001000
 80010a0:	48001400 	.word	0x48001400
 80010a4:	40010400 	.word	0x40010400

080010a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d141      	bne.n	800113a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80010b6:	4b4b      	ldr	r3, [pc, #300]	@ (80011e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80010be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010c2:	d131      	bne.n	8001128 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80010c4:	4b47      	ldr	r3, [pc, #284]	@ (80011e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010ca:	4a46      	ldr	r2, [pc, #280]	@ (80011e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80010d0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80010d4:	4b43      	ldr	r3, [pc, #268]	@ (80011e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80010dc:	4a41      	ldr	r2, [pc, #260]	@ (80011e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80010e4:	4b40      	ldr	r3, [pc, #256]	@ (80011e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2232      	movs	r2, #50	@ 0x32
 80010ea:	fb02 f303 	mul.w	r3, r2, r3
 80010ee:	4a3f      	ldr	r2, [pc, #252]	@ (80011ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 80010f0:	fba2 2303 	umull	r2, r3, r2, r3
 80010f4:	0c9b      	lsrs	r3, r3, #18
 80010f6:	3301      	adds	r3, #1
 80010f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010fa:	e002      	b.n	8001102 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	3b01      	subs	r3, #1
 8001100:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001102:	4b38      	ldr	r3, [pc, #224]	@ (80011e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001104:	695b      	ldr	r3, [r3, #20]
 8001106:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800110a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800110e:	d102      	bne.n	8001116 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d1f2      	bne.n	80010fc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001116:	4b33      	ldr	r3, [pc, #204]	@ (80011e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001118:	695b      	ldr	r3, [r3, #20]
 800111a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800111e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001122:	d158      	bne.n	80011d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001124:	2303      	movs	r3, #3
 8001126:	e057      	b.n	80011d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001128:	4b2e      	ldr	r3, [pc, #184]	@ (80011e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800112a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800112e:	4a2d      	ldr	r2, [pc, #180]	@ (80011e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001130:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001134:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001138:	e04d      	b.n	80011d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001140:	d141      	bne.n	80011c6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001142:	4b28      	ldr	r3, [pc, #160]	@ (80011e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800114a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800114e:	d131      	bne.n	80011b4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001150:	4b24      	ldr	r3, [pc, #144]	@ (80011e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001152:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001156:	4a23      	ldr	r2, [pc, #140]	@ (80011e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001158:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800115c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001160:	4b20      	ldr	r3, [pc, #128]	@ (80011e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001168:	4a1e      	ldr	r2, [pc, #120]	@ (80011e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800116a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800116e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001170:	4b1d      	ldr	r3, [pc, #116]	@ (80011e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2232      	movs	r2, #50	@ 0x32
 8001176:	fb02 f303 	mul.w	r3, r2, r3
 800117a:	4a1c      	ldr	r2, [pc, #112]	@ (80011ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 800117c:	fba2 2303 	umull	r2, r3, r2, r3
 8001180:	0c9b      	lsrs	r3, r3, #18
 8001182:	3301      	adds	r3, #1
 8001184:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001186:	e002      	b.n	800118e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	3b01      	subs	r3, #1
 800118c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800118e:	4b15      	ldr	r3, [pc, #84]	@ (80011e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001190:	695b      	ldr	r3, [r3, #20]
 8001192:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001196:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800119a:	d102      	bne.n	80011a2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d1f2      	bne.n	8001188 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011a2:	4b10      	ldr	r3, [pc, #64]	@ (80011e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011a4:	695b      	ldr	r3, [r3, #20]
 80011a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011ae:	d112      	bne.n	80011d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80011b0:	2303      	movs	r3, #3
 80011b2:	e011      	b.n	80011d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80011b4:	4b0b      	ldr	r3, [pc, #44]	@ (80011e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80011ba:	4a0a      	ldr	r2, [pc, #40]	@ (80011e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011c0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80011c4:	e007      	b.n	80011d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80011c6:	4b07      	ldr	r3, [pc, #28]	@ (80011e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80011ce:	4a05      	ldr	r2, [pc, #20]	@ (80011e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011d0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011d4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80011d6:	2300      	movs	r3, #0
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	40007000 	.word	0x40007000
 80011e8:	20000000 	.word	0x20000000
 80011ec:	431bde83 	.word	0x431bde83

080011f0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80011f4:	4b05      	ldr	r3, [pc, #20]	@ (800120c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	4a04      	ldr	r2, [pc, #16]	@ (800120c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80011fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011fe:	6093      	str	r3, [r2, #8]
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	40007000 	.word	0x40007000

08001210 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b088      	sub	sp, #32
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d101      	bne.n	8001222 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e2fe      	b.n	8001820 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	2b00      	cmp	r3, #0
 800122c:	d075      	beq.n	800131a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800122e:	4b97      	ldr	r3, [pc, #604]	@ (800148c <HAL_RCC_OscConfig+0x27c>)
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	f003 030c 	and.w	r3, r3, #12
 8001236:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001238:	4b94      	ldr	r3, [pc, #592]	@ (800148c <HAL_RCC_OscConfig+0x27c>)
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	f003 0303 	and.w	r3, r3, #3
 8001240:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	2b0c      	cmp	r3, #12
 8001246:	d102      	bne.n	800124e <HAL_RCC_OscConfig+0x3e>
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	2b03      	cmp	r3, #3
 800124c:	d002      	beq.n	8001254 <HAL_RCC_OscConfig+0x44>
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	2b08      	cmp	r3, #8
 8001252:	d10b      	bne.n	800126c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001254:	4b8d      	ldr	r3, [pc, #564]	@ (800148c <HAL_RCC_OscConfig+0x27c>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800125c:	2b00      	cmp	r3, #0
 800125e:	d05b      	beq.n	8001318 <HAL_RCC_OscConfig+0x108>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d157      	bne.n	8001318 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	e2d9      	b.n	8001820 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001274:	d106      	bne.n	8001284 <HAL_RCC_OscConfig+0x74>
 8001276:	4b85      	ldr	r3, [pc, #532]	@ (800148c <HAL_RCC_OscConfig+0x27c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a84      	ldr	r2, [pc, #528]	@ (800148c <HAL_RCC_OscConfig+0x27c>)
 800127c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001280:	6013      	str	r3, [r2, #0]
 8001282:	e01d      	b.n	80012c0 <HAL_RCC_OscConfig+0xb0>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800128c:	d10c      	bne.n	80012a8 <HAL_RCC_OscConfig+0x98>
 800128e:	4b7f      	ldr	r3, [pc, #508]	@ (800148c <HAL_RCC_OscConfig+0x27c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a7e      	ldr	r2, [pc, #504]	@ (800148c <HAL_RCC_OscConfig+0x27c>)
 8001294:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001298:	6013      	str	r3, [r2, #0]
 800129a:	4b7c      	ldr	r3, [pc, #496]	@ (800148c <HAL_RCC_OscConfig+0x27c>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a7b      	ldr	r2, [pc, #492]	@ (800148c <HAL_RCC_OscConfig+0x27c>)
 80012a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012a4:	6013      	str	r3, [r2, #0]
 80012a6:	e00b      	b.n	80012c0 <HAL_RCC_OscConfig+0xb0>
 80012a8:	4b78      	ldr	r3, [pc, #480]	@ (800148c <HAL_RCC_OscConfig+0x27c>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a77      	ldr	r2, [pc, #476]	@ (800148c <HAL_RCC_OscConfig+0x27c>)
 80012ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012b2:	6013      	str	r3, [r2, #0]
 80012b4:	4b75      	ldr	r3, [pc, #468]	@ (800148c <HAL_RCC_OscConfig+0x27c>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a74      	ldr	r2, [pc, #464]	@ (800148c <HAL_RCC_OscConfig+0x27c>)
 80012ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d013      	beq.n	80012f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c8:	f7ff fc2e 	bl	8000b28 <HAL_GetTick>
 80012cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012ce:	e008      	b.n	80012e2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012d0:	f7ff fc2a 	bl	8000b28 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2b64      	cmp	r3, #100	@ 0x64
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e29e      	b.n	8001820 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012e2:	4b6a      	ldr	r3, [pc, #424]	@ (800148c <HAL_RCC_OscConfig+0x27c>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d0f0      	beq.n	80012d0 <HAL_RCC_OscConfig+0xc0>
 80012ee:	e014      	b.n	800131a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012f0:	f7ff fc1a 	bl	8000b28 <HAL_GetTick>
 80012f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012f6:	e008      	b.n	800130a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012f8:	f7ff fc16 	bl	8000b28 <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b64      	cmp	r3, #100	@ 0x64
 8001304:	d901      	bls.n	800130a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e28a      	b.n	8001820 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800130a:	4b60      	ldr	r3, [pc, #384]	@ (800148c <HAL_RCC_OscConfig+0x27c>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d1f0      	bne.n	80012f8 <HAL_RCC_OscConfig+0xe8>
 8001316:	e000      	b.n	800131a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001318:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	2b00      	cmp	r3, #0
 8001324:	d075      	beq.n	8001412 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001326:	4b59      	ldr	r3, [pc, #356]	@ (800148c <HAL_RCC_OscConfig+0x27c>)
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	f003 030c 	and.w	r3, r3, #12
 800132e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001330:	4b56      	ldr	r3, [pc, #344]	@ (800148c <HAL_RCC_OscConfig+0x27c>)
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	f003 0303 	and.w	r3, r3, #3
 8001338:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	2b0c      	cmp	r3, #12
 800133e:	d102      	bne.n	8001346 <HAL_RCC_OscConfig+0x136>
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	2b02      	cmp	r3, #2
 8001344:	d002      	beq.n	800134c <HAL_RCC_OscConfig+0x13c>
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	2b04      	cmp	r3, #4
 800134a:	d11f      	bne.n	800138c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800134c:	4b4f      	ldr	r3, [pc, #316]	@ (800148c <HAL_RCC_OscConfig+0x27c>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001354:	2b00      	cmp	r3, #0
 8001356:	d005      	beq.n	8001364 <HAL_RCC_OscConfig+0x154>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d101      	bne.n	8001364 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	e25d      	b.n	8001820 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001364:	4b49      	ldr	r3, [pc, #292]	@ (800148c <HAL_RCC_OscConfig+0x27c>)
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	691b      	ldr	r3, [r3, #16]
 8001370:	061b      	lsls	r3, r3, #24
 8001372:	4946      	ldr	r1, [pc, #280]	@ (800148c <HAL_RCC_OscConfig+0x27c>)
 8001374:	4313      	orrs	r3, r2
 8001376:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001378:	4b45      	ldr	r3, [pc, #276]	@ (8001490 <HAL_RCC_OscConfig+0x280>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff fb87 	bl	8000a90 <HAL_InitTick>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d043      	beq.n	8001410 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e249      	b.n	8001820 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d023      	beq.n	80013dc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001394:	4b3d      	ldr	r3, [pc, #244]	@ (800148c <HAL_RCC_OscConfig+0x27c>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a3c      	ldr	r2, [pc, #240]	@ (800148c <HAL_RCC_OscConfig+0x27c>)
 800139a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800139e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a0:	f7ff fbc2 	bl	8000b28 <HAL_GetTick>
 80013a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013a6:	e008      	b.n	80013ba <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013a8:	f7ff fbbe 	bl	8000b28 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d901      	bls.n	80013ba <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e232      	b.n	8001820 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013ba:	4b34      	ldr	r3, [pc, #208]	@ (800148c <HAL_RCC_OscConfig+0x27c>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d0f0      	beq.n	80013a8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013c6:	4b31      	ldr	r3, [pc, #196]	@ (800148c <HAL_RCC_OscConfig+0x27c>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	691b      	ldr	r3, [r3, #16]
 80013d2:	061b      	lsls	r3, r3, #24
 80013d4:	492d      	ldr	r1, [pc, #180]	@ (800148c <HAL_RCC_OscConfig+0x27c>)
 80013d6:	4313      	orrs	r3, r2
 80013d8:	604b      	str	r3, [r1, #4]
 80013da:	e01a      	b.n	8001412 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013dc:	4b2b      	ldr	r3, [pc, #172]	@ (800148c <HAL_RCC_OscConfig+0x27c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a2a      	ldr	r2, [pc, #168]	@ (800148c <HAL_RCC_OscConfig+0x27c>)
 80013e2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80013e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e8:	f7ff fb9e 	bl	8000b28 <HAL_GetTick>
 80013ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013ee:	e008      	b.n	8001402 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013f0:	f7ff fb9a 	bl	8000b28 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e20e      	b.n	8001820 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001402:	4b22      	ldr	r3, [pc, #136]	@ (800148c <HAL_RCC_OscConfig+0x27c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800140a:	2b00      	cmp	r3, #0
 800140c:	d1f0      	bne.n	80013f0 <HAL_RCC_OscConfig+0x1e0>
 800140e:	e000      	b.n	8001412 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001410:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0308 	and.w	r3, r3, #8
 800141a:	2b00      	cmp	r3, #0
 800141c:	d041      	beq.n	80014a2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	695b      	ldr	r3, [r3, #20]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d01c      	beq.n	8001460 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001426:	4b19      	ldr	r3, [pc, #100]	@ (800148c <HAL_RCC_OscConfig+0x27c>)
 8001428:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800142c:	4a17      	ldr	r2, [pc, #92]	@ (800148c <HAL_RCC_OscConfig+0x27c>)
 800142e:	f043 0301 	orr.w	r3, r3, #1
 8001432:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001436:	f7ff fb77 	bl	8000b28 <HAL_GetTick>
 800143a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800143c:	e008      	b.n	8001450 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800143e:	f7ff fb73 	bl	8000b28 <HAL_GetTick>
 8001442:	4602      	mov	r2, r0
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	2b02      	cmp	r3, #2
 800144a:	d901      	bls.n	8001450 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800144c:	2303      	movs	r3, #3
 800144e:	e1e7      	b.n	8001820 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001450:	4b0e      	ldr	r3, [pc, #56]	@ (800148c <HAL_RCC_OscConfig+0x27c>)
 8001452:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	2b00      	cmp	r3, #0
 800145c:	d0ef      	beq.n	800143e <HAL_RCC_OscConfig+0x22e>
 800145e:	e020      	b.n	80014a2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001460:	4b0a      	ldr	r3, [pc, #40]	@ (800148c <HAL_RCC_OscConfig+0x27c>)
 8001462:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001466:	4a09      	ldr	r2, [pc, #36]	@ (800148c <HAL_RCC_OscConfig+0x27c>)
 8001468:	f023 0301 	bic.w	r3, r3, #1
 800146c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001470:	f7ff fb5a 	bl	8000b28 <HAL_GetTick>
 8001474:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001476:	e00d      	b.n	8001494 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001478:	f7ff fb56 	bl	8000b28 <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b02      	cmp	r3, #2
 8001484:	d906      	bls.n	8001494 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e1ca      	b.n	8001820 <HAL_RCC_OscConfig+0x610>
 800148a:	bf00      	nop
 800148c:	40021000 	.word	0x40021000
 8001490:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001494:	4b8c      	ldr	r3, [pc, #560]	@ (80016c8 <HAL_RCC_OscConfig+0x4b8>)
 8001496:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1ea      	bne.n	8001478 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0304 	and.w	r3, r3, #4
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	f000 80a6 	beq.w	80015fc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014b0:	2300      	movs	r3, #0
 80014b2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80014b4:	4b84      	ldr	r3, [pc, #528]	@ (80016c8 <HAL_RCC_OscConfig+0x4b8>)
 80014b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d101      	bne.n	80014c4 <HAL_RCC_OscConfig+0x2b4>
 80014c0:	2301      	movs	r3, #1
 80014c2:	e000      	b.n	80014c6 <HAL_RCC_OscConfig+0x2b6>
 80014c4:	2300      	movs	r3, #0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d00d      	beq.n	80014e6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ca:	4b7f      	ldr	r3, [pc, #508]	@ (80016c8 <HAL_RCC_OscConfig+0x4b8>)
 80014cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ce:	4a7e      	ldr	r2, [pc, #504]	@ (80016c8 <HAL_RCC_OscConfig+0x4b8>)
 80014d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80014d6:	4b7c      	ldr	r3, [pc, #496]	@ (80016c8 <HAL_RCC_OscConfig+0x4b8>)
 80014d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80014e2:	2301      	movs	r3, #1
 80014e4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014e6:	4b79      	ldr	r3, [pc, #484]	@ (80016cc <HAL_RCC_OscConfig+0x4bc>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d118      	bne.n	8001524 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014f2:	4b76      	ldr	r3, [pc, #472]	@ (80016cc <HAL_RCC_OscConfig+0x4bc>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a75      	ldr	r2, [pc, #468]	@ (80016cc <HAL_RCC_OscConfig+0x4bc>)
 80014f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014fe:	f7ff fb13 	bl	8000b28 <HAL_GetTick>
 8001502:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001504:	e008      	b.n	8001518 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001506:	f7ff fb0f 	bl	8000b28 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e183      	b.n	8001820 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001518:	4b6c      	ldr	r3, [pc, #432]	@ (80016cc <HAL_RCC_OscConfig+0x4bc>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001520:	2b00      	cmp	r3, #0
 8001522:	d0f0      	beq.n	8001506 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d108      	bne.n	800153e <HAL_RCC_OscConfig+0x32e>
 800152c:	4b66      	ldr	r3, [pc, #408]	@ (80016c8 <HAL_RCC_OscConfig+0x4b8>)
 800152e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001532:	4a65      	ldr	r2, [pc, #404]	@ (80016c8 <HAL_RCC_OscConfig+0x4b8>)
 8001534:	f043 0301 	orr.w	r3, r3, #1
 8001538:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800153c:	e024      	b.n	8001588 <HAL_RCC_OscConfig+0x378>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	2b05      	cmp	r3, #5
 8001544:	d110      	bne.n	8001568 <HAL_RCC_OscConfig+0x358>
 8001546:	4b60      	ldr	r3, [pc, #384]	@ (80016c8 <HAL_RCC_OscConfig+0x4b8>)
 8001548:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800154c:	4a5e      	ldr	r2, [pc, #376]	@ (80016c8 <HAL_RCC_OscConfig+0x4b8>)
 800154e:	f043 0304 	orr.w	r3, r3, #4
 8001552:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001556:	4b5c      	ldr	r3, [pc, #368]	@ (80016c8 <HAL_RCC_OscConfig+0x4b8>)
 8001558:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800155c:	4a5a      	ldr	r2, [pc, #360]	@ (80016c8 <HAL_RCC_OscConfig+0x4b8>)
 800155e:	f043 0301 	orr.w	r3, r3, #1
 8001562:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001566:	e00f      	b.n	8001588 <HAL_RCC_OscConfig+0x378>
 8001568:	4b57      	ldr	r3, [pc, #348]	@ (80016c8 <HAL_RCC_OscConfig+0x4b8>)
 800156a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800156e:	4a56      	ldr	r2, [pc, #344]	@ (80016c8 <HAL_RCC_OscConfig+0x4b8>)
 8001570:	f023 0301 	bic.w	r3, r3, #1
 8001574:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001578:	4b53      	ldr	r3, [pc, #332]	@ (80016c8 <HAL_RCC_OscConfig+0x4b8>)
 800157a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800157e:	4a52      	ldr	r2, [pc, #328]	@ (80016c8 <HAL_RCC_OscConfig+0x4b8>)
 8001580:	f023 0304 	bic.w	r3, r3, #4
 8001584:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d016      	beq.n	80015be <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001590:	f7ff faca 	bl	8000b28 <HAL_GetTick>
 8001594:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001596:	e00a      	b.n	80015ae <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001598:	f7ff fac6 	bl	8000b28 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e138      	b.n	8001820 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015ae:	4b46      	ldr	r3, [pc, #280]	@ (80016c8 <HAL_RCC_OscConfig+0x4b8>)
 80015b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015b4:	f003 0302 	and.w	r3, r3, #2
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d0ed      	beq.n	8001598 <HAL_RCC_OscConfig+0x388>
 80015bc:	e015      	b.n	80015ea <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015be:	f7ff fab3 	bl	8000b28 <HAL_GetTick>
 80015c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015c4:	e00a      	b.n	80015dc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015c6:	f7ff faaf 	bl	8000b28 <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e121      	b.n	8001820 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015dc:	4b3a      	ldr	r3, [pc, #232]	@ (80016c8 <HAL_RCC_OscConfig+0x4b8>)
 80015de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d1ed      	bne.n	80015c6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80015ea:	7ffb      	ldrb	r3, [r7, #31]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d105      	bne.n	80015fc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015f0:	4b35      	ldr	r3, [pc, #212]	@ (80016c8 <HAL_RCC_OscConfig+0x4b8>)
 80015f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015f4:	4a34      	ldr	r2, [pc, #208]	@ (80016c8 <HAL_RCC_OscConfig+0x4b8>)
 80015f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80015fa:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0320 	and.w	r3, r3, #32
 8001604:	2b00      	cmp	r3, #0
 8001606:	d03c      	beq.n	8001682 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d01c      	beq.n	800164a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001610:	4b2d      	ldr	r3, [pc, #180]	@ (80016c8 <HAL_RCC_OscConfig+0x4b8>)
 8001612:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001616:	4a2c      	ldr	r2, [pc, #176]	@ (80016c8 <HAL_RCC_OscConfig+0x4b8>)
 8001618:	f043 0301 	orr.w	r3, r3, #1
 800161c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001620:	f7ff fa82 	bl	8000b28 <HAL_GetTick>
 8001624:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001626:	e008      	b.n	800163a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001628:	f7ff fa7e 	bl	8000b28 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b02      	cmp	r3, #2
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e0f2      	b.n	8001820 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800163a:	4b23      	ldr	r3, [pc, #140]	@ (80016c8 <HAL_RCC_OscConfig+0x4b8>)
 800163c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001640:	f003 0302 	and.w	r3, r3, #2
 8001644:	2b00      	cmp	r3, #0
 8001646:	d0ef      	beq.n	8001628 <HAL_RCC_OscConfig+0x418>
 8001648:	e01b      	b.n	8001682 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800164a:	4b1f      	ldr	r3, [pc, #124]	@ (80016c8 <HAL_RCC_OscConfig+0x4b8>)
 800164c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001650:	4a1d      	ldr	r2, [pc, #116]	@ (80016c8 <HAL_RCC_OscConfig+0x4b8>)
 8001652:	f023 0301 	bic.w	r3, r3, #1
 8001656:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800165a:	f7ff fa65 	bl	8000b28 <HAL_GetTick>
 800165e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001660:	e008      	b.n	8001674 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001662:	f7ff fa61 	bl	8000b28 <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e0d5      	b.n	8001820 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001674:	4b14      	ldr	r3, [pc, #80]	@ (80016c8 <HAL_RCC_OscConfig+0x4b8>)
 8001676:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d1ef      	bne.n	8001662 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	69db      	ldr	r3, [r3, #28]
 8001686:	2b00      	cmp	r3, #0
 8001688:	f000 80c9 	beq.w	800181e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800168c:	4b0e      	ldr	r3, [pc, #56]	@ (80016c8 <HAL_RCC_OscConfig+0x4b8>)
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	f003 030c 	and.w	r3, r3, #12
 8001694:	2b0c      	cmp	r3, #12
 8001696:	f000 8083 	beq.w	80017a0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	69db      	ldr	r3, [r3, #28]
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d15e      	bne.n	8001760 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016a2:	4b09      	ldr	r3, [pc, #36]	@ (80016c8 <HAL_RCC_OscConfig+0x4b8>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a08      	ldr	r2, [pc, #32]	@ (80016c8 <HAL_RCC_OscConfig+0x4b8>)
 80016a8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80016ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ae:	f7ff fa3b 	bl	8000b28 <HAL_GetTick>
 80016b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016b4:	e00c      	b.n	80016d0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016b6:	f7ff fa37 	bl	8000b28 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d905      	bls.n	80016d0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e0ab      	b.n	8001820 <HAL_RCC_OscConfig+0x610>
 80016c8:	40021000 	.word	0x40021000
 80016cc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016d0:	4b55      	ldr	r3, [pc, #340]	@ (8001828 <HAL_RCC_OscConfig+0x618>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d1ec      	bne.n	80016b6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016dc:	4b52      	ldr	r3, [pc, #328]	@ (8001828 <HAL_RCC_OscConfig+0x618>)
 80016de:	68da      	ldr	r2, [r3, #12]
 80016e0:	4b52      	ldr	r3, [pc, #328]	@ (800182c <HAL_RCC_OscConfig+0x61c>)
 80016e2:	4013      	ands	r3, r2
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	6a11      	ldr	r1, [r2, #32]
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80016ec:	3a01      	subs	r2, #1
 80016ee:	0112      	lsls	r2, r2, #4
 80016f0:	4311      	orrs	r1, r2
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80016f6:	0212      	lsls	r2, r2, #8
 80016f8:	4311      	orrs	r1, r2
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80016fe:	0852      	lsrs	r2, r2, #1
 8001700:	3a01      	subs	r2, #1
 8001702:	0552      	lsls	r2, r2, #21
 8001704:	4311      	orrs	r1, r2
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800170a:	0852      	lsrs	r2, r2, #1
 800170c:	3a01      	subs	r2, #1
 800170e:	0652      	lsls	r2, r2, #25
 8001710:	4311      	orrs	r1, r2
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001716:	06d2      	lsls	r2, r2, #27
 8001718:	430a      	orrs	r2, r1
 800171a:	4943      	ldr	r1, [pc, #268]	@ (8001828 <HAL_RCC_OscConfig+0x618>)
 800171c:	4313      	orrs	r3, r2
 800171e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001720:	4b41      	ldr	r3, [pc, #260]	@ (8001828 <HAL_RCC_OscConfig+0x618>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a40      	ldr	r2, [pc, #256]	@ (8001828 <HAL_RCC_OscConfig+0x618>)
 8001726:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800172a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800172c:	4b3e      	ldr	r3, [pc, #248]	@ (8001828 <HAL_RCC_OscConfig+0x618>)
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	4a3d      	ldr	r2, [pc, #244]	@ (8001828 <HAL_RCC_OscConfig+0x618>)
 8001732:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001736:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001738:	f7ff f9f6 	bl	8000b28 <HAL_GetTick>
 800173c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800173e:	e008      	b.n	8001752 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001740:	f7ff f9f2 	bl	8000b28 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	2b02      	cmp	r3, #2
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e066      	b.n	8001820 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001752:	4b35      	ldr	r3, [pc, #212]	@ (8001828 <HAL_RCC_OscConfig+0x618>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d0f0      	beq.n	8001740 <HAL_RCC_OscConfig+0x530>
 800175e:	e05e      	b.n	800181e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001760:	4b31      	ldr	r3, [pc, #196]	@ (8001828 <HAL_RCC_OscConfig+0x618>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a30      	ldr	r2, [pc, #192]	@ (8001828 <HAL_RCC_OscConfig+0x618>)
 8001766:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800176a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800176c:	f7ff f9dc 	bl	8000b28 <HAL_GetTick>
 8001770:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001772:	e008      	b.n	8001786 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001774:	f7ff f9d8 	bl	8000b28 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b02      	cmp	r3, #2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e04c      	b.n	8001820 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001786:	4b28      	ldr	r3, [pc, #160]	@ (8001828 <HAL_RCC_OscConfig+0x618>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d1f0      	bne.n	8001774 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001792:	4b25      	ldr	r3, [pc, #148]	@ (8001828 <HAL_RCC_OscConfig+0x618>)
 8001794:	68da      	ldr	r2, [r3, #12]
 8001796:	4924      	ldr	r1, [pc, #144]	@ (8001828 <HAL_RCC_OscConfig+0x618>)
 8001798:	4b25      	ldr	r3, [pc, #148]	@ (8001830 <HAL_RCC_OscConfig+0x620>)
 800179a:	4013      	ands	r3, r2
 800179c:	60cb      	str	r3, [r1, #12]
 800179e:	e03e      	b.n	800181e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	69db      	ldr	r3, [r3, #28]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d101      	bne.n	80017ac <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e039      	b.n	8001820 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80017ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001828 <HAL_RCC_OscConfig+0x618>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	f003 0203 	and.w	r2, r3, #3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6a1b      	ldr	r3, [r3, #32]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d12c      	bne.n	800181a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ca:	3b01      	subs	r3, #1
 80017cc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d123      	bne.n	800181a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017dc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017de:	429a      	cmp	r2, r3
 80017e0:	d11b      	bne.n	800181a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ec:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d113      	bne.n	800181a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fc:	085b      	lsrs	r3, r3, #1
 80017fe:	3b01      	subs	r3, #1
 8001800:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001802:	429a      	cmp	r2, r3
 8001804:	d109      	bne.n	800181a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001810:	085b      	lsrs	r3, r3, #1
 8001812:	3b01      	subs	r3, #1
 8001814:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001816:	429a      	cmp	r2, r3
 8001818:	d001      	beq.n	800181e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e000      	b.n	8001820 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800181e:	2300      	movs	r3, #0
}
 8001820:	4618      	mov	r0, r3
 8001822:	3720      	adds	r7, #32
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40021000 	.word	0x40021000
 800182c:	019f800c 	.word	0x019f800c
 8001830:	feeefffc 	.word	0xfeeefffc

08001834 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800183e:	2300      	movs	r3, #0
 8001840:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d101      	bne.n	800184c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e11e      	b.n	8001a8a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800184c:	4b91      	ldr	r3, [pc, #580]	@ (8001a94 <HAL_RCC_ClockConfig+0x260>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 030f 	and.w	r3, r3, #15
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	429a      	cmp	r2, r3
 8001858:	d910      	bls.n	800187c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800185a:	4b8e      	ldr	r3, [pc, #568]	@ (8001a94 <HAL_RCC_ClockConfig+0x260>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f023 020f 	bic.w	r2, r3, #15
 8001862:	498c      	ldr	r1, [pc, #560]	@ (8001a94 <HAL_RCC_ClockConfig+0x260>)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	4313      	orrs	r3, r2
 8001868:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800186a:	4b8a      	ldr	r3, [pc, #552]	@ (8001a94 <HAL_RCC_ClockConfig+0x260>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 030f 	and.w	r3, r3, #15
 8001872:	683a      	ldr	r2, [r7, #0]
 8001874:	429a      	cmp	r2, r3
 8001876:	d001      	beq.n	800187c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e106      	b.n	8001a8a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0301 	and.w	r3, r3, #1
 8001884:	2b00      	cmp	r3, #0
 8001886:	d073      	beq.n	8001970 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	2b03      	cmp	r3, #3
 800188e:	d129      	bne.n	80018e4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001890:	4b81      	ldr	r3, [pc, #516]	@ (8001a98 <HAL_RCC_ClockConfig+0x264>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d101      	bne.n	80018a0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e0f4      	b.n	8001a8a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80018a0:	f000 f99e 	bl	8001be0 <RCC_GetSysClockFreqFromPLLSource>
 80018a4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	4a7c      	ldr	r2, [pc, #496]	@ (8001a9c <HAL_RCC_ClockConfig+0x268>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d93f      	bls.n	800192e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80018ae:	4b7a      	ldr	r3, [pc, #488]	@ (8001a98 <HAL_RCC_ClockConfig+0x264>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d009      	beq.n	80018ce <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d033      	beq.n	800192e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d12f      	bne.n	800192e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80018ce:	4b72      	ldr	r3, [pc, #456]	@ (8001a98 <HAL_RCC_ClockConfig+0x264>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80018d6:	4a70      	ldr	r2, [pc, #448]	@ (8001a98 <HAL_RCC_ClockConfig+0x264>)
 80018d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018dc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80018de:	2380      	movs	r3, #128	@ 0x80
 80018e0:	617b      	str	r3, [r7, #20]
 80018e2:	e024      	b.n	800192e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d107      	bne.n	80018fc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018ec:	4b6a      	ldr	r3, [pc, #424]	@ (8001a98 <HAL_RCC_ClockConfig+0x264>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d109      	bne.n	800190c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e0c6      	b.n	8001a8a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018fc:	4b66      	ldr	r3, [pc, #408]	@ (8001a98 <HAL_RCC_ClockConfig+0x264>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001904:	2b00      	cmp	r3, #0
 8001906:	d101      	bne.n	800190c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e0be      	b.n	8001a8a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800190c:	f000 f8ce 	bl	8001aac <HAL_RCC_GetSysClockFreq>
 8001910:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	4a61      	ldr	r2, [pc, #388]	@ (8001a9c <HAL_RCC_ClockConfig+0x268>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d909      	bls.n	800192e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800191a:	4b5f      	ldr	r3, [pc, #380]	@ (8001a98 <HAL_RCC_ClockConfig+0x264>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001922:	4a5d      	ldr	r2, [pc, #372]	@ (8001a98 <HAL_RCC_ClockConfig+0x264>)
 8001924:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001928:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800192a:	2380      	movs	r3, #128	@ 0x80
 800192c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800192e:	4b5a      	ldr	r3, [pc, #360]	@ (8001a98 <HAL_RCC_ClockConfig+0x264>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f023 0203 	bic.w	r2, r3, #3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	4957      	ldr	r1, [pc, #348]	@ (8001a98 <HAL_RCC_ClockConfig+0x264>)
 800193c:	4313      	orrs	r3, r2
 800193e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001940:	f7ff f8f2 	bl	8000b28 <HAL_GetTick>
 8001944:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001946:	e00a      	b.n	800195e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001948:	f7ff f8ee 	bl	8000b28 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001956:	4293      	cmp	r3, r2
 8001958:	d901      	bls.n	800195e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e095      	b.n	8001a8a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800195e:	4b4e      	ldr	r3, [pc, #312]	@ (8001a98 <HAL_RCC_ClockConfig+0x264>)
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f003 020c 	and.w	r2, r3, #12
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	429a      	cmp	r2, r3
 800196e:	d1eb      	bne.n	8001948 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d023      	beq.n	80019c4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0304 	and.w	r3, r3, #4
 8001984:	2b00      	cmp	r3, #0
 8001986:	d005      	beq.n	8001994 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001988:	4b43      	ldr	r3, [pc, #268]	@ (8001a98 <HAL_RCC_ClockConfig+0x264>)
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	4a42      	ldr	r2, [pc, #264]	@ (8001a98 <HAL_RCC_ClockConfig+0x264>)
 800198e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001992:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0308 	and.w	r3, r3, #8
 800199c:	2b00      	cmp	r3, #0
 800199e:	d007      	beq.n	80019b0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80019a0:	4b3d      	ldr	r3, [pc, #244]	@ (8001a98 <HAL_RCC_ClockConfig+0x264>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80019a8:	4a3b      	ldr	r2, [pc, #236]	@ (8001a98 <HAL_RCC_ClockConfig+0x264>)
 80019aa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80019ae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019b0:	4b39      	ldr	r3, [pc, #228]	@ (8001a98 <HAL_RCC_ClockConfig+0x264>)
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	4936      	ldr	r1, [pc, #216]	@ (8001a98 <HAL_RCC_ClockConfig+0x264>)
 80019be:	4313      	orrs	r3, r2
 80019c0:	608b      	str	r3, [r1, #8]
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	2b80      	cmp	r3, #128	@ 0x80
 80019c8:	d105      	bne.n	80019d6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80019ca:	4b33      	ldr	r3, [pc, #204]	@ (8001a98 <HAL_RCC_ClockConfig+0x264>)
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	4a32      	ldr	r2, [pc, #200]	@ (8001a98 <HAL_RCC_ClockConfig+0x264>)
 80019d0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80019d4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019d6:	4b2f      	ldr	r3, [pc, #188]	@ (8001a94 <HAL_RCC_ClockConfig+0x260>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 030f 	and.w	r3, r3, #15
 80019de:	683a      	ldr	r2, [r7, #0]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d21d      	bcs.n	8001a20 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001a94 <HAL_RCC_ClockConfig+0x260>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f023 020f 	bic.w	r2, r3, #15
 80019ec:	4929      	ldr	r1, [pc, #164]	@ (8001a94 <HAL_RCC_ClockConfig+0x260>)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80019f4:	f7ff f898 	bl	8000b28 <HAL_GetTick>
 80019f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019fa:	e00a      	b.n	8001a12 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019fc:	f7ff f894 	bl	8000b28 <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e03b      	b.n	8001a8a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a12:	4b20      	ldr	r3, [pc, #128]	@ (8001a94 <HAL_RCC_ClockConfig+0x260>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 030f 	and.w	r3, r3, #15
 8001a1a:	683a      	ldr	r2, [r7, #0]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d1ed      	bne.n	80019fc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0304 	and.w	r3, r3, #4
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d008      	beq.n	8001a3e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a2c:	4b1a      	ldr	r3, [pc, #104]	@ (8001a98 <HAL_RCC_ClockConfig+0x264>)
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	4917      	ldr	r1, [pc, #92]	@ (8001a98 <HAL_RCC_ClockConfig+0x264>)
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0308 	and.w	r3, r3, #8
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d009      	beq.n	8001a5e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a4a:	4b13      	ldr	r3, [pc, #76]	@ (8001a98 <HAL_RCC_ClockConfig+0x264>)
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	691b      	ldr	r3, [r3, #16]
 8001a56:	00db      	lsls	r3, r3, #3
 8001a58:	490f      	ldr	r1, [pc, #60]	@ (8001a98 <HAL_RCC_ClockConfig+0x264>)
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a5e:	f000 f825 	bl	8001aac <HAL_RCC_GetSysClockFreq>
 8001a62:	4602      	mov	r2, r0
 8001a64:	4b0c      	ldr	r3, [pc, #48]	@ (8001a98 <HAL_RCC_ClockConfig+0x264>)
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	091b      	lsrs	r3, r3, #4
 8001a6a:	f003 030f 	and.w	r3, r3, #15
 8001a6e:	490c      	ldr	r1, [pc, #48]	@ (8001aa0 <HAL_RCC_ClockConfig+0x26c>)
 8001a70:	5ccb      	ldrb	r3, [r1, r3]
 8001a72:	f003 031f 	and.w	r3, r3, #31
 8001a76:	fa22 f303 	lsr.w	r3, r2, r3
 8001a7a:	4a0a      	ldr	r2, [pc, #40]	@ (8001aa4 <HAL_RCC_ClockConfig+0x270>)
 8001a7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001a7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001aa8 <HAL_RCC_ClockConfig+0x274>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff f804 	bl	8000a90 <HAL_InitTick>
 8001a88:	4603      	mov	r3, r0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3718      	adds	r7, #24
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40022000 	.word	0x40022000
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	04c4b400 	.word	0x04c4b400
 8001aa0:	080039ac 	.word	0x080039ac
 8001aa4:	20000000 	.word	0x20000000
 8001aa8:	20000004 	.word	0x20000004

08001aac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b087      	sub	sp, #28
 8001ab0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001ab2:	4b2c      	ldr	r3, [pc, #176]	@ (8001b64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f003 030c 	and.w	r3, r3, #12
 8001aba:	2b04      	cmp	r3, #4
 8001abc:	d102      	bne.n	8001ac4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001abe:	4b2a      	ldr	r3, [pc, #168]	@ (8001b68 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ac0:	613b      	str	r3, [r7, #16]
 8001ac2:	e047      	b.n	8001b54 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001ac4:	4b27      	ldr	r3, [pc, #156]	@ (8001b64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f003 030c 	and.w	r3, r3, #12
 8001acc:	2b08      	cmp	r3, #8
 8001ace:	d102      	bne.n	8001ad6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ad0:	4b26      	ldr	r3, [pc, #152]	@ (8001b6c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ad2:	613b      	str	r3, [r7, #16]
 8001ad4:	e03e      	b.n	8001b54 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001ad6:	4b23      	ldr	r3, [pc, #140]	@ (8001b64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f003 030c 	and.w	r3, r3, #12
 8001ade:	2b0c      	cmp	r3, #12
 8001ae0:	d136      	bne.n	8001b50 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ae2:	4b20      	ldr	r3, [pc, #128]	@ (8001b64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	f003 0303 	and.w	r3, r3, #3
 8001aea:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001aec:	4b1d      	ldr	r3, [pc, #116]	@ (8001b64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	091b      	lsrs	r3, r3, #4
 8001af2:	f003 030f 	and.w	r3, r3, #15
 8001af6:	3301      	adds	r3, #1
 8001af8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2b03      	cmp	r3, #3
 8001afe:	d10c      	bne.n	8001b1a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b00:	4a1a      	ldr	r2, [pc, #104]	@ (8001b6c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b08:	4a16      	ldr	r2, [pc, #88]	@ (8001b64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b0a:	68d2      	ldr	r2, [r2, #12]
 8001b0c:	0a12      	lsrs	r2, r2, #8
 8001b0e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001b12:	fb02 f303 	mul.w	r3, r2, r3
 8001b16:	617b      	str	r3, [r7, #20]
      break;
 8001b18:	e00c      	b.n	8001b34 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b1a:	4a13      	ldr	r2, [pc, #76]	@ (8001b68 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b22:	4a10      	ldr	r2, [pc, #64]	@ (8001b64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b24:	68d2      	ldr	r2, [r2, #12]
 8001b26:	0a12      	lsrs	r2, r2, #8
 8001b28:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001b2c:	fb02 f303 	mul.w	r3, r2, r3
 8001b30:	617b      	str	r3, [r7, #20]
      break;
 8001b32:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b34:	4b0b      	ldr	r3, [pc, #44]	@ (8001b64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	0e5b      	lsrs	r3, r3, #25
 8001b3a:	f003 0303 	and.w	r3, r3, #3
 8001b3e:	3301      	adds	r3, #1
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001b44:	697a      	ldr	r2, [r7, #20]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b4c:	613b      	str	r3, [r7, #16]
 8001b4e:	e001      	b.n	8001b54 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001b50:	2300      	movs	r3, #0
 8001b52:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001b54:	693b      	ldr	r3, [r7, #16]
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	371c      	adds	r7, #28
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	40021000 	.word	0x40021000
 8001b68:	00f42400 	.word	0x00f42400
 8001b6c:	016e3600 	.word	0x016e3600

08001b70 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b74:	4b03      	ldr	r3, [pc, #12]	@ (8001b84 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b76:	681b      	ldr	r3, [r3, #0]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	20000000 	.word	0x20000000

08001b88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001b8c:	f7ff fff0 	bl	8001b70 <HAL_RCC_GetHCLKFreq>
 8001b90:	4602      	mov	r2, r0
 8001b92:	4b06      	ldr	r3, [pc, #24]	@ (8001bac <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	0a1b      	lsrs	r3, r3, #8
 8001b98:	f003 0307 	and.w	r3, r3, #7
 8001b9c:	4904      	ldr	r1, [pc, #16]	@ (8001bb0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b9e:	5ccb      	ldrb	r3, [r1, r3]
 8001ba0:	f003 031f 	and.w	r3, r3, #31
 8001ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	080039bc 	.word	0x080039bc

08001bb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001bb8:	f7ff ffda 	bl	8001b70 <HAL_RCC_GetHCLKFreq>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	4b06      	ldr	r3, [pc, #24]	@ (8001bd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	0adb      	lsrs	r3, r3, #11
 8001bc4:	f003 0307 	and.w	r3, r3, #7
 8001bc8:	4904      	ldr	r1, [pc, #16]	@ (8001bdc <HAL_RCC_GetPCLK2Freq+0x28>)
 8001bca:	5ccb      	ldrb	r3, [r1, r3]
 8001bcc:	f003 031f 	and.w	r3, r3, #31
 8001bd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	080039bc 	.word	0x080039bc

08001be0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b087      	sub	sp, #28
 8001be4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001be6:	4b1e      	ldr	r3, [pc, #120]	@ (8001c60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	f003 0303 	and.w	r3, r3, #3
 8001bee:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001bf0:	4b1b      	ldr	r3, [pc, #108]	@ (8001c60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	091b      	lsrs	r3, r3, #4
 8001bf6:	f003 030f 	and.w	r3, r3, #15
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	2b03      	cmp	r3, #3
 8001c02:	d10c      	bne.n	8001c1e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c04:	4a17      	ldr	r2, [pc, #92]	@ (8001c64 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c0c:	4a14      	ldr	r2, [pc, #80]	@ (8001c60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c0e:	68d2      	ldr	r2, [r2, #12]
 8001c10:	0a12      	lsrs	r2, r2, #8
 8001c12:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001c16:	fb02 f303 	mul.w	r3, r2, r3
 8001c1a:	617b      	str	r3, [r7, #20]
    break;
 8001c1c:	e00c      	b.n	8001c38 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c1e:	4a12      	ldr	r2, [pc, #72]	@ (8001c68 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c26:	4a0e      	ldr	r2, [pc, #56]	@ (8001c60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c28:	68d2      	ldr	r2, [r2, #12]
 8001c2a:	0a12      	lsrs	r2, r2, #8
 8001c2c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001c30:	fb02 f303 	mul.w	r3, r2, r3
 8001c34:	617b      	str	r3, [r7, #20]
    break;
 8001c36:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c38:	4b09      	ldr	r3, [pc, #36]	@ (8001c60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	0e5b      	lsrs	r3, r3, #25
 8001c3e:	f003 0303 	and.w	r3, r3, #3
 8001c42:	3301      	adds	r3, #1
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001c48:	697a      	ldr	r2, [r7, #20]
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c50:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001c52:	687b      	ldr	r3, [r7, #4]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	371c      	adds	r7, #28
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	40021000 	.word	0x40021000
 8001c64:	016e3600 	.word	0x016e3600
 8001c68:	00f42400 	.word	0x00f42400

08001c6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001c74:	2300      	movs	r3, #0
 8001c76:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001c78:	2300      	movs	r3, #0
 8001c7a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	f000 8098 	beq.w	8001dba <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c8e:	4b43      	ldr	r3, [pc, #268]	@ (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d10d      	bne.n	8001cb6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c9a:	4b40      	ldr	r3, [pc, #256]	@ (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c9e:	4a3f      	ldr	r2, [pc, #252]	@ (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ca0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ca4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ca6:	4b3d      	ldr	r3, [pc, #244]	@ (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001caa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cae:	60bb      	str	r3, [r7, #8]
 8001cb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cb6:	4b3a      	ldr	r3, [pc, #232]	@ (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a39      	ldr	r2, [pc, #228]	@ (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001cbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cc0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001cc2:	f7fe ff31 	bl	8000b28 <HAL_GetTick>
 8001cc6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001cc8:	e009      	b.n	8001cde <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cca:	f7fe ff2d 	bl	8000b28 <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d902      	bls.n	8001cde <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	74fb      	strb	r3, [r7, #19]
        break;
 8001cdc:	e005      	b.n	8001cea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001cde:	4b30      	ldr	r3, [pc, #192]	@ (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d0ef      	beq.n	8001cca <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001cea:	7cfb      	ldrb	r3, [r7, #19]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d159      	bne.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001cf0:	4b2a      	ldr	r3, [pc, #168]	@ (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cf6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001cfa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d01e      	beq.n	8001d40 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d06:	697a      	ldr	r2, [r7, #20]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d019      	beq.n	8001d40 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001d0c:	4b23      	ldr	r3, [pc, #140]	@ (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d16:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001d18:	4b20      	ldr	r3, [pc, #128]	@ (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d1e:	4a1f      	ldr	r2, [pc, #124]	@ (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001d28:	4b1c      	ldr	r3, [pc, #112]	@ (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d2e:	4a1b      	ldr	r2, [pc, #108]	@ (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001d38:	4a18      	ldr	r2, [pc, #96]	@ (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d016      	beq.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d4a:	f7fe feed 	bl	8000b28 <HAL_GetTick>
 8001d4e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d50:	e00b      	b.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d52:	f7fe fee9 	bl	8000b28 <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d902      	bls.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	74fb      	strb	r3, [r7, #19]
            break;
 8001d68:	e006      	b.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d6a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d0ec      	beq.n	8001d52 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001d78:	7cfb      	ldrb	r3, [r7, #19]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d10b      	bne.n	8001d96 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d7e:	4b07      	ldr	r3, [pc, #28]	@ (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d84:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d8c:	4903      	ldr	r1, [pc, #12]	@ (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001d94:	e008      	b.n	8001da8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001d96:	7cfb      	ldrb	r3, [r7, #19]
 8001d98:	74bb      	strb	r3, [r7, #18]
 8001d9a:	e005      	b.n	8001da8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001da4:	7cfb      	ldrb	r3, [r7, #19]
 8001da6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001da8:	7c7b      	ldrb	r3, [r7, #17]
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d105      	bne.n	8001dba <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dae:	4ba7      	ldr	r3, [pc, #668]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001db2:	4aa6      	ldr	r2, [pc, #664]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001db4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001db8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d00a      	beq.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001dc6:	4ba1      	ldr	r3, [pc, #644]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dcc:	f023 0203 	bic.w	r2, r3, #3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	499d      	ldr	r1, [pc, #628]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0302 	and.w	r3, r3, #2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d00a      	beq.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001de8:	4b98      	ldr	r3, [pc, #608]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dee:	f023 020c 	bic.w	r2, r3, #12
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	4995      	ldr	r1, [pc, #596]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0304 	and.w	r3, r3, #4
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d00a      	beq.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001e0a:	4b90      	ldr	r3, [pc, #576]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e10:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	498c      	ldr	r1, [pc, #560]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0308 	and.w	r3, r3, #8
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d00a      	beq.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001e2c:	4b87      	ldr	r3, [pc, #540]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e32:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	4984      	ldr	r1, [pc, #528]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0310 	and.w	r3, r3, #16
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d00a      	beq.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001e4e:	4b7f      	ldr	r3, [pc, #508]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e54:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	695b      	ldr	r3, [r3, #20]
 8001e5c:	497b      	ldr	r1, [pc, #492]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0320 	and.w	r3, r3, #32
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d00a      	beq.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001e70:	4b76      	ldr	r3, [pc, #472]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e76:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	4973      	ldr	r1, [pc, #460]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e80:	4313      	orrs	r3, r2
 8001e82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d00a      	beq.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e92:	4b6e      	ldr	r3, [pc, #440]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e98:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	69db      	ldr	r3, [r3, #28]
 8001ea0:	496a      	ldr	r1, [pc, #424]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d00a      	beq.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001eb4:	4b65      	ldr	r3, [pc, #404]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001eba:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a1b      	ldr	r3, [r3, #32]
 8001ec2:	4962      	ldr	r1, [pc, #392]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d00a      	beq.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001ed6:	4b5d      	ldr	r3, [pc, #372]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001edc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee4:	4959      	ldr	r1, [pc, #356]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d00a      	beq.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001ef8:	4b54      	ldr	r3, [pc, #336]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001efa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001efe:	f023 0203 	bic.w	r2, r3, #3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f06:	4951      	ldr	r1, [pc, #324]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d00a      	beq.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f1a:	4b4c      	ldr	r3, [pc, #304]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f20:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f28:	4948      	ldr	r1, [pc, #288]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d015      	beq.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f3c:	4b43      	ldr	r3, [pc, #268]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f42:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f4a:	4940      	ldr	r1, [pc, #256]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001f5a:	d105      	bne.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f5c:	4b3b      	ldr	r3, [pc, #236]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	4a3a      	ldr	r2, [pc, #232]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001f66:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d015      	beq.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001f74:	4b35      	ldr	r3, [pc, #212]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f7a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f82:	4932      	ldr	r1, [pc, #200]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f84:	4313      	orrs	r3, r2
 8001f86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f8e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f92:	d105      	bne.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f94:	4b2d      	ldr	r3, [pc, #180]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	4a2c      	ldr	r2, [pc, #176]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001f9e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d015      	beq.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001fac:	4b27      	ldr	r3, [pc, #156]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fb2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fba:	4924      	ldr	r1, [pc, #144]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fc6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fca:	d105      	bne.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001fcc:	4b1f      	ldr	r3, [pc, #124]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	4a1e      	ldr	r2, [pc, #120]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001fd6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d015      	beq.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001fe4:	4b19      	ldr	r3, [pc, #100]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ff2:	4916      	ldr	r1, [pc, #88]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ffe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002002:	d105      	bne.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002004:	4b11      	ldr	r3, [pc, #68]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	4a10      	ldr	r2, [pc, #64]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800200a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800200e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d019      	beq.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800201c:	4b0b      	ldr	r3, [pc, #44]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800201e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002022:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800202a:	4908      	ldr	r1, [pc, #32]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800202c:	4313      	orrs	r3, r2
 800202e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002036:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800203a:	d109      	bne.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800203c:	4b03      	ldr	r3, [pc, #12]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	4a02      	ldr	r2, [pc, #8]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002042:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002046:	60d3      	str	r3, [r2, #12]
 8002048:	e002      	b.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800204a:	bf00      	nop
 800204c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d015      	beq.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800205c:	4b29      	ldr	r3, [pc, #164]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800205e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002062:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800206a:	4926      	ldr	r1, [pc, #152]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800206c:	4313      	orrs	r3, r2
 800206e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002076:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800207a:	d105      	bne.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800207c:	4b21      	ldr	r3, [pc, #132]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	4a20      	ldr	r2, [pc, #128]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002082:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002086:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d015      	beq.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002094:	4b1b      	ldr	r3, [pc, #108]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002096:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800209a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020a2:	4918      	ldr	r1, [pc, #96]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80020a4:	4313      	orrs	r3, r2
 80020a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020b2:	d105      	bne.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80020b4:	4b13      	ldr	r3, [pc, #76]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	4a12      	ldr	r2, [pc, #72]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80020ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020be:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d015      	beq.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80020cc:	4b0d      	ldr	r3, [pc, #52]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80020ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80020d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020da:	490a      	ldr	r1, [pc, #40]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80020ea:	d105      	bne.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020ec:	4b05      	ldr	r3, [pc, #20]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	4a04      	ldr	r2, [pc, #16]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80020f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80020f6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80020f8:	7cbb      	ldrb	r3, [r7, #18]
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3718      	adds	r7, #24
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	40021000 	.word	0x40021000

08002108 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e049      	b.n	80021ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b00      	cmp	r3, #0
 8002124:	d106      	bne.n	8002134 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f7fe fb82 	bl	8000838 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2202      	movs	r2, #2
 8002138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3304      	adds	r3, #4
 8002144:	4619      	mov	r1, r3
 8002146:	4610      	mov	r0, r2
 8002148:	f000 facc 	bl	80026e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b084      	sub	sp, #16
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d020      	beq.n	800221a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d01b      	beq.n	800221a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f06f 0202 	mvn.w	r2, #2
 80021ea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	699b      	ldr	r3, [r3, #24]
 80021f8:	f003 0303 	and.w	r3, r3, #3
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d003      	beq.n	8002208 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f000 fa51 	bl	80026a8 <HAL_TIM_IC_CaptureCallback>
 8002206:	e005      	b.n	8002214 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f000 fa43 	bl	8002694 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 fa54 	bl	80026bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	f003 0304 	and.w	r3, r3, #4
 8002220:	2b00      	cmp	r3, #0
 8002222:	d020      	beq.n	8002266 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f003 0304 	and.w	r3, r3, #4
 800222a:	2b00      	cmp	r3, #0
 800222c:	d01b      	beq.n	8002266 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f06f 0204 	mvn.w	r2, #4
 8002236:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2202      	movs	r2, #2
 800223c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	699b      	ldr	r3, [r3, #24]
 8002244:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002248:	2b00      	cmp	r3, #0
 800224a:	d003      	beq.n	8002254 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f000 fa2b 	bl	80026a8 <HAL_TIM_IC_CaptureCallback>
 8002252:	e005      	b.n	8002260 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f000 fa1d 	bl	8002694 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f000 fa2e 	bl	80026bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	f003 0308 	and.w	r3, r3, #8
 800226c:	2b00      	cmp	r3, #0
 800226e:	d020      	beq.n	80022b2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f003 0308 	and.w	r3, r3, #8
 8002276:	2b00      	cmp	r3, #0
 8002278:	d01b      	beq.n	80022b2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f06f 0208 	mvn.w	r2, #8
 8002282:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2204      	movs	r2, #4
 8002288:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	69db      	ldr	r3, [r3, #28]
 8002290:	f003 0303 	and.w	r3, r3, #3
 8002294:	2b00      	cmp	r3, #0
 8002296:	d003      	beq.n	80022a0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f000 fa05 	bl	80026a8 <HAL_TIM_IC_CaptureCallback>
 800229e:	e005      	b.n	80022ac <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f000 f9f7 	bl	8002694 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 fa08 	bl	80026bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	f003 0310 	and.w	r3, r3, #16
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d020      	beq.n	80022fe <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f003 0310 	and.w	r3, r3, #16
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d01b      	beq.n	80022fe <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f06f 0210 	mvn.w	r2, #16
 80022ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2208      	movs	r2, #8
 80022d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	69db      	ldr	r3, [r3, #28]
 80022dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d003      	beq.n	80022ec <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f000 f9df 	bl	80026a8 <HAL_TIM_IC_CaptureCallback>
 80022ea:	e005      	b.n	80022f8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f000 f9d1 	bl	8002694 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f000 f9e2 	bl	80026bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	2b00      	cmp	r3, #0
 8002306:	d00c      	beq.n	8002322 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b00      	cmp	r3, #0
 8002310:	d007      	beq.n	8002322 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f06f 0201 	mvn.w	r2, #1
 800231a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f000 f9af 	bl	8002680 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002328:	2b00      	cmp	r3, #0
 800232a:	d104      	bne.n	8002336 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00c      	beq.n	8002350 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800233c:	2b00      	cmp	r3, #0
 800233e:	d007      	beq.n	8002350 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 fbba 	bl	8002ac4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002356:	2b00      	cmp	r3, #0
 8002358:	d00c      	beq.n	8002374 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002360:	2b00      	cmp	r3, #0
 8002362:	d007      	beq.n	8002374 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800236c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 fbb2 	bl	8002ad8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800237a:	2b00      	cmp	r3, #0
 800237c:	d00c      	beq.n	8002398 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002384:	2b00      	cmp	r3, #0
 8002386:	d007      	beq.n	8002398 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002390:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 f99c 	bl	80026d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	f003 0320 	and.w	r3, r3, #32
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d00c      	beq.n	80023bc <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f003 0320 	and.w	r3, r3, #32
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d007      	beq.n	80023bc <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f06f 0220 	mvn.w	r2, #32
 80023b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 fb7a 	bl	8002ab0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00c      	beq.n	80023e0 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d007      	beq.n	80023e0 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80023d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f000 fb86 	bl	8002aec <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d00c      	beq.n	8002404 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d007      	beq.n	8002404 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80023fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 fb7e 	bl	8002b00 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d00c      	beq.n	8002428 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d007      	beq.n	8002428 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8002420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 fb76 	bl	8002b14 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d00c      	beq.n	800244c <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d007      	beq.n	800244c <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8002444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 fb6e 	bl	8002b28 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800244c:	bf00      	nop
 800244e:	3710      	adds	r7, #16
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800245e:	2300      	movs	r3, #0
 8002460:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002468:	2b01      	cmp	r3, #1
 800246a:	d101      	bne.n	8002470 <HAL_TIM_ConfigClockSource+0x1c>
 800246c:	2302      	movs	r3, #2
 800246e:	e0f6      	b.n	800265e <HAL_TIM_ConfigClockSource+0x20a>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2202      	movs	r2, #2
 800247c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800248e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002492:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800249a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68ba      	ldr	r2, [r7, #8]
 80024a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a6f      	ldr	r2, [pc, #444]	@ (8002668 <HAL_TIM_ConfigClockSource+0x214>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	f000 80c1 	beq.w	8002632 <HAL_TIM_ConfigClockSource+0x1de>
 80024b0:	4a6d      	ldr	r2, [pc, #436]	@ (8002668 <HAL_TIM_ConfigClockSource+0x214>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	f200 80c6 	bhi.w	8002644 <HAL_TIM_ConfigClockSource+0x1f0>
 80024b8:	4a6c      	ldr	r2, [pc, #432]	@ (800266c <HAL_TIM_ConfigClockSource+0x218>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	f000 80b9 	beq.w	8002632 <HAL_TIM_ConfigClockSource+0x1de>
 80024c0:	4a6a      	ldr	r2, [pc, #424]	@ (800266c <HAL_TIM_ConfigClockSource+0x218>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	f200 80be 	bhi.w	8002644 <HAL_TIM_ConfigClockSource+0x1f0>
 80024c8:	4a69      	ldr	r2, [pc, #420]	@ (8002670 <HAL_TIM_ConfigClockSource+0x21c>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	f000 80b1 	beq.w	8002632 <HAL_TIM_ConfigClockSource+0x1de>
 80024d0:	4a67      	ldr	r2, [pc, #412]	@ (8002670 <HAL_TIM_ConfigClockSource+0x21c>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	f200 80b6 	bhi.w	8002644 <HAL_TIM_ConfigClockSource+0x1f0>
 80024d8:	4a66      	ldr	r2, [pc, #408]	@ (8002674 <HAL_TIM_ConfigClockSource+0x220>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	f000 80a9 	beq.w	8002632 <HAL_TIM_ConfigClockSource+0x1de>
 80024e0:	4a64      	ldr	r2, [pc, #400]	@ (8002674 <HAL_TIM_ConfigClockSource+0x220>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	f200 80ae 	bhi.w	8002644 <HAL_TIM_ConfigClockSource+0x1f0>
 80024e8:	4a63      	ldr	r2, [pc, #396]	@ (8002678 <HAL_TIM_ConfigClockSource+0x224>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	f000 80a1 	beq.w	8002632 <HAL_TIM_ConfigClockSource+0x1de>
 80024f0:	4a61      	ldr	r2, [pc, #388]	@ (8002678 <HAL_TIM_ConfigClockSource+0x224>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	f200 80a6 	bhi.w	8002644 <HAL_TIM_ConfigClockSource+0x1f0>
 80024f8:	4a60      	ldr	r2, [pc, #384]	@ (800267c <HAL_TIM_ConfigClockSource+0x228>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	f000 8099 	beq.w	8002632 <HAL_TIM_ConfigClockSource+0x1de>
 8002500:	4a5e      	ldr	r2, [pc, #376]	@ (800267c <HAL_TIM_ConfigClockSource+0x228>)
 8002502:	4293      	cmp	r3, r2
 8002504:	f200 809e 	bhi.w	8002644 <HAL_TIM_ConfigClockSource+0x1f0>
 8002508:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800250c:	f000 8091 	beq.w	8002632 <HAL_TIM_ConfigClockSource+0x1de>
 8002510:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8002514:	f200 8096 	bhi.w	8002644 <HAL_TIM_ConfigClockSource+0x1f0>
 8002518:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800251c:	f000 8089 	beq.w	8002632 <HAL_TIM_ConfigClockSource+0x1de>
 8002520:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002524:	f200 808e 	bhi.w	8002644 <HAL_TIM_ConfigClockSource+0x1f0>
 8002528:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800252c:	d03e      	beq.n	80025ac <HAL_TIM_ConfigClockSource+0x158>
 800252e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002532:	f200 8087 	bhi.w	8002644 <HAL_TIM_ConfigClockSource+0x1f0>
 8002536:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800253a:	f000 8086 	beq.w	800264a <HAL_TIM_ConfigClockSource+0x1f6>
 800253e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002542:	d87f      	bhi.n	8002644 <HAL_TIM_ConfigClockSource+0x1f0>
 8002544:	2b70      	cmp	r3, #112	@ 0x70
 8002546:	d01a      	beq.n	800257e <HAL_TIM_ConfigClockSource+0x12a>
 8002548:	2b70      	cmp	r3, #112	@ 0x70
 800254a:	d87b      	bhi.n	8002644 <HAL_TIM_ConfigClockSource+0x1f0>
 800254c:	2b60      	cmp	r3, #96	@ 0x60
 800254e:	d050      	beq.n	80025f2 <HAL_TIM_ConfigClockSource+0x19e>
 8002550:	2b60      	cmp	r3, #96	@ 0x60
 8002552:	d877      	bhi.n	8002644 <HAL_TIM_ConfigClockSource+0x1f0>
 8002554:	2b50      	cmp	r3, #80	@ 0x50
 8002556:	d03c      	beq.n	80025d2 <HAL_TIM_ConfigClockSource+0x17e>
 8002558:	2b50      	cmp	r3, #80	@ 0x50
 800255a:	d873      	bhi.n	8002644 <HAL_TIM_ConfigClockSource+0x1f0>
 800255c:	2b40      	cmp	r3, #64	@ 0x40
 800255e:	d058      	beq.n	8002612 <HAL_TIM_ConfigClockSource+0x1be>
 8002560:	2b40      	cmp	r3, #64	@ 0x40
 8002562:	d86f      	bhi.n	8002644 <HAL_TIM_ConfigClockSource+0x1f0>
 8002564:	2b30      	cmp	r3, #48	@ 0x30
 8002566:	d064      	beq.n	8002632 <HAL_TIM_ConfigClockSource+0x1de>
 8002568:	2b30      	cmp	r3, #48	@ 0x30
 800256a:	d86b      	bhi.n	8002644 <HAL_TIM_ConfigClockSource+0x1f0>
 800256c:	2b20      	cmp	r3, #32
 800256e:	d060      	beq.n	8002632 <HAL_TIM_ConfigClockSource+0x1de>
 8002570:	2b20      	cmp	r3, #32
 8002572:	d867      	bhi.n	8002644 <HAL_TIM_ConfigClockSource+0x1f0>
 8002574:	2b00      	cmp	r3, #0
 8002576:	d05c      	beq.n	8002632 <HAL_TIM_ConfigClockSource+0x1de>
 8002578:	2b10      	cmp	r3, #16
 800257a:	d05a      	beq.n	8002632 <HAL_TIM_ConfigClockSource+0x1de>
 800257c:	e062      	b.n	8002644 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800258e:	f000 f9d9 	bl	8002944 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80025a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	68ba      	ldr	r2, [r7, #8]
 80025a8:	609a      	str	r2, [r3, #8]
      break;
 80025aa:	e04f      	b.n	800264c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80025bc:	f000 f9c2 	bl	8002944 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	689a      	ldr	r2, [r3, #8]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80025ce:	609a      	str	r2, [r3, #8]
      break;
 80025d0:	e03c      	b.n	800264c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025de:	461a      	mov	r2, r3
 80025e0:	f000 f934 	bl	800284c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2150      	movs	r1, #80	@ 0x50
 80025ea:	4618      	mov	r0, r3
 80025ec:	f000 f98d 	bl	800290a <TIM_ITRx_SetConfig>
      break;
 80025f0:	e02c      	b.n	800264c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80025fe:	461a      	mov	r2, r3
 8002600:	f000 f953 	bl	80028aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2160      	movs	r1, #96	@ 0x60
 800260a:	4618      	mov	r0, r3
 800260c:	f000 f97d 	bl	800290a <TIM_ITRx_SetConfig>
      break;
 8002610:	e01c      	b.n	800264c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800261e:	461a      	mov	r2, r3
 8002620:	f000 f914 	bl	800284c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2140      	movs	r1, #64	@ 0x40
 800262a:	4618      	mov	r0, r3
 800262c:	f000 f96d 	bl	800290a <TIM_ITRx_SetConfig>
      break;
 8002630:	e00c      	b.n	800264c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4619      	mov	r1, r3
 800263c:	4610      	mov	r0, r2
 800263e:	f000 f964 	bl	800290a <TIM_ITRx_SetConfig>
      break;
 8002642:	e003      	b.n	800264c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	73fb      	strb	r3, [r7, #15]
      break;
 8002648:	e000      	b.n	800264c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800264a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800265c:	7bfb      	ldrb	r3, [r7, #15]
}
 800265e:	4618      	mov	r0, r3
 8002660:	3710      	adds	r7, #16
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	00100070 	.word	0x00100070
 800266c:	00100060 	.word	0x00100060
 8002670:	00100050 	.word	0x00100050
 8002674:	00100040 	.word	0x00100040
 8002678:	00100030 	.word	0x00100030
 800267c:	00100020 	.word	0x00100020

08002680 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002688:	bf00      	nop
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800269c:	bf00      	nop
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4a4c      	ldr	r2, [pc, #304]	@ (8002828 <TIM_Base_SetConfig+0x144>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d017      	beq.n	800272c <TIM_Base_SetConfig+0x48>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002702:	d013      	beq.n	800272c <TIM_Base_SetConfig+0x48>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a49      	ldr	r2, [pc, #292]	@ (800282c <TIM_Base_SetConfig+0x148>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d00f      	beq.n	800272c <TIM_Base_SetConfig+0x48>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a48      	ldr	r2, [pc, #288]	@ (8002830 <TIM_Base_SetConfig+0x14c>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d00b      	beq.n	800272c <TIM_Base_SetConfig+0x48>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a47      	ldr	r2, [pc, #284]	@ (8002834 <TIM_Base_SetConfig+0x150>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d007      	beq.n	800272c <TIM_Base_SetConfig+0x48>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4a46      	ldr	r2, [pc, #280]	@ (8002838 <TIM_Base_SetConfig+0x154>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d003      	beq.n	800272c <TIM_Base_SetConfig+0x48>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4a45      	ldr	r2, [pc, #276]	@ (800283c <TIM_Base_SetConfig+0x158>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d108      	bne.n	800273e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002732:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	68fa      	ldr	r2, [r7, #12]
 800273a:	4313      	orrs	r3, r2
 800273c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a39      	ldr	r2, [pc, #228]	@ (8002828 <TIM_Base_SetConfig+0x144>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d023      	beq.n	800278e <TIM_Base_SetConfig+0xaa>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800274c:	d01f      	beq.n	800278e <TIM_Base_SetConfig+0xaa>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a36      	ldr	r2, [pc, #216]	@ (800282c <TIM_Base_SetConfig+0x148>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d01b      	beq.n	800278e <TIM_Base_SetConfig+0xaa>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a35      	ldr	r2, [pc, #212]	@ (8002830 <TIM_Base_SetConfig+0x14c>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d017      	beq.n	800278e <TIM_Base_SetConfig+0xaa>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a34      	ldr	r2, [pc, #208]	@ (8002834 <TIM_Base_SetConfig+0x150>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d013      	beq.n	800278e <TIM_Base_SetConfig+0xaa>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a33      	ldr	r2, [pc, #204]	@ (8002838 <TIM_Base_SetConfig+0x154>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d00f      	beq.n	800278e <TIM_Base_SetConfig+0xaa>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a33      	ldr	r2, [pc, #204]	@ (8002840 <TIM_Base_SetConfig+0x15c>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d00b      	beq.n	800278e <TIM_Base_SetConfig+0xaa>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a32      	ldr	r2, [pc, #200]	@ (8002844 <TIM_Base_SetConfig+0x160>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d007      	beq.n	800278e <TIM_Base_SetConfig+0xaa>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a31      	ldr	r2, [pc, #196]	@ (8002848 <TIM_Base_SetConfig+0x164>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d003      	beq.n	800278e <TIM_Base_SetConfig+0xaa>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a2c      	ldr	r2, [pc, #176]	@ (800283c <TIM_Base_SetConfig+0x158>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d108      	bne.n	80027a0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002794:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	4313      	orrs	r3, r2
 800279e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	695b      	ldr	r3, [r3, #20]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	68fa      	ldr	r2, [r7, #12]
 80027b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	689a      	ldr	r2, [r3, #8]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4a18      	ldr	r2, [pc, #96]	@ (8002828 <TIM_Base_SetConfig+0x144>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d013      	beq.n	80027f4 <TIM_Base_SetConfig+0x110>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a1a      	ldr	r2, [pc, #104]	@ (8002838 <TIM_Base_SetConfig+0x154>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d00f      	beq.n	80027f4 <TIM_Base_SetConfig+0x110>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a1a      	ldr	r2, [pc, #104]	@ (8002840 <TIM_Base_SetConfig+0x15c>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d00b      	beq.n	80027f4 <TIM_Base_SetConfig+0x110>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4a19      	ldr	r2, [pc, #100]	@ (8002844 <TIM_Base_SetConfig+0x160>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d007      	beq.n	80027f4 <TIM_Base_SetConfig+0x110>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4a18      	ldr	r2, [pc, #96]	@ (8002848 <TIM_Base_SetConfig+0x164>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d003      	beq.n	80027f4 <TIM_Base_SetConfig+0x110>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4a13      	ldr	r2, [pc, #76]	@ (800283c <TIM_Base_SetConfig+0x158>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d103      	bne.n	80027fc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	691a      	ldr	r2, [r3, #16]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b01      	cmp	r3, #1
 800280c:	d105      	bne.n	800281a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	f023 0201 	bic.w	r2, r3, #1
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	611a      	str	r2, [r3, #16]
  }
}
 800281a:	bf00      	nop
 800281c:	3714      	adds	r7, #20
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	40012c00 	.word	0x40012c00
 800282c:	40000400 	.word	0x40000400
 8002830:	40000800 	.word	0x40000800
 8002834:	40000c00 	.word	0x40000c00
 8002838:	40013400 	.word	0x40013400
 800283c:	40015000 	.word	0x40015000
 8002840:	40014000 	.word	0x40014000
 8002844:	40014400 	.word	0x40014400
 8002848:	40014800 	.word	0x40014800

0800284c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800284c:	b480      	push	{r7}
 800284e:	b087      	sub	sp, #28
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6a1b      	ldr	r3, [r3, #32]
 8002862:	f023 0201 	bic.w	r2, r3, #1
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002876:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	011b      	lsls	r3, r3, #4
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	4313      	orrs	r3, r2
 8002880:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	f023 030a 	bic.w	r3, r3, #10
 8002888:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	4313      	orrs	r3, r2
 8002890:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	697a      	ldr	r2, [r7, #20]
 800289c:	621a      	str	r2, [r3, #32]
}
 800289e:	bf00      	nop
 80028a0:	371c      	adds	r7, #28
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr

080028aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028aa:	b480      	push	{r7}
 80028ac:	b087      	sub	sp, #28
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	60f8      	str	r0, [r7, #12]
 80028b2:	60b9      	str	r1, [r7, #8]
 80028b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6a1b      	ldr	r3, [r3, #32]
 80028c0:	f023 0210 	bic.w	r2, r3, #16
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80028d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	031b      	lsls	r3, r3, #12
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	4313      	orrs	r3, r2
 80028de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80028e6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	011b      	lsls	r3, r3, #4
 80028ec:	697a      	ldr	r2, [r7, #20]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	697a      	ldr	r2, [r7, #20]
 80028fc:	621a      	str	r2, [r3, #32]
}
 80028fe:	bf00      	nop
 8002900:	371c      	adds	r7, #28
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr

0800290a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800290a:	b480      	push	{r7}
 800290c:	b085      	sub	sp, #20
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
 8002912:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8002920:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002924:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002926:	683a      	ldr	r2, [r7, #0]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	4313      	orrs	r3, r2
 800292c:	f043 0307 	orr.w	r3, r3, #7
 8002930:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	68fa      	ldr	r2, [r7, #12]
 8002936:	609a      	str	r2, [r3, #8]
}
 8002938:	bf00      	nop
 800293a:	3714      	adds	r7, #20
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002944:	b480      	push	{r7}
 8002946:	b087      	sub	sp, #28
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
 8002950:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800295e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	021a      	lsls	r2, r3, #8
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	431a      	orrs	r2, r3
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	4313      	orrs	r3, r2
 800296c:	697a      	ldr	r2, [r7, #20]
 800296e:	4313      	orrs	r3, r2
 8002970:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	697a      	ldr	r2, [r7, #20]
 8002976:	609a      	str	r2, [r3, #8]
}
 8002978:	bf00      	nop
 800297a:	371c      	adds	r7, #28
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002994:	2b01      	cmp	r3, #1
 8002996:	d101      	bne.n	800299c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002998:	2302      	movs	r3, #2
 800299a:	e074      	b.n	8002a86 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2202      	movs	r2, #2
 80029a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a34      	ldr	r2, [pc, #208]	@ (8002a94 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d009      	beq.n	80029da <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a33      	ldr	r2, [pc, #204]	@ (8002a98 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d004      	beq.n	80029da <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a31      	ldr	r2, [pc, #196]	@ (8002a9c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d108      	bne.n	80029ec <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80029e0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80029f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68fa      	ldr	r2, [r7, #12]
 8002a08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a21      	ldr	r2, [pc, #132]	@ (8002a94 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d022      	beq.n	8002a5a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a1c:	d01d      	beq.n	8002a5a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a1f      	ldr	r2, [pc, #124]	@ (8002aa0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d018      	beq.n	8002a5a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a1d      	ldr	r2, [pc, #116]	@ (8002aa4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d013      	beq.n	8002a5a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a1c      	ldr	r2, [pc, #112]	@ (8002aa8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d00e      	beq.n	8002a5a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a15      	ldr	r2, [pc, #84]	@ (8002a98 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d009      	beq.n	8002a5a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a18      	ldr	r2, [pc, #96]	@ (8002aac <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d004      	beq.n	8002a5a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a11      	ldr	r2, [pc, #68]	@ (8002a9c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d10c      	bne.n	8002a74 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	68ba      	ldr	r2, [r7, #8]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	68ba      	ldr	r2, [r7, #8]
 8002a72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3714      	adds	r7, #20
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	40012c00 	.word	0x40012c00
 8002a98:	40013400 	.word	0x40013400
 8002a9c:	40015000 	.word	0x40015000
 8002aa0:	40000400 	.word	0x40000400
 8002aa4:	40000800 	.word	0x40000800
 8002aa8:	40000c00 	.word	0x40000c00
 8002aac:	40014000 	.word	0x40014000

08002ab0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002acc:	bf00      	nop
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002ae0:	bf00      	nop
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8002b08:	bf00      	nop
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d101      	bne.n	8002b4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e042      	b.n	8002bd4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d106      	bne.n	8002b66 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f7fd feab 	bl	80008bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2224      	movs	r2, #36	@ 0x24
 8002b6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f022 0201 	bic.w	r2, r2, #1
 8002b7c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d002      	beq.n	8002b8c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 fbb2 	bl	80032f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 f8b3 	bl	8002cf8 <UART_SetConfig>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d101      	bne.n	8002b9c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e01b      	b.n	8002bd4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	685a      	ldr	r2, [r3, #4]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002baa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	689a      	ldr	r2, [r3, #8]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002bba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f042 0201 	orr.w	r2, r2, #1
 8002bca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f000 fc31 	bl	8003434 <UART_CheckIdleState>
 8002bd2:	4603      	mov	r3, r0
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3708      	adds	r7, #8
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b08a      	sub	sp, #40	@ 0x28
 8002be0:	af02      	add	r7, sp, #8
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	603b      	str	r3, [r7, #0]
 8002be8:	4613      	mov	r3, r2
 8002bea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bf2:	2b20      	cmp	r3, #32
 8002bf4:	d17b      	bne.n	8002cee <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d002      	beq.n	8002c02 <HAL_UART_Transmit+0x26>
 8002bfc:	88fb      	ldrh	r3, [r7, #6]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e074      	b.n	8002cf0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2221      	movs	r2, #33	@ 0x21
 8002c12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c16:	f7fd ff87 	bl	8000b28 <HAL_GetTick>
 8002c1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	88fa      	ldrh	r2, [r7, #6]
 8002c20:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	88fa      	ldrh	r2, [r7, #6]
 8002c28:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c34:	d108      	bne.n	8002c48 <HAL_UART_Transmit+0x6c>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d104      	bne.n	8002c48 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	61bb      	str	r3, [r7, #24]
 8002c46:	e003      	b.n	8002c50 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002c50:	e030      	b.n	8002cb4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	9300      	str	r3, [sp, #0]
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	2180      	movs	r1, #128	@ 0x80
 8002c5c:	68f8      	ldr	r0, [r7, #12]
 8002c5e:	f000 fc93 	bl	8003588 <UART_WaitOnFlagUntilTimeout>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d005      	beq.n	8002c74 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e03d      	b.n	8002cf0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d10b      	bne.n	8002c92 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	881b      	ldrh	r3, [r3, #0]
 8002c7e:	461a      	mov	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c88:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	3302      	adds	r3, #2
 8002c8e:	61bb      	str	r3, [r7, #24]
 8002c90:	e007      	b.n	8002ca2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	781a      	ldrb	r2, [r3, #0]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	3b01      	subs	r3, #1
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d1c8      	bne.n	8002c52 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	9300      	str	r3, [sp, #0]
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	2140      	movs	r1, #64	@ 0x40
 8002cca:	68f8      	ldr	r0, [r7, #12]
 8002ccc:	f000 fc5c 	bl	8003588 <UART_WaitOnFlagUntilTimeout>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d005      	beq.n	8002ce2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2220      	movs	r2, #32
 8002cda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e006      	b.n	8002cf0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2220      	movs	r2, #32
 8002ce6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8002cea:	2300      	movs	r3, #0
 8002cec:	e000      	b.n	8002cf0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8002cee:	2302      	movs	r3, #2
  }
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3720      	adds	r7, #32
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cfc:	b08c      	sub	sp, #48	@ 0x30
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d02:	2300      	movs	r3, #0
 8002d04:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	689a      	ldr	r2, [r3, #8]
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	431a      	orrs	r2, r3
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	431a      	orrs	r2, r3
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	69db      	ldr	r3, [r3, #28]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	4baa      	ldr	r3, [pc, #680]	@ (8002fd0 <UART_SetConfig+0x2d8>)
 8002d28:	4013      	ands	r3, r2
 8002d2a:	697a      	ldr	r2, [r7, #20]
 8002d2c:	6812      	ldr	r2, [r2, #0]
 8002d2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002d30:	430b      	orrs	r3, r1
 8002d32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	68da      	ldr	r2, [r3, #12]
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	430a      	orrs	r2, r1
 8002d48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a9f      	ldr	r2, [pc, #636]	@ (8002fd4 <UART_SetConfig+0x2dc>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d004      	beq.n	8002d64 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d60:	4313      	orrs	r3, r2
 8002d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8002d6e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	6812      	ldr	r2, [r2, #0]
 8002d76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002d78:	430b      	orrs	r3, r1
 8002d7a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d82:	f023 010f 	bic.w	r1, r3, #15
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a90      	ldr	r2, [pc, #576]	@ (8002fd8 <UART_SetConfig+0x2e0>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d125      	bne.n	8002de8 <UART_SetConfig+0xf0>
 8002d9c:	4b8f      	ldr	r3, [pc, #572]	@ (8002fdc <UART_SetConfig+0x2e4>)
 8002d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002da2:	f003 0303 	and.w	r3, r3, #3
 8002da6:	2b03      	cmp	r3, #3
 8002da8:	d81a      	bhi.n	8002de0 <UART_SetConfig+0xe8>
 8002daa:	a201      	add	r2, pc, #4	@ (adr r2, 8002db0 <UART_SetConfig+0xb8>)
 8002dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db0:	08002dc1 	.word	0x08002dc1
 8002db4:	08002dd1 	.word	0x08002dd1
 8002db8:	08002dc9 	.word	0x08002dc9
 8002dbc:	08002dd9 	.word	0x08002dd9
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002dc6:	e116      	b.n	8002ff6 <UART_SetConfig+0x2fe>
 8002dc8:	2302      	movs	r3, #2
 8002dca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002dce:	e112      	b.n	8002ff6 <UART_SetConfig+0x2fe>
 8002dd0:	2304      	movs	r3, #4
 8002dd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002dd6:	e10e      	b.n	8002ff6 <UART_SetConfig+0x2fe>
 8002dd8:	2308      	movs	r3, #8
 8002dda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002dde:	e10a      	b.n	8002ff6 <UART_SetConfig+0x2fe>
 8002de0:	2310      	movs	r3, #16
 8002de2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002de6:	e106      	b.n	8002ff6 <UART_SetConfig+0x2fe>
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a7c      	ldr	r2, [pc, #496]	@ (8002fe0 <UART_SetConfig+0x2e8>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d138      	bne.n	8002e64 <UART_SetConfig+0x16c>
 8002df2:	4b7a      	ldr	r3, [pc, #488]	@ (8002fdc <UART_SetConfig+0x2e4>)
 8002df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002df8:	f003 030c 	and.w	r3, r3, #12
 8002dfc:	2b0c      	cmp	r3, #12
 8002dfe:	d82d      	bhi.n	8002e5c <UART_SetConfig+0x164>
 8002e00:	a201      	add	r2, pc, #4	@ (adr r2, 8002e08 <UART_SetConfig+0x110>)
 8002e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e06:	bf00      	nop
 8002e08:	08002e3d 	.word	0x08002e3d
 8002e0c:	08002e5d 	.word	0x08002e5d
 8002e10:	08002e5d 	.word	0x08002e5d
 8002e14:	08002e5d 	.word	0x08002e5d
 8002e18:	08002e4d 	.word	0x08002e4d
 8002e1c:	08002e5d 	.word	0x08002e5d
 8002e20:	08002e5d 	.word	0x08002e5d
 8002e24:	08002e5d 	.word	0x08002e5d
 8002e28:	08002e45 	.word	0x08002e45
 8002e2c:	08002e5d 	.word	0x08002e5d
 8002e30:	08002e5d 	.word	0x08002e5d
 8002e34:	08002e5d 	.word	0x08002e5d
 8002e38:	08002e55 	.word	0x08002e55
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e42:	e0d8      	b.n	8002ff6 <UART_SetConfig+0x2fe>
 8002e44:	2302      	movs	r3, #2
 8002e46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e4a:	e0d4      	b.n	8002ff6 <UART_SetConfig+0x2fe>
 8002e4c:	2304      	movs	r3, #4
 8002e4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e52:	e0d0      	b.n	8002ff6 <UART_SetConfig+0x2fe>
 8002e54:	2308      	movs	r3, #8
 8002e56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e5a:	e0cc      	b.n	8002ff6 <UART_SetConfig+0x2fe>
 8002e5c:	2310      	movs	r3, #16
 8002e5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e62:	e0c8      	b.n	8002ff6 <UART_SetConfig+0x2fe>
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a5e      	ldr	r2, [pc, #376]	@ (8002fe4 <UART_SetConfig+0x2ec>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d125      	bne.n	8002eba <UART_SetConfig+0x1c2>
 8002e6e:	4b5b      	ldr	r3, [pc, #364]	@ (8002fdc <UART_SetConfig+0x2e4>)
 8002e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e74:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002e78:	2b30      	cmp	r3, #48	@ 0x30
 8002e7a:	d016      	beq.n	8002eaa <UART_SetConfig+0x1b2>
 8002e7c:	2b30      	cmp	r3, #48	@ 0x30
 8002e7e:	d818      	bhi.n	8002eb2 <UART_SetConfig+0x1ba>
 8002e80:	2b20      	cmp	r3, #32
 8002e82:	d00a      	beq.n	8002e9a <UART_SetConfig+0x1a2>
 8002e84:	2b20      	cmp	r3, #32
 8002e86:	d814      	bhi.n	8002eb2 <UART_SetConfig+0x1ba>
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d002      	beq.n	8002e92 <UART_SetConfig+0x19a>
 8002e8c:	2b10      	cmp	r3, #16
 8002e8e:	d008      	beq.n	8002ea2 <UART_SetConfig+0x1aa>
 8002e90:	e00f      	b.n	8002eb2 <UART_SetConfig+0x1ba>
 8002e92:	2300      	movs	r3, #0
 8002e94:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e98:	e0ad      	b.n	8002ff6 <UART_SetConfig+0x2fe>
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ea0:	e0a9      	b.n	8002ff6 <UART_SetConfig+0x2fe>
 8002ea2:	2304      	movs	r3, #4
 8002ea4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ea8:	e0a5      	b.n	8002ff6 <UART_SetConfig+0x2fe>
 8002eaa:	2308      	movs	r3, #8
 8002eac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002eb0:	e0a1      	b.n	8002ff6 <UART_SetConfig+0x2fe>
 8002eb2:	2310      	movs	r3, #16
 8002eb4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002eb8:	e09d      	b.n	8002ff6 <UART_SetConfig+0x2fe>
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a4a      	ldr	r2, [pc, #296]	@ (8002fe8 <UART_SetConfig+0x2f0>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d125      	bne.n	8002f10 <UART_SetConfig+0x218>
 8002ec4:	4b45      	ldr	r3, [pc, #276]	@ (8002fdc <UART_SetConfig+0x2e4>)
 8002ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eca:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002ece:	2bc0      	cmp	r3, #192	@ 0xc0
 8002ed0:	d016      	beq.n	8002f00 <UART_SetConfig+0x208>
 8002ed2:	2bc0      	cmp	r3, #192	@ 0xc0
 8002ed4:	d818      	bhi.n	8002f08 <UART_SetConfig+0x210>
 8002ed6:	2b80      	cmp	r3, #128	@ 0x80
 8002ed8:	d00a      	beq.n	8002ef0 <UART_SetConfig+0x1f8>
 8002eda:	2b80      	cmp	r3, #128	@ 0x80
 8002edc:	d814      	bhi.n	8002f08 <UART_SetConfig+0x210>
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d002      	beq.n	8002ee8 <UART_SetConfig+0x1f0>
 8002ee2:	2b40      	cmp	r3, #64	@ 0x40
 8002ee4:	d008      	beq.n	8002ef8 <UART_SetConfig+0x200>
 8002ee6:	e00f      	b.n	8002f08 <UART_SetConfig+0x210>
 8002ee8:	2300      	movs	r3, #0
 8002eea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002eee:	e082      	b.n	8002ff6 <UART_SetConfig+0x2fe>
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ef6:	e07e      	b.n	8002ff6 <UART_SetConfig+0x2fe>
 8002ef8:	2304      	movs	r3, #4
 8002efa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002efe:	e07a      	b.n	8002ff6 <UART_SetConfig+0x2fe>
 8002f00:	2308      	movs	r3, #8
 8002f02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f06:	e076      	b.n	8002ff6 <UART_SetConfig+0x2fe>
 8002f08:	2310      	movs	r3, #16
 8002f0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f0e:	e072      	b.n	8002ff6 <UART_SetConfig+0x2fe>
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a35      	ldr	r2, [pc, #212]	@ (8002fec <UART_SetConfig+0x2f4>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d12a      	bne.n	8002f70 <UART_SetConfig+0x278>
 8002f1a:	4b30      	ldr	r3, [pc, #192]	@ (8002fdc <UART_SetConfig+0x2e4>)
 8002f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f20:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f24:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f28:	d01a      	beq.n	8002f60 <UART_SetConfig+0x268>
 8002f2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f2e:	d81b      	bhi.n	8002f68 <UART_SetConfig+0x270>
 8002f30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f34:	d00c      	beq.n	8002f50 <UART_SetConfig+0x258>
 8002f36:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f3a:	d815      	bhi.n	8002f68 <UART_SetConfig+0x270>
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d003      	beq.n	8002f48 <UART_SetConfig+0x250>
 8002f40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f44:	d008      	beq.n	8002f58 <UART_SetConfig+0x260>
 8002f46:	e00f      	b.n	8002f68 <UART_SetConfig+0x270>
 8002f48:	2300      	movs	r3, #0
 8002f4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f4e:	e052      	b.n	8002ff6 <UART_SetConfig+0x2fe>
 8002f50:	2302      	movs	r3, #2
 8002f52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f56:	e04e      	b.n	8002ff6 <UART_SetConfig+0x2fe>
 8002f58:	2304      	movs	r3, #4
 8002f5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f5e:	e04a      	b.n	8002ff6 <UART_SetConfig+0x2fe>
 8002f60:	2308      	movs	r3, #8
 8002f62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f66:	e046      	b.n	8002ff6 <UART_SetConfig+0x2fe>
 8002f68:	2310      	movs	r3, #16
 8002f6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f6e:	e042      	b.n	8002ff6 <UART_SetConfig+0x2fe>
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a17      	ldr	r2, [pc, #92]	@ (8002fd4 <UART_SetConfig+0x2dc>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d13a      	bne.n	8002ff0 <UART_SetConfig+0x2f8>
 8002f7a:	4b18      	ldr	r3, [pc, #96]	@ (8002fdc <UART_SetConfig+0x2e4>)
 8002f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f80:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002f84:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002f88:	d01a      	beq.n	8002fc0 <UART_SetConfig+0x2c8>
 8002f8a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002f8e:	d81b      	bhi.n	8002fc8 <UART_SetConfig+0x2d0>
 8002f90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f94:	d00c      	beq.n	8002fb0 <UART_SetConfig+0x2b8>
 8002f96:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f9a:	d815      	bhi.n	8002fc8 <UART_SetConfig+0x2d0>
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d003      	beq.n	8002fa8 <UART_SetConfig+0x2b0>
 8002fa0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fa4:	d008      	beq.n	8002fb8 <UART_SetConfig+0x2c0>
 8002fa6:	e00f      	b.n	8002fc8 <UART_SetConfig+0x2d0>
 8002fa8:	2300      	movs	r3, #0
 8002faa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fae:	e022      	b.n	8002ff6 <UART_SetConfig+0x2fe>
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fb6:	e01e      	b.n	8002ff6 <UART_SetConfig+0x2fe>
 8002fb8:	2304      	movs	r3, #4
 8002fba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fbe:	e01a      	b.n	8002ff6 <UART_SetConfig+0x2fe>
 8002fc0:	2308      	movs	r3, #8
 8002fc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fc6:	e016      	b.n	8002ff6 <UART_SetConfig+0x2fe>
 8002fc8:	2310      	movs	r3, #16
 8002fca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fce:	e012      	b.n	8002ff6 <UART_SetConfig+0x2fe>
 8002fd0:	cfff69f3 	.word	0xcfff69f3
 8002fd4:	40008000 	.word	0x40008000
 8002fd8:	40013800 	.word	0x40013800
 8002fdc:	40021000 	.word	0x40021000
 8002fe0:	40004400 	.word	0x40004400
 8002fe4:	40004800 	.word	0x40004800
 8002fe8:	40004c00 	.word	0x40004c00
 8002fec:	40005000 	.word	0x40005000
 8002ff0:	2310      	movs	r3, #16
 8002ff2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4aae      	ldr	r2, [pc, #696]	@ (80032b4 <UART_SetConfig+0x5bc>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	f040 8097 	bne.w	8003130 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003002:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003006:	2b08      	cmp	r3, #8
 8003008:	d823      	bhi.n	8003052 <UART_SetConfig+0x35a>
 800300a:	a201      	add	r2, pc, #4	@ (adr r2, 8003010 <UART_SetConfig+0x318>)
 800300c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003010:	08003035 	.word	0x08003035
 8003014:	08003053 	.word	0x08003053
 8003018:	0800303d 	.word	0x0800303d
 800301c:	08003053 	.word	0x08003053
 8003020:	08003043 	.word	0x08003043
 8003024:	08003053 	.word	0x08003053
 8003028:	08003053 	.word	0x08003053
 800302c:	08003053 	.word	0x08003053
 8003030:	0800304b 	.word	0x0800304b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003034:	f7fe fda8 	bl	8001b88 <HAL_RCC_GetPCLK1Freq>
 8003038:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800303a:	e010      	b.n	800305e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800303c:	4b9e      	ldr	r3, [pc, #632]	@ (80032b8 <UART_SetConfig+0x5c0>)
 800303e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003040:	e00d      	b.n	800305e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003042:	f7fe fd33 	bl	8001aac <HAL_RCC_GetSysClockFreq>
 8003046:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003048:	e009      	b.n	800305e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800304a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800304e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003050:	e005      	b.n	800305e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003052:	2300      	movs	r3, #0
 8003054:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800305c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800305e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003060:	2b00      	cmp	r3, #0
 8003062:	f000 8130 	beq.w	80032c6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800306a:	4a94      	ldr	r2, [pc, #592]	@ (80032bc <UART_SetConfig+0x5c4>)
 800306c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003070:	461a      	mov	r2, r3
 8003072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003074:	fbb3 f3f2 	udiv	r3, r3, r2
 8003078:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	685a      	ldr	r2, [r3, #4]
 800307e:	4613      	mov	r3, r2
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	4413      	add	r3, r2
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	429a      	cmp	r2, r3
 8003088:	d305      	bcc.n	8003096 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	429a      	cmp	r2, r3
 8003094:	d903      	bls.n	800309e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800309c:	e113      	b.n	80032c6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800309e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a0:	2200      	movs	r2, #0
 80030a2:	60bb      	str	r3, [r7, #8]
 80030a4:	60fa      	str	r2, [r7, #12]
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030aa:	4a84      	ldr	r2, [pc, #528]	@ (80032bc <UART_SetConfig+0x5c4>)
 80030ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	2200      	movs	r2, #0
 80030b4:	603b      	str	r3, [r7, #0]
 80030b6:	607a      	str	r2, [r7, #4]
 80030b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80030c0:	f7fd f8aa 	bl	8000218 <__aeabi_uldivmod>
 80030c4:	4602      	mov	r2, r0
 80030c6:	460b      	mov	r3, r1
 80030c8:	4610      	mov	r0, r2
 80030ca:	4619      	mov	r1, r3
 80030cc:	f04f 0200 	mov.w	r2, #0
 80030d0:	f04f 0300 	mov.w	r3, #0
 80030d4:	020b      	lsls	r3, r1, #8
 80030d6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80030da:	0202      	lsls	r2, r0, #8
 80030dc:	6979      	ldr	r1, [r7, #20]
 80030de:	6849      	ldr	r1, [r1, #4]
 80030e0:	0849      	lsrs	r1, r1, #1
 80030e2:	2000      	movs	r0, #0
 80030e4:	460c      	mov	r4, r1
 80030e6:	4605      	mov	r5, r0
 80030e8:	eb12 0804 	adds.w	r8, r2, r4
 80030ec:	eb43 0905 	adc.w	r9, r3, r5
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	469a      	mov	sl, r3
 80030f8:	4693      	mov	fp, r2
 80030fa:	4652      	mov	r2, sl
 80030fc:	465b      	mov	r3, fp
 80030fe:	4640      	mov	r0, r8
 8003100:	4649      	mov	r1, r9
 8003102:	f7fd f889 	bl	8000218 <__aeabi_uldivmod>
 8003106:	4602      	mov	r2, r0
 8003108:	460b      	mov	r3, r1
 800310a:	4613      	mov	r3, r2
 800310c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800310e:	6a3b      	ldr	r3, [r7, #32]
 8003110:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003114:	d308      	bcc.n	8003128 <UART_SetConfig+0x430>
 8003116:	6a3b      	ldr	r3, [r7, #32]
 8003118:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800311c:	d204      	bcs.n	8003128 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	6a3a      	ldr	r2, [r7, #32]
 8003124:	60da      	str	r2, [r3, #12]
 8003126:	e0ce      	b.n	80032c6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800312e:	e0ca      	b.n	80032c6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	69db      	ldr	r3, [r3, #28]
 8003134:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003138:	d166      	bne.n	8003208 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800313a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800313e:	2b08      	cmp	r3, #8
 8003140:	d827      	bhi.n	8003192 <UART_SetConfig+0x49a>
 8003142:	a201      	add	r2, pc, #4	@ (adr r2, 8003148 <UART_SetConfig+0x450>)
 8003144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003148:	0800316d 	.word	0x0800316d
 800314c:	08003175 	.word	0x08003175
 8003150:	0800317d 	.word	0x0800317d
 8003154:	08003193 	.word	0x08003193
 8003158:	08003183 	.word	0x08003183
 800315c:	08003193 	.word	0x08003193
 8003160:	08003193 	.word	0x08003193
 8003164:	08003193 	.word	0x08003193
 8003168:	0800318b 	.word	0x0800318b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800316c:	f7fe fd0c 	bl	8001b88 <HAL_RCC_GetPCLK1Freq>
 8003170:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003172:	e014      	b.n	800319e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003174:	f7fe fd1e 	bl	8001bb4 <HAL_RCC_GetPCLK2Freq>
 8003178:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800317a:	e010      	b.n	800319e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800317c:	4b4e      	ldr	r3, [pc, #312]	@ (80032b8 <UART_SetConfig+0x5c0>)
 800317e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003180:	e00d      	b.n	800319e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003182:	f7fe fc93 	bl	8001aac <HAL_RCC_GetSysClockFreq>
 8003186:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003188:	e009      	b.n	800319e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800318a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800318e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003190:	e005      	b.n	800319e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003192:	2300      	movs	r3, #0
 8003194:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800319c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800319e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	f000 8090 	beq.w	80032c6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031aa:	4a44      	ldr	r2, [pc, #272]	@ (80032bc <UART_SetConfig+0x5c4>)
 80031ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031b0:	461a      	mov	r2, r3
 80031b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80031b8:	005a      	lsls	r2, r3, #1
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	085b      	lsrs	r3, r3, #1
 80031c0:	441a      	add	r2, r3
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031cc:	6a3b      	ldr	r3, [r7, #32]
 80031ce:	2b0f      	cmp	r3, #15
 80031d0:	d916      	bls.n	8003200 <UART_SetConfig+0x508>
 80031d2:	6a3b      	ldr	r3, [r7, #32]
 80031d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031d8:	d212      	bcs.n	8003200 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031da:	6a3b      	ldr	r3, [r7, #32]
 80031dc:	b29b      	uxth	r3, r3
 80031de:	f023 030f 	bic.w	r3, r3, #15
 80031e2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031e4:	6a3b      	ldr	r3, [r7, #32]
 80031e6:	085b      	lsrs	r3, r3, #1
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	f003 0307 	and.w	r3, r3, #7
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	8bfb      	ldrh	r3, [r7, #30]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	8bfa      	ldrh	r2, [r7, #30]
 80031fc:	60da      	str	r2, [r3, #12]
 80031fe:	e062      	b.n	80032c6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003206:	e05e      	b.n	80032c6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003208:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800320c:	2b08      	cmp	r3, #8
 800320e:	d828      	bhi.n	8003262 <UART_SetConfig+0x56a>
 8003210:	a201      	add	r2, pc, #4	@ (adr r2, 8003218 <UART_SetConfig+0x520>)
 8003212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003216:	bf00      	nop
 8003218:	0800323d 	.word	0x0800323d
 800321c:	08003245 	.word	0x08003245
 8003220:	0800324d 	.word	0x0800324d
 8003224:	08003263 	.word	0x08003263
 8003228:	08003253 	.word	0x08003253
 800322c:	08003263 	.word	0x08003263
 8003230:	08003263 	.word	0x08003263
 8003234:	08003263 	.word	0x08003263
 8003238:	0800325b 	.word	0x0800325b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800323c:	f7fe fca4 	bl	8001b88 <HAL_RCC_GetPCLK1Freq>
 8003240:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003242:	e014      	b.n	800326e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003244:	f7fe fcb6 	bl	8001bb4 <HAL_RCC_GetPCLK2Freq>
 8003248:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800324a:	e010      	b.n	800326e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800324c:	4b1a      	ldr	r3, [pc, #104]	@ (80032b8 <UART_SetConfig+0x5c0>)
 800324e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003250:	e00d      	b.n	800326e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003252:	f7fe fc2b 	bl	8001aac <HAL_RCC_GetSysClockFreq>
 8003256:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003258:	e009      	b.n	800326e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800325a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800325e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003260:	e005      	b.n	800326e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003262:	2300      	movs	r3, #0
 8003264:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800326c:	bf00      	nop
    }

    if (pclk != 0U)
 800326e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003270:	2b00      	cmp	r3, #0
 8003272:	d028      	beq.n	80032c6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003278:	4a10      	ldr	r2, [pc, #64]	@ (80032bc <UART_SetConfig+0x5c4>)
 800327a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800327e:	461a      	mov	r2, r3
 8003280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003282:	fbb3 f2f2 	udiv	r2, r3, r2
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	085b      	lsrs	r3, r3, #1
 800328c:	441a      	add	r2, r3
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	fbb2 f3f3 	udiv	r3, r2, r3
 8003296:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003298:	6a3b      	ldr	r3, [r7, #32]
 800329a:	2b0f      	cmp	r3, #15
 800329c:	d910      	bls.n	80032c0 <UART_SetConfig+0x5c8>
 800329e:	6a3b      	ldr	r3, [r7, #32]
 80032a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032a4:	d20c      	bcs.n	80032c0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80032a6:	6a3b      	ldr	r3, [r7, #32]
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	60da      	str	r2, [r3, #12]
 80032b0:	e009      	b.n	80032c6 <UART_SetConfig+0x5ce>
 80032b2:	bf00      	nop
 80032b4:	40008000 	.word	0x40008000
 80032b8:	00f42400 	.word	0x00f42400
 80032bc:	080039c4 	.word	0x080039c4
      }
      else
      {
        ret = HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	2200      	movs	r2, #0
 80032da:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	2200      	movs	r2, #0
 80032e0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80032e2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3730      	adds	r7, #48	@ 0x30
 80032ea:	46bd      	mov	sp, r7
 80032ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080032f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032fc:	f003 0308 	and.w	r3, r3, #8
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00a      	beq.n	800331a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	430a      	orrs	r2, r1
 8003318:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00a      	beq.n	800333c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	430a      	orrs	r2, r1
 800333a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003340:	f003 0302 	and.w	r3, r3, #2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d00a      	beq.n	800335e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	430a      	orrs	r2, r1
 800335c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003362:	f003 0304 	and.w	r3, r3, #4
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00a      	beq.n	8003380 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	430a      	orrs	r2, r1
 800337e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003384:	f003 0310 	and.w	r3, r3, #16
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00a      	beq.n	80033a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	430a      	orrs	r2, r1
 80033a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033a6:	f003 0320 	and.w	r3, r3, #32
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00a      	beq.n	80033c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	430a      	orrs	r2, r1
 80033c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d01a      	beq.n	8003406 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	430a      	orrs	r2, r1
 80033e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033ee:	d10a      	bne.n	8003406 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	430a      	orrs	r2, r1
 8003404:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800340a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00a      	beq.n	8003428 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	430a      	orrs	r2, r1
 8003426:	605a      	str	r2, [r3, #4]
  }
}
 8003428:	bf00      	nop
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b098      	sub	sp, #96	@ 0x60
 8003438:	af02      	add	r7, sp, #8
 800343a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003444:	f7fd fb70 	bl	8000b28 <HAL_GetTick>
 8003448:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0308 	and.w	r3, r3, #8
 8003454:	2b08      	cmp	r3, #8
 8003456:	d12f      	bne.n	80034b8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003458:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800345c:	9300      	str	r3, [sp, #0]
 800345e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003460:	2200      	movs	r2, #0
 8003462:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 f88e 	bl	8003588 <UART_WaitOnFlagUntilTimeout>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d022      	beq.n	80034b8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800347a:	e853 3f00 	ldrex	r3, [r3]
 800347e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003480:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003482:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003486:	653b      	str	r3, [r7, #80]	@ 0x50
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	461a      	mov	r2, r3
 800348e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003490:	647b      	str	r3, [r7, #68]	@ 0x44
 8003492:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003494:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003496:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003498:	e841 2300 	strex	r3, r2, [r1]
 800349c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800349e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d1e6      	bne.n	8003472 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2220      	movs	r2, #32
 80034a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e063      	b.n	8003580 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0304 	and.w	r3, r3, #4
 80034c2:	2b04      	cmp	r3, #4
 80034c4:	d149      	bne.n	800355a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034c6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80034ca:	9300      	str	r3, [sp, #0]
 80034cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034ce:	2200      	movs	r2, #0
 80034d0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 f857 	bl	8003588 <UART_WaitOnFlagUntilTimeout>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d03c      	beq.n	800355a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e8:	e853 3f00 	ldrex	r3, [r3]
 80034ec:	623b      	str	r3, [r7, #32]
   return(result);
 80034ee:	6a3b      	ldr	r3, [r7, #32]
 80034f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80034f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	461a      	mov	r2, r3
 80034fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8003500:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003502:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003504:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003506:	e841 2300 	strex	r3, r2, [r1]
 800350a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800350c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1e6      	bne.n	80034e0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	3308      	adds	r3, #8
 8003518:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	e853 3f00 	ldrex	r3, [r3]
 8003520:	60fb      	str	r3, [r7, #12]
   return(result);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f023 0301 	bic.w	r3, r3, #1
 8003528:	64bb      	str	r3, [r7, #72]	@ 0x48
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	3308      	adds	r3, #8
 8003530:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003532:	61fa      	str	r2, [r7, #28]
 8003534:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003536:	69b9      	ldr	r1, [r7, #24]
 8003538:	69fa      	ldr	r2, [r7, #28]
 800353a:	e841 2300 	strex	r3, r2, [r1]
 800353e:	617b      	str	r3, [r7, #20]
   return(result);
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1e5      	bne.n	8003512 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2220      	movs	r2, #32
 800354a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e012      	b.n	8003580 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2220      	movs	r2, #32
 800355e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2220      	movs	r2, #32
 8003566:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800357e:	2300      	movs	r3, #0
}
 8003580:	4618      	mov	r0, r3
 8003582:	3758      	adds	r7, #88	@ 0x58
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	603b      	str	r3, [r7, #0]
 8003594:	4613      	mov	r3, r2
 8003596:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003598:	e04f      	b.n	800363a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a0:	d04b      	beq.n	800363a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035a2:	f7fd fac1 	bl	8000b28 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d302      	bcc.n	80035b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d101      	bne.n	80035bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e04e      	b.n	800365a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0304 	and.w	r3, r3, #4
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d037      	beq.n	800363a <UART_WaitOnFlagUntilTimeout+0xb2>
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	2b80      	cmp	r3, #128	@ 0x80
 80035ce:	d034      	beq.n	800363a <UART_WaitOnFlagUntilTimeout+0xb2>
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	2b40      	cmp	r3, #64	@ 0x40
 80035d4:	d031      	beq.n	800363a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	69db      	ldr	r3, [r3, #28]
 80035dc:	f003 0308 	and.w	r3, r3, #8
 80035e0:	2b08      	cmp	r3, #8
 80035e2:	d110      	bne.n	8003606 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2208      	movs	r2, #8
 80035ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	f000 f838 	bl	8003662 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2208      	movs	r2, #8
 80035f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e029      	b.n	800365a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	69db      	ldr	r3, [r3, #28]
 800360c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003610:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003614:	d111      	bne.n	800363a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800361e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003620:	68f8      	ldr	r0, [r7, #12]
 8003622:	f000 f81e 	bl	8003662 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2220      	movs	r2, #32
 800362a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e00f      	b.n	800365a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	69da      	ldr	r2, [r3, #28]
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	4013      	ands	r3, r2
 8003644:	68ba      	ldr	r2, [r7, #8]
 8003646:	429a      	cmp	r2, r3
 8003648:	bf0c      	ite	eq
 800364a:	2301      	moveq	r3, #1
 800364c:	2300      	movne	r3, #0
 800364e:	b2db      	uxtb	r3, r3
 8003650:	461a      	mov	r2, r3
 8003652:	79fb      	ldrb	r3, [r7, #7]
 8003654:	429a      	cmp	r2, r3
 8003656:	d0a0      	beq.n	800359a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3710      	adds	r7, #16
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}

08003662 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003662:	b480      	push	{r7}
 8003664:	b095      	sub	sp, #84	@ 0x54
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003670:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003672:	e853 3f00 	ldrex	r3, [r3]
 8003676:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800367a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800367e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	461a      	mov	r2, r3
 8003686:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003688:	643b      	str	r3, [r7, #64]	@ 0x40
 800368a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800368c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800368e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003690:	e841 2300 	strex	r3, r2, [r1]
 8003694:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1e6      	bne.n	800366a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	3308      	adds	r3, #8
 80036a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a4:	6a3b      	ldr	r3, [r7, #32]
 80036a6:	e853 3f00 	ldrex	r3, [r3]
 80036aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036b2:	f023 0301 	bic.w	r3, r3, #1
 80036b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	3308      	adds	r3, #8
 80036be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80036c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80036c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036c8:	e841 2300 	strex	r3, r2, [r1]
 80036cc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80036ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1e3      	bne.n	800369c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d118      	bne.n	800370e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	e853 3f00 	ldrex	r3, [r3]
 80036e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	f023 0310 	bic.w	r3, r3, #16
 80036f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	461a      	mov	r2, r3
 80036f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036fa:	61bb      	str	r3, [r7, #24]
 80036fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036fe:	6979      	ldr	r1, [r7, #20]
 8003700:	69ba      	ldr	r2, [r7, #24]
 8003702:	e841 2300 	strex	r3, r2, [r1]
 8003706:	613b      	str	r3, [r7, #16]
   return(result);
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1e6      	bne.n	80036dc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2220      	movs	r2, #32
 8003712:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003722:	bf00      	nop
 8003724:	3754      	adds	r7, #84	@ 0x54
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr

0800372e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800372e:	b480      	push	{r7}
 8003730:	b085      	sub	sp, #20
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800373c:	2b01      	cmp	r3, #1
 800373e:	d101      	bne.n	8003744 <HAL_UARTEx_DisableFifoMode+0x16>
 8003740:	2302      	movs	r3, #2
 8003742:	e027      	b.n	8003794 <HAL_UARTEx_DisableFifoMode+0x66>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2224      	movs	r2, #36	@ 0x24
 8003750:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f022 0201 	bic.w	r2, r2, #1
 800376a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8003772:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68fa      	ldr	r2, [r7, #12]
 8003780:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2220      	movs	r2, #32
 8003786:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003792:	2300      	movs	r3, #0
}
 8003794:	4618      	mov	r0, r3
 8003796:	3714      	adds	r7, #20
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d101      	bne.n	80037b8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80037b4:	2302      	movs	r3, #2
 80037b6:	e02d      	b.n	8003814 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2224      	movs	r2, #36	@ 0x24
 80037c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f022 0201 	bic.w	r2, r2, #1
 80037de:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	430a      	orrs	r2, r1
 80037f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f000 f84f 	bl	8003898 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2220      	movs	r2, #32
 8003806:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003812:	2300      	movs	r3, #0
}
 8003814:	4618      	mov	r0, r3
 8003816:	3710      	adds	r7, #16
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800382c:	2b01      	cmp	r3, #1
 800382e:	d101      	bne.n	8003834 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003830:	2302      	movs	r3, #2
 8003832:	e02d      	b.n	8003890 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2224      	movs	r2, #36	@ 0x24
 8003840:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f022 0201 	bic.w	r2, r2, #1
 800385a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	683a      	ldr	r2, [r7, #0]
 800386c:	430a      	orrs	r2, r1
 800386e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f000 f811 	bl	8003898 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2220      	movs	r2, #32
 8003882:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	3710      	adds	r7, #16
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003898:	b480      	push	{r7}
 800389a:	b085      	sub	sp, #20
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d108      	bne.n	80038ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80038b8:	e031      	b.n	800391e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80038ba:	2308      	movs	r3, #8
 80038bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80038be:	2308      	movs	r3, #8
 80038c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	0e5b      	lsrs	r3, r3, #25
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	f003 0307 	and.w	r3, r3, #7
 80038d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	0f5b      	lsrs	r3, r3, #29
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	f003 0307 	and.w	r3, r3, #7
 80038e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038e2:	7bbb      	ldrb	r3, [r7, #14]
 80038e4:	7b3a      	ldrb	r2, [r7, #12]
 80038e6:	4911      	ldr	r1, [pc, #68]	@ (800392c <UARTEx_SetNbDataToProcess+0x94>)
 80038e8:	5c8a      	ldrb	r2, [r1, r2]
 80038ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80038ee:	7b3a      	ldrb	r2, [r7, #12]
 80038f0:	490f      	ldr	r1, [pc, #60]	@ (8003930 <UARTEx_SetNbDataToProcess+0x98>)
 80038f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80038f8:	b29a      	uxth	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003900:	7bfb      	ldrb	r3, [r7, #15]
 8003902:	7b7a      	ldrb	r2, [r7, #13]
 8003904:	4909      	ldr	r1, [pc, #36]	@ (800392c <UARTEx_SetNbDataToProcess+0x94>)
 8003906:	5c8a      	ldrb	r2, [r1, r2]
 8003908:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800390c:	7b7a      	ldrb	r2, [r7, #13]
 800390e:	4908      	ldr	r1, [pc, #32]	@ (8003930 <UARTEx_SetNbDataToProcess+0x98>)
 8003910:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003912:	fb93 f3f2 	sdiv	r3, r3, r2
 8003916:	b29a      	uxth	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800391e:	bf00      	nop
 8003920:	3714      	adds	r7, #20
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	080039dc 	.word	0x080039dc
 8003930:	080039e4 	.word	0x080039e4

08003934 <memset>:
 8003934:	4402      	add	r2, r0
 8003936:	4603      	mov	r3, r0
 8003938:	4293      	cmp	r3, r2
 800393a:	d100      	bne.n	800393e <memset+0xa>
 800393c:	4770      	bx	lr
 800393e:	f803 1b01 	strb.w	r1, [r3], #1
 8003942:	e7f9      	b.n	8003938 <memset+0x4>

08003944 <__libc_init_array>:
 8003944:	b570      	push	{r4, r5, r6, lr}
 8003946:	4d0d      	ldr	r5, [pc, #52]	@ (800397c <__libc_init_array+0x38>)
 8003948:	4c0d      	ldr	r4, [pc, #52]	@ (8003980 <__libc_init_array+0x3c>)
 800394a:	1b64      	subs	r4, r4, r5
 800394c:	10a4      	asrs	r4, r4, #2
 800394e:	2600      	movs	r6, #0
 8003950:	42a6      	cmp	r6, r4
 8003952:	d109      	bne.n	8003968 <__libc_init_array+0x24>
 8003954:	4d0b      	ldr	r5, [pc, #44]	@ (8003984 <__libc_init_array+0x40>)
 8003956:	4c0c      	ldr	r4, [pc, #48]	@ (8003988 <__libc_init_array+0x44>)
 8003958:	f000 f818 	bl	800398c <_init>
 800395c:	1b64      	subs	r4, r4, r5
 800395e:	10a4      	asrs	r4, r4, #2
 8003960:	2600      	movs	r6, #0
 8003962:	42a6      	cmp	r6, r4
 8003964:	d105      	bne.n	8003972 <__libc_init_array+0x2e>
 8003966:	bd70      	pop	{r4, r5, r6, pc}
 8003968:	f855 3b04 	ldr.w	r3, [r5], #4
 800396c:	4798      	blx	r3
 800396e:	3601      	adds	r6, #1
 8003970:	e7ee      	b.n	8003950 <__libc_init_array+0xc>
 8003972:	f855 3b04 	ldr.w	r3, [r5], #4
 8003976:	4798      	blx	r3
 8003978:	3601      	adds	r6, #1
 800397a:	e7f2      	b.n	8003962 <__libc_init_array+0x1e>
 800397c:	080039f4 	.word	0x080039f4
 8003980:	080039f4 	.word	0x080039f4
 8003984:	080039f4 	.word	0x080039f4
 8003988:	080039f8 	.word	0x080039f8

0800398c <_init>:
 800398c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800398e:	bf00      	nop
 8003990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003992:	bc08      	pop	{r3}
 8003994:	469e      	mov	lr, r3
 8003996:	4770      	bx	lr

08003998 <_fini>:
 8003998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800399a:	bf00      	nop
 800399c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800399e:	bc08      	pop	{r3}
 80039a0:	469e      	mov	lr, r3
 80039a2:	4770      	bx	lr
