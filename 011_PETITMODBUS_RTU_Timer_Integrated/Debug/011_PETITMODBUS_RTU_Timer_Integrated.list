
011_PETITMODBUS_RTU_Timer_Integrated.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004228  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08004400  08004400  00005400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004454  08004454  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004454  08004454  00005454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800445c  0800445c  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800445c  0800445c  0000545c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004460  08004460  00005460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004464  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  2000000c  08004470  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000015c  08004470  0000615c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000127c3  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000242f  00000000  00000000  000187ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001048  00000000  00000000  0001ac30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cc4  00000000  00000000  0001bc78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000260d6  00000000  00000000  0001c93c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013103  00000000  00000000  00042a12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000faebf  00000000  00000000  00055b15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001509d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004560  00000000  00000000  00150a18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  00154f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080043e8 	.word	0x080043e8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080043e8 	.word	0x080043e8

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 faed 	bl	8000aea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f810 	bl	8000534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 f922 	bl	800075c <MX_GPIO_Init>
  MX_TIM1_Init();
 8000518:	f000 f858 	bl	80005cc <MX_TIM1_Init>
  MX_TIM16_Init();
 800051c:	f000 f8aa 	bl	8000674 <MX_TIM16_Init>
  MX_USART1_UART_Init();
 8000520:	f000 f8d0 	bl	80006c4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim16);
 8000524:	4802      	ldr	r0, [pc, #8]	@ (8000530 <main+0x28>)
 8000526:	f001 ff43 	bl	80023b0 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800052a:	bf00      	nop
 800052c:	e7fd      	b.n	800052a <main+0x22>
 800052e:	bf00      	nop
 8000530:	20000078 	.word	0x20000078

08000534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b094      	sub	sp, #80	@ 0x50
 8000538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053a:	f107 0318 	add.w	r3, r7, #24
 800053e:	2238      	movs	r2, #56	@ 0x38
 8000540:	2100      	movs	r1, #0
 8000542:	4618      	mov	r0, r3
 8000544:	f003 ff24 	bl	8004390 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000548:	1d3b      	adds	r3, r7, #4
 800054a:	2200      	movs	r2, #0
 800054c:	601a      	str	r2, [r3, #0]
 800054e:	605a      	str	r2, [r3, #4]
 8000550:	609a      	str	r2, [r3, #8]
 8000552:	60da      	str	r2, [r3, #12]
 8000554:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000556:	2000      	movs	r0, #0
 8000558:	f000 fea2 	bl	80012a0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800055c:	2302      	movs	r3, #2
 800055e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000560:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000564:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000566:	2340      	movs	r3, #64	@ 0x40
 8000568:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056a:	2302      	movs	r3, #2
 800056c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800056e:	2302      	movs	r3, #2
 8000570:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000572:	2304      	movs	r3, #4
 8000574:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000576:	2355      	movs	r3, #85	@ 0x55
 8000578:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800057a:	2302      	movs	r3, #2
 800057c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800057e:	2302      	movs	r3, #2
 8000580:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000582:	2302      	movs	r3, #2
 8000584:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000586:	f107 0318 	add.w	r3, r7, #24
 800058a:	4618      	mov	r0, r3
 800058c:	f000 ff3c 	bl	8001408 <HAL_RCC_OscConfig>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000596:	f000 f959 	bl	800084c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059a:	230f      	movs	r3, #15
 800059c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800059e:	2303      	movs	r3, #3
 80005a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a2:	2300      	movs	r3, #0
 80005a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005aa:	2300      	movs	r3, #0
 80005ac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005ae:	1d3b      	adds	r3, r7, #4
 80005b0:	2104      	movs	r1, #4
 80005b2:	4618      	mov	r0, r3
 80005b4:	f001 fa3a 	bl	8001a2c <HAL_RCC_ClockConfig>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005be:	f000 f945 	bl	800084c <Error_Handler>
  }
}
 80005c2:	bf00      	nop
 80005c4:	3750      	adds	r7, #80	@ 0x50
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
	...

080005cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b088      	sub	sp, #32
 80005d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005d2:	f107 0310 	add.w	r3, r7, #16
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
 80005da:	605a      	str	r2, [r3, #4]
 80005dc:	609a      	str	r2, [r3, #8]
 80005de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005e0:	1d3b      	adds	r3, r7, #4
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80005ea:	4b20      	ldr	r3, [pc, #128]	@ (800066c <MX_TIM1_Init+0xa0>)
 80005ec:	4a20      	ldr	r2, [pc, #128]	@ (8000670 <MX_TIM1_Init+0xa4>)
 80005ee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80005f0:	4b1e      	ldr	r3, [pc, #120]	@ (800066c <MX_TIM1_Init+0xa0>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005f6:	4b1d      	ldr	r3, [pc, #116]	@ (800066c <MX_TIM1_Init+0xa0>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80005fc:	4b1b      	ldr	r3, [pc, #108]	@ (800066c <MX_TIM1_Init+0xa0>)
 80005fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000602:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000604:	4b19      	ldr	r3, [pc, #100]	@ (800066c <MX_TIM1_Init+0xa0>)
 8000606:	2200      	movs	r2, #0
 8000608:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800060a:	4b18      	ldr	r3, [pc, #96]	@ (800066c <MX_TIM1_Init+0xa0>)
 800060c:	2200      	movs	r2, #0
 800060e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000610:	4b16      	ldr	r3, [pc, #88]	@ (800066c <MX_TIM1_Init+0xa0>)
 8000612:	2200      	movs	r2, #0
 8000614:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000616:	4815      	ldr	r0, [pc, #84]	@ (800066c <MX_TIM1_Init+0xa0>)
 8000618:	f001 fe72 	bl	8002300 <HAL_TIM_Base_Init>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000622:	f000 f913 	bl	800084c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000626:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800062a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800062c:	f107 0310 	add.w	r3, r7, #16
 8000630:	4619      	mov	r1, r3
 8000632:	480e      	ldr	r0, [pc, #56]	@ (800066c <MX_TIM1_Init+0xa0>)
 8000634:	f002 f884 	bl	8002740 <HAL_TIM_ConfigClockSource>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800063e:	f000 f905 	bl	800084c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000642:	2300      	movs	r3, #0
 8000644:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000646:	2300      	movs	r3, #0
 8000648:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800064a:	2300      	movs	r3, #0
 800064c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800064e:	1d3b      	adds	r3, r7, #4
 8000650:	4619      	mov	r1, r3
 8000652:	4806      	ldr	r0, [pc, #24]	@ (800066c <MX_TIM1_Init+0xa0>)
 8000654:	f002 fb02 	bl	8002c5c <HAL_TIMEx_MasterConfigSynchronization>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800065e:	f000 f8f5 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000662:	bf00      	nop
 8000664:	3720      	adds	r7, #32
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	2000002c 	.word	0x2000002c
 8000670:	40012c00 	.word	0x40012c00

08000674 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000678:	4b10      	ldr	r3, [pc, #64]	@ (80006bc <MX_TIM16_Init+0x48>)
 800067a:	4a11      	ldr	r2, [pc, #68]	@ (80006c0 <MX_TIM16_Init+0x4c>)
 800067c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 17000;
 800067e:	4b0f      	ldr	r3, [pc, #60]	@ (80006bc <MX_TIM16_Init+0x48>)
 8000680:	f244 2268 	movw	r2, #17000	@ 0x4268
 8000684:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000686:	4b0d      	ldr	r3, [pc, #52]	@ (80006bc <MX_TIM16_Init+0x48>)
 8000688:	2200      	movs	r2, #0
 800068a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000;
 800068c:	4b0b      	ldr	r3, [pc, #44]	@ (80006bc <MX_TIM16_Init+0x48>)
 800068e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000692:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000694:	4b09      	ldr	r3, [pc, #36]	@ (80006bc <MX_TIM16_Init+0x48>)
 8000696:	2200      	movs	r2, #0
 8000698:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800069a:	4b08      	ldr	r3, [pc, #32]	@ (80006bc <MX_TIM16_Init+0x48>)
 800069c:	2200      	movs	r2, #0
 800069e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006a0:	4b06      	ldr	r3, [pc, #24]	@ (80006bc <MX_TIM16_Init+0x48>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80006a6:	4805      	ldr	r0, [pc, #20]	@ (80006bc <MX_TIM16_Init+0x48>)
 80006a8:	f001 fe2a 	bl	8002300 <HAL_TIM_Base_Init>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80006b2:	f000 f8cb 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	20000078 	.word	0x20000078
 80006c0:	40014400 	.word	0x40014400

080006c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006c8:	4b22      	ldr	r3, [pc, #136]	@ (8000754 <MX_USART1_UART_Init+0x90>)
 80006ca:	4a23      	ldr	r2, [pc, #140]	@ (8000758 <MX_USART1_UART_Init+0x94>)
 80006cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006ce:	4b21      	ldr	r3, [pc, #132]	@ (8000754 <MX_USART1_UART_Init+0x90>)
 80006d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006d6:	4b1f      	ldr	r3, [pc, #124]	@ (8000754 <MX_USART1_UART_Init+0x90>)
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006dc:	4b1d      	ldr	r3, [pc, #116]	@ (8000754 <MX_USART1_UART_Init+0x90>)
 80006de:	2200      	movs	r2, #0
 80006e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000754 <MX_USART1_UART_Init+0x90>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006e8:	4b1a      	ldr	r3, [pc, #104]	@ (8000754 <MX_USART1_UART_Init+0x90>)
 80006ea:	220c      	movs	r2, #12
 80006ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ee:	4b19      	ldr	r3, [pc, #100]	@ (8000754 <MX_USART1_UART_Init+0x90>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f4:	4b17      	ldr	r3, [pc, #92]	@ (8000754 <MX_USART1_UART_Init+0x90>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006fa:	4b16      	ldr	r3, [pc, #88]	@ (8000754 <MX_USART1_UART_Init+0x90>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000700:	4b14      	ldr	r3, [pc, #80]	@ (8000754 <MX_USART1_UART_Init+0x90>)
 8000702:	2200      	movs	r2, #0
 8000704:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000706:	4b13      	ldr	r3, [pc, #76]	@ (8000754 <MX_USART1_UART_Init+0x90>)
 8000708:	2200      	movs	r2, #0
 800070a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800070c:	4811      	ldr	r0, [pc, #68]	@ (8000754 <MX_USART1_UART_Init+0x90>)
 800070e:	f002 fb81 	bl	8002e14 <HAL_UART_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000718:	f000 f898 	bl	800084c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800071c:	2100      	movs	r1, #0
 800071e:	480d      	ldr	r0, [pc, #52]	@ (8000754 <MX_USART1_UART_Init+0x90>)
 8000720:	f003 fd6b 	bl	80041fa <HAL_UARTEx_SetTxFifoThreshold>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800072a:	f000 f88f 	bl	800084c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800072e:	2100      	movs	r1, #0
 8000730:	4808      	ldr	r0, [pc, #32]	@ (8000754 <MX_USART1_UART_Init+0x90>)
 8000732:	f003 fda0 	bl	8004276 <HAL_UARTEx_SetRxFifoThreshold>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800073c:	f000 f886 	bl	800084c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000740:	4804      	ldr	r0, [pc, #16]	@ (8000754 <MX_USART1_UART_Init+0x90>)
 8000742:	f003 fd21 	bl	8004188 <HAL_UARTEx_DisableFifoMode>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800074c:	f000 f87e 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000750:	bf00      	nop
 8000752:	bd80      	pop	{r7, pc}
 8000754:	200000c4 	.word	0x200000c4
 8000758:	40013800 	.word	0x40013800

0800075c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b088      	sub	sp, #32
 8000760:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000762:	f107 030c 	add.w	r3, r7, #12
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]
 8000770:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000772:	4b1e      	ldr	r3, [pc, #120]	@ (80007ec <MX_GPIO_Init+0x90>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000776:	4a1d      	ldr	r2, [pc, #116]	@ (80007ec <MX_GPIO_Init+0x90>)
 8000778:	f043 0304 	orr.w	r3, r3, #4
 800077c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800077e:	4b1b      	ldr	r3, [pc, #108]	@ (80007ec <MX_GPIO_Init+0x90>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000782:	f003 0304 	and.w	r3, r3, #4
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800078a:	4b18      	ldr	r3, [pc, #96]	@ (80007ec <MX_GPIO_Init+0x90>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800078e:	4a17      	ldr	r2, [pc, #92]	@ (80007ec <MX_GPIO_Init+0x90>)
 8000790:	f043 0320 	orr.w	r3, r3, #32
 8000794:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000796:	4b15      	ldr	r3, [pc, #84]	@ (80007ec <MX_GPIO_Init+0x90>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800079a:	f003 0320 	and.w	r3, r3, #32
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a2:	4b12      	ldr	r3, [pc, #72]	@ (80007ec <MX_GPIO_Init+0x90>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007a6:	4a11      	ldr	r2, [pc, #68]	@ (80007ec <MX_GPIO_Init+0x90>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ae:	4b0f      	ldr	r3, [pc, #60]	@ (80007ec <MX_GPIO_Init+0x90>)
 80007b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	603b      	str	r3, [r7, #0]
 80007b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2120      	movs	r1, #32
 80007be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007c2:	f000 fd55 	bl	8001270 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80007c6:	2320      	movs	r3, #32
 80007c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ca:	2301      	movs	r3, #1
 80007cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d2:	2300      	movs	r3, #0
 80007d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80007d6:	f107 030c 	add.w	r3, r7, #12
 80007da:	4619      	mov	r1, r3
 80007dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007e0:	f000 fbc4 	bl	8000f6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007e4:	bf00      	nop
 80007e6:	3720      	adds	r7, #32
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40021000 	.word	0x40021000

080007f0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */


HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b088      	sub	sp, #32
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]

		counter++;
 80007f8:	4b11      	ldr	r3, [pc, #68]	@ (8000840 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	3301      	adds	r3, #1
 80007fe:	4a10      	ldr	r2, [pc, #64]	@ (8000840 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000800:	6013      	str	r3, [r2, #0]
		char liste[20]="MEHABA";
 8000802:	4a10      	ldr	r2, [pc, #64]	@ (8000844 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000804:	f107 030c 	add.w	r3, r7, #12
 8000808:	e892 0003 	ldmia.w	r2, {r0, r1}
 800080c:	6018      	str	r0, [r3, #0]
 800080e:	3304      	adds	r3, #4
 8000810:	8019      	strh	r1, [r3, #0]
 8000812:	3302      	adds	r3, #2
 8000814:	0c0a      	lsrs	r2, r1, #16
 8000816:	701a      	strb	r2, [r3, #0]
 8000818:	f107 0313 	add.w	r3, r7, #19
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	731a      	strb	r2, [r3, #12]
		HAL_UART_Transmit(&huart1, liste, sizeof(liste), HAL_MAX_DELAY);
 8000826:	f107 010c 	add.w	r1, r7, #12
 800082a:	f04f 33ff 	mov.w	r3, #4294967295
 800082e:	2214      	movs	r2, #20
 8000830:	4805      	ldr	r0, [pc, #20]	@ (8000848 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000832:	f002 fb3f 	bl	8002eb4 <HAL_UART_Transmit>



}
 8000836:	bf00      	nop
 8000838:	3720      	adds	r7, #32
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000028 	.word	0x20000028
 8000844:	08004400 	.word	0x08004400
 8000848:	200000c4 	.word	0x200000c4

0800084c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000850:	b672      	cpsid	i
}
 8000852:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000854:	bf00      	nop
 8000856:	e7fd      	b.n	8000854 <Error_Handler+0x8>

08000858 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085e:	4b0f      	ldr	r3, [pc, #60]	@ (800089c <HAL_MspInit+0x44>)
 8000860:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000862:	4a0e      	ldr	r2, [pc, #56]	@ (800089c <HAL_MspInit+0x44>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	6613      	str	r3, [r2, #96]	@ 0x60
 800086a:	4b0c      	ldr	r3, [pc, #48]	@ (800089c <HAL_MspInit+0x44>)
 800086c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000876:	4b09      	ldr	r3, [pc, #36]	@ (800089c <HAL_MspInit+0x44>)
 8000878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800087a:	4a08      	ldr	r2, [pc, #32]	@ (800089c <HAL_MspInit+0x44>)
 800087c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000880:	6593      	str	r3, [r2, #88]	@ 0x58
 8000882:	4b06      	ldr	r3, [pc, #24]	@ (800089c <HAL_MspInit+0x44>)
 8000884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000886:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800088a:	603b      	str	r3, [r7, #0]
 800088c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800088e:	f000 fdab 	bl	80013e8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000892:	bf00      	nop
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40021000 	.word	0x40021000

080008a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a1a      	ldr	r2, [pc, #104]	@ (8000918 <HAL_TIM_Base_MspInit+0x78>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d114      	bne.n	80008dc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80008b2:	4b1a      	ldr	r3, [pc, #104]	@ (800091c <HAL_TIM_Base_MspInit+0x7c>)
 80008b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008b6:	4a19      	ldr	r2, [pc, #100]	@ (800091c <HAL_TIM_Base_MspInit+0x7c>)
 80008b8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80008bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80008be:	4b17      	ldr	r3, [pc, #92]	@ (800091c <HAL_TIM_Base_MspInit+0x7c>)
 80008c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80008ca:	2200      	movs	r2, #0
 80008cc:	2100      	movs	r1, #0
 80008ce:	2019      	movs	r0, #25
 80008d0:	f000 fa57 	bl	8000d82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80008d4:	2019      	movs	r0, #25
 80008d6:	f000 fa6e 	bl	8000db6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80008da:	e018      	b.n	800090e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM16)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a0f      	ldr	r2, [pc, #60]	@ (8000920 <HAL_TIM_Base_MspInit+0x80>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d113      	bne.n	800090e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80008e6:	4b0d      	ldr	r3, [pc, #52]	@ (800091c <HAL_TIM_Base_MspInit+0x7c>)
 80008e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008ea:	4a0c      	ldr	r2, [pc, #48]	@ (800091c <HAL_TIM_Base_MspInit+0x7c>)
 80008ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008f0:	6613      	str	r3, [r2, #96]	@ 0x60
 80008f2:	4b0a      	ldr	r3, [pc, #40]	@ (800091c <HAL_TIM_Base_MspInit+0x7c>)
 80008f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008fa:	60bb      	str	r3, [r7, #8]
 80008fc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80008fe:	2200      	movs	r2, #0
 8000900:	2100      	movs	r1, #0
 8000902:	2019      	movs	r0, #25
 8000904:	f000 fa3d 	bl	8000d82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000908:	2019      	movs	r0, #25
 800090a:	f000 fa54 	bl	8000db6 <HAL_NVIC_EnableIRQ>
}
 800090e:	bf00      	nop
 8000910:	3710      	adds	r7, #16
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40012c00 	.word	0x40012c00
 800091c:	40021000 	.word	0x40021000
 8000920:	40014400 	.word	0x40014400

08000924 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b09e      	sub	sp, #120	@ 0x78
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
 800093a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800093c:	f107 0310 	add.w	r3, r7, #16
 8000940:	2254      	movs	r2, #84	@ 0x54
 8000942:	2100      	movs	r1, #0
 8000944:	4618      	mov	r0, r3
 8000946:	f003 fd23 	bl	8004390 <memset>
  if(huart->Instance==USART1)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4a22      	ldr	r2, [pc, #136]	@ (80009d8 <HAL_UART_MspInit+0xb4>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d13d      	bne.n	80009d0 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000954:	2301      	movs	r3, #1
 8000956:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000958:	2300      	movs	r3, #0
 800095a:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800095c:	f107 0310 	add.w	r3, r7, #16
 8000960:	4618      	mov	r0, r3
 8000962:	f001 fa7f 	bl	8001e64 <HAL_RCCEx_PeriphCLKConfig>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800096c:	f7ff ff6e 	bl	800084c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000970:	4b1a      	ldr	r3, [pc, #104]	@ (80009dc <HAL_UART_MspInit+0xb8>)
 8000972:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000974:	4a19      	ldr	r2, [pc, #100]	@ (80009dc <HAL_UART_MspInit+0xb8>)
 8000976:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800097a:	6613      	str	r3, [r2, #96]	@ 0x60
 800097c:	4b17      	ldr	r3, [pc, #92]	@ (80009dc <HAL_UART_MspInit+0xb8>)
 800097e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000980:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000984:	60fb      	str	r3, [r7, #12]
 8000986:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000988:	4b14      	ldr	r3, [pc, #80]	@ (80009dc <HAL_UART_MspInit+0xb8>)
 800098a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800098c:	4a13      	ldr	r2, [pc, #76]	@ (80009dc <HAL_UART_MspInit+0xb8>)
 800098e:	f043 0304 	orr.w	r3, r3, #4
 8000992:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000994:	4b11      	ldr	r3, [pc, #68]	@ (80009dc <HAL_UART_MspInit+0xb8>)
 8000996:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000998:	f003 0304 	and.w	r3, r3, #4
 800099c:	60bb      	str	r3, [r7, #8]
 800099e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80009a0:	2330      	movs	r3, #48	@ 0x30
 80009a2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a4:	2302      	movs	r3, #2
 80009a6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ac:	2300      	movs	r3, #0
 80009ae:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009b0:	2307      	movs	r3, #7
 80009b2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009b4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80009b8:	4619      	mov	r1, r3
 80009ba:	4809      	ldr	r0, [pc, #36]	@ (80009e0 <HAL_UART_MspInit+0xbc>)
 80009bc:	f000 fad6 	bl	8000f6c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80009c0:	2200      	movs	r2, #0
 80009c2:	2100      	movs	r1, #0
 80009c4:	2025      	movs	r0, #37	@ 0x25
 80009c6:	f000 f9dc 	bl	8000d82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009ca:	2025      	movs	r0, #37	@ 0x25
 80009cc:	f000 f9f3 	bl	8000db6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80009d0:	bf00      	nop
 80009d2:	3778      	adds	r7, #120	@ 0x78
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40013800 	.word	0x40013800
 80009dc:	40021000 	.word	0x40021000
 80009e0:	48000800 	.word	0x48000800

080009e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009e8:	bf00      	nop
 80009ea:	e7fd      	b.n	80009e8 <NMI_Handler+0x4>

080009ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009f0:	bf00      	nop
 80009f2:	e7fd      	b.n	80009f0 <HardFault_Handler+0x4>

080009f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f8:	bf00      	nop
 80009fa:	e7fd      	b.n	80009f8 <MemManage_Handler+0x4>

080009fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a00:	bf00      	nop
 8000a02:	e7fd      	b.n	8000a00 <BusFault_Handler+0x4>

08000a04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a08:	bf00      	nop
 8000a0a:	e7fd      	b.n	8000a08 <UsageFault_Handler+0x4>

08000a0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr

08000a1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr

08000a36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a36:	b580      	push	{r7, lr}
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a3a:	f000 f8a9 	bl	8000b90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
	...

08000a44 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a48:	4803      	ldr	r0, [pc, #12]	@ (8000a58 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8000a4a:	f001 fd29 	bl	80024a0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8000a4e:	4803      	ldr	r0, [pc, #12]	@ (8000a5c <TIM1_UP_TIM16_IRQHandler+0x18>)
 8000a50:	f001 fd26 	bl	80024a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000a54:	bf00      	nop
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	2000002c 	.word	0x2000002c
 8000a5c:	20000078 	.word	0x20000078

08000a60 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a64:	4802      	ldr	r0, [pc, #8]	@ (8000a70 <USART1_IRQHandler+0x10>)
 8000a66:	f002 fab3 	bl	8002fd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	200000c4 	.word	0x200000c4

08000a74 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a78:	4b06      	ldr	r3, [pc, #24]	@ (8000a94 <SystemInit+0x20>)
 8000a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a7e:	4a05      	ldr	r2, [pc, #20]	@ (8000a94 <SystemInit+0x20>)
 8000a80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	e000ed00 	.word	0xe000ed00

08000a98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a98:	480d      	ldr	r0, [pc, #52]	@ (8000ad0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a9a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a9c:	f7ff ffea 	bl	8000a74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aa0:	480c      	ldr	r0, [pc, #48]	@ (8000ad4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000aa2:	490d      	ldr	r1, [pc, #52]	@ (8000ad8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000aa4:	4a0d      	ldr	r2, [pc, #52]	@ (8000adc <LoopForever+0xe>)
  movs r3, #0
 8000aa6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000aa8:	e002      	b.n	8000ab0 <LoopCopyDataInit>

08000aaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aae:	3304      	adds	r3, #4

08000ab0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ab0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ab2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ab4:	d3f9      	bcc.n	8000aaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ab6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ab8:	4c0a      	ldr	r4, [pc, #40]	@ (8000ae4 <LoopForever+0x16>)
  movs r3, #0
 8000aba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000abc:	e001      	b.n	8000ac2 <LoopFillZerobss>

08000abe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000abe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ac0:	3204      	adds	r2, #4

08000ac2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ac2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ac4:	d3fb      	bcc.n	8000abe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ac6:	f003 fc6b 	bl	80043a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000aca:	f7ff fd1d 	bl	8000508 <main>

08000ace <LoopForever>:

LoopForever:
    b LoopForever
 8000ace:	e7fe      	b.n	8000ace <LoopForever>
  ldr   r0, =_estack
 8000ad0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ad4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ad8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000adc:	08004464 	.word	0x08004464
  ldr r2, =_sbss
 8000ae0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ae4:	2000015c 	.word	0x2000015c

08000ae8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ae8:	e7fe      	b.n	8000ae8 <ADC1_2_IRQHandler>

08000aea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b082      	sub	sp, #8
 8000aee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000af0:	2300      	movs	r3, #0
 8000af2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af4:	2003      	movs	r0, #3
 8000af6:	f000 f939 	bl	8000d6c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000afa:	2000      	movs	r0, #0
 8000afc:	f000 f80e 	bl	8000b1c <HAL_InitTick>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d002      	beq.n	8000b0c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
 8000b08:	71fb      	strb	r3, [r7, #7]
 8000b0a:	e001      	b.n	8000b10 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b0c:	f7ff fea4 	bl	8000858 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b10:	79fb      	ldrb	r3, [r7, #7]

}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
	...

08000b1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b24:	2300      	movs	r3, #0
 8000b26:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000b28:	4b16      	ldr	r3, [pc, #88]	@ (8000b84 <HAL_InitTick+0x68>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d022      	beq.n	8000b76 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000b30:	4b15      	ldr	r3, [pc, #84]	@ (8000b88 <HAL_InitTick+0x6c>)
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	4b13      	ldr	r3, [pc, #76]	@ (8000b84 <HAL_InitTick+0x68>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000b3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b44:	4618      	mov	r0, r3
 8000b46:	f000 f944 	bl	8000dd2 <HAL_SYSTICK_Config>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d10f      	bne.n	8000b70 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2b0f      	cmp	r3, #15
 8000b54:	d809      	bhi.n	8000b6a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b56:	2200      	movs	r2, #0
 8000b58:	6879      	ldr	r1, [r7, #4]
 8000b5a:	f04f 30ff 	mov.w	r0, #4294967295
 8000b5e:	f000 f910 	bl	8000d82 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b62:	4a0a      	ldr	r2, [pc, #40]	@ (8000b8c <HAL_InitTick+0x70>)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	6013      	str	r3, [r2, #0]
 8000b68:	e007      	b.n	8000b7a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	73fb      	strb	r3, [r7, #15]
 8000b6e:	e004      	b.n	8000b7a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b70:	2301      	movs	r3, #1
 8000b72:	73fb      	strb	r3, [r7, #15]
 8000b74:	e001      	b.n	8000b7a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
 8000b78:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3710      	adds	r7, #16
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20000008 	.word	0x20000008
 8000b88:	20000000 	.word	0x20000000
 8000b8c:	20000004 	.word	0x20000004

08000b90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b94:	4b05      	ldr	r3, [pc, #20]	@ (8000bac <HAL_IncTick+0x1c>)
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	4b05      	ldr	r3, [pc, #20]	@ (8000bb0 <HAL_IncTick+0x20>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	4a03      	ldr	r2, [pc, #12]	@ (8000bac <HAL_IncTick+0x1c>)
 8000ba0:	6013      	str	r3, [r2, #0]
}
 8000ba2:	bf00      	nop
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	20000158 	.word	0x20000158
 8000bb0:	20000008 	.word	0x20000008

08000bb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb8:	4b03      	ldr	r3, [pc, #12]	@ (8000bc8 <HAL_GetTick+0x14>)
 8000bba:	681b      	ldr	r3, [r3, #0]
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	20000158 	.word	0x20000158

08000bcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f003 0307 	and.w	r3, r3, #7
 8000bda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c10 <__NVIC_SetPriorityGrouping+0x44>)
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000be2:	68ba      	ldr	r2, [r7, #8]
 8000be4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000be8:	4013      	ands	r3, r2
 8000bea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bf4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bf8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bfe:	4a04      	ldr	r2, [pc, #16]	@ (8000c10 <__NVIC_SetPriorityGrouping+0x44>)
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	60d3      	str	r3, [r2, #12]
}
 8000c04:	bf00      	nop
 8000c06:	3714      	adds	r7, #20
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c18:	4b04      	ldr	r3, [pc, #16]	@ (8000c2c <__NVIC_GetPriorityGrouping+0x18>)
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	0a1b      	lsrs	r3, r3, #8
 8000c1e:	f003 0307 	and.w	r3, r3, #7
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	db0b      	blt.n	8000c5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	f003 021f 	and.w	r2, r3, #31
 8000c48:	4907      	ldr	r1, [pc, #28]	@ (8000c68 <__NVIC_EnableIRQ+0x38>)
 8000c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4e:	095b      	lsrs	r3, r3, #5
 8000c50:	2001      	movs	r0, #1
 8000c52:	fa00 f202 	lsl.w	r2, r0, r2
 8000c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c5a:	bf00      	nop
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	e000e100 	.word	0xe000e100

08000c6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	6039      	str	r1, [r7, #0]
 8000c76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	db0a      	blt.n	8000c96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	b2da      	uxtb	r2, r3
 8000c84:	490c      	ldr	r1, [pc, #48]	@ (8000cb8 <__NVIC_SetPriority+0x4c>)
 8000c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8a:	0112      	lsls	r2, r2, #4
 8000c8c:	b2d2      	uxtb	r2, r2
 8000c8e:	440b      	add	r3, r1
 8000c90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c94:	e00a      	b.n	8000cac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	b2da      	uxtb	r2, r3
 8000c9a:	4908      	ldr	r1, [pc, #32]	@ (8000cbc <__NVIC_SetPriority+0x50>)
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	f003 030f 	and.w	r3, r3, #15
 8000ca2:	3b04      	subs	r3, #4
 8000ca4:	0112      	lsls	r2, r2, #4
 8000ca6:	b2d2      	uxtb	r2, r2
 8000ca8:	440b      	add	r3, r1
 8000caa:	761a      	strb	r2, [r3, #24]
}
 8000cac:	bf00      	nop
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	e000e100 	.word	0xe000e100
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b089      	sub	sp, #36	@ 0x24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	60b9      	str	r1, [r7, #8]
 8000cca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	f003 0307 	and.w	r3, r3, #7
 8000cd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cd4:	69fb      	ldr	r3, [r7, #28]
 8000cd6:	f1c3 0307 	rsb	r3, r3, #7
 8000cda:	2b04      	cmp	r3, #4
 8000cdc:	bf28      	it	cs
 8000cde:	2304      	movcs	r3, #4
 8000ce0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	3304      	adds	r3, #4
 8000ce6:	2b06      	cmp	r3, #6
 8000ce8:	d902      	bls.n	8000cf0 <NVIC_EncodePriority+0x30>
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	3b03      	subs	r3, #3
 8000cee:	e000      	b.n	8000cf2 <NVIC_EncodePriority+0x32>
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8000cf8:	69bb      	ldr	r3, [r7, #24]
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	43da      	mvns	r2, r3
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	401a      	ands	r2, r3
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d08:	f04f 31ff 	mov.w	r1, #4294967295
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d12:	43d9      	mvns	r1, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d18:	4313      	orrs	r3, r2
         );
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3724      	adds	r7, #36	@ 0x24
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
	...

08000d28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	3b01      	subs	r3, #1
 8000d34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d38:	d301      	bcc.n	8000d3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e00f      	b.n	8000d5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d68 <SysTick_Config+0x40>)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	3b01      	subs	r3, #1
 8000d44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d46:	210f      	movs	r1, #15
 8000d48:	f04f 30ff 	mov.w	r0, #4294967295
 8000d4c:	f7ff ff8e 	bl	8000c6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d50:	4b05      	ldr	r3, [pc, #20]	@ (8000d68 <SysTick_Config+0x40>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d56:	4b04      	ldr	r3, [pc, #16]	@ (8000d68 <SysTick_Config+0x40>)
 8000d58:	2207      	movs	r2, #7
 8000d5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	e000e010 	.word	0xe000e010

08000d6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	f7ff ff29 	bl	8000bcc <__NVIC_SetPriorityGrouping>
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b086      	sub	sp, #24
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	4603      	mov	r3, r0
 8000d8a:	60b9      	str	r1, [r7, #8]
 8000d8c:	607a      	str	r2, [r7, #4]
 8000d8e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d90:	f7ff ff40 	bl	8000c14 <__NVIC_GetPriorityGrouping>
 8000d94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d96:	687a      	ldr	r2, [r7, #4]
 8000d98:	68b9      	ldr	r1, [r7, #8]
 8000d9a:	6978      	ldr	r0, [r7, #20]
 8000d9c:	f7ff ff90 	bl	8000cc0 <NVIC_EncodePriority>
 8000da0:	4602      	mov	r2, r0
 8000da2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000da6:	4611      	mov	r1, r2
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff ff5f 	bl	8000c6c <__NVIC_SetPriority>
}
 8000dae:	bf00      	nop
 8000db0:	3718      	adds	r7, #24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b082      	sub	sp, #8
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ff33 	bl	8000c30 <__NVIC_EnableIRQ>
}
 8000dca:	bf00      	nop
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b082      	sub	sp, #8
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dda:	6878      	ldr	r0, [r7, #4]
 8000ddc:	f7ff ffa4 	bl	8000d28 <SysTick_Config>
 8000de0:	4603      	mov	r3, r0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000dea:	b480      	push	{r7}
 8000dec:	b085      	sub	sp, #20
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000df2:	2300      	movs	r3, #0
 8000df4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	2b02      	cmp	r3, #2
 8000e00:	d005      	beq.n	8000e0e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2204      	movs	r2, #4
 8000e06:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	73fb      	strb	r3, [r7, #15]
 8000e0c:	e037      	b.n	8000e7e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f022 020e 	bic.w	r2, r2, #14
 8000e1c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000e2c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f022 0201 	bic.w	r2, r2, #1
 8000e3c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e42:	f003 021f 	and.w	r2, r3, #31
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e4a:	2101      	movs	r1, #1
 8000e4c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e50:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000e5a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d00c      	beq.n	8000e7e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e6e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000e72:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e78:	687a      	ldr	r2, [r7, #4]
 8000e7a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000e7c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2201      	movs	r2, #1
 8000e82:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8000e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3714      	adds	r7, #20
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	2b02      	cmp	r3, #2
 8000eb2:	d00d      	beq.n	8000ed0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2204      	movs	r2, #4
 8000eb8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	73fb      	strb	r3, [r7, #15]
 8000ece:	e047      	b.n	8000f60 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f022 020e 	bic.w	r2, r2, #14
 8000ede:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f022 0201 	bic.w	r2, r2, #1
 8000eee:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000efa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000efe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f04:	f003 021f 	and.w	r2, r3, #31
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f12:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f18:	687a      	ldr	r2, [r7, #4]
 8000f1a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000f1c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d00c      	beq.n	8000f40 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f30:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000f34:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f3a:	687a      	ldr	r2, [r7, #4]
 8000f3c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000f3e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2201      	movs	r2, #1
 8000f44:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d003      	beq.n	8000f60 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	4798      	blx	r3
    }
  }
  return status;
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b087      	sub	sp, #28
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f76:	2300      	movs	r3, #0
 8000f78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000f7a:	e15a      	b.n	8001232 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	2101      	movs	r1, #1
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	fa01 f303 	lsl.w	r3, r1, r3
 8000f88:	4013      	ands	r3, r2
 8000f8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	f000 814c 	beq.w	800122c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f003 0303 	and.w	r3, r3, #3
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d005      	beq.n	8000fac <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fa8:	2b02      	cmp	r3, #2
 8000faa:	d130      	bne.n	800100e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	2203      	movs	r2, #3
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	68da      	ldr	r2, [r3, #12]
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	43db      	mvns	r3, r3
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	091b      	lsrs	r3, r3, #4
 8000ff8:	f003 0201 	and.w	r2, r3, #1
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	4313      	orrs	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f003 0303 	and.w	r3, r3, #3
 8001016:	2b03      	cmp	r3, #3
 8001018:	d017      	beq.n	800104a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	68db      	ldr	r3, [r3, #12]
 800101e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	2203      	movs	r2, #3
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	43db      	mvns	r3, r3
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	4013      	ands	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	689a      	ldr	r2, [r3, #8]
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	4313      	orrs	r3, r2
 8001042:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f003 0303 	and.w	r3, r3, #3
 8001052:	2b02      	cmp	r3, #2
 8001054:	d123      	bne.n	800109e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	08da      	lsrs	r2, r3, #3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	3208      	adds	r2, #8
 800105e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001062:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	f003 0307 	and.w	r3, r3, #7
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	220f      	movs	r2, #15
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	43db      	mvns	r3, r3
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	4013      	ands	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	691a      	ldr	r2, [r3, #16]
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	f003 0307 	and.w	r3, r3, #7
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	4313      	orrs	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	08da      	lsrs	r2, r3, #3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3208      	adds	r2, #8
 8001098:	6939      	ldr	r1, [r7, #16]
 800109a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	2203      	movs	r2, #3
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	43db      	mvns	r3, r3
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	4013      	ands	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f003 0203 	and.w	r2, r3, #3
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	f000 80a6 	beq.w	800122c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e0:	4b5b      	ldr	r3, [pc, #364]	@ (8001250 <HAL_GPIO_Init+0x2e4>)
 80010e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010e4:	4a5a      	ldr	r2, [pc, #360]	@ (8001250 <HAL_GPIO_Init+0x2e4>)
 80010e6:	f043 0301 	orr.w	r3, r3, #1
 80010ea:	6613      	str	r3, [r2, #96]	@ 0x60
 80010ec:	4b58      	ldr	r3, [pc, #352]	@ (8001250 <HAL_GPIO_Init+0x2e4>)
 80010ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010f0:	f003 0301 	and.w	r3, r3, #1
 80010f4:	60bb      	str	r3, [r7, #8]
 80010f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010f8:	4a56      	ldr	r2, [pc, #344]	@ (8001254 <HAL_GPIO_Init+0x2e8>)
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	089b      	lsrs	r3, r3, #2
 80010fe:	3302      	adds	r3, #2
 8001100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001104:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	f003 0303 	and.w	r3, r3, #3
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	220f      	movs	r2, #15
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	43db      	mvns	r3, r3
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	4013      	ands	r3, r2
 800111a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001122:	d01f      	beq.n	8001164 <HAL_GPIO_Init+0x1f8>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4a4c      	ldr	r2, [pc, #304]	@ (8001258 <HAL_GPIO_Init+0x2ec>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d019      	beq.n	8001160 <HAL_GPIO_Init+0x1f4>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4a4b      	ldr	r2, [pc, #300]	@ (800125c <HAL_GPIO_Init+0x2f0>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d013      	beq.n	800115c <HAL_GPIO_Init+0x1f0>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4a4a      	ldr	r2, [pc, #296]	@ (8001260 <HAL_GPIO_Init+0x2f4>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d00d      	beq.n	8001158 <HAL_GPIO_Init+0x1ec>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4a49      	ldr	r2, [pc, #292]	@ (8001264 <HAL_GPIO_Init+0x2f8>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d007      	beq.n	8001154 <HAL_GPIO_Init+0x1e8>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4a48      	ldr	r2, [pc, #288]	@ (8001268 <HAL_GPIO_Init+0x2fc>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d101      	bne.n	8001150 <HAL_GPIO_Init+0x1e4>
 800114c:	2305      	movs	r3, #5
 800114e:	e00a      	b.n	8001166 <HAL_GPIO_Init+0x1fa>
 8001150:	2306      	movs	r3, #6
 8001152:	e008      	b.n	8001166 <HAL_GPIO_Init+0x1fa>
 8001154:	2304      	movs	r3, #4
 8001156:	e006      	b.n	8001166 <HAL_GPIO_Init+0x1fa>
 8001158:	2303      	movs	r3, #3
 800115a:	e004      	b.n	8001166 <HAL_GPIO_Init+0x1fa>
 800115c:	2302      	movs	r3, #2
 800115e:	e002      	b.n	8001166 <HAL_GPIO_Init+0x1fa>
 8001160:	2301      	movs	r3, #1
 8001162:	e000      	b.n	8001166 <HAL_GPIO_Init+0x1fa>
 8001164:	2300      	movs	r3, #0
 8001166:	697a      	ldr	r2, [r7, #20]
 8001168:	f002 0203 	and.w	r2, r2, #3
 800116c:	0092      	lsls	r2, r2, #2
 800116e:	4093      	lsls	r3, r2
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	4313      	orrs	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001176:	4937      	ldr	r1, [pc, #220]	@ (8001254 <HAL_GPIO_Init+0x2e8>)
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	089b      	lsrs	r3, r3, #2
 800117c:	3302      	adds	r3, #2
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001184:	4b39      	ldr	r3, [pc, #228]	@ (800126c <HAL_GPIO_Init+0x300>)
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	43db      	mvns	r3, r3
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	4013      	ands	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d003      	beq.n	80011a8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011a8:	4a30      	ldr	r2, [pc, #192]	@ (800126c <HAL_GPIO_Init+0x300>)
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80011ae:	4b2f      	ldr	r3, [pc, #188]	@ (800126c <HAL_GPIO_Init+0x300>)
 80011b0:	68db      	ldr	r3, [r3, #12]
 80011b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	43db      	mvns	r3, r3
 80011b8:	693a      	ldr	r2, [r7, #16]
 80011ba:	4013      	ands	r3, r2
 80011bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d003      	beq.n	80011d2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011d2:	4a26      	ldr	r2, [pc, #152]	@ (800126c <HAL_GPIO_Init+0x300>)
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80011d8:	4b24      	ldr	r3, [pc, #144]	@ (800126c <HAL_GPIO_Init+0x300>)
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	43db      	mvns	r3, r3
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	4013      	ands	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d003      	beq.n	80011fc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011fc:	4a1b      	ldr	r2, [pc, #108]	@ (800126c <HAL_GPIO_Init+0x300>)
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001202:	4b1a      	ldr	r3, [pc, #104]	@ (800126c <HAL_GPIO_Init+0x300>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	43db      	mvns	r3, r3
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	4013      	ands	r3, r2
 8001210:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d003      	beq.n	8001226 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	4313      	orrs	r3, r2
 8001224:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001226:	4a11      	ldr	r2, [pc, #68]	@ (800126c <HAL_GPIO_Init+0x300>)
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	3301      	adds	r3, #1
 8001230:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	fa22 f303 	lsr.w	r3, r2, r3
 800123c:	2b00      	cmp	r3, #0
 800123e:	f47f ae9d 	bne.w	8000f7c <HAL_GPIO_Init+0x10>
  }
}
 8001242:	bf00      	nop
 8001244:	bf00      	nop
 8001246:	371c      	adds	r7, #28
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	40021000 	.word	0x40021000
 8001254:	40010000 	.word	0x40010000
 8001258:	48000400 	.word	0x48000400
 800125c:	48000800 	.word	0x48000800
 8001260:	48000c00 	.word	0x48000c00
 8001264:	48001000 	.word	0x48001000
 8001268:	48001400 	.word	0x48001400
 800126c:	40010400 	.word	0x40010400

08001270 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	460b      	mov	r3, r1
 800127a:	807b      	strh	r3, [r7, #2]
 800127c:	4613      	mov	r3, r2
 800127e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001280:	787b      	ldrb	r3, [r7, #1]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d003      	beq.n	800128e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001286:	887a      	ldrh	r2, [r7, #2]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800128c:	e002      	b.n	8001294 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800128e:	887a      	ldrh	r2, [r7, #2]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001294:	bf00      	nop
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d141      	bne.n	8001332 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80012ae:	4b4b      	ldr	r3, [pc, #300]	@ (80013dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80012b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012ba:	d131      	bne.n	8001320 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012bc:	4b47      	ldr	r3, [pc, #284]	@ (80013dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80012c2:	4a46      	ldr	r2, [pc, #280]	@ (80013dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80012c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012cc:	4b43      	ldr	r3, [pc, #268]	@ (80013dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80012d4:	4a41      	ldr	r2, [pc, #260]	@ (80013dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012dc:	4b40      	ldr	r3, [pc, #256]	@ (80013e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2232      	movs	r2, #50	@ 0x32
 80012e2:	fb02 f303 	mul.w	r3, r2, r3
 80012e6:	4a3f      	ldr	r2, [pc, #252]	@ (80013e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80012e8:	fba2 2303 	umull	r2, r3, r2, r3
 80012ec:	0c9b      	lsrs	r3, r3, #18
 80012ee:	3301      	adds	r3, #1
 80012f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012f2:	e002      	b.n	80012fa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	3b01      	subs	r3, #1
 80012f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012fa:	4b38      	ldr	r3, [pc, #224]	@ (80013dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001302:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001306:	d102      	bne.n	800130e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d1f2      	bne.n	80012f4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800130e:	4b33      	ldr	r3, [pc, #204]	@ (80013dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001310:	695b      	ldr	r3, [r3, #20]
 8001312:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001316:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800131a:	d158      	bne.n	80013ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800131c:	2303      	movs	r3, #3
 800131e:	e057      	b.n	80013d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001320:	4b2e      	ldr	r3, [pc, #184]	@ (80013dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001322:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001326:	4a2d      	ldr	r2, [pc, #180]	@ (80013dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001328:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800132c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001330:	e04d      	b.n	80013ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001338:	d141      	bne.n	80013be <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800133a:	4b28      	ldr	r3, [pc, #160]	@ (80013dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001342:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001346:	d131      	bne.n	80013ac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001348:	4b24      	ldr	r3, [pc, #144]	@ (80013dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800134a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800134e:	4a23      	ldr	r2, [pc, #140]	@ (80013dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001350:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001354:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001358:	4b20      	ldr	r3, [pc, #128]	@ (80013dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001360:	4a1e      	ldr	r2, [pc, #120]	@ (80013dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001362:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001366:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001368:	4b1d      	ldr	r3, [pc, #116]	@ (80013e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2232      	movs	r2, #50	@ 0x32
 800136e:	fb02 f303 	mul.w	r3, r2, r3
 8001372:	4a1c      	ldr	r2, [pc, #112]	@ (80013e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001374:	fba2 2303 	umull	r2, r3, r2, r3
 8001378:	0c9b      	lsrs	r3, r3, #18
 800137a:	3301      	adds	r3, #1
 800137c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800137e:	e002      	b.n	8001386 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	3b01      	subs	r3, #1
 8001384:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001386:	4b15      	ldr	r3, [pc, #84]	@ (80013dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001388:	695b      	ldr	r3, [r3, #20]
 800138a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800138e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001392:	d102      	bne.n	800139a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d1f2      	bne.n	8001380 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800139a:	4b10      	ldr	r3, [pc, #64]	@ (80013dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800139c:	695b      	ldr	r3, [r3, #20]
 800139e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013a6:	d112      	bne.n	80013ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80013a8:	2303      	movs	r3, #3
 80013aa:	e011      	b.n	80013d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013ac:	4b0b      	ldr	r3, [pc, #44]	@ (80013dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80013b2:	4a0a      	ldr	r2, [pc, #40]	@ (80013dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013b8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80013bc:	e007      	b.n	80013ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80013be:	4b07      	ldr	r3, [pc, #28]	@ (80013dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80013c6:	4a05      	ldr	r2, [pc, #20]	@ (80013dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013c8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013cc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80013ce:	2300      	movs	r3, #0
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3714      	adds	r7, #20
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	40007000 	.word	0x40007000
 80013e0:	20000000 	.word	0x20000000
 80013e4:	431bde83 	.word	0x431bde83

080013e8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80013ec:	4b05      	ldr	r3, [pc, #20]	@ (8001404 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	4a04      	ldr	r2, [pc, #16]	@ (8001404 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80013f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013f6:	6093      	str	r3, [r2, #8]
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	40007000 	.word	0x40007000

08001408 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b088      	sub	sp, #32
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d101      	bne.n	800141a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e2fe      	b.n	8001a18 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	2b00      	cmp	r3, #0
 8001424:	d075      	beq.n	8001512 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001426:	4b97      	ldr	r3, [pc, #604]	@ (8001684 <HAL_RCC_OscConfig+0x27c>)
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	f003 030c 	and.w	r3, r3, #12
 800142e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001430:	4b94      	ldr	r3, [pc, #592]	@ (8001684 <HAL_RCC_OscConfig+0x27c>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	f003 0303 	and.w	r3, r3, #3
 8001438:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	2b0c      	cmp	r3, #12
 800143e:	d102      	bne.n	8001446 <HAL_RCC_OscConfig+0x3e>
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	2b03      	cmp	r3, #3
 8001444:	d002      	beq.n	800144c <HAL_RCC_OscConfig+0x44>
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	2b08      	cmp	r3, #8
 800144a:	d10b      	bne.n	8001464 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800144c:	4b8d      	ldr	r3, [pc, #564]	@ (8001684 <HAL_RCC_OscConfig+0x27c>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001454:	2b00      	cmp	r3, #0
 8001456:	d05b      	beq.n	8001510 <HAL_RCC_OscConfig+0x108>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d157      	bne.n	8001510 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e2d9      	b.n	8001a18 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800146c:	d106      	bne.n	800147c <HAL_RCC_OscConfig+0x74>
 800146e:	4b85      	ldr	r3, [pc, #532]	@ (8001684 <HAL_RCC_OscConfig+0x27c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a84      	ldr	r2, [pc, #528]	@ (8001684 <HAL_RCC_OscConfig+0x27c>)
 8001474:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001478:	6013      	str	r3, [r2, #0]
 800147a:	e01d      	b.n	80014b8 <HAL_RCC_OscConfig+0xb0>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001484:	d10c      	bne.n	80014a0 <HAL_RCC_OscConfig+0x98>
 8001486:	4b7f      	ldr	r3, [pc, #508]	@ (8001684 <HAL_RCC_OscConfig+0x27c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a7e      	ldr	r2, [pc, #504]	@ (8001684 <HAL_RCC_OscConfig+0x27c>)
 800148c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001490:	6013      	str	r3, [r2, #0]
 8001492:	4b7c      	ldr	r3, [pc, #496]	@ (8001684 <HAL_RCC_OscConfig+0x27c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a7b      	ldr	r2, [pc, #492]	@ (8001684 <HAL_RCC_OscConfig+0x27c>)
 8001498:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800149c:	6013      	str	r3, [r2, #0]
 800149e:	e00b      	b.n	80014b8 <HAL_RCC_OscConfig+0xb0>
 80014a0:	4b78      	ldr	r3, [pc, #480]	@ (8001684 <HAL_RCC_OscConfig+0x27c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a77      	ldr	r2, [pc, #476]	@ (8001684 <HAL_RCC_OscConfig+0x27c>)
 80014a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014aa:	6013      	str	r3, [r2, #0]
 80014ac:	4b75      	ldr	r3, [pc, #468]	@ (8001684 <HAL_RCC_OscConfig+0x27c>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a74      	ldr	r2, [pc, #464]	@ (8001684 <HAL_RCC_OscConfig+0x27c>)
 80014b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d013      	beq.n	80014e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c0:	f7ff fb78 	bl	8000bb4 <HAL_GetTick>
 80014c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014c6:	e008      	b.n	80014da <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014c8:	f7ff fb74 	bl	8000bb4 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b64      	cmp	r3, #100	@ 0x64
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e29e      	b.n	8001a18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014da:	4b6a      	ldr	r3, [pc, #424]	@ (8001684 <HAL_RCC_OscConfig+0x27c>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d0f0      	beq.n	80014c8 <HAL_RCC_OscConfig+0xc0>
 80014e6:	e014      	b.n	8001512 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e8:	f7ff fb64 	bl	8000bb4 <HAL_GetTick>
 80014ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014ee:	e008      	b.n	8001502 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014f0:	f7ff fb60 	bl	8000bb4 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b64      	cmp	r3, #100	@ 0x64
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e28a      	b.n	8001a18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001502:	4b60      	ldr	r3, [pc, #384]	@ (8001684 <HAL_RCC_OscConfig+0x27c>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1f0      	bne.n	80014f0 <HAL_RCC_OscConfig+0xe8>
 800150e:	e000      	b.n	8001512 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001510:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	2b00      	cmp	r3, #0
 800151c:	d075      	beq.n	800160a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800151e:	4b59      	ldr	r3, [pc, #356]	@ (8001684 <HAL_RCC_OscConfig+0x27c>)
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	f003 030c 	and.w	r3, r3, #12
 8001526:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001528:	4b56      	ldr	r3, [pc, #344]	@ (8001684 <HAL_RCC_OscConfig+0x27c>)
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	f003 0303 	and.w	r3, r3, #3
 8001530:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	2b0c      	cmp	r3, #12
 8001536:	d102      	bne.n	800153e <HAL_RCC_OscConfig+0x136>
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	2b02      	cmp	r3, #2
 800153c:	d002      	beq.n	8001544 <HAL_RCC_OscConfig+0x13c>
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	2b04      	cmp	r3, #4
 8001542:	d11f      	bne.n	8001584 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001544:	4b4f      	ldr	r3, [pc, #316]	@ (8001684 <HAL_RCC_OscConfig+0x27c>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800154c:	2b00      	cmp	r3, #0
 800154e:	d005      	beq.n	800155c <HAL_RCC_OscConfig+0x154>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d101      	bne.n	800155c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e25d      	b.n	8001a18 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800155c:	4b49      	ldr	r3, [pc, #292]	@ (8001684 <HAL_RCC_OscConfig+0x27c>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	691b      	ldr	r3, [r3, #16]
 8001568:	061b      	lsls	r3, r3, #24
 800156a:	4946      	ldr	r1, [pc, #280]	@ (8001684 <HAL_RCC_OscConfig+0x27c>)
 800156c:	4313      	orrs	r3, r2
 800156e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001570:	4b45      	ldr	r3, [pc, #276]	@ (8001688 <HAL_RCC_OscConfig+0x280>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff fad1 	bl	8000b1c <HAL_InitTick>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d043      	beq.n	8001608 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e249      	b.n	8001a18 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d023      	beq.n	80015d4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800158c:	4b3d      	ldr	r3, [pc, #244]	@ (8001684 <HAL_RCC_OscConfig+0x27c>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a3c      	ldr	r2, [pc, #240]	@ (8001684 <HAL_RCC_OscConfig+0x27c>)
 8001592:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001596:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001598:	f7ff fb0c 	bl	8000bb4 <HAL_GetTick>
 800159c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800159e:	e008      	b.n	80015b2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015a0:	f7ff fb08 	bl	8000bb4 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e232      	b.n	8001a18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015b2:	4b34      	ldr	r3, [pc, #208]	@ (8001684 <HAL_RCC_OscConfig+0x27c>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d0f0      	beq.n	80015a0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015be:	4b31      	ldr	r3, [pc, #196]	@ (8001684 <HAL_RCC_OscConfig+0x27c>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	691b      	ldr	r3, [r3, #16]
 80015ca:	061b      	lsls	r3, r3, #24
 80015cc:	492d      	ldr	r1, [pc, #180]	@ (8001684 <HAL_RCC_OscConfig+0x27c>)
 80015ce:	4313      	orrs	r3, r2
 80015d0:	604b      	str	r3, [r1, #4]
 80015d2:	e01a      	b.n	800160a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015d4:	4b2b      	ldr	r3, [pc, #172]	@ (8001684 <HAL_RCC_OscConfig+0x27c>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a2a      	ldr	r2, [pc, #168]	@ (8001684 <HAL_RCC_OscConfig+0x27c>)
 80015da:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80015de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e0:	f7ff fae8 	bl	8000bb4 <HAL_GetTick>
 80015e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015e6:	e008      	b.n	80015fa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015e8:	f7ff fae4 	bl	8000bb4 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e20e      	b.n	8001a18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015fa:	4b22      	ldr	r3, [pc, #136]	@ (8001684 <HAL_RCC_OscConfig+0x27c>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001602:	2b00      	cmp	r3, #0
 8001604:	d1f0      	bne.n	80015e8 <HAL_RCC_OscConfig+0x1e0>
 8001606:	e000      	b.n	800160a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001608:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0308 	and.w	r3, r3, #8
 8001612:	2b00      	cmp	r3, #0
 8001614:	d041      	beq.n	800169a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	695b      	ldr	r3, [r3, #20]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d01c      	beq.n	8001658 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800161e:	4b19      	ldr	r3, [pc, #100]	@ (8001684 <HAL_RCC_OscConfig+0x27c>)
 8001620:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001624:	4a17      	ldr	r2, [pc, #92]	@ (8001684 <HAL_RCC_OscConfig+0x27c>)
 8001626:	f043 0301 	orr.w	r3, r3, #1
 800162a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800162e:	f7ff fac1 	bl	8000bb4 <HAL_GetTick>
 8001632:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001634:	e008      	b.n	8001648 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001636:	f7ff fabd 	bl	8000bb4 <HAL_GetTick>
 800163a:	4602      	mov	r2, r0
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	2b02      	cmp	r3, #2
 8001642:	d901      	bls.n	8001648 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001644:	2303      	movs	r3, #3
 8001646:	e1e7      	b.n	8001a18 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001648:	4b0e      	ldr	r3, [pc, #56]	@ (8001684 <HAL_RCC_OscConfig+0x27c>)
 800164a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	2b00      	cmp	r3, #0
 8001654:	d0ef      	beq.n	8001636 <HAL_RCC_OscConfig+0x22e>
 8001656:	e020      	b.n	800169a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001658:	4b0a      	ldr	r3, [pc, #40]	@ (8001684 <HAL_RCC_OscConfig+0x27c>)
 800165a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800165e:	4a09      	ldr	r2, [pc, #36]	@ (8001684 <HAL_RCC_OscConfig+0x27c>)
 8001660:	f023 0301 	bic.w	r3, r3, #1
 8001664:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001668:	f7ff faa4 	bl	8000bb4 <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800166e:	e00d      	b.n	800168c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001670:	f7ff faa0 	bl	8000bb4 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d906      	bls.n	800168c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e1ca      	b.n	8001a18 <HAL_RCC_OscConfig+0x610>
 8001682:	bf00      	nop
 8001684:	40021000 	.word	0x40021000
 8001688:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800168c:	4b8c      	ldr	r3, [pc, #560]	@ (80018c0 <HAL_RCC_OscConfig+0x4b8>)
 800168e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1ea      	bne.n	8001670 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0304 	and.w	r3, r3, #4
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	f000 80a6 	beq.w	80017f4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016a8:	2300      	movs	r3, #0
 80016aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80016ac:	4b84      	ldr	r3, [pc, #528]	@ (80018c0 <HAL_RCC_OscConfig+0x4b8>)
 80016ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d101      	bne.n	80016bc <HAL_RCC_OscConfig+0x2b4>
 80016b8:	2301      	movs	r3, #1
 80016ba:	e000      	b.n	80016be <HAL_RCC_OscConfig+0x2b6>
 80016bc:	2300      	movs	r3, #0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d00d      	beq.n	80016de <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016c2:	4b7f      	ldr	r3, [pc, #508]	@ (80018c0 <HAL_RCC_OscConfig+0x4b8>)
 80016c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016c6:	4a7e      	ldr	r2, [pc, #504]	@ (80018c0 <HAL_RCC_OscConfig+0x4b8>)
 80016c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80016ce:	4b7c      	ldr	r3, [pc, #496]	@ (80018c0 <HAL_RCC_OscConfig+0x4b8>)
 80016d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80016da:	2301      	movs	r3, #1
 80016dc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016de:	4b79      	ldr	r3, [pc, #484]	@ (80018c4 <HAL_RCC_OscConfig+0x4bc>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d118      	bne.n	800171c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016ea:	4b76      	ldr	r3, [pc, #472]	@ (80018c4 <HAL_RCC_OscConfig+0x4bc>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a75      	ldr	r2, [pc, #468]	@ (80018c4 <HAL_RCC_OscConfig+0x4bc>)
 80016f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016f6:	f7ff fa5d 	bl	8000bb4 <HAL_GetTick>
 80016fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016fc:	e008      	b.n	8001710 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016fe:	f7ff fa59 	bl	8000bb4 <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	2b02      	cmp	r3, #2
 800170a:	d901      	bls.n	8001710 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800170c:	2303      	movs	r3, #3
 800170e:	e183      	b.n	8001a18 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001710:	4b6c      	ldr	r3, [pc, #432]	@ (80018c4 <HAL_RCC_OscConfig+0x4bc>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001718:	2b00      	cmp	r3, #0
 800171a:	d0f0      	beq.n	80016fe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d108      	bne.n	8001736 <HAL_RCC_OscConfig+0x32e>
 8001724:	4b66      	ldr	r3, [pc, #408]	@ (80018c0 <HAL_RCC_OscConfig+0x4b8>)
 8001726:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800172a:	4a65      	ldr	r2, [pc, #404]	@ (80018c0 <HAL_RCC_OscConfig+0x4b8>)
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001734:	e024      	b.n	8001780 <HAL_RCC_OscConfig+0x378>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	2b05      	cmp	r3, #5
 800173c:	d110      	bne.n	8001760 <HAL_RCC_OscConfig+0x358>
 800173e:	4b60      	ldr	r3, [pc, #384]	@ (80018c0 <HAL_RCC_OscConfig+0x4b8>)
 8001740:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001744:	4a5e      	ldr	r2, [pc, #376]	@ (80018c0 <HAL_RCC_OscConfig+0x4b8>)
 8001746:	f043 0304 	orr.w	r3, r3, #4
 800174a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800174e:	4b5c      	ldr	r3, [pc, #368]	@ (80018c0 <HAL_RCC_OscConfig+0x4b8>)
 8001750:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001754:	4a5a      	ldr	r2, [pc, #360]	@ (80018c0 <HAL_RCC_OscConfig+0x4b8>)
 8001756:	f043 0301 	orr.w	r3, r3, #1
 800175a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800175e:	e00f      	b.n	8001780 <HAL_RCC_OscConfig+0x378>
 8001760:	4b57      	ldr	r3, [pc, #348]	@ (80018c0 <HAL_RCC_OscConfig+0x4b8>)
 8001762:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001766:	4a56      	ldr	r2, [pc, #344]	@ (80018c0 <HAL_RCC_OscConfig+0x4b8>)
 8001768:	f023 0301 	bic.w	r3, r3, #1
 800176c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001770:	4b53      	ldr	r3, [pc, #332]	@ (80018c0 <HAL_RCC_OscConfig+0x4b8>)
 8001772:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001776:	4a52      	ldr	r2, [pc, #328]	@ (80018c0 <HAL_RCC_OscConfig+0x4b8>)
 8001778:	f023 0304 	bic.w	r3, r3, #4
 800177c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d016      	beq.n	80017b6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001788:	f7ff fa14 	bl	8000bb4 <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800178e:	e00a      	b.n	80017a6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001790:	f7ff fa10 	bl	8000bb4 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800179e:	4293      	cmp	r3, r2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e138      	b.n	8001a18 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017a6:	4b46      	ldr	r3, [pc, #280]	@ (80018c0 <HAL_RCC_OscConfig+0x4b8>)
 80017a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017ac:	f003 0302 	and.w	r3, r3, #2
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d0ed      	beq.n	8001790 <HAL_RCC_OscConfig+0x388>
 80017b4:	e015      	b.n	80017e2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b6:	f7ff f9fd 	bl	8000bb4 <HAL_GetTick>
 80017ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017bc:	e00a      	b.n	80017d4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017be:	f7ff f9f9 	bl	8000bb4 <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d901      	bls.n	80017d4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e121      	b.n	8001a18 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017d4:	4b3a      	ldr	r3, [pc, #232]	@ (80018c0 <HAL_RCC_OscConfig+0x4b8>)
 80017d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d1ed      	bne.n	80017be <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80017e2:	7ffb      	ldrb	r3, [r7, #31]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d105      	bne.n	80017f4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017e8:	4b35      	ldr	r3, [pc, #212]	@ (80018c0 <HAL_RCC_OscConfig+0x4b8>)
 80017ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ec:	4a34      	ldr	r2, [pc, #208]	@ (80018c0 <HAL_RCC_OscConfig+0x4b8>)
 80017ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017f2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0320 	and.w	r3, r3, #32
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d03c      	beq.n	800187a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d01c      	beq.n	8001842 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001808:	4b2d      	ldr	r3, [pc, #180]	@ (80018c0 <HAL_RCC_OscConfig+0x4b8>)
 800180a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800180e:	4a2c      	ldr	r2, [pc, #176]	@ (80018c0 <HAL_RCC_OscConfig+0x4b8>)
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001818:	f7ff f9cc 	bl	8000bb4 <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001820:	f7ff f9c8 	bl	8000bb4 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e0f2      	b.n	8001a18 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001832:	4b23      	ldr	r3, [pc, #140]	@ (80018c0 <HAL_RCC_OscConfig+0x4b8>)
 8001834:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001838:	f003 0302 	and.w	r3, r3, #2
 800183c:	2b00      	cmp	r3, #0
 800183e:	d0ef      	beq.n	8001820 <HAL_RCC_OscConfig+0x418>
 8001840:	e01b      	b.n	800187a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001842:	4b1f      	ldr	r3, [pc, #124]	@ (80018c0 <HAL_RCC_OscConfig+0x4b8>)
 8001844:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001848:	4a1d      	ldr	r2, [pc, #116]	@ (80018c0 <HAL_RCC_OscConfig+0x4b8>)
 800184a:	f023 0301 	bic.w	r3, r3, #1
 800184e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001852:	f7ff f9af 	bl	8000bb4 <HAL_GetTick>
 8001856:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001858:	e008      	b.n	800186c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800185a:	f7ff f9ab 	bl	8000bb4 <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e0d5      	b.n	8001a18 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800186c:	4b14      	ldr	r3, [pc, #80]	@ (80018c0 <HAL_RCC_OscConfig+0x4b8>)
 800186e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1ef      	bne.n	800185a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	2b00      	cmp	r3, #0
 8001880:	f000 80c9 	beq.w	8001a16 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001884:	4b0e      	ldr	r3, [pc, #56]	@ (80018c0 <HAL_RCC_OscConfig+0x4b8>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f003 030c 	and.w	r3, r3, #12
 800188c:	2b0c      	cmp	r3, #12
 800188e:	f000 8083 	beq.w	8001998 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	69db      	ldr	r3, [r3, #28]
 8001896:	2b02      	cmp	r3, #2
 8001898:	d15e      	bne.n	8001958 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800189a:	4b09      	ldr	r3, [pc, #36]	@ (80018c0 <HAL_RCC_OscConfig+0x4b8>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a08      	ldr	r2, [pc, #32]	@ (80018c0 <HAL_RCC_OscConfig+0x4b8>)
 80018a0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a6:	f7ff f985 	bl	8000bb4 <HAL_GetTick>
 80018aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018ac:	e00c      	b.n	80018c8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ae:	f7ff f981 	bl	8000bb4 <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d905      	bls.n	80018c8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e0ab      	b.n	8001a18 <HAL_RCC_OscConfig+0x610>
 80018c0:	40021000 	.word	0x40021000
 80018c4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018c8:	4b55      	ldr	r3, [pc, #340]	@ (8001a20 <HAL_RCC_OscConfig+0x618>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d1ec      	bne.n	80018ae <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018d4:	4b52      	ldr	r3, [pc, #328]	@ (8001a20 <HAL_RCC_OscConfig+0x618>)
 80018d6:	68da      	ldr	r2, [r3, #12]
 80018d8:	4b52      	ldr	r3, [pc, #328]	@ (8001a24 <HAL_RCC_OscConfig+0x61c>)
 80018da:	4013      	ands	r3, r2
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	6a11      	ldr	r1, [r2, #32]
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80018e4:	3a01      	subs	r2, #1
 80018e6:	0112      	lsls	r2, r2, #4
 80018e8:	4311      	orrs	r1, r2
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80018ee:	0212      	lsls	r2, r2, #8
 80018f0:	4311      	orrs	r1, r2
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80018f6:	0852      	lsrs	r2, r2, #1
 80018f8:	3a01      	subs	r2, #1
 80018fa:	0552      	lsls	r2, r2, #21
 80018fc:	4311      	orrs	r1, r2
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001902:	0852      	lsrs	r2, r2, #1
 8001904:	3a01      	subs	r2, #1
 8001906:	0652      	lsls	r2, r2, #25
 8001908:	4311      	orrs	r1, r2
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800190e:	06d2      	lsls	r2, r2, #27
 8001910:	430a      	orrs	r2, r1
 8001912:	4943      	ldr	r1, [pc, #268]	@ (8001a20 <HAL_RCC_OscConfig+0x618>)
 8001914:	4313      	orrs	r3, r2
 8001916:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001918:	4b41      	ldr	r3, [pc, #260]	@ (8001a20 <HAL_RCC_OscConfig+0x618>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a40      	ldr	r2, [pc, #256]	@ (8001a20 <HAL_RCC_OscConfig+0x618>)
 800191e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001922:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001924:	4b3e      	ldr	r3, [pc, #248]	@ (8001a20 <HAL_RCC_OscConfig+0x618>)
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	4a3d      	ldr	r2, [pc, #244]	@ (8001a20 <HAL_RCC_OscConfig+0x618>)
 800192a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800192e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001930:	f7ff f940 	bl	8000bb4 <HAL_GetTick>
 8001934:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001936:	e008      	b.n	800194a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001938:	f7ff f93c 	bl	8000bb4 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b02      	cmp	r3, #2
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e066      	b.n	8001a18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800194a:	4b35      	ldr	r3, [pc, #212]	@ (8001a20 <HAL_RCC_OscConfig+0x618>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d0f0      	beq.n	8001938 <HAL_RCC_OscConfig+0x530>
 8001956:	e05e      	b.n	8001a16 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001958:	4b31      	ldr	r3, [pc, #196]	@ (8001a20 <HAL_RCC_OscConfig+0x618>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a30      	ldr	r2, [pc, #192]	@ (8001a20 <HAL_RCC_OscConfig+0x618>)
 800195e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001962:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001964:	f7ff f926 	bl	8000bb4 <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800196c:	f7ff f922 	bl	8000bb4 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e04c      	b.n	8001a18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800197e:	4b28      	ldr	r3, [pc, #160]	@ (8001a20 <HAL_RCC_OscConfig+0x618>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d1f0      	bne.n	800196c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800198a:	4b25      	ldr	r3, [pc, #148]	@ (8001a20 <HAL_RCC_OscConfig+0x618>)
 800198c:	68da      	ldr	r2, [r3, #12]
 800198e:	4924      	ldr	r1, [pc, #144]	@ (8001a20 <HAL_RCC_OscConfig+0x618>)
 8001990:	4b25      	ldr	r3, [pc, #148]	@ (8001a28 <HAL_RCC_OscConfig+0x620>)
 8001992:	4013      	ands	r3, r2
 8001994:	60cb      	str	r3, [r1, #12]
 8001996:	e03e      	b.n	8001a16 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	69db      	ldr	r3, [r3, #28]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d101      	bne.n	80019a4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e039      	b.n	8001a18 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80019a4:	4b1e      	ldr	r3, [pc, #120]	@ (8001a20 <HAL_RCC_OscConfig+0x618>)
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	f003 0203 	and.w	r2, r3, #3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a1b      	ldr	r3, [r3, #32]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d12c      	bne.n	8001a12 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019c2:	3b01      	subs	r3, #1
 80019c4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d123      	bne.n	8001a12 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019d4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d11b      	bne.n	8001a12 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019e4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d113      	bne.n	8001a12 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f4:	085b      	lsrs	r3, r3, #1
 80019f6:	3b01      	subs	r3, #1
 80019f8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d109      	bne.n	8001a12 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a08:	085b      	lsrs	r3, r3, #1
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d001      	beq.n	8001a16 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e000      	b.n	8001a18 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001a16:	2300      	movs	r3, #0
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3720      	adds	r7, #32
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40021000 	.word	0x40021000
 8001a24:	019f800c 	.word	0x019f800c
 8001a28:	feeefffc 	.word	0xfeeefffc

08001a2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001a36:	2300      	movs	r3, #0
 8001a38:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d101      	bne.n	8001a44 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e11e      	b.n	8001c82 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a44:	4b91      	ldr	r3, [pc, #580]	@ (8001c8c <HAL_RCC_ClockConfig+0x260>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 030f 	and.w	r3, r3, #15
 8001a4c:	683a      	ldr	r2, [r7, #0]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d910      	bls.n	8001a74 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a52:	4b8e      	ldr	r3, [pc, #568]	@ (8001c8c <HAL_RCC_ClockConfig+0x260>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f023 020f 	bic.w	r2, r3, #15
 8001a5a:	498c      	ldr	r1, [pc, #560]	@ (8001c8c <HAL_RCC_ClockConfig+0x260>)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a62:	4b8a      	ldr	r3, [pc, #552]	@ (8001c8c <HAL_RCC_ClockConfig+0x260>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 030f 	and.w	r3, r3, #15
 8001a6a:	683a      	ldr	r2, [r7, #0]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d001      	beq.n	8001a74 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e106      	b.n	8001c82 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0301 	and.w	r3, r3, #1
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d073      	beq.n	8001b68 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	2b03      	cmp	r3, #3
 8001a86:	d129      	bne.n	8001adc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a88:	4b81      	ldr	r3, [pc, #516]	@ (8001c90 <HAL_RCC_ClockConfig+0x264>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d101      	bne.n	8001a98 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e0f4      	b.n	8001c82 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001a98:	f000 f99e 	bl	8001dd8 <RCC_GetSysClockFreqFromPLLSource>
 8001a9c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	4a7c      	ldr	r2, [pc, #496]	@ (8001c94 <HAL_RCC_ClockConfig+0x268>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d93f      	bls.n	8001b26 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001aa6:	4b7a      	ldr	r3, [pc, #488]	@ (8001c90 <HAL_RCC_ClockConfig+0x264>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d009      	beq.n	8001ac6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d033      	beq.n	8001b26 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d12f      	bne.n	8001b26 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001ac6:	4b72      	ldr	r3, [pc, #456]	@ (8001c90 <HAL_RCC_ClockConfig+0x264>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001ace:	4a70      	ldr	r2, [pc, #448]	@ (8001c90 <HAL_RCC_ClockConfig+0x264>)
 8001ad0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ad4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001ad6:	2380      	movs	r3, #128	@ 0x80
 8001ad8:	617b      	str	r3, [r7, #20]
 8001ada:	e024      	b.n	8001b26 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d107      	bne.n	8001af4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ae4:	4b6a      	ldr	r3, [pc, #424]	@ (8001c90 <HAL_RCC_ClockConfig+0x264>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d109      	bne.n	8001b04 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e0c6      	b.n	8001c82 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001af4:	4b66      	ldr	r3, [pc, #408]	@ (8001c90 <HAL_RCC_ClockConfig+0x264>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d101      	bne.n	8001b04 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e0be      	b.n	8001c82 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001b04:	f000 f8ce 	bl	8001ca4 <HAL_RCC_GetSysClockFreq>
 8001b08:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	4a61      	ldr	r2, [pc, #388]	@ (8001c94 <HAL_RCC_ClockConfig+0x268>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d909      	bls.n	8001b26 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001b12:	4b5f      	ldr	r3, [pc, #380]	@ (8001c90 <HAL_RCC_ClockConfig+0x264>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001b1a:	4a5d      	ldr	r2, [pc, #372]	@ (8001c90 <HAL_RCC_ClockConfig+0x264>)
 8001b1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b20:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001b22:	2380      	movs	r3, #128	@ 0x80
 8001b24:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b26:	4b5a      	ldr	r3, [pc, #360]	@ (8001c90 <HAL_RCC_ClockConfig+0x264>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f023 0203 	bic.w	r2, r3, #3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	4957      	ldr	r1, [pc, #348]	@ (8001c90 <HAL_RCC_ClockConfig+0x264>)
 8001b34:	4313      	orrs	r3, r2
 8001b36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b38:	f7ff f83c 	bl	8000bb4 <HAL_GetTick>
 8001b3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b3e:	e00a      	b.n	8001b56 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b40:	f7ff f838 	bl	8000bb4 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e095      	b.n	8001c82 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b56:	4b4e      	ldr	r3, [pc, #312]	@ (8001c90 <HAL_RCC_ClockConfig+0x264>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f003 020c 	and.w	r2, r3, #12
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d1eb      	bne.n	8001b40 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0302 	and.w	r3, r3, #2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d023      	beq.n	8001bbc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0304 	and.w	r3, r3, #4
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d005      	beq.n	8001b8c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b80:	4b43      	ldr	r3, [pc, #268]	@ (8001c90 <HAL_RCC_ClockConfig+0x264>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	4a42      	ldr	r2, [pc, #264]	@ (8001c90 <HAL_RCC_ClockConfig+0x264>)
 8001b86:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001b8a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0308 	and.w	r3, r3, #8
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d007      	beq.n	8001ba8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001b98:	4b3d      	ldr	r3, [pc, #244]	@ (8001c90 <HAL_RCC_ClockConfig+0x264>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001ba0:	4a3b      	ldr	r2, [pc, #236]	@ (8001c90 <HAL_RCC_ClockConfig+0x264>)
 8001ba2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001ba6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ba8:	4b39      	ldr	r3, [pc, #228]	@ (8001c90 <HAL_RCC_ClockConfig+0x264>)
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	4936      	ldr	r1, [pc, #216]	@ (8001c90 <HAL_RCC_ClockConfig+0x264>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	608b      	str	r3, [r1, #8]
 8001bba:	e008      	b.n	8001bce <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	2b80      	cmp	r3, #128	@ 0x80
 8001bc0:	d105      	bne.n	8001bce <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001bc2:	4b33      	ldr	r3, [pc, #204]	@ (8001c90 <HAL_RCC_ClockConfig+0x264>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	4a32      	ldr	r2, [pc, #200]	@ (8001c90 <HAL_RCC_ClockConfig+0x264>)
 8001bc8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001bcc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bce:	4b2f      	ldr	r3, [pc, #188]	@ (8001c8c <HAL_RCC_ClockConfig+0x260>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 030f 	and.w	r3, r3, #15
 8001bd6:	683a      	ldr	r2, [r7, #0]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d21d      	bcs.n	8001c18 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bdc:	4b2b      	ldr	r3, [pc, #172]	@ (8001c8c <HAL_RCC_ClockConfig+0x260>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f023 020f 	bic.w	r2, r3, #15
 8001be4:	4929      	ldr	r1, [pc, #164]	@ (8001c8c <HAL_RCC_ClockConfig+0x260>)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001bec:	f7fe ffe2 	bl	8000bb4 <HAL_GetTick>
 8001bf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bf2:	e00a      	b.n	8001c0a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bf4:	f7fe ffde 	bl	8000bb4 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e03b      	b.n	8001c82 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c0a:	4b20      	ldr	r3, [pc, #128]	@ (8001c8c <HAL_RCC_ClockConfig+0x260>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 030f 	and.w	r3, r3, #15
 8001c12:	683a      	ldr	r2, [r7, #0]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d1ed      	bne.n	8001bf4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0304 	and.w	r3, r3, #4
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d008      	beq.n	8001c36 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c24:	4b1a      	ldr	r3, [pc, #104]	@ (8001c90 <HAL_RCC_ClockConfig+0x264>)
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	4917      	ldr	r1, [pc, #92]	@ (8001c90 <HAL_RCC_ClockConfig+0x264>)
 8001c32:	4313      	orrs	r3, r2
 8001c34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0308 	and.w	r3, r3, #8
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d009      	beq.n	8001c56 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c42:	4b13      	ldr	r3, [pc, #76]	@ (8001c90 <HAL_RCC_ClockConfig+0x264>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	00db      	lsls	r3, r3, #3
 8001c50:	490f      	ldr	r1, [pc, #60]	@ (8001c90 <HAL_RCC_ClockConfig+0x264>)
 8001c52:	4313      	orrs	r3, r2
 8001c54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c56:	f000 f825 	bl	8001ca4 <HAL_RCC_GetSysClockFreq>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c90 <HAL_RCC_ClockConfig+0x264>)
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	091b      	lsrs	r3, r3, #4
 8001c62:	f003 030f 	and.w	r3, r3, #15
 8001c66:	490c      	ldr	r1, [pc, #48]	@ (8001c98 <HAL_RCC_ClockConfig+0x26c>)
 8001c68:	5ccb      	ldrb	r3, [r1, r3]
 8001c6a:	f003 031f 	and.w	r3, r3, #31
 8001c6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c72:	4a0a      	ldr	r2, [pc, #40]	@ (8001c9c <HAL_RCC_ClockConfig+0x270>)
 8001c74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001c76:	4b0a      	ldr	r3, [pc, #40]	@ (8001ca0 <HAL_RCC_ClockConfig+0x274>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7fe ff4e 	bl	8000b1c <HAL_InitTick>
 8001c80:	4603      	mov	r3, r0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3718      	adds	r7, #24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40022000 	.word	0x40022000
 8001c90:	40021000 	.word	0x40021000
 8001c94:	04c4b400 	.word	0x04c4b400
 8001c98:	08004414 	.word	0x08004414
 8001c9c:	20000000 	.word	0x20000000
 8001ca0:	20000004 	.word	0x20000004

08001ca4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b087      	sub	sp, #28
 8001ca8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001caa:	4b2c      	ldr	r3, [pc, #176]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	f003 030c 	and.w	r3, r3, #12
 8001cb2:	2b04      	cmp	r3, #4
 8001cb4:	d102      	bne.n	8001cbc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001cb6:	4b2a      	ldr	r3, [pc, #168]	@ (8001d60 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001cb8:	613b      	str	r3, [r7, #16]
 8001cba:	e047      	b.n	8001d4c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001cbc:	4b27      	ldr	r3, [pc, #156]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f003 030c 	and.w	r3, r3, #12
 8001cc4:	2b08      	cmp	r3, #8
 8001cc6:	d102      	bne.n	8001cce <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001cc8:	4b26      	ldr	r3, [pc, #152]	@ (8001d64 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001cca:	613b      	str	r3, [r7, #16]
 8001ccc:	e03e      	b.n	8001d4c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001cce:	4b23      	ldr	r3, [pc, #140]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f003 030c 	and.w	r3, r3, #12
 8001cd6:	2b0c      	cmp	r3, #12
 8001cd8:	d136      	bne.n	8001d48 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cda:	4b20      	ldr	r3, [pc, #128]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	f003 0303 	and.w	r3, r3, #3
 8001ce2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ce4:	4b1d      	ldr	r3, [pc, #116]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	091b      	lsrs	r3, r3, #4
 8001cea:	f003 030f 	and.w	r3, r3, #15
 8001cee:	3301      	adds	r3, #1
 8001cf0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2b03      	cmp	r3, #3
 8001cf6:	d10c      	bne.n	8001d12 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001cf8:	4a1a      	ldr	r2, [pc, #104]	@ (8001d64 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d00:	4a16      	ldr	r2, [pc, #88]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d02:	68d2      	ldr	r2, [r2, #12]
 8001d04:	0a12      	lsrs	r2, r2, #8
 8001d06:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001d0a:	fb02 f303 	mul.w	r3, r2, r3
 8001d0e:	617b      	str	r3, [r7, #20]
      break;
 8001d10:	e00c      	b.n	8001d2c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d12:	4a13      	ldr	r2, [pc, #76]	@ (8001d60 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d1a:	4a10      	ldr	r2, [pc, #64]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d1c:	68d2      	ldr	r2, [r2, #12]
 8001d1e:	0a12      	lsrs	r2, r2, #8
 8001d20:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001d24:	fb02 f303 	mul.w	r3, r2, r3
 8001d28:	617b      	str	r3, [r7, #20]
      break;
 8001d2a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	0e5b      	lsrs	r3, r3, #25
 8001d32:	f003 0303 	and.w	r3, r3, #3
 8001d36:	3301      	adds	r3, #1
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001d3c:	697a      	ldr	r2, [r7, #20]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d44:	613b      	str	r3, [r7, #16]
 8001d46:	e001      	b.n	8001d4c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001d4c:	693b      	ldr	r3, [r7, #16]
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	371c      	adds	r7, #28
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	00f42400 	.word	0x00f42400
 8001d64:	016e3600 	.word	0x016e3600

08001d68 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d6c:	4b03      	ldr	r3, [pc, #12]	@ (8001d7c <HAL_RCC_GetHCLKFreq+0x14>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	20000000 	.word	0x20000000

08001d80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d84:	f7ff fff0 	bl	8001d68 <HAL_RCC_GetHCLKFreq>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	4b06      	ldr	r3, [pc, #24]	@ (8001da4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	0a1b      	lsrs	r3, r3, #8
 8001d90:	f003 0307 	and.w	r3, r3, #7
 8001d94:	4904      	ldr	r1, [pc, #16]	@ (8001da8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d96:	5ccb      	ldrb	r3, [r1, r3]
 8001d98:	f003 031f 	and.w	r3, r3, #31
 8001d9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	40021000 	.word	0x40021000
 8001da8:	08004424 	.word	0x08004424

08001dac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001db0:	f7ff ffda 	bl	8001d68 <HAL_RCC_GetHCLKFreq>
 8001db4:	4602      	mov	r2, r0
 8001db6:	4b06      	ldr	r3, [pc, #24]	@ (8001dd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	0adb      	lsrs	r3, r3, #11
 8001dbc:	f003 0307 	and.w	r3, r3, #7
 8001dc0:	4904      	ldr	r1, [pc, #16]	@ (8001dd4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001dc2:	5ccb      	ldrb	r3, [r1, r3]
 8001dc4:	f003 031f 	and.w	r3, r3, #31
 8001dc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	08004424 	.word	0x08004424

08001dd8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b087      	sub	sp, #28
 8001ddc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001dde:	4b1e      	ldr	r3, [pc, #120]	@ (8001e58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	f003 0303 	and.w	r3, r3, #3
 8001de6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001de8:	4b1b      	ldr	r3, [pc, #108]	@ (8001e58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	091b      	lsrs	r3, r3, #4
 8001dee:	f003 030f 	and.w	r3, r3, #15
 8001df2:	3301      	adds	r3, #1
 8001df4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	2b03      	cmp	r3, #3
 8001dfa:	d10c      	bne.n	8001e16 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001dfc:	4a17      	ldr	r2, [pc, #92]	@ (8001e5c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e04:	4a14      	ldr	r2, [pc, #80]	@ (8001e58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e06:	68d2      	ldr	r2, [r2, #12]
 8001e08:	0a12      	lsrs	r2, r2, #8
 8001e0a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001e0e:	fb02 f303 	mul.w	r3, r2, r3
 8001e12:	617b      	str	r3, [r7, #20]
    break;
 8001e14:	e00c      	b.n	8001e30 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e16:	4a12      	ldr	r2, [pc, #72]	@ (8001e60 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e1e:	4a0e      	ldr	r2, [pc, #56]	@ (8001e58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e20:	68d2      	ldr	r2, [r2, #12]
 8001e22:	0a12      	lsrs	r2, r2, #8
 8001e24:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001e28:	fb02 f303 	mul.w	r3, r2, r3
 8001e2c:	617b      	str	r3, [r7, #20]
    break;
 8001e2e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e30:	4b09      	ldr	r3, [pc, #36]	@ (8001e58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	0e5b      	lsrs	r3, r3, #25
 8001e36:	f003 0303 	and.w	r3, r3, #3
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001e40:	697a      	ldr	r2, [r7, #20]
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e48:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001e4a:	687b      	ldr	r3, [r7, #4]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	371c      	adds	r7, #28
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	016e3600 	.word	0x016e3600
 8001e60:	00f42400 	.word	0x00f42400

08001e64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e70:	2300      	movs	r3, #0
 8001e72:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	f000 8098 	beq.w	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e82:	2300      	movs	r3, #0
 8001e84:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e86:	4b43      	ldr	r3, [pc, #268]	@ (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d10d      	bne.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e92:	4b40      	ldr	r3, [pc, #256]	@ (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e96:	4a3f      	ldr	r2, [pc, #252]	@ (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e9e:	4b3d      	ldr	r3, [pc, #244]	@ (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ea0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ea2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ea6:	60bb      	str	r3, [r7, #8]
 8001ea8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001eae:	4b3a      	ldr	r3, [pc, #232]	@ (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a39      	ldr	r2, [pc, #228]	@ (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001eb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001eb8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001eba:	f7fe fe7b 	bl	8000bb4 <HAL_GetTick>
 8001ebe:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ec0:	e009      	b.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ec2:	f7fe fe77 	bl	8000bb4 <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d902      	bls.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	74fb      	strb	r3, [r7, #19]
        break;
 8001ed4:	e005      	b.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ed6:	4b30      	ldr	r3, [pc, #192]	@ (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d0ef      	beq.n	8001ec2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001ee2:	7cfb      	ldrb	r3, [r7, #19]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d159      	bne.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001ee8:	4b2a      	ldr	r3, [pc, #168]	@ (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ef2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d01e      	beq.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001efe:	697a      	ldr	r2, [r7, #20]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d019      	beq.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f04:	4b23      	ldr	r3, [pc, #140]	@ (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f0e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f10:	4b20      	ldr	r3, [pc, #128]	@ (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f16:	4a1f      	ldr	r2, [pc, #124]	@ (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f20:	4b1c      	ldr	r3, [pc, #112]	@ (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f26:	4a1b      	ldr	r2, [pc, #108]	@ (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f30:	4a18      	ldr	r2, [pc, #96]	@ (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d016      	beq.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f42:	f7fe fe37 	bl	8000bb4 <HAL_GetTick>
 8001f46:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f48:	e00b      	b.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f4a:	f7fe fe33 	bl	8000bb4 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d902      	bls.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	74fb      	strb	r3, [r7, #19]
            break;
 8001f60:	e006      	b.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f62:	4b0c      	ldr	r3, [pc, #48]	@ (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f68:	f003 0302 	and.w	r3, r3, #2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d0ec      	beq.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001f70:	7cfb      	ldrb	r3, [r7, #19]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d10b      	bne.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f76:	4b07      	ldr	r3, [pc, #28]	@ (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f7c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f84:	4903      	ldr	r1, [pc, #12]	@ (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f86:	4313      	orrs	r3, r2
 8001f88:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001f8c:	e008      	b.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f8e:	7cfb      	ldrb	r3, [r7, #19]
 8001f90:	74bb      	strb	r3, [r7, #18]
 8001f92:	e005      	b.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001f94:	40021000 	.word	0x40021000
 8001f98:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f9c:	7cfb      	ldrb	r3, [r7, #19]
 8001f9e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fa0:	7c7b      	ldrb	r3, [r7, #17]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d105      	bne.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fa6:	4ba7      	ldr	r3, [pc, #668]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001faa:	4aa6      	ldr	r2, [pc, #664]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fb0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00a      	beq.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001fbe:	4ba1      	ldr	r3, [pc, #644]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fc4:	f023 0203 	bic.w	r2, r3, #3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	499d      	ldr	r1, [pc, #628]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0302 	and.w	r3, r3, #2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d00a      	beq.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001fe0:	4b98      	ldr	r3, [pc, #608]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fe6:	f023 020c 	bic.w	r2, r3, #12
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	4995      	ldr	r1, [pc, #596]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0304 	and.w	r3, r3, #4
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d00a      	beq.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002002:	4b90      	ldr	r3, [pc, #576]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002004:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002008:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	498c      	ldr	r1, [pc, #560]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002012:	4313      	orrs	r3, r2
 8002014:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0308 	and.w	r3, r3, #8
 8002020:	2b00      	cmp	r3, #0
 8002022:	d00a      	beq.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002024:	4b87      	ldr	r3, [pc, #540]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002026:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800202a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	4984      	ldr	r1, [pc, #528]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002034:	4313      	orrs	r3, r2
 8002036:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0310 	and.w	r3, r3, #16
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00a      	beq.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002046:	4b7f      	ldr	r3, [pc, #508]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002048:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800204c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	695b      	ldr	r3, [r3, #20]
 8002054:	497b      	ldr	r1, [pc, #492]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002056:	4313      	orrs	r3, r2
 8002058:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0320 	and.w	r3, r3, #32
 8002064:	2b00      	cmp	r3, #0
 8002066:	d00a      	beq.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002068:	4b76      	ldr	r3, [pc, #472]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800206a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800206e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	699b      	ldr	r3, [r3, #24]
 8002076:	4973      	ldr	r1, [pc, #460]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002078:	4313      	orrs	r3, r2
 800207a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00a      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800208a:	4b6e      	ldr	r3, [pc, #440]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800208c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002090:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	69db      	ldr	r3, [r3, #28]
 8002098:	496a      	ldr	r1, [pc, #424]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800209a:	4313      	orrs	r3, r2
 800209c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d00a      	beq.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80020ac:	4b65      	ldr	r3, [pc, #404]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020b2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a1b      	ldr	r3, [r3, #32]
 80020ba:	4962      	ldr	r1, [pc, #392]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00a      	beq.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80020ce:	4b5d      	ldr	r3, [pc, #372]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020d4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020dc:	4959      	ldr	r1, [pc, #356]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d00a      	beq.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80020f0:	4b54      	ldr	r3, [pc, #336]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80020f6:	f023 0203 	bic.w	r2, r3, #3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020fe:	4951      	ldr	r1, [pc, #324]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002100:	4313      	orrs	r3, r2
 8002102:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00a      	beq.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002112:	4b4c      	ldr	r3, [pc, #304]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002114:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002118:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002120:	4948      	ldr	r1, [pc, #288]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002122:	4313      	orrs	r3, r2
 8002124:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002130:	2b00      	cmp	r3, #0
 8002132:	d015      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002134:	4b43      	ldr	r3, [pc, #268]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002136:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800213a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002142:	4940      	ldr	r1, [pc, #256]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002144:	4313      	orrs	r3, r2
 8002146:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800214e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002152:	d105      	bne.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002154:	4b3b      	ldr	r3, [pc, #236]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	4a3a      	ldr	r2, [pc, #232]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800215a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800215e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002168:	2b00      	cmp	r3, #0
 800216a:	d015      	beq.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800216c:	4b35      	ldr	r3, [pc, #212]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800216e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002172:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800217a:	4932      	ldr	r1, [pc, #200]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800217c:	4313      	orrs	r3, r2
 800217e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002186:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800218a:	d105      	bne.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800218c:	4b2d      	ldr	r3, [pc, #180]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	4a2c      	ldr	r2, [pc, #176]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002192:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002196:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d015      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80021a4:	4b27      	ldr	r3, [pc, #156]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021aa:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021b2:	4924      	ldr	r1, [pc, #144]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021c2:	d105      	bne.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021c4:	4b1f      	ldr	r3, [pc, #124]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	4a1e      	ldr	r2, [pc, #120]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021ce:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d015      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021dc:	4b19      	ldr	r3, [pc, #100]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021e2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021ea:	4916      	ldr	r1, [pc, #88]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80021fa:	d105      	bne.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021fc:	4b11      	ldr	r3, [pc, #68]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	4a10      	ldr	r2, [pc, #64]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002202:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002206:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d019      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002214:	4b0b      	ldr	r3, [pc, #44]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002216:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800221a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002222:	4908      	ldr	r1, [pc, #32]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002224:	4313      	orrs	r3, r2
 8002226:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002232:	d109      	bne.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002234:	4b03      	ldr	r3, [pc, #12]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	4a02      	ldr	r2, [pc, #8]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800223a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800223e:	60d3      	str	r3, [r2, #12]
 8002240:	e002      	b.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002242:	bf00      	nop
 8002244:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d015      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002254:	4b29      	ldr	r3, [pc, #164]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002256:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800225a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002262:	4926      	ldr	r1, [pc, #152]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002264:	4313      	orrs	r3, r2
 8002266:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800226e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002272:	d105      	bne.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002274:	4b21      	ldr	r3, [pc, #132]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	4a20      	ldr	r2, [pc, #128]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800227a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800227e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d015      	beq.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800228c:	4b1b      	ldr	r3, [pc, #108]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800228e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002292:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800229a:	4918      	ldr	r1, [pc, #96]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800229c:	4313      	orrs	r3, r2
 800229e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022aa:	d105      	bne.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80022ac:	4b13      	ldr	r3, [pc, #76]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	4a12      	ldr	r2, [pc, #72]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022b6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d015      	beq.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80022c4:	4b0d      	ldr	r3, [pc, #52]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80022ca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022d2:	490a      	ldr	r1, [pc, #40]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80022e2:	d105      	bne.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022e4:	4b05      	ldr	r3, [pc, #20]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	4a04      	ldr	r2, [pc, #16]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022ee:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80022f0:	7cbb      	ldrb	r3, [r7, #18]
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3718      	adds	r7, #24
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40021000 	.word	0x40021000

08002300 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d101      	bne.n	8002312 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e049      	b.n	80023a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b00      	cmp	r3, #0
 800231c:	d106      	bne.n	800232c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f7fe faba 	bl	80008a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2202      	movs	r2, #2
 8002330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	3304      	adds	r3, #4
 800233c:	4619      	mov	r1, r3
 800233e:	4610      	mov	r0, r2
 8002340:	f000 fb3c 	bl	80029bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
	...

080023b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d001      	beq.n	80023c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e054      	b.n	8002472 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2202      	movs	r2, #2
 80023cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68da      	ldr	r2, [r3, #12]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f042 0201 	orr.w	r2, r2, #1
 80023de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a26      	ldr	r2, [pc, #152]	@ (8002480 <HAL_TIM_Base_Start_IT+0xd0>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d022      	beq.n	8002430 <HAL_TIM_Base_Start_IT+0x80>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023f2:	d01d      	beq.n	8002430 <HAL_TIM_Base_Start_IT+0x80>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a22      	ldr	r2, [pc, #136]	@ (8002484 <HAL_TIM_Base_Start_IT+0xd4>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d018      	beq.n	8002430 <HAL_TIM_Base_Start_IT+0x80>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a21      	ldr	r2, [pc, #132]	@ (8002488 <HAL_TIM_Base_Start_IT+0xd8>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d013      	beq.n	8002430 <HAL_TIM_Base_Start_IT+0x80>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a1f      	ldr	r2, [pc, #124]	@ (800248c <HAL_TIM_Base_Start_IT+0xdc>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d00e      	beq.n	8002430 <HAL_TIM_Base_Start_IT+0x80>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a1e      	ldr	r2, [pc, #120]	@ (8002490 <HAL_TIM_Base_Start_IT+0xe0>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d009      	beq.n	8002430 <HAL_TIM_Base_Start_IT+0x80>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a1c      	ldr	r2, [pc, #112]	@ (8002494 <HAL_TIM_Base_Start_IT+0xe4>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d004      	beq.n	8002430 <HAL_TIM_Base_Start_IT+0x80>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a1b      	ldr	r2, [pc, #108]	@ (8002498 <HAL_TIM_Base_Start_IT+0xe8>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d115      	bne.n	800245c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	689a      	ldr	r2, [r3, #8]
 8002436:	4b19      	ldr	r3, [pc, #100]	@ (800249c <HAL_TIM_Base_Start_IT+0xec>)
 8002438:	4013      	ands	r3, r2
 800243a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2b06      	cmp	r3, #6
 8002440:	d015      	beq.n	800246e <HAL_TIM_Base_Start_IT+0xbe>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002448:	d011      	beq.n	800246e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f042 0201 	orr.w	r2, r2, #1
 8002458:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800245a:	e008      	b.n	800246e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f042 0201 	orr.w	r2, r2, #1
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	e000      	b.n	8002470 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800246e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3714      	adds	r7, #20
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	40012c00 	.word	0x40012c00
 8002484:	40000400 	.word	0x40000400
 8002488:	40000800 	.word	0x40000800
 800248c:	40000c00 	.word	0x40000c00
 8002490:	40013400 	.word	0x40013400
 8002494:	40014000 	.word	0x40014000
 8002498:	40015000 	.word	0x40015000
 800249c:	00010007 	.word	0x00010007

080024a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d020      	beq.n	8002504 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d01b      	beq.n	8002504 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f06f 0202 	mvn.w	r2, #2
 80024d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2201      	movs	r2, #1
 80024da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	f003 0303 	and.w	r3, r3, #3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d003      	beq.n	80024f2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f000 fa48 	bl	8002980 <HAL_TIM_IC_CaptureCallback>
 80024f0:	e005      	b.n	80024fe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 fa3a 	bl	800296c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f000 fa4b 	bl	8002994 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	f003 0304 	and.w	r3, r3, #4
 800250a:	2b00      	cmp	r3, #0
 800250c:	d020      	beq.n	8002550 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f003 0304 	and.w	r3, r3, #4
 8002514:	2b00      	cmp	r3, #0
 8002516:	d01b      	beq.n	8002550 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f06f 0204 	mvn.w	r2, #4
 8002520:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2202      	movs	r2, #2
 8002526:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	699b      	ldr	r3, [r3, #24]
 800252e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002532:	2b00      	cmp	r3, #0
 8002534:	d003      	beq.n	800253e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 fa22 	bl	8002980 <HAL_TIM_IC_CaptureCallback>
 800253c:	e005      	b.n	800254a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 fa14 	bl	800296c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f000 fa25 	bl	8002994 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	f003 0308 	and.w	r3, r3, #8
 8002556:	2b00      	cmp	r3, #0
 8002558:	d020      	beq.n	800259c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f003 0308 	and.w	r3, r3, #8
 8002560:	2b00      	cmp	r3, #0
 8002562:	d01b      	beq.n	800259c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f06f 0208 	mvn.w	r2, #8
 800256c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2204      	movs	r2, #4
 8002572:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	69db      	ldr	r3, [r3, #28]
 800257a:	f003 0303 	and.w	r3, r3, #3
 800257e:	2b00      	cmp	r3, #0
 8002580:	d003      	beq.n	800258a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f000 f9fc 	bl	8002980 <HAL_TIM_IC_CaptureCallback>
 8002588:	e005      	b.n	8002596 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 f9ee 	bl	800296c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f000 f9ff 	bl	8002994 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	f003 0310 	and.w	r3, r3, #16
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d020      	beq.n	80025e8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f003 0310 	and.w	r3, r3, #16
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d01b      	beq.n	80025e8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f06f 0210 	mvn.w	r2, #16
 80025b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2208      	movs	r2, #8
 80025be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	69db      	ldr	r3, [r3, #28]
 80025c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d003      	beq.n	80025d6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 f9d6 	bl	8002980 <HAL_TIM_IC_CaptureCallback>
 80025d4:	e005      	b.n	80025e2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 f9c8 	bl	800296c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f000 f9d9 	bl	8002994 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d00c      	beq.n	800260c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f003 0301 	and.w	r3, r3, #1
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d007      	beq.n	800260c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f06f 0201 	mvn.w	r2, #1
 8002604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7fe f8f2 	bl	80007f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002612:	2b00      	cmp	r3, #0
 8002614:	d104      	bne.n	8002620 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800261c:	2b00      	cmp	r3, #0
 800261e:	d00c      	beq.n	800263a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002626:	2b00      	cmp	r3, #0
 8002628:	d007      	beq.n	800263a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002632:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f000 fbb1 	bl	8002d9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002640:	2b00      	cmp	r3, #0
 8002642:	d00c      	beq.n	800265e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800264a:	2b00      	cmp	r3, #0
 800264c:	d007      	beq.n	800265e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002656:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f000 fba9 	bl	8002db0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002664:	2b00      	cmp	r3, #0
 8002666:	d00c      	beq.n	8002682 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800266e:	2b00      	cmp	r3, #0
 8002670:	d007      	beq.n	8002682 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800267a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f000 f993 	bl	80029a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	f003 0320 	and.w	r3, r3, #32
 8002688:	2b00      	cmp	r3, #0
 800268a:	d00c      	beq.n	80026a6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f003 0320 	and.w	r3, r3, #32
 8002692:	2b00      	cmp	r3, #0
 8002694:	d007      	beq.n	80026a6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f06f 0220 	mvn.w	r2, #32
 800269e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f000 fb71 	bl	8002d88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d00c      	beq.n	80026ca <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d007      	beq.n	80026ca <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80026c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f000 fb7d 	bl	8002dc4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d00c      	beq.n	80026ee <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d007      	beq.n	80026ee <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80026e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f000 fb75 	bl	8002dd8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d00c      	beq.n	8002712 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d007      	beq.n	8002712 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800270a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f000 fb6d 	bl	8002dec <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d00c      	beq.n	8002736 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d007      	beq.n	8002736 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800272e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f000 fb65 	bl	8002e00 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002736:	bf00      	nop
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
	...

08002740 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800274a:	2300      	movs	r3, #0
 800274c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002754:	2b01      	cmp	r3, #1
 8002756:	d101      	bne.n	800275c <HAL_TIM_ConfigClockSource+0x1c>
 8002758:	2302      	movs	r3, #2
 800275a:	e0f6      	b.n	800294a <HAL_TIM_ConfigClockSource+0x20a>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2202      	movs	r2, #2
 8002768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800277a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800277e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002786:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68ba      	ldr	r2, [r7, #8]
 800278e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a6f      	ldr	r2, [pc, #444]	@ (8002954 <HAL_TIM_ConfigClockSource+0x214>)
 8002796:	4293      	cmp	r3, r2
 8002798:	f000 80c1 	beq.w	800291e <HAL_TIM_ConfigClockSource+0x1de>
 800279c:	4a6d      	ldr	r2, [pc, #436]	@ (8002954 <HAL_TIM_ConfigClockSource+0x214>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	f200 80c6 	bhi.w	8002930 <HAL_TIM_ConfigClockSource+0x1f0>
 80027a4:	4a6c      	ldr	r2, [pc, #432]	@ (8002958 <HAL_TIM_ConfigClockSource+0x218>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	f000 80b9 	beq.w	800291e <HAL_TIM_ConfigClockSource+0x1de>
 80027ac:	4a6a      	ldr	r2, [pc, #424]	@ (8002958 <HAL_TIM_ConfigClockSource+0x218>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	f200 80be 	bhi.w	8002930 <HAL_TIM_ConfigClockSource+0x1f0>
 80027b4:	4a69      	ldr	r2, [pc, #420]	@ (800295c <HAL_TIM_ConfigClockSource+0x21c>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	f000 80b1 	beq.w	800291e <HAL_TIM_ConfigClockSource+0x1de>
 80027bc:	4a67      	ldr	r2, [pc, #412]	@ (800295c <HAL_TIM_ConfigClockSource+0x21c>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	f200 80b6 	bhi.w	8002930 <HAL_TIM_ConfigClockSource+0x1f0>
 80027c4:	4a66      	ldr	r2, [pc, #408]	@ (8002960 <HAL_TIM_ConfigClockSource+0x220>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	f000 80a9 	beq.w	800291e <HAL_TIM_ConfigClockSource+0x1de>
 80027cc:	4a64      	ldr	r2, [pc, #400]	@ (8002960 <HAL_TIM_ConfigClockSource+0x220>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	f200 80ae 	bhi.w	8002930 <HAL_TIM_ConfigClockSource+0x1f0>
 80027d4:	4a63      	ldr	r2, [pc, #396]	@ (8002964 <HAL_TIM_ConfigClockSource+0x224>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	f000 80a1 	beq.w	800291e <HAL_TIM_ConfigClockSource+0x1de>
 80027dc:	4a61      	ldr	r2, [pc, #388]	@ (8002964 <HAL_TIM_ConfigClockSource+0x224>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	f200 80a6 	bhi.w	8002930 <HAL_TIM_ConfigClockSource+0x1f0>
 80027e4:	4a60      	ldr	r2, [pc, #384]	@ (8002968 <HAL_TIM_ConfigClockSource+0x228>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	f000 8099 	beq.w	800291e <HAL_TIM_ConfigClockSource+0x1de>
 80027ec:	4a5e      	ldr	r2, [pc, #376]	@ (8002968 <HAL_TIM_ConfigClockSource+0x228>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	f200 809e 	bhi.w	8002930 <HAL_TIM_ConfigClockSource+0x1f0>
 80027f4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80027f8:	f000 8091 	beq.w	800291e <HAL_TIM_ConfigClockSource+0x1de>
 80027fc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8002800:	f200 8096 	bhi.w	8002930 <HAL_TIM_ConfigClockSource+0x1f0>
 8002804:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002808:	f000 8089 	beq.w	800291e <HAL_TIM_ConfigClockSource+0x1de>
 800280c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002810:	f200 808e 	bhi.w	8002930 <HAL_TIM_ConfigClockSource+0x1f0>
 8002814:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002818:	d03e      	beq.n	8002898 <HAL_TIM_ConfigClockSource+0x158>
 800281a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800281e:	f200 8087 	bhi.w	8002930 <HAL_TIM_ConfigClockSource+0x1f0>
 8002822:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002826:	f000 8086 	beq.w	8002936 <HAL_TIM_ConfigClockSource+0x1f6>
 800282a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800282e:	d87f      	bhi.n	8002930 <HAL_TIM_ConfigClockSource+0x1f0>
 8002830:	2b70      	cmp	r3, #112	@ 0x70
 8002832:	d01a      	beq.n	800286a <HAL_TIM_ConfigClockSource+0x12a>
 8002834:	2b70      	cmp	r3, #112	@ 0x70
 8002836:	d87b      	bhi.n	8002930 <HAL_TIM_ConfigClockSource+0x1f0>
 8002838:	2b60      	cmp	r3, #96	@ 0x60
 800283a:	d050      	beq.n	80028de <HAL_TIM_ConfigClockSource+0x19e>
 800283c:	2b60      	cmp	r3, #96	@ 0x60
 800283e:	d877      	bhi.n	8002930 <HAL_TIM_ConfigClockSource+0x1f0>
 8002840:	2b50      	cmp	r3, #80	@ 0x50
 8002842:	d03c      	beq.n	80028be <HAL_TIM_ConfigClockSource+0x17e>
 8002844:	2b50      	cmp	r3, #80	@ 0x50
 8002846:	d873      	bhi.n	8002930 <HAL_TIM_ConfigClockSource+0x1f0>
 8002848:	2b40      	cmp	r3, #64	@ 0x40
 800284a:	d058      	beq.n	80028fe <HAL_TIM_ConfigClockSource+0x1be>
 800284c:	2b40      	cmp	r3, #64	@ 0x40
 800284e:	d86f      	bhi.n	8002930 <HAL_TIM_ConfigClockSource+0x1f0>
 8002850:	2b30      	cmp	r3, #48	@ 0x30
 8002852:	d064      	beq.n	800291e <HAL_TIM_ConfigClockSource+0x1de>
 8002854:	2b30      	cmp	r3, #48	@ 0x30
 8002856:	d86b      	bhi.n	8002930 <HAL_TIM_ConfigClockSource+0x1f0>
 8002858:	2b20      	cmp	r3, #32
 800285a:	d060      	beq.n	800291e <HAL_TIM_ConfigClockSource+0x1de>
 800285c:	2b20      	cmp	r3, #32
 800285e:	d867      	bhi.n	8002930 <HAL_TIM_ConfigClockSource+0x1f0>
 8002860:	2b00      	cmp	r3, #0
 8002862:	d05c      	beq.n	800291e <HAL_TIM_ConfigClockSource+0x1de>
 8002864:	2b10      	cmp	r3, #16
 8002866:	d05a      	beq.n	800291e <HAL_TIM_ConfigClockSource+0x1de>
 8002868:	e062      	b.n	8002930 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800287a:	f000 f9cf 	bl	8002c1c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800288c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68ba      	ldr	r2, [r7, #8]
 8002894:	609a      	str	r2, [r3, #8]
      break;
 8002896:	e04f      	b.n	8002938 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80028a8:	f000 f9b8 	bl	8002c1c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	689a      	ldr	r2, [r3, #8]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80028ba:	609a      	str	r2, [r3, #8]
      break;
 80028bc:	e03c      	b.n	8002938 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028ca:	461a      	mov	r2, r3
 80028cc:	f000 f92a 	bl	8002b24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2150      	movs	r1, #80	@ 0x50
 80028d6:	4618      	mov	r0, r3
 80028d8:	f000 f983 	bl	8002be2 <TIM_ITRx_SetConfig>
      break;
 80028dc:	e02c      	b.n	8002938 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028ea:	461a      	mov	r2, r3
 80028ec:	f000 f949 	bl	8002b82 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2160      	movs	r1, #96	@ 0x60
 80028f6:	4618      	mov	r0, r3
 80028f8:	f000 f973 	bl	8002be2 <TIM_ITRx_SetConfig>
      break;
 80028fc:	e01c      	b.n	8002938 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800290a:	461a      	mov	r2, r3
 800290c:	f000 f90a 	bl	8002b24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2140      	movs	r1, #64	@ 0x40
 8002916:	4618      	mov	r0, r3
 8002918:	f000 f963 	bl	8002be2 <TIM_ITRx_SetConfig>
      break;
 800291c:	e00c      	b.n	8002938 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4619      	mov	r1, r3
 8002928:	4610      	mov	r0, r2
 800292a:	f000 f95a 	bl	8002be2 <TIM_ITRx_SetConfig>
      break;
 800292e:	e003      	b.n	8002938 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	73fb      	strb	r3, [r7, #15]
      break;
 8002934:	e000      	b.n	8002938 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8002936:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002948:	7bfb      	ldrb	r3, [r7, #15]
}
 800294a:	4618      	mov	r0, r3
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	00100070 	.word	0x00100070
 8002958:	00100060 	.word	0x00100060
 800295c:	00100050 	.word	0x00100050
 8002960:	00100040 	.word	0x00100040
 8002964:	00100030 	.word	0x00100030
 8002968:	00100020 	.word	0x00100020

0800296c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002988:	bf00      	nop
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800299c:	bf00      	nop
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029b0:	bf00      	nop
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80029bc:	b480      	push	{r7}
 80029be:	b085      	sub	sp, #20
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a4c      	ldr	r2, [pc, #304]	@ (8002b00 <TIM_Base_SetConfig+0x144>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d017      	beq.n	8002a04 <TIM_Base_SetConfig+0x48>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029da:	d013      	beq.n	8002a04 <TIM_Base_SetConfig+0x48>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a49      	ldr	r2, [pc, #292]	@ (8002b04 <TIM_Base_SetConfig+0x148>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d00f      	beq.n	8002a04 <TIM_Base_SetConfig+0x48>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a48      	ldr	r2, [pc, #288]	@ (8002b08 <TIM_Base_SetConfig+0x14c>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d00b      	beq.n	8002a04 <TIM_Base_SetConfig+0x48>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4a47      	ldr	r2, [pc, #284]	@ (8002b0c <TIM_Base_SetConfig+0x150>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d007      	beq.n	8002a04 <TIM_Base_SetConfig+0x48>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a46      	ldr	r2, [pc, #280]	@ (8002b10 <TIM_Base_SetConfig+0x154>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d003      	beq.n	8002a04 <TIM_Base_SetConfig+0x48>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4a45      	ldr	r2, [pc, #276]	@ (8002b14 <TIM_Base_SetConfig+0x158>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d108      	bne.n	8002a16 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a39      	ldr	r2, [pc, #228]	@ (8002b00 <TIM_Base_SetConfig+0x144>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d023      	beq.n	8002a66 <TIM_Base_SetConfig+0xaa>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a24:	d01f      	beq.n	8002a66 <TIM_Base_SetConfig+0xaa>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a36      	ldr	r2, [pc, #216]	@ (8002b04 <TIM_Base_SetConfig+0x148>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d01b      	beq.n	8002a66 <TIM_Base_SetConfig+0xaa>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a35      	ldr	r2, [pc, #212]	@ (8002b08 <TIM_Base_SetConfig+0x14c>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d017      	beq.n	8002a66 <TIM_Base_SetConfig+0xaa>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a34      	ldr	r2, [pc, #208]	@ (8002b0c <TIM_Base_SetConfig+0x150>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d013      	beq.n	8002a66 <TIM_Base_SetConfig+0xaa>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a33      	ldr	r2, [pc, #204]	@ (8002b10 <TIM_Base_SetConfig+0x154>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d00f      	beq.n	8002a66 <TIM_Base_SetConfig+0xaa>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a33      	ldr	r2, [pc, #204]	@ (8002b18 <TIM_Base_SetConfig+0x15c>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d00b      	beq.n	8002a66 <TIM_Base_SetConfig+0xaa>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a32      	ldr	r2, [pc, #200]	@ (8002b1c <TIM_Base_SetConfig+0x160>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d007      	beq.n	8002a66 <TIM_Base_SetConfig+0xaa>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a31      	ldr	r2, [pc, #196]	@ (8002b20 <TIM_Base_SetConfig+0x164>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d003      	beq.n	8002a66 <TIM_Base_SetConfig+0xaa>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a2c      	ldr	r2, [pc, #176]	@ (8002b14 <TIM_Base_SetConfig+0x158>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d108      	bne.n	8002a78 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	689a      	ldr	r2, [r3, #8]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4a18      	ldr	r2, [pc, #96]	@ (8002b00 <TIM_Base_SetConfig+0x144>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d013      	beq.n	8002acc <TIM_Base_SetConfig+0x110>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4a1a      	ldr	r2, [pc, #104]	@ (8002b10 <TIM_Base_SetConfig+0x154>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d00f      	beq.n	8002acc <TIM_Base_SetConfig+0x110>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a1a      	ldr	r2, [pc, #104]	@ (8002b18 <TIM_Base_SetConfig+0x15c>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d00b      	beq.n	8002acc <TIM_Base_SetConfig+0x110>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a19      	ldr	r2, [pc, #100]	@ (8002b1c <TIM_Base_SetConfig+0x160>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d007      	beq.n	8002acc <TIM_Base_SetConfig+0x110>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4a18      	ldr	r2, [pc, #96]	@ (8002b20 <TIM_Base_SetConfig+0x164>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d003      	beq.n	8002acc <TIM_Base_SetConfig+0x110>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4a13      	ldr	r2, [pc, #76]	@ (8002b14 <TIM_Base_SetConfig+0x158>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d103      	bne.n	8002ad4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	691a      	ldr	r2, [r3, #16]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d105      	bne.n	8002af2 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	f023 0201 	bic.w	r2, r3, #1
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	611a      	str	r2, [r3, #16]
  }
}
 8002af2:	bf00      	nop
 8002af4:	3714      	adds	r7, #20
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	40012c00 	.word	0x40012c00
 8002b04:	40000400 	.word	0x40000400
 8002b08:	40000800 	.word	0x40000800
 8002b0c:	40000c00 	.word	0x40000c00
 8002b10:	40013400 	.word	0x40013400
 8002b14:	40015000 	.word	0x40015000
 8002b18:	40014000 	.word	0x40014000
 8002b1c:	40014400 	.word	0x40014400
 8002b20:	40014800 	.word	0x40014800

08002b24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b087      	sub	sp, #28
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6a1b      	ldr	r3, [r3, #32]
 8002b34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	f023 0201 	bic.w	r2, r3, #1
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002b4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	011b      	lsls	r3, r3, #4
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	f023 030a 	bic.w	r3, r3, #10
 8002b60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b62:	697a      	ldr	r2, [r7, #20]
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	621a      	str	r2, [r3, #32]
}
 8002b76:	bf00      	nop
 8002b78:	371c      	adds	r7, #28
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr

08002b82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b82:	b480      	push	{r7}
 8002b84:	b087      	sub	sp, #28
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	60f8      	str	r0, [r7, #12]
 8002b8a:	60b9      	str	r1, [r7, #8]
 8002b8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6a1b      	ldr	r3, [r3, #32]
 8002b98:	f023 0210 	bic.w	r2, r3, #16
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002bac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	031b      	lsls	r3, r3, #12
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002bbe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	011b      	lsls	r3, r3, #4
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	693a      	ldr	r2, [r7, #16]
 8002bce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	621a      	str	r2, [r3, #32]
}
 8002bd6:	bf00      	nop
 8002bd8:	371c      	adds	r7, #28
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr

08002be2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002be2:	b480      	push	{r7}
 8002be4:	b085      	sub	sp, #20
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
 8002bea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8002bf8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bfc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002bfe:	683a      	ldr	r2, [r7, #0]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	f043 0307 	orr.w	r3, r3, #7
 8002c08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	609a      	str	r2, [r3, #8]
}
 8002c10:	bf00      	nop
 8002c12:	3714      	adds	r7, #20
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b087      	sub	sp, #28
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	607a      	str	r2, [r7, #4]
 8002c28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002c36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	021a      	lsls	r2, r3, #8
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	431a      	orrs	r2, r3
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	697a      	ldr	r2, [r7, #20]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	697a      	ldr	r2, [r7, #20]
 8002c4e:	609a      	str	r2, [r3, #8]
}
 8002c50:	bf00      	nop
 8002c52:	371c      	adds	r7, #28
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d101      	bne.n	8002c74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c70:	2302      	movs	r3, #2
 8002c72:	e074      	b.n	8002d5e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2202      	movs	r2, #2
 8002c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a34      	ldr	r2, [pc, #208]	@ (8002d6c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d009      	beq.n	8002cb2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a33      	ldr	r2, [pc, #204]	@ (8002d70 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d004      	beq.n	8002cb2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a31      	ldr	r2, [pc, #196]	@ (8002d74 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d108      	bne.n	8002cc4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8002cb8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8002cca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a21      	ldr	r2, [pc, #132]	@ (8002d6c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d022      	beq.n	8002d32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cf4:	d01d      	beq.n	8002d32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a1f      	ldr	r2, [pc, #124]	@ (8002d78 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d018      	beq.n	8002d32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a1d      	ldr	r2, [pc, #116]	@ (8002d7c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d013      	beq.n	8002d32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a1c      	ldr	r2, [pc, #112]	@ (8002d80 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d00e      	beq.n	8002d32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a15      	ldr	r2, [pc, #84]	@ (8002d70 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d009      	beq.n	8002d32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a18      	ldr	r2, [pc, #96]	@ (8002d84 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d004      	beq.n	8002d32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a11      	ldr	r2, [pc, #68]	@ (8002d74 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d10c      	bne.n	8002d4c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	68ba      	ldr	r2, [r7, #8]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	68ba      	ldr	r2, [r7, #8]
 8002d4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3714      	adds	r7, #20
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	40012c00 	.word	0x40012c00
 8002d70:	40013400 	.word	0x40013400
 8002d74:	40015000 	.word	0x40015000
 8002d78:	40000400 	.word	0x40000400
 8002d7c:	40000800 	.word	0x40000800
 8002d80:	40000c00 	.word	0x40000c00
 8002d84:	40014000 	.word	0x40014000

08002d88 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d90:	bf00      	nop
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002db8:	bf00      	nop
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8002dcc:	bf00      	nop
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8002de0:	bf00      	nop
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d101      	bne.n	8002e26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e042      	b.n	8002eac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d106      	bne.n	8002e3e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f7fd fd73 	bl	8000924 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2224      	movs	r2, #36	@ 0x24
 8002e42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f022 0201 	bic.w	r2, r2, #1
 8002e54:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d002      	beq.n	8002e64 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 ff14 	bl	8003c8c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f000 fc15 	bl	8003694 <UART_SetConfig>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d101      	bne.n	8002e74 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e01b      	b.n	8002eac <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	685a      	ldr	r2, [r3, #4]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	689a      	ldr	r2, [r3, #8]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f042 0201 	orr.w	r2, r2, #1
 8002ea2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 ff93 	bl	8003dd0 <UART_CheckIdleState>
 8002eaa:	4603      	mov	r3, r0
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3708      	adds	r7, #8
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b08a      	sub	sp, #40	@ 0x28
 8002eb8:	af02      	add	r7, sp, #8
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	603b      	str	r3, [r7, #0]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eca:	2b20      	cmp	r3, #32
 8002ecc:	d17b      	bne.n	8002fc6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d002      	beq.n	8002eda <HAL_UART_Transmit+0x26>
 8002ed4:	88fb      	ldrh	r3, [r7, #6]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e074      	b.n	8002fc8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2221      	movs	r2, #33	@ 0x21
 8002eea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002eee:	f7fd fe61 	bl	8000bb4 <HAL_GetTick>
 8002ef2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	88fa      	ldrh	r2, [r7, #6]
 8002ef8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	88fa      	ldrh	r2, [r7, #6]
 8002f00:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f0c:	d108      	bne.n	8002f20 <HAL_UART_Transmit+0x6c>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d104      	bne.n	8002f20 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002f16:	2300      	movs	r3, #0
 8002f18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	61bb      	str	r3, [r7, #24]
 8002f1e:	e003      	b.n	8002f28 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f24:	2300      	movs	r3, #0
 8002f26:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f28:	e030      	b.n	8002f8c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	9300      	str	r3, [sp, #0]
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	2200      	movs	r2, #0
 8002f32:	2180      	movs	r1, #128	@ 0x80
 8002f34:	68f8      	ldr	r0, [r7, #12]
 8002f36:	f000 fff5 	bl	8003f24 <UART_WaitOnFlagUntilTimeout>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d005      	beq.n	8002f4c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2220      	movs	r2, #32
 8002f44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e03d      	b.n	8002fc8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10b      	bne.n	8002f6a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	881b      	ldrh	r3, [r3, #0]
 8002f56:	461a      	mov	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f60:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	3302      	adds	r3, #2
 8002f66:	61bb      	str	r3, [r7, #24]
 8002f68:	e007      	b.n	8002f7a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	781a      	ldrb	r2, [r3, #0]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	3301      	adds	r3, #1
 8002f78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	3b01      	subs	r3, #1
 8002f84:	b29a      	uxth	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d1c8      	bne.n	8002f2a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	9300      	str	r3, [sp, #0]
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	2140      	movs	r1, #64	@ 0x40
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	f000 ffbe 	bl	8003f24 <UART_WaitOnFlagUntilTimeout>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d005      	beq.n	8002fba <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2220      	movs	r2, #32
 8002fb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e006      	b.n	8002fc8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2220      	movs	r2, #32
 8002fbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	e000      	b.n	8002fc8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8002fc6:	2302      	movs	r3, #2
  }
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3720      	adds	r7, #32
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b0ba      	sub	sp, #232	@ 0xe8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	69db      	ldr	r3, [r3, #28]
 8002fde:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002ff6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002ffa:	f640 030f 	movw	r3, #2063	@ 0x80f
 8002ffe:	4013      	ands	r3, r2
 8003000:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003004:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003008:	2b00      	cmp	r3, #0
 800300a:	d11b      	bne.n	8003044 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800300c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003010:	f003 0320 	and.w	r3, r3, #32
 8003014:	2b00      	cmp	r3, #0
 8003016:	d015      	beq.n	8003044 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800301c:	f003 0320 	and.w	r3, r3, #32
 8003020:	2b00      	cmp	r3, #0
 8003022:	d105      	bne.n	8003030 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003024:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003028:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d009      	beq.n	8003044 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003034:	2b00      	cmp	r3, #0
 8003036:	f000 8300 	beq.w	800363a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	4798      	blx	r3
      }
      return;
 8003042:	e2fa      	b.n	800363a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003044:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003048:	2b00      	cmp	r3, #0
 800304a:	f000 8123 	beq.w	8003294 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800304e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003052:	4b8d      	ldr	r3, [pc, #564]	@ (8003288 <HAL_UART_IRQHandler+0x2b8>)
 8003054:	4013      	ands	r3, r2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d106      	bne.n	8003068 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800305a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800305e:	4b8b      	ldr	r3, [pc, #556]	@ (800328c <HAL_UART_IRQHandler+0x2bc>)
 8003060:	4013      	ands	r3, r2
 8003062:	2b00      	cmp	r3, #0
 8003064:	f000 8116 	beq.w	8003294 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003068:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800306c:	f003 0301 	and.w	r3, r3, #1
 8003070:	2b00      	cmp	r3, #0
 8003072:	d011      	beq.n	8003098 <HAL_UART_IRQHandler+0xc8>
 8003074:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003078:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800307c:	2b00      	cmp	r3, #0
 800307e:	d00b      	beq.n	8003098 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2201      	movs	r2, #1
 8003086:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800308e:	f043 0201 	orr.w	r2, r3, #1
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800309c:	f003 0302 	and.w	r3, r3, #2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d011      	beq.n	80030c8 <HAL_UART_IRQHandler+0xf8>
 80030a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80030a8:	f003 0301 	and.w	r3, r3, #1
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d00b      	beq.n	80030c8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2202      	movs	r2, #2
 80030b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030be:	f043 0204 	orr.w	r2, r3, #4
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80030c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030cc:	f003 0304 	and.w	r3, r3, #4
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d011      	beq.n	80030f8 <HAL_UART_IRQHandler+0x128>
 80030d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80030d8:	f003 0301 	and.w	r3, r3, #1
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d00b      	beq.n	80030f8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2204      	movs	r2, #4
 80030e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030ee:	f043 0202 	orr.w	r2, r3, #2
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80030f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030fc:	f003 0308 	and.w	r3, r3, #8
 8003100:	2b00      	cmp	r3, #0
 8003102:	d017      	beq.n	8003134 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003108:	f003 0320 	and.w	r3, r3, #32
 800310c:	2b00      	cmp	r3, #0
 800310e:	d105      	bne.n	800311c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003110:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003114:	4b5c      	ldr	r3, [pc, #368]	@ (8003288 <HAL_UART_IRQHandler+0x2b8>)
 8003116:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003118:	2b00      	cmp	r3, #0
 800311a:	d00b      	beq.n	8003134 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2208      	movs	r2, #8
 8003122:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800312a:	f043 0208 	orr.w	r2, r3, #8
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003138:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800313c:	2b00      	cmp	r3, #0
 800313e:	d012      	beq.n	8003166 <HAL_UART_IRQHandler+0x196>
 8003140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003144:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d00c      	beq.n	8003166 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003154:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800315c:	f043 0220 	orr.w	r2, r3, #32
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800316c:	2b00      	cmp	r3, #0
 800316e:	f000 8266 	beq.w	800363e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003176:	f003 0320 	and.w	r3, r3, #32
 800317a:	2b00      	cmp	r3, #0
 800317c:	d013      	beq.n	80031a6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800317e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003182:	f003 0320 	and.w	r3, r3, #32
 8003186:	2b00      	cmp	r3, #0
 8003188:	d105      	bne.n	8003196 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800318a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800318e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d007      	beq.n	80031a6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800319a:	2b00      	cmp	r3, #0
 800319c:	d003      	beq.n	80031a6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031ac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031ba:	2b40      	cmp	r3, #64	@ 0x40
 80031bc:	d005      	beq.n	80031ca <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80031be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80031c2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d054      	beq.n	8003274 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 ff17 	bl	8003ffe <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031da:	2b40      	cmp	r3, #64	@ 0x40
 80031dc:	d146      	bne.n	800326c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	3308      	adds	r3, #8
 80031e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80031ec:	e853 3f00 	ldrex	r3, [r3]
 80031f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80031f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80031f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80031fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	3308      	adds	r3, #8
 8003206:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800320a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800320e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003212:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003216:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800321a:	e841 2300 	strex	r3, r2, [r1]
 800321e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003222:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1d9      	bne.n	80031de <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003230:	2b00      	cmp	r3, #0
 8003232:	d017      	beq.n	8003264 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800323a:	4a15      	ldr	r2, [pc, #84]	@ (8003290 <HAL_UART_IRQHandler+0x2c0>)
 800323c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003244:	4618      	mov	r0, r3
 8003246:	f7fd fe29 	bl	8000e9c <HAL_DMA_Abort_IT>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d019      	beq.n	8003284 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800325e:	4610      	mov	r0, r2
 8003260:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003262:	e00f      	b.n	8003284 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f000 f9ff 	bl	8003668 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800326a:	e00b      	b.n	8003284 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f000 f9fb 	bl	8003668 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003272:	e007      	b.n	8003284 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f000 f9f7 	bl	8003668 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8003282:	e1dc      	b.n	800363e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003284:	bf00      	nop
    return;
 8003286:	e1da      	b.n	800363e <HAL_UART_IRQHandler+0x66e>
 8003288:	10000001 	.word	0x10000001
 800328c:	04000120 	.word	0x04000120
 8003290:	080040cb 	.word	0x080040cb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003298:	2b01      	cmp	r3, #1
 800329a:	f040 8170 	bne.w	800357e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800329e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032a2:	f003 0310 	and.w	r3, r3, #16
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	f000 8169 	beq.w	800357e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80032ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032b0:	f003 0310 	and.w	r3, r3, #16
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	f000 8162 	beq.w	800357e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2210      	movs	r2, #16
 80032c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032cc:	2b40      	cmp	r3, #64	@ 0x40
 80032ce:	f040 80d8 	bne.w	8003482 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80032e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f000 80af 	beq.w	8003448 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80032f0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80032f4:	429a      	cmp	r2, r3
 80032f6:	f080 80a7 	bcs.w	8003448 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003300:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0320 	and.w	r3, r3, #32
 8003312:	2b00      	cmp	r3, #0
 8003314:	f040 8087 	bne.w	8003426 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003320:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003324:	e853 3f00 	ldrex	r3, [r3]
 8003328:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800332c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003330:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003334:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	461a      	mov	r2, r3
 800333e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003342:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003346:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800334a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800334e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003352:	e841 2300 	strex	r3, r2, [r1]
 8003356:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800335a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1da      	bne.n	8003318 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	3308      	adds	r3, #8
 8003368:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800336a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800336c:	e853 3f00 	ldrex	r3, [r3]
 8003370:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003372:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003374:	f023 0301 	bic.w	r3, r3, #1
 8003378:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	3308      	adds	r3, #8
 8003382:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003386:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800338a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800338c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800338e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003392:	e841 2300 	strex	r3, r2, [r1]
 8003396:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003398:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1e1      	bne.n	8003362 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	3308      	adds	r3, #8
 80033a4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80033a8:	e853 3f00 	ldrex	r3, [r3]
 80033ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80033ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80033b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80033b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	3308      	adds	r3, #8
 80033be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80033c2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80033c4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80033c8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80033ca:	e841 2300 	strex	r3, r2, [r1]
 80033ce:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80033d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1e3      	bne.n	800339e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2220      	movs	r2, #32
 80033da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80033ec:	e853 3f00 	ldrex	r3, [r3]
 80033f0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80033f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033f4:	f023 0310 	bic.w	r3, r3, #16
 80033f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	461a      	mov	r2, r3
 8003402:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003406:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003408:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800340a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800340c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800340e:	e841 2300 	strex	r3, r2, [r1]
 8003412:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003414:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1e4      	bne.n	80033e4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003420:	4618      	mov	r0, r3
 8003422:	f7fd fce2 	bl	8000dea <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2202      	movs	r2, #2
 800342a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003438:	b29b      	uxth	r3, r3
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	b29b      	uxth	r3, r3
 800343e:	4619      	mov	r1, r3
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f000 f91b 	bl	800367c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003446:	e0fc      	b.n	8003642 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800344e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003452:	429a      	cmp	r2, r3
 8003454:	f040 80f5 	bne.w	8003642 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0320 	and.w	r3, r3, #32
 8003466:	2b20      	cmp	r3, #32
 8003468:	f040 80eb 	bne.w	8003642 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2202      	movs	r2, #2
 8003470:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003478:	4619      	mov	r1, r3
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 f8fe 	bl	800367c <HAL_UARTEx_RxEventCallback>
      return;
 8003480:	e0df      	b.n	8003642 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800348e:	b29b      	uxth	r3, r3
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800349c:	b29b      	uxth	r3, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f000 80d1 	beq.w	8003646 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 80034a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f000 80cc 	beq.w	8003646 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034b6:	e853 3f00 	ldrex	r3, [r3]
 80034ba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80034bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80034c2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	461a      	mov	r2, r3
 80034cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80034d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80034d2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80034d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80034d8:	e841 2300 	strex	r3, r2, [r1]
 80034dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80034de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d1e4      	bne.n	80034ae <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	3308      	adds	r3, #8
 80034ea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ee:	e853 3f00 	ldrex	r3, [r3]
 80034f2:	623b      	str	r3, [r7, #32]
   return(result);
 80034f4:	6a3b      	ldr	r3, [r7, #32]
 80034f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034fa:	f023 0301 	bic.w	r3, r3, #1
 80034fe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	3308      	adds	r3, #8
 8003508:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800350c:	633a      	str	r2, [r7, #48]	@ 0x30
 800350e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003510:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003512:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003514:	e841 2300 	strex	r3, r2, [r1]
 8003518:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800351a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800351c:	2b00      	cmp	r3, #0
 800351e:	d1e1      	bne.n	80034e4 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2220      	movs	r2, #32
 8003524:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	e853 3f00 	ldrex	r3, [r3]
 8003540:	60fb      	str	r3, [r7, #12]
   return(result);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f023 0310 	bic.w	r3, r3, #16
 8003548:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	461a      	mov	r2, r3
 8003552:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003556:	61fb      	str	r3, [r7, #28]
 8003558:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800355a:	69b9      	ldr	r1, [r7, #24]
 800355c:	69fa      	ldr	r2, [r7, #28]
 800355e:	e841 2300 	strex	r3, r2, [r1]
 8003562:	617b      	str	r3, [r7, #20]
   return(result);
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1e4      	bne.n	8003534 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2202      	movs	r2, #2
 800356e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003570:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003574:	4619      	mov	r1, r3
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 f880 	bl	800367c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800357c:	e063      	b.n	8003646 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800357e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003582:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00e      	beq.n	80035a8 <HAL_UART_IRQHandler+0x5d8>
 800358a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800358e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d008      	beq.n	80035a8 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800359e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f000 fdd3 	bl	800414c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80035a6:	e051      	b.n	800364c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80035a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d014      	beq.n	80035de <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80035b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d105      	bne.n	80035cc <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80035c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80035c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d008      	beq.n	80035de <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d03a      	beq.n	800364a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	4798      	blx	r3
    }
    return;
 80035dc:	e035      	b.n	800364a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80035de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d009      	beq.n	80035fe <HAL_UART_IRQHandler+0x62e>
 80035ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d003      	beq.n	80035fe <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 fd7d 	bl	80040f6 <UART_EndTransmit_IT>
    return;
 80035fc:	e026      	b.n	800364c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80035fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003602:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d009      	beq.n	800361e <HAL_UART_IRQHandler+0x64e>
 800360a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800360e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d003      	beq.n	800361e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 fdac 	bl	8004174 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800361c:	e016      	b.n	800364c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800361e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003622:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d010      	beq.n	800364c <HAL_UART_IRQHandler+0x67c>
 800362a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800362e:	2b00      	cmp	r3, #0
 8003630:	da0c      	bge.n	800364c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 fd94 	bl	8004160 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003638:	e008      	b.n	800364c <HAL_UART_IRQHandler+0x67c>
      return;
 800363a:	bf00      	nop
 800363c:	e006      	b.n	800364c <HAL_UART_IRQHandler+0x67c>
    return;
 800363e:	bf00      	nop
 8003640:	e004      	b.n	800364c <HAL_UART_IRQHandler+0x67c>
      return;
 8003642:	bf00      	nop
 8003644:	e002      	b.n	800364c <HAL_UART_IRQHandler+0x67c>
      return;
 8003646:	bf00      	nop
 8003648:	e000      	b.n	800364c <HAL_UART_IRQHandler+0x67c>
    return;
 800364a:	bf00      	nop
  }
}
 800364c:	37e8      	adds	r7, #232	@ 0xe8
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop

08003654 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800365c:	bf00      	nop
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	460b      	mov	r3, r1
 8003686:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003688:	bf00      	nop
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003694:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003698:	b08c      	sub	sp, #48	@ 0x30
 800369a:	af00      	add	r7, sp, #0
 800369c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800369e:	2300      	movs	r3, #0
 80036a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	689a      	ldr	r2, [r3, #8]
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	691b      	ldr	r3, [r3, #16]
 80036ac:	431a      	orrs	r2, r3
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	431a      	orrs	r2, r3
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	69db      	ldr	r3, [r3, #28]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	4baa      	ldr	r3, [pc, #680]	@ (800396c <UART_SetConfig+0x2d8>)
 80036c4:	4013      	ands	r3, r2
 80036c6:	697a      	ldr	r2, [r7, #20]
 80036c8:	6812      	ldr	r2, [r2, #0]
 80036ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80036cc:	430b      	orrs	r3, r1
 80036ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	68da      	ldr	r2, [r3, #12]
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	430a      	orrs	r2, r1
 80036e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a9f      	ldr	r2, [pc, #636]	@ (8003970 <UART_SetConfig+0x2dc>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d004      	beq.n	8003700 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	6a1b      	ldr	r3, [r3, #32]
 80036fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036fc:	4313      	orrs	r3, r2
 80036fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800370a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800370e:	697a      	ldr	r2, [r7, #20]
 8003710:	6812      	ldr	r2, [r2, #0]
 8003712:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003714:	430b      	orrs	r3, r1
 8003716:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800371e:	f023 010f 	bic.w	r1, r3, #15
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	430a      	orrs	r2, r1
 800372c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a90      	ldr	r2, [pc, #576]	@ (8003974 <UART_SetConfig+0x2e0>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d125      	bne.n	8003784 <UART_SetConfig+0xf0>
 8003738:	4b8f      	ldr	r3, [pc, #572]	@ (8003978 <UART_SetConfig+0x2e4>)
 800373a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800373e:	f003 0303 	and.w	r3, r3, #3
 8003742:	2b03      	cmp	r3, #3
 8003744:	d81a      	bhi.n	800377c <UART_SetConfig+0xe8>
 8003746:	a201      	add	r2, pc, #4	@ (adr r2, 800374c <UART_SetConfig+0xb8>)
 8003748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800374c:	0800375d 	.word	0x0800375d
 8003750:	0800376d 	.word	0x0800376d
 8003754:	08003765 	.word	0x08003765
 8003758:	08003775 	.word	0x08003775
 800375c:	2301      	movs	r3, #1
 800375e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003762:	e116      	b.n	8003992 <UART_SetConfig+0x2fe>
 8003764:	2302      	movs	r3, #2
 8003766:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800376a:	e112      	b.n	8003992 <UART_SetConfig+0x2fe>
 800376c:	2304      	movs	r3, #4
 800376e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003772:	e10e      	b.n	8003992 <UART_SetConfig+0x2fe>
 8003774:	2308      	movs	r3, #8
 8003776:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800377a:	e10a      	b.n	8003992 <UART_SetConfig+0x2fe>
 800377c:	2310      	movs	r3, #16
 800377e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003782:	e106      	b.n	8003992 <UART_SetConfig+0x2fe>
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a7c      	ldr	r2, [pc, #496]	@ (800397c <UART_SetConfig+0x2e8>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d138      	bne.n	8003800 <UART_SetConfig+0x16c>
 800378e:	4b7a      	ldr	r3, [pc, #488]	@ (8003978 <UART_SetConfig+0x2e4>)
 8003790:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003794:	f003 030c 	and.w	r3, r3, #12
 8003798:	2b0c      	cmp	r3, #12
 800379a:	d82d      	bhi.n	80037f8 <UART_SetConfig+0x164>
 800379c:	a201      	add	r2, pc, #4	@ (adr r2, 80037a4 <UART_SetConfig+0x110>)
 800379e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a2:	bf00      	nop
 80037a4:	080037d9 	.word	0x080037d9
 80037a8:	080037f9 	.word	0x080037f9
 80037ac:	080037f9 	.word	0x080037f9
 80037b0:	080037f9 	.word	0x080037f9
 80037b4:	080037e9 	.word	0x080037e9
 80037b8:	080037f9 	.word	0x080037f9
 80037bc:	080037f9 	.word	0x080037f9
 80037c0:	080037f9 	.word	0x080037f9
 80037c4:	080037e1 	.word	0x080037e1
 80037c8:	080037f9 	.word	0x080037f9
 80037cc:	080037f9 	.word	0x080037f9
 80037d0:	080037f9 	.word	0x080037f9
 80037d4:	080037f1 	.word	0x080037f1
 80037d8:	2300      	movs	r3, #0
 80037da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037de:	e0d8      	b.n	8003992 <UART_SetConfig+0x2fe>
 80037e0:	2302      	movs	r3, #2
 80037e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037e6:	e0d4      	b.n	8003992 <UART_SetConfig+0x2fe>
 80037e8:	2304      	movs	r3, #4
 80037ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037ee:	e0d0      	b.n	8003992 <UART_SetConfig+0x2fe>
 80037f0:	2308      	movs	r3, #8
 80037f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037f6:	e0cc      	b.n	8003992 <UART_SetConfig+0x2fe>
 80037f8:	2310      	movs	r3, #16
 80037fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037fe:	e0c8      	b.n	8003992 <UART_SetConfig+0x2fe>
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a5e      	ldr	r2, [pc, #376]	@ (8003980 <UART_SetConfig+0x2ec>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d125      	bne.n	8003856 <UART_SetConfig+0x1c2>
 800380a:	4b5b      	ldr	r3, [pc, #364]	@ (8003978 <UART_SetConfig+0x2e4>)
 800380c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003810:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003814:	2b30      	cmp	r3, #48	@ 0x30
 8003816:	d016      	beq.n	8003846 <UART_SetConfig+0x1b2>
 8003818:	2b30      	cmp	r3, #48	@ 0x30
 800381a:	d818      	bhi.n	800384e <UART_SetConfig+0x1ba>
 800381c:	2b20      	cmp	r3, #32
 800381e:	d00a      	beq.n	8003836 <UART_SetConfig+0x1a2>
 8003820:	2b20      	cmp	r3, #32
 8003822:	d814      	bhi.n	800384e <UART_SetConfig+0x1ba>
 8003824:	2b00      	cmp	r3, #0
 8003826:	d002      	beq.n	800382e <UART_SetConfig+0x19a>
 8003828:	2b10      	cmp	r3, #16
 800382a:	d008      	beq.n	800383e <UART_SetConfig+0x1aa>
 800382c:	e00f      	b.n	800384e <UART_SetConfig+0x1ba>
 800382e:	2300      	movs	r3, #0
 8003830:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003834:	e0ad      	b.n	8003992 <UART_SetConfig+0x2fe>
 8003836:	2302      	movs	r3, #2
 8003838:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800383c:	e0a9      	b.n	8003992 <UART_SetConfig+0x2fe>
 800383e:	2304      	movs	r3, #4
 8003840:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003844:	e0a5      	b.n	8003992 <UART_SetConfig+0x2fe>
 8003846:	2308      	movs	r3, #8
 8003848:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800384c:	e0a1      	b.n	8003992 <UART_SetConfig+0x2fe>
 800384e:	2310      	movs	r3, #16
 8003850:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003854:	e09d      	b.n	8003992 <UART_SetConfig+0x2fe>
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a4a      	ldr	r2, [pc, #296]	@ (8003984 <UART_SetConfig+0x2f0>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d125      	bne.n	80038ac <UART_SetConfig+0x218>
 8003860:	4b45      	ldr	r3, [pc, #276]	@ (8003978 <UART_SetConfig+0x2e4>)
 8003862:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003866:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800386a:	2bc0      	cmp	r3, #192	@ 0xc0
 800386c:	d016      	beq.n	800389c <UART_SetConfig+0x208>
 800386e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003870:	d818      	bhi.n	80038a4 <UART_SetConfig+0x210>
 8003872:	2b80      	cmp	r3, #128	@ 0x80
 8003874:	d00a      	beq.n	800388c <UART_SetConfig+0x1f8>
 8003876:	2b80      	cmp	r3, #128	@ 0x80
 8003878:	d814      	bhi.n	80038a4 <UART_SetConfig+0x210>
 800387a:	2b00      	cmp	r3, #0
 800387c:	d002      	beq.n	8003884 <UART_SetConfig+0x1f0>
 800387e:	2b40      	cmp	r3, #64	@ 0x40
 8003880:	d008      	beq.n	8003894 <UART_SetConfig+0x200>
 8003882:	e00f      	b.n	80038a4 <UART_SetConfig+0x210>
 8003884:	2300      	movs	r3, #0
 8003886:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800388a:	e082      	b.n	8003992 <UART_SetConfig+0x2fe>
 800388c:	2302      	movs	r3, #2
 800388e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003892:	e07e      	b.n	8003992 <UART_SetConfig+0x2fe>
 8003894:	2304      	movs	r3, #4
 8003896:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800389a:	e07a      	b.n	8003992 <UART_SetConfig+0x2fe>
 800389c:	2308      	movs	r3, #8
 800389e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038a2:	e076      	b.n	8003992 <UART_SetConfig+0x2fe>
 80038a4:	2310      	movs	r3, #16
 80038a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038aa:	e072      	b.n	8003992 <UART_SetConfig+0x2fe>
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a35      	ldr	r2, [pc, #212]	@ (8003988 <UART_SetConfig+0x2f4>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d12a      	bne.n	800390c <UART_SetConfig+0x278>
 80038b6:	4b30      	ldr	r3, [pc, #192]	@ (8003978 <UART_SetConfig+0x2e4>)
 80038b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80038c4:	d01a      	beq.n	80038fc <UART_SetConfig+0x268>
 80038c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80038ca:	d81b      	bhi.n	8003904 <UART_SetConfig+0x270>
 80038cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038d0:	d00c      	beq.n	80038ec <UART_SetConfig+0x258>
 80038d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038d6:	d815      	bhi.n	8003904 <UART_SetConfig+0x270>
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d003      	beq.n	80038e4 <UART_SetConfig+0x250>
 80038dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038e0:	d008      	beq.n	80038f4 <UART_SetConfig+0x260>
 80038e2:	e00f      	b.n	8003904 <UART_SetConfig+0x270>
 80038e4:	2300      	movs	r3, #0
 80038e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038ea:	e052      	b.n	8003992 <UART_SetConfig+0x2fe>
 80038ec:	2302      	movs	r3, #2
 80038ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038f2:	e04e      	b.n	8003992 <UART_SetConfig+0x2fe>
 80038f4:	2304      	movs	r3, #4
 80038f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038fa:	e04a      	b.n	8003992 <UART_SetConfig+0x2fe>
 80038fc:	2308      	movs	r3, #8
 80038fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003902:	e046      	b.n	8003992 <UART_SetConfig+0x2fe>
 8003904:	2310      	movs	r3, #16
 8003906:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800390a:	e042      	b.n	8003992 <UART_SetConfig+0x2fe>
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a17      	ldr	r2, [pc, #92]	@ (8003970 <UART_SetConfig+0x2dc>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d13a      	bne.n	800398c <UART_SetConfig+0x2f8>
 8003916:	4b18      	ldr	r3, [pc, #96]	@ (8003978 <UART_SetConfig+0x2e4>)
 8003918:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800391c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003920:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003924:	d01a      	beq.n	800395c <UART_SetConfig+0x2c8>
 8003926:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800392a:	d81b      	bhi.n	8003964 <UART_SetConfig+0x2d0>
 800392c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003930:	d00c      	beq.n	800394c <UART_SetConfig+0x2b8>
 8003932:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003936:	d815      	bhi.n	8003964 <UART_SetConfig+0x2d0>
 8003938:	2b00      	cmp	r3, #0
 800393a:	d003      	beq.n	8003944 <UART_SetConfig+0x2b0>
 800393c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003940:	d008      	beq.n	8003954 <UART_SetConfig+0x2c0>
 8003942:	e00f      	b.n	8003964 <UART_SetConfig+0x2d0>
 8003944:	2300      	movs	r3, #0
 8003946:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800394a:	e022      	b.n	8003992 <UART_SetConfig+0x2fe>
 800394c:	2302      	movs	r3, #2
 800394e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003952:	e01e      	b.n	8003992 <UART_SetConfig+0x2fe>
 8003954:	2304      	movs	r3, #4
 8003956:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800395a:	e01a      	b.n	8003992 <UART_SetConfig+0x2fe>
 800395c:	2308      	movs	r3, #8
 800395e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003962:	e016      	b.n	8003992 <UART_SetConfig+0x2fe>
 8003964:	2310      	movs	r3, #16
 8003966:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800396a:	e012      	b.n	8003992 <UART_SetConfig+0x2fe>
 800396c:	cfff69f3 	.word	0xcfff69f3
 8003970:	40008000 	.word	0x40008000
 8003974:	40013800 	.word	0x40013800
 8003978:	40021000 	.word	0x40021000
 800397c:	40004400 	.word	0x40004400
 8003980:	40004800 	.word	0x40004800
 8003984:	40004c00 	.word	0x40004c00
 8003988:	40005000 	.word	0x40005000
 800398c:	2310      	movs	r3, #16
 800398e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4aae      	ldr	r2, [pc, #696]	@ (8003c50 <UART_SetConfig+0x5bc>)
 8003998:	4293      	cmp	r3, r2
 800399a:	f040 8097 	bne.w	8003acc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800399e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80039a2:	2b08      	cmp	r3, #8
 80039a4:	d823      	bhi.n	80039ee <UART_SetConfig+0x35a>
 80039a6:	a201      	add	r2, pc, #4	@ (adr r2, 80039ac <UART_SetConfig+0x318>)
 80039a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ac:	080039d1 	.word	0x080039d1
 80039b0:	080039ef 	.word	0x080039ef
 80039b4:	080039d9 	.word	0x080039d9
 80039b8:	080039ef 	.word	0x080039ef
 80039bc:	080039df 	.word	0x080039df
 80039c0:	080039ef 	.word	0x080039ef
 80039c4:	080039ef 	.word	0x080039ef
 80039c8:	080039ef 	.word	0x080039ef
 80039cc:	080039e7 	.word	0x080039e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039d0:	f7fe f9d6 	bl	8001d80 <HAL_RCC_GetPCLK1Freq>
 80039d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80039d6:	e010      	b.n	80039fa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039d8:	4b9e      	ldr	r3, [pc, #632]	@ (8003c54 <UART_SetConfig+0x5c0>)
 80039da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80039dc:	e00d      	b.n	80039fa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039de:	f7fe f961 	bl	8001ca4 <HAL_RCC_GetSysClockFreq>
 80039e2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80039e4:	e009      	b.n	80039fa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80039ec:	e005      	b.n	80039fa <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80039ee:	2300      	movs	r3, #0
 80039f0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80039f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80039fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f000 8130 	beq.w	8003c62 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a06:	4a94      	ldr	r2, [pc, #592]	@ (8003c58 <UART_SetConfig+0x5c4>)
 8003a08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a10:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a14:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	685a      	ldr	r2, [r3, #4]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	005b      	lsls	r3, r3, #1
 8003a1e:	4413      	add	r3, r2
 8003a20:	69ba      	ldr	r2, [r7, #24]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d305      	bcc.n	8003a32 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003a2c:	69ba      	ldr	r2, [r7, #24]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d903      	bls.n	8003a3a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003a38:	e113      	b.n	8003c62 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	60bb      	str	r3, [r7, #8]
 8003a40:	60fa      	str	r2, [r7, #12]
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a46:	4a84      	ldr	r2, [pc, #528]	@ (8003c58 <UART_SetConfig+0x5c4>)
 8003a48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	2200      	movs	r2, #0
 8003a50:	603b      	str	r3, [r7, #0]
 8003a52:	607a      	str	r2, [r7, #4]
 8003a54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a58:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003a5c:	f7fc fbdc 	bl	8000218 <__aeabi_uldivmod>
 8003a60:	4602      	mov	r2, r0
 8003a62:	460b      	mov	r3, r1
 8003a64:	4610      	mov	r0, r2
 8003a66:	4619      	mov	r1, r3
 8003a68:	f04f 0200 	mov.w	r2, #0
 8003a6c:	f04f 0300 	mov.w	r3, #0
 8003a70:	020b      	lsls	r3, r1, #8
 8003a72:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003a76:	0202      	lsls	r2, r0, #8
 8003a78:	6979      	ldr	r1, [r7, #20]
 8003a7a:	6849      	ldr	r1, [r1, #4]
 8003a7c:	0849      	lsrs	r1, r1, #1
 8003a7e:	2000      	movs	r0, #0
 8003a80:	460c      	mov	r4, r1
 8003a82:	4605      	mov	r5, r0
 8003a84:	eb12 0804 	adds.w	r8, r2, r4
 8003a88:	eb43 0905 	adc.w	r9, r3, r5
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	469a      	mov	sl, r3
 8003a94:	4693      	mov	fp, r2
 8003a96:	4652      	mov	r2, sl
 8003a98:	465b      	mov	r3, fp
 8003a9a:	4640      	mov	r0, r8
 8003a9c:	4649      	mov	r1, r9
 8003a9e:	f7fc fbbb 	bl	8000218 <__aeabi_uldivmod>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003aaa:	6a3b      	ldr	r3, [r7, #32]
 8003aac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ab0:	d308      	bcc.n	8003ac4 <UART_SetConfig+0x430>
 8003ab2:	6a3b      	ldr	r3, [r7, #32]
 8003ab4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ab8:	d204      	bcs.n	8003ac4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	6a3a      	ldr	r2, [r7, #32]
 8003ac0:	60da      	str	r2, [r3, #12]
 8003ac2:	e0ce      	b.n	8003c62 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003aca:	e0ca      	b.n	8003c62 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	69db      	ldr	r3, [r3, #28]
 8003ad0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ad4:	d166      	bne.n	8003ba4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003ad6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003ada:	2b08      	cmp	r3, #8
 8003adc:	d827      	bhi.n	8003b2e <UART_SetConfig+0x49a>
 8003ade:	a201      	add	r2, pc, #4	@ (adr r2, 8003ae4 <UART_SetConfig+0x450>)
 8003ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae4:	08003b09 	.word	0x08003b09
 8003ae8:	08003b11 	.word	0x08003b11
 8003aec:	08003b19 	.word	0x08003b19
 8003af0:	08003b2f 	.word	0x08003b2f
 8003af4:	08003b1f 	.word	0x08003b1f
 8003af8:	08003b2f 	.word	0x08003b2f
 8003afc:	08003b2f 	.word	0x08003b2f
 8003b00:	08003b2f 	.word	0x08003b2f
 8003b04:	08003b27 	.word	0x08003b27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b08:	f7fe f93a 	bl	8001d80 <HAL_RCC_GetPCLK1Freq>
 8003b0c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003b0e:	e014      	b.n	8003b3a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b10:	f7fe f94c 	bl	8001dac <HAL_RCC_GetPCLK2Freq>
 8003b14:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003b16:	e010      	b.n	8003b3a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b18:	4b4e      	ldr	r3, [pc, #312]	@ (8003c54 <UART_SetConfig+0x5c0>)
 8003b1a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003b1c:	e00d      	b.n	8003b3a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b1e:	f7fe f8c1 	bl	8001ca4 <HAL_RCC_GetSysClockFreq>
 8003b22:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003b24:	e009      	b.n	8003b3a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b2a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003b2c:	e005      	b.n	8003b3a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003b38:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	f000 8090 	beq.w	8003c62 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b46:	4a44      	ldr	r2, [pc, #272]	@ (8003c58 <UART_SetConfig+0x5c4>)
 8003b48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b50:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b54:	005a      	lsls	r2, r3, #1
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	085b      	lsrs	r3, r3, #1
 8003b5c:	441a      	add	r2, r3
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b66:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b68:	6a3b      	ldr	r3, [r7, #32]
 8003b6a:	2b0f      	cmp	r3, #15
 8003b6c:	d916      	bls.n	8003b9c <UART_SetConfig+0x508>
 8003b6e:	6a3b      	ldr	r3, [r7, #32]
 8003b70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b74:	d212      	bcs.n	8003b9c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b76:	6a3b      	ldr	r3, [r7, #32]
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	f023 030f 	bic.w	r3, r3, #15
 8003b7e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b80:	6a3b      	ldr	r3, [r7, #32]
 8003b82:	085b      	lsrs	r3, r3, #1
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	f003 0307 	and.w	r3, r3, #7
 8003b8a:	b29a      	uxth	r2, r3
 8003b8c:	8bfb      	ldrh	r3, [r7, #30]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	8bfa      	ldrh	r2, [r7, #30]
 8003b98:	60da      	str	r2, [r3, #12]
 8003b9a:	e062      	b.n	8003c62 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003ba2:	e05e      	b.n	8003c62 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ba4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003ba8:	2b08      	cmp	r3, #8
 8003baa:	d828      	bhi.n	8003bfe <UART_SetConfig+0x56a>
 8003bac:	a201      	add	r2, pc, #4	@ (adr r2, 8003bb4 <UART_SetConfig+0x520>)
 8003bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb2:	bf00      	nop
 8003bb4:	08003bd9 	.word	0x08003bd9
 8003bb8:	08003be1 	.word	0x08003be1
 8003bbc:	08003be9 	.word	0x08003be9
 8003bc0:	08003bff 	.word	0x08003bff
 8003bc4:	08003bef 	.word	0x08003bef
 8003bc8:	08003bff 	.word	0x08003bff
 8003bcc:	08003bff 	.word	0x08003bff
 8003bd0:	08003bff 	.word	0x08003bff
 8003bd4:	08003bf7 	.word	0x08003bf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bd8:	f7fe f8d2 	bl	8001d80 <HAL_RCC_GetPCLK1Freq>
 8003bdc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003bde:	e014      	b.n	8003c0a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003be0:	f7fe f8e4 	bl	8001dac <HAL_RCC_GetPCLK2Freq>
 8003be4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003be6:	e010      	b.n	8003c0a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003be8:	4b1a      	ldr	r3, [pc, #104]	@ (8003c54 <UART_SetConfig+0x5c0>)
 8003bea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003bec:	e00d      	b.n	8003c0a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bee:	f7fe f859 	bl	8001ca4 <HAL_RCC_GetSysClockFreq>
 8003bf2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003bf4:	e009      	b.n	8003c0a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bf6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003bfa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003bfc:	e005      	b.n	8003c0a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003c08:	bf00      	nop
    }

    if (pclk != 0U)
 8003c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d028      	beq.n	8003c62 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c14:	4a10      	ldr	r2, [pc, #64]	@ (8003c58 <UART_SetConfig+0x5c4>)
 8003c16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c1e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	085b      	lsrs	r3, r3, #1
 8003c28:	441a      	add	r2, r3
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c32:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c34:	6a3b      	ldr	r3, [r7, #32]
 8003c36:	2b0f      	cmp	r3, #15
 8003c38:	d910      	bls.n	8003c5c <UART_SetConfig+0x5c8>
 8003c3a:	6a3b      	ldr	r3, [r7, #32]
 8003c3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c40:	d20c      	bcs.n	8003c5c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c42:	6a3b      	ldr	r3, [r7, #32]
 8003c44:	b29a      	uxth	r2, r3
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	60da      	str	r2, [r3, #12]
 8003c4c:	e009      	b.n	8003c62 <UART_SetConfig+0x5ce>
 8003c4e:	bf00      	nop
 8003c50:	40008000 	.word	0x40008000
 8003c54:	00f42400 	.word	0x00f42400
 8003c58:	0800442c 	.word	0x0800442c
      }
      else
      {
        ret = HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	2201      	movs	r2, #1
 8003c66:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	2200      	movs	r2, #0
 8003c76:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003c7e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3730      	adds	r7, #48	@ 0x30
 8003c86:	46bd      	mov	sp, r7
 8003c88:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003c8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c98:	f003 0308 	and.w	r3, r3, #8
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d00a      	beq.n	8003cb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00a      	beq.n	8003cd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cdc:	f003 0302 	and.w	r3, r3, #2
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d00a      	beq.n	8003cfa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cfe:	f003 0304 	and.w	r3, r3, #4
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00a      	beq.n	8003d1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	430a      	orrs	r2, r1
 8003d1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d20:	f003 0310 	and.w	r3, r3, #16
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00a      	beq.n	8003d3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d42:	f003 0320 	and.w	r3, r3, #32
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00a      	beq.n	8003d60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d01a      	beq.n	8003da2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d8a:	d10a      	bne.n	8003da2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003da6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00a      	beq.n	8003dc4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	605a      	str	r2, [r3, #4]
  }
}
 8003dc4:	bf00      	nop
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b098      	sub	sp, #96	@ 0x60
 8003dd4:	af02      	add	r7, sp, #8
 8003dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003de0:	f7fc fee8 	bl	8000bb4 <HAL_GetTick>
 8003de4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0308 	and.w	r3, r3, #8
 8003df0:	2b08      	cmp	r3, #8
 8003df2:	d12f      	bne.n	8003e54 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003df4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003df8:	9300      	str	r3, [sp, #0]
 8003dfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 f88e 	bl	8003f24 <UART_WaitOnFlagUntilTimeout>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d022      	beq.n	8003e54 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e16:	e853 3f00 	ldrex	r3, [r3]
 8003e1a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003e1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e22:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	461a      	mov	r2, r3
 8003e2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e2e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e30:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003e32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e34:	e841 2300 	strex	r3, r2, [r1]
 8003e38:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003e3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1e6      	bne.n	8003e0e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2220      	movs	r2, #32
 8003e44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e063      	b.n	8003f1c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0304 	and.w	r3, r3, #4
 8003e5e:	2b04      	cmp	r3, #4
 8003e60:	d149      	bne.n	8003ef6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e62:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003e66:	9300      	str	r3, [sp, #0]
 8003e68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f000 f857 	bl	8003f24 <UART_WaitOnFlagUntilTimeout>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d03c      	beq.n	8003ef6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e84:	e853 3f00 	ldrex	r3, [r3]
 8003e88:	623b      	str	r3, [r7, #32]
   return(result);
 8003e8a:	6a3b      	ldr	r3, [r7, #32]
 8003e8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e90:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	461a      	mov	r2, r3
 8003e98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e9a:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e9c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ea0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ea2:	e841 2300 	strex	r3, r2, [r1]
 8003ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1e6      	bne.n	8003e7c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	3308      	adds	r3, #8
 8003eb4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	e853 3f00 	ldrex	r3, [r3]
 8003ebc:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f023 0301 	bic.w	r3, r3, #1
 8003ec4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	3308      	adds	r3, #8
 8003ecc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ece:	61fa      	str	r2, [r7, #28]
 8003ed0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed2:	69b9      	ldr	r1, [r7, #24]
 8003ed4:	69fa      	ldr	r2, [r7, #28]
 8003ed6:	e841 2300 	strex	r3, r2, [r1]
 8003eda:	617b      	str	r3, [r7, #20]
   return(result);
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d1e5      	bne.n	8003eae <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2220      	movs	r2, #32
 8003ee6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e012      	b.n	8003f1c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2220      	movs	r2, #32
 8003efa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2220      	movs	r2, #32
 8003f02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3758      	adds	r7, #88	@ 0x58
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	603b      	str	r3, [r7, #0]
 8003f30:	4613      	mov	r3, r2
 8003f32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f34:	e04f      	b.n	8003fd6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f3c:	d04b      	beq.n	8003fd6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f3e:	f7fc fe39 	bl	8000bb4 <HAL_GetTick>
 8003f42:	4602      	mov	r2, r0
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	69ba      	ldr	r2, [r7, #24]
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d302      	bcc.n	8003f54 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d101      	bne.n	8003f58 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e04e      	b.n	8003ff6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0304 	and.w	r3, r3, #4
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d037      	beq.n	8003fd6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	2b80      	cmp	r3, #128	@ 0x80
 8003f6a:	d034      	beq.n	8003fd6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	2b40      	cmp	r3, #64	@ 0x40
 8003f70:	d031      	beq.n	8003fd6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	69db      	ldr	r3, [r3, #28]
 8003f78:	f003 0308 	and.w	r3, r3, #8
 8003f7c:	2b08      	cmp	r3, #8
 8003f7e:	d110      	bne.n	8003fa2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2208      	movs	r2, #8
 8003f86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f88:	68f8      	ldr	r0, [r7, #12]
 8003f8a:	f000 f838 	bl	8003ffe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2208      	movs	r2, #8
 8003f92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e029      	b.n	8003ff6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	69db      	ldr	r3, [r3, #28]
 8003fa8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fb0:	d111      	bne.n	8003fd6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003fba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003fbc:	68f8      	ldr	r0, [r7, #12]
 8003fbe:	f000 f81e 	bl	8003ffe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2220      	movs	r2, #32
 8003fc6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e00f      	b.n	8003ff6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	69da      	ldr	r2, [r3, #28]
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	4013      	ands	r3, r2
 8003fe0:	68ba      	ldr	r2, [r7, #8]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	bf0c      	ite	eq
 8003fe6:	2301      	moveq	r3, #1
 8003fe8:	2300      	movne	r3, #0
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	461a      	mov	r2, r3
 8003fee:	79fb      	ldrb	r3, [r7, #7]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d0a0      	beq.n	8003f36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3710      	adds	r7, #16
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}

08003ffe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ffe:	b480      	push	{r7}
 8004000:	b095      	sub	sp, #84	@ 0x54
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800400c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800400e:	e853 3f00 	ldrex	r3, [r3]
 8004012:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004016:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800401a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	461a      	mov	r2, r3
 8004022:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004024:	643b      	str	r3, [r7, #64]	@ 0x40
 8004026:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004028:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800402a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800402c:	e841 2300 	strex	r3, r2, [r1]
 8004030:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004034:	2b00      	cmp	r3, #0
 8004036:	d1e6      	bne.n	8004006 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	3308      	adds	r3, #8
 800403e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004040:	6a3b      	ldr	r3, [r7, #32]
 8004042:	e853 3f00 	ldrex	r3, [r3]
 8004046:	61fb      	str	r3, [r7, #28]
   return(result);
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800404e:	f023 0301 	bic.w	r3, r3, #1
 8004052:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	3308      	adds	r3, #8
 800405a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800405c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800405e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004060:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004062:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004064:	e841 2300 	strex	r3, r2, [r1]
 8004068:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800406a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800406c:	2b00      	cmp	r3, #0
 800406e:	d1e3      	bne.n	8004038 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004074:	2b01      	cmp	r3, #1
 8004076:	d118      	bne.n	80040aa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	e853 3f00 	ldrex	r3, [r3]
 8004084:	60bb      	str	r3, [r7, #8]
   return(result);
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	f023 0310 	bic.w	r3, r3, #16
 800408c:	647b      	str	r3, [r7, #68]	@ 0x44
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	461a      	mov	r2, r3
 8004094:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004096:	61bb      	str	r3, [r7, #24]
 8004098:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800409a:	6979      	ldr	r1, [r7, #20]
 800409c:	69ba      	ldr	r2, [r7, #24]
 800409e:	e841 2300 	strex	r3, r2, [r1]
 80040a2:	613b      	str	r3, [r7, #16]
   return(result);
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1e6      	bne.n	8004078 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2220      	movs	r2, #32
 80040ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80040be:	bf00      	nop
 80040c0:	3754      	adds	r7, #84	@ 0x54
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr

080040ca <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040ca:	b580      	push	{r7, lr}
 80040cc:	b084      	sub	sp, #16
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2200      	movs	r2, #0
 80040dc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040e8:	68f8      	ldr	r0, [r7, #12]
 80040ea:	f7ff fabd 	bl	8003668 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040ee:	bf00      	nop
 80040f0:	3710      	adds	r7, #16
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80040f6:	b580      	push	{r7, lr}
 80040f8:	b088      	sub	sp, #32
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	e853 3f00 	ldrex	r3, [r3]
 800410a:	60bb      	str	r3, [r7, #8]
   return(result);
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004112:	61fb      	str	r3, [r7, #28]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	461a      	mov	r2, r3
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	61bb      	str	r3, [r7, #24]
 800411e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004120:	6979      	ldr	r1, [r7, #20]
 8004122:	69ba      	ldr	r2, [r7, #24]
 8004124:	e841 2300 	strex	r3, r2, [r1]
 8004128:	613b      	str	r3, [r7, #16]
   return(result);
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d1e6      	bne.n	80040fe <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2220      	movs	r2, #32
 8004134:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f7ff fa88 	bl	8003654 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004144:	bf00      	nop
 8004146:	3720      	adds	r7, #32
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004154:	bf00      	nop
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800417c:	bf00      	nop
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004188:	b480      	push	{r7}
 800418a:	b085      	sub	sp, #20
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004196:	2b01      	cmp	r3, #1
 8004198:	d101      	bne.n	800419e <HAL_UARTEx_DisableFifoMode+0x16>
 800419a:	2302      	movs	r3, #2
 800419c:	e027      	b.n	80041ee <HAL_UARTEx_DisableFifoMode+0x66>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2201      	movs	r2, #1
 80041a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2224      	movs	r2, #36	@ 0x24
 80041aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f022 0201 	bic.w	r2, r2, #1
 80041c4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80041cc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68fa      	ldr	r2, [r7, #12]
 80041da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2220      	movs	r2, #32
 80041e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3714      	adds	r7, #20
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr

080041fa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80041fa:	b580      	push	{r7, lr}
 80041fc:	b084      	sub	sp, #16
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
 8004202:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800420a:	2b01      	cmp	r3, #1
 800420c:	d101      	bne.n	8004212 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800420e:	2302      	movs	r3, #2
 8004210:	e02d      	b.n	800426e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2201      	movs	r2, #1
 8004216:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2224      	movs	r2, #36	@ 0x24
 800421e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f022 0201 	bic.w	r2, r2, #1
 8004238:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	430a      	orrs	r2, r1
 800424c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 f850 	bl	80042f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2220      	movs	r2, #32
 8004260:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3710      	adds	r7, #16
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}

08004276 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004276:	b580      	push	{r7, lr}
 8004278:	b084      	sub	sp, #16
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
 800427e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004286:	2b01      	cmp	r3, #1
 8004288:	d101      	bne.n	800428e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800428a:	2302      	movs	r3, #2
 800428c:	e02d      	b.n	80042ea <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2201      	movs	r2, #1
 8004292:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2224      	movs	r2, #36	@ 0x24
 800429a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f022 0201 	bic.w	r2, r2, #1
 80042b4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	683a      	ldr	r2, [r7, #0]
 80042c6:	430a      	orrs	r2, r1
 80042c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 f812 	bl	80042f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68fa      	ldr	r2, [r7, #12]
 80042d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2220      	movs	r2, #32
 80042dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3710      	adds	r7, #16
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
	...

080042f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004300:	2b00      	cmp	r3, #0
 8004302:	d108      	bne.n	8004316 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004314:	e031      	b.n	800437a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004316:	2308      	movs	r3, #8
 8004318:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800431a:	2308      	movs	r3, #8
 800431c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	0e5b      	lsrs	r3, r3, #25
 8004326:	b2db      	uxtb	r3, r3
 8004328:	f003 0307 	and.w	r3, r3, #7
 800432c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	0f5b      	lsrs	r3, r3, #29
 8004336:	b2db      	uxtb	r3, r3
 8004338:	f003 0307 	and.w	r3, r3, #7
 800433c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800433e:	7bbb      	ldrb	r3, [r7, #14]
 8004340:	7b3a      	ldrb	r2, [r7, #12]
 8004342:	4911      	ldr	r1, [pc, #68]	@ (8004388 <UARTEx_SetNbDataToProcess+0x94>)
 8004344:	5c8a      	ldrb	r2, [r1, r2]
 8004346:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800434a:	7b3a      	ldrb	r2, [r7, #12]
 800434c:	490f      	ldr	r1, [pc, #60]	@ (800438c <UARTEx_SetNbDataToProcess+0x98>)
 800434e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004350:	fb93 f3f2 	sdiv	r3, r3, r2
 8004354:	b29a      	uxth	r2, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800435c:	7bfb      	ldrb	r3, [r7, #15]
 800435e:	7b7a      	ldrb	r2, [r7, #13]
 8004360:	4909      	ldr	r1, [pc, #36]	@ (8004388 <UARTEx_SetNbDataToProcess+0x94>)
 8004362:	5c8a      	ldrb	r2, [r1, r2]
 8004364:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004368:	7b7a      	ldrb	r2, [r7, #13]
 800436a:	4908      	ldr	r1, [pc, #32]	@ (800438c <UARTEx_SetNbDataToProcess+0x98>)
 800436c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800436e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004372:	b29a      	uxth	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800437a:	bf00      	nop
 800437c:	3714      	adds	r7, #20
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop
 8004388:	08004444 	.word	0x08004444
 800438c:	0800444c 	.word	0x0800444c

08004390 <memset>:
 8004390:	4402      	add	r2, r0
 8004392:	4603      	mov	r3, r0
 8004394:	4293      	cmp	r3, r2
 8004396:	d100      	bne.n	800439a <memset+0xa>
 8004398:	4770      	bx	lr
 800439a:	f803 1b01 	strb.w	r1, [r3], #1
 800439e:	e7f9      	b.n	8004394 <memset+0x4>

080043a0 <__libc_init_array>:
 80043a0:	b570      	push	{r4, r5, r6, lr}
 80043a2:	4d0d      	ldr	r5, [pc, #52]	@ (80043d8 <__libc_init_array+0x38>)
 80043a4:	4c0d      	ldr	r4, [pc, #52]	@ (80043dc <__libc_init_array+0x3c>)
 80043a6:	1b64      	subs	r4, r4, r5
 80043a8:	10a4      	asrs	r4, r4, #2
 80043aa:	2600      	movs	r6, #0
 80043ac:	42a6      	cmp	r6, r4
 80043ae:	d109      	bne.n	80043c4 <__libc_init_array+0x24>
 80043b0:	4d0b      	ldr	r5, [pc, #44]	@ (80043e0 <__libc_init_array+0x40>)
 80043b2:	4c0c      	ldr	r4, [pc, #48]	@ (80043e4 <__libc_init_array+0x44>)
 80043b4:	f000 f818 	bl	80043e8 <_init>
 80043b8:	1b64      	subs	r4, r4, r5
 80043ba:	10a4      	asrs	r4, r4, #2
 80043bc:	2600      	movs	r6, #0
 80043be:	42a6      	cmp	r6, r4
 80043c0:	d105      	bne.n	80043ce <__libc_init_array+0x2e>
 80043c2:	bd70      	pop	{r4, r5, r6, pc}
 80043c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80043c8:	4798      	blx	r3
 80043ca:	3601      	adds	r6, #1
 80043cc:	e7ee      	b.n	80043ac <__libc_init_array+0xc>
 80043ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80043d2:	4798      	blx	r3
 80043d4:	3601      	adds	r6, #1
 80043d6:	e7f2      	b.n	80043be <__libc_init_array+0x1e>
 80043d8:	0800445c 	.word	0x0800445c
 80043dc:	0800445c 	.word	0x0800445c
 80043e0:	0800445c 	.word	0x0800445c
 80043e4:	08004460 	.word	0x08004460

080043e8 <_init>:
 80043e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ea:	bf00      	nop
 80043ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ee:	bc08      	pop	{r3}
 80043f0:	469e      	mov	lr, r3
 80043f2:	4770      	bx	lr

080043f4 <_fini>:
 80043f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043f6:	bf00      	nop
 80043f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043fa:	bc08      	pop	{r3}
 80043fc:	469e      	mov	lr, r3
 80043fe:	4770      	bx	lr
