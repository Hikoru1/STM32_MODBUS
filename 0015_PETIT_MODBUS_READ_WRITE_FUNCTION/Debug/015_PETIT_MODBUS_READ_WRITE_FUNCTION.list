
015_PETIT_MODBUS_READ_WRITE_FUNCTION.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000379c  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003974  08003974  00004974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039b4  080039b4  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  080039b4  080039b4  000049b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080039bc  080039bc  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039bc  080039bc  000049bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080039c0  080039c0  000049c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080039c4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  2000000c  080039d0  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000174  080039d0  00005174  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011267  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020f8  00000000  00000000  000162a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa8  00000000  00000000  000183a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c47  00000000  00000000  00019348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002563b  00000000  00000000  00019f8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001227b  00000000  00000000  0003f5ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7b10  00000000  00000000  00051845  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00149355  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042f0  00000000  00000000  00149398  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  0014d688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800395c 	.word	0x0800395c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	0800395c 	.word	0x0800395c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <Modbus_CRC16>:




uint16_t Modbus_CRC16(uint8_t *data, uint16_t length)
{
 8000508:	b480      	push	{r7}
 800050a:	b087      	sub	sp, #28
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	460b      	mov	r3, r1
 8000512:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0xFFFF;
 8000514:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000518:	82fb      	strh	r3, [r7, #22]
    for (int pos = 0; pos < length; pos++)
 800051a:	2300      	movs	r3, #0
 800051c:	613b      	str	r3, [r7, #16]
 800051e:	e026      	b.n	800056e <Modbus_CRC16+0x66>
    {
        crc ^= (uint16_t)data[pos];
 8000520:	693b      	ldr	r3, [r7, #16]
 8000522:	687a      	ldr	r2, [r7, #4]
 8000524:	4413      	add	r3, r2
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	461a      	mov	r2, r3
 800052a:	8afb      	ldrh	r3, [r7, #22]
 800052c:	4053      	eors	r3, r2
 800052e:	82fb      	strh	r3, [r7, #22]
        for (int i = 8; i != 0; i--)
 8000530:	2308      	movs	r3, #8
 8000532:	60fb      	str	r3, [r7, #12]
 8000534:	e015      	b.n	8000562 <Modbus_CRC16+0x5a>
        {
            if ((crc & 0x0001) != 0)
 8000536:	8afb      	ldrh	r3, [r7, #22]
 8000538:	f003 0301 	and.w	r3, r3, #1
 800053c:	2b00      	cmp	r3, #0
 800053e:	d00a      	beq.n	8000556 <Modbus_CRC16+0x4e>
            {
                crc >>= 1;
 8000540:	8afb      	ldrh	r3, [r7, #22]
 8000542:	085b      	lsrs	r3, r3, #1
 8000544:	82fb      	strh	r3, [r7, #22]
                crc ^= 0xA001;
 8000546:	8afb      	ldrh	r3, [r7, #22]
 8000548:	f483 43bf 	eor.w	r3, r3, #24448	@ 0x5f80
 800054c:	f083 037e 	eor.w	r3, r3, #126	@ 0x7e
 8000550:	43db      	mvns	r3, r3
 8000552:	82fb      	strh	r3, [r7, #22]
 8000554:	e002      	b.n	800055c <Modbus_CRC16+0x54>
            }
            else
                crc >>= 1;
 8000556:	8afb      	ldrh	r3, [r7, #22]
 8000558:	085b      	lsrs	r3, r3, #1
 800055a:	82fb      	strh	r3, [r7, #22]
        for (int i = 8; i != 0; i--)
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	3b01      	subs	r3, #1
 8000560:	60fb      	str	r3, [r7, #12]
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d1e6      	bne.n	8000536 <Modbus_CRC16+0x2e>
    for (int pos = 0; pos < length; pos++)
 8000568:	693b      	ldr	r3, [r7, #16]
 800056a:	3301      	adds	r3, #1
 800056c:	613b      	str	r3, [r7, #16]
 800056e:	887b      	ldrh	r3, [r7, #2]
 8000570:	693a      	ldr	r2, [r7, #16]
 8000572:	429a      	cmp	r2, r3
 8000574:	dbd4      	blt.n	8000520 <Modbus_CRC16+0x18>
        }
    }
    return crc;
 8000576:	8afb      	ldrh	r3, [r7, #22]
}
 8000578:	4618      	mov	r0, r3
 800057a:	371c      	adds	r7, #28
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000588:	b08d      	sub	sp, #52	@ 0x34
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058c:	f000 fb83 	bl	8000c96 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000590:	f000 f902 	bl	8000798 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000594:	f000 fa14 	bl	80009c0 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000598:	f000 f94a 	bl	8000830 <MX_TIM1_Init>
  MX_TIM16_Init();
 800059c:	f000 f99c 	bl	80008d8 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 80005a0:	f000 f9c2 	bl	8000928 <MX_USART2_UART_Init>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_UART_Receive(&huart2, rxbuffer, sizeof(rxbuffer), 1000); 				//MASTERDAN GELEN VERIYI AL
 80005a4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005a8:	2208      	movs	r2, #8
 80005aa:	4978      	ldr	r1, [pc, #480]	@ (800078c <main+0x208>)
 80005ac:	4878      	ldr	r0, [pc, #480]	@ (8000790 <main+0x20c>)
 80005ae:	f002 fac3 	bl	8002b38 <HAL_UART_Receive>

	 	  	  	  if((rxbuffer[0] == SLAVEID) && (rxbuffer[1]== 0x03)){ 		//EGER GIRILEN SLAVE ADRESI VE FONKSIYON SAGLANIYORSA
 80005b2:	4b76      	ldr	r3, [pc, #472]	@ (800078c <main+0x208>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	f040 809c 	bne.w	80006f4 <main+0x170>
 80005bc:	4b73      	ldr	r3, [pc, #460]	@ (800078c <main+0x208>)
 80005be:	785b      	ldrb	r3, [r3, #1]
 80005c0:	2b03      	cmp	r3, #3
 80005c2:	f040 8097 	bne.w	80006f4 <main+0x170>
 80005c6:	466b      	mov	r3, sp
 80005c8:	461e      	mov	r6, r3

	 	  	  		  uint16_t start_Adress = (rxbuffer[2]<<8) | rxbuffer[3] ;
 80005ca:	4b70      	ldr	r3, [pc, #448]	@ (800078c <main+0x208>)
 80005cc:	789b      	ldrb	r3, [r3, #2]
 80005ce:	021b      	lsls	r3, r3, #8
 80005d0:	b21a      	sxth	r2, r3
 80005d2:	4b6e      	ldr	r3, [pc, #440]	@ (800078c <main+0x208>)
 80005d4:	78db      	ldrb	r3, [r3, #3]
 80005d6:	b21b      	sxth	r3, r3
 80005d8:	4313      	orrs	r3, r2
 80005da:	b21b      	sxth	r3, r3
 80005dc:	84fb      	strh	r3, [r7, #38]	@ 0x26
	 	  	  		  uint16_t num_Reg = (rxbuffer[4]<<8) | rxbuffer[5] ;		//TAM ADRESLER OLUSTURULDU
 80005de:	4b6b      	ldr	r3, [pc, #428]	@ (800078c <main+0x208>)
 80005e0:	791b      	ldrb	r3, [r3, #4]
 80005e2:	021b      	lsls	r3, r3, #8
 80005e4:	b21a      	sxth	r2, r3
 80005e6:	4b69      	ldr	r3, [pc, #420]	@ (800078c <main+0x208>)
 80005e8:	795b      	ldrb	r3, [r3, #5]
 80005ea:	b21b      	sxth	r3, r3
 80005ec:	4313      	orrs	r3, r2
 80005ee:	b21b      	sxth	r3, r3
 80005f0:	84bb      	strh	r3, [r7, #36]	@ 0x24

	 	  	  		  uint8_t response[5 + 2 * num_Reg + 2];
 80005f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80005f4:	005b      	lsls	r3, r3, #1
 80005f6:	1dd9      	adds	r1, r3, #7
 80005f8:	1e4b      	subs	r3, r1, #1
 80005fa:	623b      	str	r3, [r7, #32]
 80005fc:	460a      	mov	r2, r1
 80005fe:	2300      	movs	r3, #0
 8000600:	4614      	mov	r4, r2
 8000602:	461d      	mov	r5, r3
 8000604:	f04f 0200 	mov.w	r2, #0
 8000608:	f04f 0300 	mov.w	r3, #0
 800060c:	00eb      	lsls	r3, r5, #3
 800060e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000612:	00e2      	lsls	r2, r4, #3
 8000614:	460a      	mov	r2, r1
 8000616:	2300      	movs	r3, #0
 8000618:	4690      	mov	r8, r2
 800061a:	4699      	mov	r9, r3
 800061c:	f04f 0200 	mov.w	r2, #0
 8000620:	f04f 0300 	mov.w	r3, #0
 8000624:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000628:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800062c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000630:	460b      	mov	r3, r1
 8000632:	3307      	adds	r3, #7
 8000634:	08db      	lsrs	r3, r3, #3
 8000636:	00db      	lsls	r3, r3, #3
 8000638:	ebad 0d03 	sub.w	sp, sp, r3
 800063c:	466b      	mov	r3, sp
 800063e:	3300      	adds	r3, #0
 8000640:	61fb      	str	r3, [r7, #28]
	 	  	  		  response[0] = SLAVEID;
 8000642:	69fb      	ldr	r3, [r7, #28]
 8000644:	2201      	movs	r2, #1
 8000646:	701a      	strb	r2, [r3, #0]
	 	  	  		  response[1] = 0x03;
 8000648:	69fb      	ldr	r3, [r7, #28]
 800064a:	2203      	movs	r2, #3
 800064c:	705a      	strb	r2, [r3, #1]
	 	  	  		  response[2] = 2*num_Reg;
 800064e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000650:	b2db      	uxtb	r3, r3
 8000652:	005b      	lsls	r3, r3, #1
 8000654:	b2da      	uxtb	r2, r3
 8000656:	69fb      	ldr	r3, [r7, #28]
 8000658:	709a      	strb	r2, [r3, #2]
	 	  	  		  for ( int i=0 ; i < num_Reg ; i++){
 800065a:	2300      	movs	r3, #0
 800065c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800065e:	e01c      	b.n	800069a <main+0x116>
	 	  	  			  response[3+i*2] = (reg[start_Adress+i] >> 8 ) & 0xFF;
 8000660:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000664:	4413      	add	r3, r2
 8000666:	4a4b      	ldr	r2, [pc, #300]	@ (8000794 <main+0x210>)
 8000668:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800066c:	0a1b      	lsrs	r3, r3, #8
 800066e:	b29a      	uxth	r2, r3
 8000670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000672:	005b      	lsls	r3, r3, #1
 8000674:	3303      	adds	r3, #3
 8000676:	b2d1      	uxtb	r1, r2
 8000678:	69fa      	ldr	r2, [r7, #28]
 800067a:	54d1      	strb	r1, [r2, r3]
	 	  	  			  response[4+i*2] = reg[start_Adress+i] & 0xFF;
 800067c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800067e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000680:	4413      	add	r3, r2
 8000682:	4a44      	ldr	r2, [pc, #272]	@ (8000794 <main+0x210>)
 8000684:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800068a:	3302      	adds	r3, #2
 800068c:	005b      	lsls	r3, r3, #1
 800068e:	b2d1      	uxtb	r1, r2
 8000690:	69fa      	ldr	r2, [r7, #28]
 8000692:	54d1      	strb	r1, [r2, r3]
	 	  	  		  for ( int i=0 ; i < num_Reg ; i++){
 8000694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000696:	3301      	adds	r3, #1
 8000698:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800069a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800069c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800069e:	429a      	cmp	r2, r3
 80006a0:	dbde      	blt.n	8000660 <main+0xdc>
	 	  	  		  }

	 	  	  		// CRC hesaplama
	 	  	  		uint16_t crc2 = Modbus_CRC16(response, 3 + 2 * num_Reg);
 80006a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80006a4:	005b      	lsls	r3, r3, #1
 80006a6:	b29b      	uxth	r3, r3
 80006a8:	3303      	adds	r3, #3
 80006aa:	b29b      	uxth	r3, r3
 80006ac:	4619      	mov	r1, r3
 80006ae:	69f8      	ldr	r0, [r7, #28]
 80006b0:	f7ff ff2a 	bl	8000508 <Modbus_CRC16>
 80006b4:	4603      	mov	r3, r0
 80006b6:	837b      	strh	r3, [r7, #26]
	 	  	  		response[3 + 2 * num_Reg] = crc2 & 0xFF; 					// CRC'nin düşük baytı
 80006b8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80006ba:	005b      	lsls	r3, r3, #1
 80006bc:	3303      	adds	r3, #3
 80006be:	8b7a      	ldrh	r2, [r7, #26]
 80006c0:	b2d1      	uxtb	r1, r2
 80006c2:	69fa      	ldr	r2, [r7, #28]
 80006c4:	54d1      	strb	r1, [r2, r3]
	 	  	  		response[4 + 2 * num_Reg] = (crc2 >> 8) & 0xFF; 			// CRC'nin yüksek baytı
 80006c6:	8b7b      	ldrh	r3, [r7, #26]
 80006c8:	0a1b      	lsrs	r3, r3, #8
 80006ca:	b29a      	uxth	r2, r3
 80006cc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80006ce:	3302      	adds	r3, #2
 80006d0:	005b      	lsls	r3, r3, #1
 80006d2:	b2d1      	uxtb	r1, r2
 80006d4:	69fa      	ldr	r2, [r7, #28]
 80006d6:	54d1      	strb	r1, [r2, r3]

	 	  	  		// Cevabı gönder
	 	  	  		int response_size = 3 + 2 * num_Reg + 2;
 80006d8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80006da:	005b      	lsls	r3, r3, #1
 80006dc:	3305      	adds	r3, #5
 80006de:	617b      	str	r3, [r7, #20]
	 	  	  		HAL_UART_Transmit(&huart2, response, response_size, 1000);
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	b29a      	uxth	r2, r3
 80006e4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006e8:	69f9      	ldr	r1, [r7, #28]
 80006ea:	4829      	ldr	r0, [pc, #164]	@ (8000790 <main+0x20c>)
 80006ec:	f002 f996 	bl	8002a1c <HAL_UART_Transmit>
 80006f0:	46b5      	mov	sp, r6
	 	  	  	  if((rxbuffer[0] == SLAVEID) && (rxbuffer[1]== 0x03)){ 		//EGER GIRILEN SLAVE ADRESI VE FONKSIYON SAGLANIYORSA
 80006f2:	e04a      	b.n	800078a <main+0x206>
	 	  	  	  }



	 	  	  	  else if ((rxbuffer[0]==SLAVEID) && (rxbuffer[1]==0x06)){  	// EĞER SLAVE ADRESİ VE FONKSİYON 0x06 İSE
 80006f4:	4b25      	ldr	r3, [pc, #148]	@ (800078c <main+0x208>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2b01      	cmp	r3, #1
 80006fa:	f47f af53 	bne.w	80005a4 <main+0x20>
 80006fe:	4b23      	ldr	r3, [pc, #140]	@ (800078c <main+0x208>)
 8000700:	785b      	ldrb	r3, [r3, #1]
 8000702:	2b06      	cmp	r3, #6
 8000704:	f47f af4e 	bne.w	80005a4 <main+0x20>
	 	  	  		{

	 	  	  		uint16_t address = (rxbuffer[2]<<8) | rxbuffer[3];
 8000708:	4b20      	ldr	r3, [pc, #128]	@ (800078c <main+0x208>)
 800070a:	789b      	ldrb	r3, [r3, #2]
 800070c:	021b      	lsls	r3, r3, #8
 800070e:	b21a      	sxth	r2, r3
 8000710:	4b1e      	ldr	r3, [pc, #120]	@ (800078c <main+0x208>)
 8000712:	78db      	ldrb	r3, [r3, #3]
 8000714:	b21b      	sxth	r3, r3
 8000716:	4313      	orrs	r3, r2
 8000718:	b21b      	sxth	r3, r3
 800071a:	827b      	strh	r3, [r7, #18]
	 	  	  		uint16_t value = ((rxbuffer[4]<<8) | rxbuffer[5]);
 800071c:	4b1b      	ldr	r3, [pc, #108]	@ (800078c <main+0x208>)
 800071e:	791b      	ldrb	r3, [r3, #4]
 8000720:	021b      	lsls	r3, r3, #8
 8000722:	b21a      	sxth	r2, r3
 8000724:	4b19      	ldr	r3, [pc, #100]	@ (800078c <main+0x208>)
 8000726:	795b      	ldrb	r3, [r3, #5]
 8000728:	b21b      	sxth	r3, r3
 800072a:	4313      	orrs	r3, r2
 800072c:	b21b      	sxth	r3, r3
 800072e:	823b      	strh	r3, [r7, #16]


	 	  	  		reg[address] = value;										// Register'a yazma
 8000730:	8a7b      	ldrh	r3, [r7, #18]
 8000732:	4918      	ldr	r1, [pc, #96]	@ (8000794 <main+0x210>)
 8000734:	8a3a      	ldrh	r2, [r7, #16]
 8000736:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]


	 	  	  		 uint8_t response[8];
	 	  	  		for (int i = 0; i < 6; i++) {								// Cevabı hazırlama
 800073a:	2300      	movs	r3, #0
 800073c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800073e:	e00b      	b.n	8000758 <main+0x1d4>
	 	  	  		response[i] = rxbuffer[i];
 8000740:	4a12      	ldr	r2, [pc, #72]	@ (800078c <main+0x208>)
 8000742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000744:	4413      	add	r3, r2
 8000746:	7819      	ldrb	r1, [r3, #0]
 8000748:	1d3a      	adds	r2, r7, #4
 800074a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800074c:	4413      	add	r3, r2
 800074e:	460a      	mov	r2, r1
 8000750:	701a      	strb	r2, [r3, #0]
	 	  	  		for (int i = 0; i < 6; i++) {								// Cevabı hazırlama
 8000752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000754:	3301      	adds	r3, #1
 8000756:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800075a:	2b05      	cmp	r3, #5
 800075c:	ddf0      	ble.n	8000740 <main+0x1bc>
	 	  	  		}


	 	  	  		uint16_t crc = Modbus_CRC16(response, 6);					// CRC hesaplama
 800075e:	1d3b      	adds	r3, r7, #4
 8000760:	2106      	movs	r1, #6
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff fed0 	bl	8000508 <Modbus_CRC16>
 8000768:	4603      	mov	r3, r0
 800076a:	81fb      	strh	r3, [r7, #14]
	 	  	  		response[6] = crc & 0xFF;
 800076c:	89fb      	ldrh	r3, [r7, #14]
 800076e:	b2db      	uxtb	r3, r3
 8000770:	72bb      	strb	r3, [r7, #10]
	 	  	  		response[7] = (crc >> 8) & 0xFF;
 8000772:	89fb      	ldrh	r3, [r7, #14]
 8000774:	0a1b      	lsrs	r3, r3, #8
 8000776:	b29b      	uxth	r3, r3
 8000778:	b2db      	uxtb	r3, r3
 800077a:	72fb      	strb	r3, [r7, #11]

	 	  	  		 // Cevabı gönder
	 	  	  		HAL_UART_Transmit(&huart2, response, 8, 1000);
 800077c:	1d39      	adds	r1, r7, #4
 800077e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000782:	2208      	movs	r2, #8
 8000784:	4802      	ldr	r0, [pc, #8]	@ (8000790 <main+0x20c>)
 8000786:	f002 f949 	bl	8002a1c <HAL_UART_Transmit>
	  HAL_UART_Receive(&huart2, rxbuffer, sizeof(rxbuffer), 1000); 				//MASTERDAN GELEN VERIYI AL
 800078a:	e70b      	b.n	80005a4 <main+0x20>
 800078c:	20000154 	.word	0x20000154
 8000790:	200000c0 	.word	0x200000c0
 8000794:	2000015c 	.word	0x2000015c

08000798 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b094      	sub	sp, #80	@ 0x50
 800079c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079e:	f107 0318 	add.w	r3, r7, #24
 80007a2:	2238      	movs	r2, #56	@ 0x38
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f003 f8ac 	bl	8003904 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
 80007b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80007ba:	2000      	movs	r0, #0
 80007bc:	f000 fd5a 	bl	8001274 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007c0:	2302      	movs	r3, #2
 80007c2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007c8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007ca:	2340      	movs	r3, #64	@ 0x40
 80007cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ce:	2302      	movs	r3, #2
 80007d0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007d2:	2302      	movs	r3, #2
 80007d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80007d6:	2304      	movs	r3, #4
 80007d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80007da:	2355      	movs	r3, #85	@ 0x55
 80007dc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007de:	2302      	movs	r3, #2
 80007e0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007e2:	2302      	movs	r3, #2
 80007e4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007e6:	2302      	movs	r3, #2
 80007e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ea:	f107 0318 	add.w	r3, r7, #24
 80007ee:	4618      	mov	r0, r3
 80007f0:	f000 fdf4 	bl	80013dc <HAL_RCC_OscConfig>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <SystemClock_Config+0x66>
  {
    Error_Handler();
 80007fa:	f000 f92b 	bl	8000a54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007fe:	230f      	movs	r3, #15
 8000800:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000802:	2303      	movs	r3, #3
 8000804:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000806:	2300      	movs	r3, #0
 8000808:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800080a:	2300      	movs	r3, #0
 800080c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800080e:	2300      	movs	r3, #0
 8000810:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	2104      	movs	r1, #4
 8000816:	4618      	mov	r0, r3
 8000818:	f001 f8f2 	bl	8001a00 <HAL_RCC_ClockConfig>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000822:	f000 f917 	bl	8000a54 <Error_Handler>
  }
}
 8000826:	bf00      	nop
 8000828:	3750      	adds	r7, #80	@ 0x50
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
	...

08000830 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b088      	sub	sp, #32
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000836:	f107 0310 	add.w	r3, r7, #16
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000844:	1d3b      	adds	r3, r7, #4
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800084e:	4b20      	ldr	r3, [pc, #128]	@ (80008d0 <MX_TIM1_Init+0xa0>)
 8000850:	4a20      	ldr	r2, [pc, #128]	@ (80008d4 <MX_TIM1_Init+0xa4>)
 8000852:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000854:	4b1e      	ldr	r3, [pc, #120]	@ (80008d0 <MX_TIM1_Init+0xa0>)
 8000856:	2200      	movs	r2, #0
 8000858:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800085a:	4b1d      	ldr	r3, [pc, #116]	@ (80008d0 <MX_TIM1_Init+0xa0>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000860:	4b1b      	ldr	r3, [pc, #108]	@ (80008d0 <MX_TIM1_Init+0xa0>)
 8000862:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000866:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000868:	4b19      	ldr	r3, [pc, #100]	@ (80008d0 <MX_TIM1_Init+0xa0>)
 800086a:	2200      	movs	r2, #0
 800086c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800086e:	4b18      	ldr	r3, [pc, #96]	@ (80008d0 <MX_TIM1_Init+0xa0>)
 8000870:	2200      	movs	r2, #0
 8000872:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000874:	4b16      	ldr	r3, [pc, #88]	@ (80008d0 <MX_TIM1_Init+0xa0>)
 8000876:	2200      	movs	r2, #0
 8000878:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800087a:	4815      	ldr	r0, [pc, #84]	@ (80008d0 <MX_TIM1_Init+0xa0>)
 800087c:	f001 fd2a 	bl	80022d4 <HAL_TIM_Base_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000886:	f000 f8e5 	bl	8000a54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800088a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800088e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000890:	f107 0310 	add.w	r3, r7, #16
 8000894:	4619      	mov	r1, r3
 8000896:	480e      	ldr	r0, [pc, #56]	@ (80008d0 <MX_TIM1_Init+0xa0>)
 8000898:	f001 fd74 	bl	8002384 <HAL_TIM_ConfigClockSource>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80008a2:	f000 f8d7 	bl	8000a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008a6:	2300      	movs	r3, #0
 80008a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008aa:	2300      	movs	r3, #0
 80008ac:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ae:	2300      	movs	r3, #0
 80008b0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008b2:	1d3b      	adds	r3, r7, #4
 80008b4:	4619      	mov	r1, r3
 80008b6:	4806      	ldr	r0, [pc, #24]	@ (80008d0 <MX_TIM1_Init+0xa0>)
 80008b8:	f001 ffca 	bl	8002850 <HAL_TIMEx_MasterConfigSynchronization>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80008c2:	f000 f8c7 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80008c6:	bf00      	nop
 80008c8:	3720      	adds	r7, #32
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	20000028 	.word	0x20000028
 80008d4:	40012c00 	.word	0x40012c00

080008d8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80008dc:	4b10      	ldr	r3, [pc, #64]	@ (8000920 <MX_TIM16_Init+0x48>)
 80008de:	4a11      	ldr	r2, [pc, #68]	@ (8000924 <MX_TIM16_Init+0x4c>)
 80008e0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 17000;
 80008e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000920 <MX_TIM16_Init+0x48>)
 80008e4:	f244 2268 	movw	r2, #17000	@ 0x4268
 80008e8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000920 <MX_TIM16_Init+0x48>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000;
 80008f0:	4b0b      	ldr	r3, [pc, #44]	@ (8000920 <MX_TIM16_Init+0x48>)
 80008f2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80008f6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008f8:	4b09      	ldr	r3, [pc, #36]	@ (8000920 <MX_TIM16_Init+0x48>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80008fe:	4b08      	ldr	r3, [pc, #32]	@ (8000920 <MX_TIM16_Init+0x48>)
 8000900:	2200      	movs	r2, #0
 8000902:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000904:	4b06      	ldr	r3, [pc, #24]	@ (8000920 <MX_TIM16_Init+0x48>)
 8000906:	2200      	movs	r2, #0
 8000908:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800090a:	4805      	ldr	r0, [pc, #20]	@ (8000920 <MX_TIM16_Init+0x48>)
 800090c:	f001 fce2 	bl	80022d4 <HAL_TIM_Base_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8000916:	f000 f89d 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20000074 	.word	0x20000074
 8000924:	40014400 	.word	0x40014400

08000928 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800092c:	4b22      	ldr	r3, [pc, #136]	@ (80009b8 <MX_USART2_UART_Init+0x90>)
 800092e:	4a23      	ldr	r2, [pc, #140]	@ (80009bc <MX_USART2_UART_Init+0x94>)
 8000930:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000932:	4b21      	ldr	r3, [pc, #132]	@ (80009b8 <MX_USART2_UART_Init+0x90>)
 8000934:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000938:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800093a:	4b1f      	ldr	r3, [pc, #124]	@ (80009b8 <MX_USART2_UART_Init+0x90>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000940:	4b1d      	ldr	r3, [pc, #116]	@ (80009b8 <MX_USART2_UART_Init+0x90>)
 8000942:	2200      	movs	r2, #0
 8000944:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000946:	4b1c      	ldr	r3, [pc, #112]	@ (80009b8 <MX_USART2_UART_Init+0x90>)
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800094c:	4b1a      	ldr	r3, [pc, #104]	@ (80009b8 <MX_USART2_UART_Init+0x90>)
 800094e:	220c      	movs	r2, #12
 8000950:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000952:	4b19      	ldr	r3, [pc, #100]	@ (80009b8 <MX_USART2_UART_Init+0x90>)
 8000954:	2200      	movs	r2, #0
 8000956:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000958:	4b17      	ldr	r3, [pc, #92]	@ (80009b8 <MX_USART2_UART_Init+0x90>)
 800095a:	2200      	movs	r2, #0
 800095c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800095e:	4b16      	ldr	r3, [pc, #88]	@ (80009b8 <MX_USART2_UART_Init+0x90>)
 8000960:	2200      	movs	r2, #0
 8000962:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000964:	4b14      	ldr	r3, [pc, #80]	@ (80009b8 <MX_USART2_UART_Init+0x90>)
 8000966:	2200      	movs	r2, #0
 8000968:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800096a:	4b13      	ldr	r3, [pc, #76]	@ (80009b8 <MX_USART2_UART_Init+0x90>)
 800096c:	2200      	movs	r2, #0
 800096e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000970:	4811      	ldr	r0, [pc, #68]	@ (80009b8 <MX_USART2_UART_Init+0x90>)
 8000972:	f002 f803 	bl	800297c <HAL_UART_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800097c:	f000 f86a 	bl	8000a54 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000980:	2100      	movs	r1, #0
 8000982:	480d      	ldr	r0, [pc, #52]	@ (80009b8 <MX_USART2_UART_Init+0x90>)
 8000984:	f002 fef4 	bl	8003770 <HAL_UARTEx_SetTxFifoThreshold>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800098e:	f000 f861 	bl	8000a54 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000992:	2100      	movs	r1, #0
 8000994:	4808      	ldr	r0, [pc, #32]	@ (80009b8 <MX_USART2_UART_Init+0x90>)
 8000996:	f002 ff29 	bl	80037ec <HAL_UARTEx_SetRxFifoThreshold>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80009a0:	f000 f858 	bl	8000a54 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80009a4:	4804      	ldr	r0, [pc, #16]	@ (80009b8 <MX_USART2_UART_Init+0x90>)
 80009a6:	f002 feaa 	bl	80036fe <HAL_UARTEx_DisableFifoMode>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80009b0:	f000 f850 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	200000c0 	.word	0x200000c0
 80009bc:	40004400 	.word	0x40004400

080009c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b088      	sub	sp, #32
 80009c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c6:	f107 030c 	add.w	r3, r7, #12
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	605a      	str	r2, [r3, #4]
 80009d0:	609a      	str	r2, [r3, #8]
 80009d2:	60da      	str	r2, [r3, #12]
 80009d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d6:	4b1e      	ldr	r3, [pc, #120]	@ (8000a50 <MX_GPIO_Init+0x90>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009da:	4a1d      	ldr	r2, [pc, #116]	@ (8000a50 <MX_GPIO_Init+0x90>)
 80009dc:	f043 0304 	orr.w	r3, r3, #4
 80009e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009e2:	4b1b      	ldr	r3, [pc, #108]	@ (8000a50 <MX_GPIO_Init+0x90>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e6:	f003 0304 	and.w	r3, r3, #4
 80009ea:	60bb      	str	r3, [r7, #8]
 80009ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009ee:	4b18      	ldr	r3, [pc, #96]	@ (8000a50 <MX_GPIO_Init+0x90>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f2:	4a17      	ldr	r2, [pc, #92]	@ (8000a50 <MX_GPIO_Init+0x90>)
 80009f4:	f043 0320 	orr.w	r3, r3, #32
 80009f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009fa:	4b15      	ldr	r3, [pc, #84]	@ (8000a50 <MX_GPIO_Init+0x90>)
 80009fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009fe:	f003 0320 	and.w	r3, r3, #32
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a06:	4b12      	ldr	r3, [pc, #72]	@ (8000a50 <MX_GPIO_Init+0x90>)
 8000a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a0a:	4a11      	ldr	r2, [pc, #68]	@ (8000a50 <MX_GPIO_Init+0x90>)
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a12:	4b0f      	ldr	r3, [pc, #60]	@ (8000a50 <MX_GPIO_Init+0x90>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	603b      	str	r3, [r7, #0]
 8000a1c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2120      	movs	r1, #32
 8000a22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a26:	f000 fc0d 	bl	8001244 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000a2a:	2320      	movs	r3, #32
 8000a2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a36:	2300      	movs	r3, #0
 8000a38:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3a:	f107 030c 	add.w	r3, r7, #12
 8000a3e:	4619      	mov	r1, r3
 8000a40:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a44:	f000 fa7c 	bl	8000f40 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a48:	bf00      	nop
 8000a4a:	3720      	adds	r7, #32
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40021000 	.word	0x40021000

08000a54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a58:	b672      	cpsid	i
}
 8000a5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a5c:	bf00      	nop
 8000a5e:	e7fd      	b.n	8000a5c <Error_Handler+0x8>

08000a60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a66:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa4 <HAL_MspInit+0x44>)
 8000a68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a6a:	4a0e      	ldr	r2, [pc, #56]	@ (8000aa4 <HAL_MspInit+0x44>)
 8000a6c:	f043 0301 	orr.w	r3, r3, #1
 8000a70:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a72:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa4 <HAL_MspInit+0x44>)
 8000a74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7e:	4b09      	ldr	r3, [pc, #36]	@ (8000aa4 <HAL_MspInit+0x44>)
 8000a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a82:	4a08      	ldr	r2, [pc, #32]	@ (8000aa4 <HAL_MspInit+0x44>)
 8000a84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a88:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a8a:	4b06      	ldr	r3, [pc, #24]	@ (8000aa4 <HAL_MspInit+0x44>)
 8000a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a92:	603b      	str	r3, [r7, #0]
 8000a94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000a96:	f000 fc91 	bl	80013bc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40021000 	.word	0x40021000

08000aa8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b085      	sub	sp, #20
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a13      	ldr	r2, [pc, #76]	@ (8000b04 <HAL_TIM_Base_MspInit+0x5c>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d10c      	bne.n	8000ad4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000aba:	4b13      	ldr	r3, [pc, #76]	@ (8000b08 <HAL_TIM_Base_MspInit+0x60>)
 8000abc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000abe:	4a12      	ldr	r2, [pc, #72]	@ (8000b08 <HAL_TIM_Base_MspInit+0x60>)
 8000ac0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000ac4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ac6:	4b10      	ldr	r3, [pc, #64]	@ (8000b08 <HAL_TIM_Base_MspInit+0x60>)
 8000ac8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000aca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000ad2:	e010      	b.n	8000af6 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM16)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a0c      	ldr	r2, [pc, #48]	@ (8000b0c <HAL_TIM_Base_MspInit+0x64>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d10b      	bne.n	8000af6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000ade:	4b0a      	ldr	r3, [pc, #40]	@ (8000b08 <HAL_TIM_Base_MspInit+0x60>)
 8000ae0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ae2:	4a09      	ldr	r2, [pc, #36]	@ (8000b08 <HAL_TIM_Base_MspInit+0x60>)
 8000ae4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ae8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000aea:	4b07      	ldr	r3, [pc, #28]	@ (8000b08 <HAL_TIM_Base_MspInit+0x60>)
 8000aec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000aee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000af2:	60bb      	str	r3, [r7, #8]
 8000af4:	68bb      	ldr	r3, [r7, #8]
}
 8000af6:	bf00      	nop
 8000af8:	3714      	adds	r7, #20
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	40012c00 	.word	0x40012c00
 8000b08:	40021000 	.word	0x40021000
 8000b0c:	40014400 	.word	0x40014400

08000b10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b09e      	sub	sp, #120	@ 0x78
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b18:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b28:	f107 0310 	add.w	r3, r7, #16
 8000b2c:	2254      	movs	r2, #84	@ 0x54
 8000b2e:	2100      	movs	r1, #0
 8000b30:	4618      	mov	r0, r3
 8000b32:	f002 fee7 	bl	8003904 <memset>
  if(huart->Instance==USART2)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a1f      	ldr	r2, [pc, #124]	@ (8000bb8 <HAL_UART_MspInit+0xa8>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d136      	bne.n	8000bae <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b40:	2302      	movs	r3, #2
 8000b42:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b44:	2300      	movs	r3, #0
 8000b46:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b48:	f107 0310 	add.w	r3, r7, #16
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f001 f973 	bl	8001e38 <HAL_RCCEx_PeriphCLKConfig>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b58:	f7ff ff7c 	bl	8000a54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b5c:	4b17      	ldr	r3, [pc, #92]	@ (8000bbc <HAL_UART_MspInit+0xac>)
 8000b5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b60:	4a16      	ldr	r2, [pc, #88]	@ (8000bbc <HAL_UART_MspInit+0xac>)
 8000b62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b66:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b68:	4b14      	ldr	r3, [pc, #80]	@ (8000bbc <HAL_UART_MspInit+0xac>)
 8000b6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b74:	4b11      	ldr	r3, [pc, #68]	@ (8000bbc <HAL_UART_MspInit+0xac>)
 8000b76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b78:	4a10      	ldr	r2, [pc, #64]	@ (8000bbc <HAL_UART_MspInit+0xac>)
 8000b7a:	f043 0301 	orr.w	r3, r3, #1
 8000b7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b80:	4b0e      	ldr	r3, [pc, #56]	@ (8000bbc <HAL_UART_MspInit+0xac>)
 8000b82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b84:	f003 0301 	and.w	r3, r3, #1
 8000b88:	60bb      	str	r3, [r7, #8]
 8000b8a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b8c:	230c      	movs	r3, #12
 8000b8e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b90:	2302      	movs	r3, #2
 8000b92:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b9c:	2307      	movs	r3, #7
 8000b9e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000baa:	f000 f9c9 	bl	8000f40 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000bae:	bf00      	nop
 8000bb0:	3778      	adds	r7, #120	@ 0x78
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40004400 	.word	0x40004400
 8000bbc:	40021000 	.word	0x40021000

08000bc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bc4:	bf00      	nop
 8000bc6:	e7fd      	b.n	8000bc4 <NMI_Handler+0x4>

08000bc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bcc:	bf00      	nop
 8000bce:	e7fd      	b.n	8000bcc <HardFault_Handler+0x4>

08000bd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd4:	bf00      	nop
 8000bd6:	e7fd      	b.n	8000bd4 <MemManage_Handler+0x4>

08000bd8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bdc:	bf00      	nop
 8000bde:	e7fd      	b.n	8000bdc <BusFault_Handler+0x4>

08000be0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be4:	bf00      	nop
 8000be6:	e7fd      	b.n	8000be4 <UsageFault_Handler+0x4>

08000be8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr

08000c12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c16:	f000 f891 	bl	8000d3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
	...

08000c20 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c24:	4b06      	ldr	r3, [pc, #24]	@ (8000c40 <SystemInit+0x20>)
 8000c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c2a:	4a05      	ldr	r2, [pc, #20]	@ (8000c40 <SystemInit+0x20>)
 8000c2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c44:	480d      	ldr	r0, [pc, #52]	@ (8000c7c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c46:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c48:	f7ff ffea 	bl	8000c20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c4c:	480c      	ldr	r0, [pc, #48]	@ (8000c80 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c4e:	490d      	ldr	r1, [pc, #52]	@ (8000c84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c50:	4a0d      	ldr	r2, [pc, #52]	@ (8000c88 <LoopForever+0xe>)
  movs r3, #0
 8000c52:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000c54:	e002      	b.n	8000c5c <LoopCopyDataInit>

08000c56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c5a:	3304      	adds	r3, #4

08000c5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c60:	d3f9      	bcc.n	8000c56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c62:	4a0a      	ldr	r2, [pc, #40]	@ (8000c8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c64:	4c0a      	ldr	r4, [pc, #40]	@ (8000c90 <LoopForever+0x16>)
  movs r3, #0
 8000c66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c68:	e001      	b.n	8000c6e <LoopFillZerobss>

08000c6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c6c:	3204      	adds	r2, #4

08000c6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c70:	d3fb      	bcc.n	8000c6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c72:	f002 fe4f 	bl	8003914 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c76:	f7ff fc85 	bl	8000584 <main>

08000c7a <LoopForever>:

LoopForever:
    b LoopForever
 8000c7a:	e7fe      	b.n	8000c7a <LoopForever>
  ldr   r0, =_estack
 8000c7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c84:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c88:	080039c4 	.word	0x080039c4
  ldr r2, =_sbss
 8000c8c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c90:	20000174 	.word	0x20000174

08000c94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c94:	e7fe      	b.n	8000c94 <ADC1_2_IRQHandler>

08000c96 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b082      	sub	sp, #8
 8000c9a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ca0:	2003      	movs	r0, #3
 8000ca2:	f000 f91b 	bl	8000edc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f000 f80e 	bl	8000cc8 <HAL_InitTick>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d002      	beq.n	8000cb8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	71fb      	strb	r3, [r7, #7]
 8000cb6:	e001      	b.n	8000cbc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cb8:	f7ff fed2 	bl	8000a60 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cbc:	79fb      	ldrb	r3, [r7, #7]

}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
	...

08000cc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000cd4:	4b16      	ldr	r3, [pc, #88]	@ (8000d30 <HAL_InitTick+0x68>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d022      	beq.n	8000d22 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000cdc:	4b15      	ldr	r3, [pc, #84]	@ (8000d34 <HAL_InitTick+0x6c>)
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	4b13      	ldr	r3, [pc, #76]	@ (8000d30 <HAL_InitTick+0x68>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000ce8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f000 f918 	bl	8000f26 <HAL_SYSTICK_Config>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d10f      	bne.n	8000d1c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2b0f      	cmp	r3, #15
 8000d00:	d809      	bhi.n	8000d16 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d02:	2200      	movs	r2, #0
 8000d04:	6879      	ldr	r1, [r7, #4]
 8000d06:	f04f 30ff 	mov.w	r0, #4294967295
 8000d0a:	f000 f8f2 	bl	8000ef2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d38 <HAL_InitTick+0x70>)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6013      	str	r3, [r2, #0]
 8000d14:	e007      	b.n	8000d26 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
 8000d18:	73fb      	strb	r3, [r7, #15]
 8000d1a:	e004      	b.n	8000d26 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	73fb      	strb	r3, [r7, #15]
 8000d20:	e001      	b.n	8000d26 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
 8000d24:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3710      	adds	r7, #16
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20000008 	.word	0x20000008
 8000d34:	20000000 	.word	0x20000000
 8000d38:	20000004 	.word	0x20000004

08000d3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d40:	4b05      	ldr	r3, [pc, #20]	@ (8000d58 <HAL_IncTick+0x1c>)
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	4b05      	ldr	r3, [pc, #20]	@ (8000d5c <HAL_IncTick+0x20>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4413      	add	r3, r2
 8000d4a:	4a03      	ldr	r2, [pc, #12]	@ (8000d58 <HAL_IncTick+0x1c>)
 8000d4c:	6013      	str	r3, [r2, #0]
}
 8000d4e:	bf00      	nop
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	20000170 	.word	0x20000170
 8000d5c:	20000008 	.word	0x20000008

08000d60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  return uwTick;
 8000d64:	4b03      	ldr	r3, [pc, #12]	@ (8000d74 <HAL_GetTick+0x14>)
 8000d66:	681b      	ldr	r3, [r3, #0]
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	20000170 	.word	0x20000170

08000d78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f003 0307 	and.w	r3, r3, #7
 8000d86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d88:	4b0c      	ldr	r3, [pc, #48]	@ (8000dbc <__NVIC_SetPriorityGrouping+0x44>)
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d8e:	68ba      	ldr	r2, [r7, #8]
 8000d90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d94:	4013      	ands	r3, r2
 8000d96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000da0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000da4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000da8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000daa:	4a04      	ldr	r2, [pc, #16]	@ (8000dbc <__NVIC_SetPriorityGrouping+0x44>)
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	60d3      	str	r3, [r2, #12]
}
 8000db0:	bf00      	nop
 8000db2:	3714      	adds	r7, #20
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dc4:	4b04      	ldr	r3, [pc, #16]	@ (8000dd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	0a1b      	lsrs	r3, r3, #8
 8000dca:	f003 0307 	and.w	r3, r3, #7
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	6039      	str	r1, [r7, #0]
 8000de6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	db0a      	blt.n	8000e06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	b2da      	uxtb	r2, r3
 8000df4:	490c      	ldr	r1, [pc, #48]	@ (8000e28 <__NVIC_SetPriority+0x4c>)
 8000df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfa:	0112      	lsls	r2, r2, #4
 8000dfc:	b2d2      	uxtb	r2, r2
 8000dfe:	440b      	add	r3, r1
 8000e00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e04:	e00a      	b.n	8000e1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	b2da      	uxtb	r2, r3
 8000e0a:	4908      	ldr	r1, [pc, #32]	@ (8000e2c <__NVIC_SetPriority+0x50>)
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	f003 030f 	and.w	r3, r3, #15
 8000e12:	3b04      	subs	r3, #4
 8000e14:	0112      	lsls	r2, r2, #4
 8000e16:	b2d2      	uxtb	r2, r2
 8000e18:	440b      	add	r3, r1
 8000e1a:	761a      	strb	r2, [r3, #24]
}
 8000e1c:	bf00      	nop
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	e000e100 	.word	0xe000e100
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b089      	sub	sp, #36	@ 0x24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	f003 0307 	and.w	r3, r3, #7
 8000e42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	f1c3 0307 	rsb	r3, r3, #7
 8000e4a:	2b04      	cmp	r3, #4
 8000e4c:	bf28      	it	cs
 8000e4e:	2304      	movcs	r3, #4
 8000e50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	3304      	adds	r3, #4
 8000e56:	2b06      	cmp	r3, #6
 8000e58:	d902      	bls.n	8000e60 <NVIC_EncodePriority+0x30>
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	3b03      	subs	r3, #3
 8000e5e:	e000      	b.n	8000e62 <NVIC_EncodePriority+0x32>
 8000e60:	2300      	movs	r3, #0
 8000e62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e64:	f04f 32ff 	mov.w	r2, #4294967295
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	43da      	mvns	r2, r3
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	401a      	ands	r2, r3
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e78:	f04f 31ff 	mov.w	r1, #4294967295
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e82:	43d9      	mvns	r1, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e88:	4313      	orrs	r3, r2
         );
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3724      	adds	r7, #36	@ 0x24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
	...

08000e98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ea8:	d301      	bcc.n	8000eae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e00f      	b.n	8000ece <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eae:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed8 <SysTick_Config+0x40>)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eb6:	210f      	movs	r1, #15
 8000eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ebc:	f7ff ff8e 	bl	8000ddc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ec0:	4b05      	ldr	r3, [pc, #20]	@ (8000ed8 <SysTick_Config+0x40>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ec6:	4b04      	ldr	r3, [pc, #16]	@ (8000ed8 <SysTick_Config+0x40>)
 8000ec8:	2207      	movs	r2, #7
 8000eca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ecc:	2300      	movs	r3, #0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	e000e010 	.word	0xe000e010

08000edc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f7ff ff47 	bl	8000d78 <__NVIC_SetPriorityGrouping>
}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b086      	sub	sp, #24
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	4603      	mov	r3, r0
 8000efa:	60b9      	str	r1, [r7, #8]
 8000efc:	607a      	str	r2, [r7, #4]
 8000efe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f00:	f7ff ff5e 	bl	8000dc0 <__NVIC_GetPriorityGrouping>
 8000f04:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f06:	687a      	ldr	r2, [r7, #4]
 8000f08:	68b9      	ldr	r1, [r7, #8]
 8000f0a:	6978      	ldr	r0, [r7, #20]
 8000f0c:	f7ff ff90 	bl	8000e30 <NVIC_EncodePriority>
 8000f10:	4602      	mov	r2, r0
 8000f12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f16:	4611      	mov	r1, r2
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff ff5f 	bl	8000ddc <__NVIC_SetPriority>
}
 8000f1e:	bf00      	nop
 8000f20:	3718      	adds	r7, #24
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b082      	sub	sp, #8
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f7ff ffb2 	bl	8000e98 <SysTick_Config>
 8000f34:	4603      	mov	r3, r0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
	...

08000f40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b087      	sub	sp, #28
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000f4e:	e15a      	b.n	8001206 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	2101      	movs	r1, #1
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	f000 814c 	beq.w	8001200 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f003 0303 	and.w	r3, r3, #3
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d005      	beq.n	8000f80 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f7c:	2b02      	cmp	r3, #2
 8000f7e:	d130      	bne.n	8000fe2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	2203      	movs	r2, #3
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	43db      	mvns	r3, r3
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	4013      	ands	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	68da      	ldr	r2, [r3, #12]
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	091b      	lsrs	r3, r3, #4
 8000fcc:	f003 0201 	and.w	r2, r3, #1
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f003 0303 	and.w	r3, r3, #3
 8000fea:	2b03      	cmp	r3, #3
 8000fec:	d017      	beq.n	800101e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	68db      	ldr	r3, [r3, #12]
 8000ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	2203      	movs	r2, #3
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	43db      	mvns	r3, r3
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	4013      	ands	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	689a      	ldr	r2, [r3, #8]
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	4313      	orrs	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f003 0303 	and.w	r3, r3, #3
 8001026:	2b02      	cmp	r3, #2
 8001028:	d123      	bne.n	8001072 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	08da      	lsrs	r2, r3, #3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	3208      	adds	r2, #8
 8001032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001036:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	f003 0307 	and.w	r3, r3, #7
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	220f      	movs	r2, #15
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	43db      	mvns	r3, r3
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	4013      	ands	r3, r2
 800104c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	691a      	ldr	r2, [r3, #16]
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	f003 0307 	and.w	r3, r3, #7
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	4313      	orrs	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	08da      	lsrs	r2, r3, #3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3208      	adds	r2, #8
 800106c:	6939      	ldr	r1, [r7, #16]
 800106e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	2203      	movs	r2, #3
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	43db      	mvns	r3, r3
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	4013      	ands	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f003 0203 	and.w	r2, r3, #3
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	4313      	orrs	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	f000 80a6 	beq.w	8001200 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b4:	4b5b      	ldr	r3, [pc, #364]	@ (8001224 <HAL_GPIO_Init+0x2e4>)
 80010b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010b8:	4a5a      	ldr	r2, [pc, #360]	@ (8001224 <HAL_GPIO_Init+0x2e4>)
 80010ba:	f043 0301 	orr.w	r3, r3, #1
 80010be:	6613      	str	r3, [r2, #96]	@ 0x60
 80010c0:	4b58      	ldr	r3, [pc, #352]	@ (8001224 <HAL_GPIO_Init+0x2e4>)
 80010c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010c4:	f003 0301 	and.w	r3, r3, #1
 80010c8:	60bb      	str	r3, [r7, #8]
 80010ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010cc:	4a56      	ldr	r2, [pc, #344]	@ (8001228 <HAL_GPIO_Init+0x2e8>)
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	089b      	lsrs	r3, r3, #2
 80010d2:	3302      	adds	r3, #2
 80010d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	f003 0303 	and.w	r3, r3, #3
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	220f      	movs	r2, #15
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	43db      	mvns	r3, r3
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	4013      	ands	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80010f6:	d01f      	beq.n	8001138 <HAL_GPIO_Init+0x1f8>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4a4c      	ldr	r2, [pc, #304]	@ (800122c <HAL_GPIO_Init+0x2ec>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d019      	beq.n	8001134 <HAL_GPIO_Init+0x1f4>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4a4b      	ldr	r2, [pc, #300]	@ (8001230 <HAL_GPIO_Init+0x2f0>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d013      	beq.n	8001130 <HAL_GPIO_Init+0x1f0>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4a4a      	ldr	r2, [pc, #296]	@ (8001234 <HAL_GPIO_Init+0x2f4>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d00d      	beq.n	800112c <HAL_GPIO_Init+0x1ec>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4a49      	ldr	r2, [pc, #292]	@ (8001238 <HAL_GPIO_Init+0x2f8>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d007      	beq.n	8001128 <HAL_GPIO_Init+0x1e8>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4a48      	ldr	r2, [pc, #288]	@ (800123c <HAL_GPIO_Init+0x2fc>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d101      	bne.n	8001124 <HAL_GPIO_Init+0x1e4>
 8001120:	2305      	movs	r3, #5
 8001122:	e00a      	b.n	800113a <HAL_GPIO_Init+0x1fa>
 8001124:	2306      	movs	r3, #6
 8001126:	e008      	b.n	800113a <HAL_GPIO_Init+0x1fa>
 8001128:	2304      	movs	r3, #4
 800112a:	e006      	b.n	800113a <HAL_GPIO_Init+0x1fa>
 800112c:	2303      	movs	r3, #3
 800112e:	e004      	b.n	800113a <HAL_GPIO_Init+0x1fa>
 8001130:	2302      	movs	r3, #2
 8001132:	e002      	b.n	800113a <HAL_GPIO_Init+0x1fa>
 8001134:	2301      	movs	r3, #1
 8001136:	e000      	b.n	800113a <HAL_GPIO_Init+0x1fa>
 8001138:	2300      	movs	r3, #0
 800113a:	697a      	ldr	r2, [r7, #20]
 800113c:	f002 0203 	and.w	r2, r2, #3
 8001140:	0092      	lsls	r2, r2, #2
 8001142:	4093      	lsls	r3, r2
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	4313      	orrs	r3, r2
 8001148:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800114a:	4937      	ldr	r1, [pc, #220]	@ (8001228 <HAL_GPIO_Init+0x2e8>)
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	089b      	lsrs	r3, r3, #2
 8001150:	3302      	adds	r3, #2
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001158:	4b39      	ldr	r3, [pc, #228]	@ (8001240 <HAL_GPIO_Init+0x300>)
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	43db      	mvns	r3, r3
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	4013      	ands	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001170:	2b00      	cmp	r3, #0
 8001172:	d003      	beq.n	800117c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	4313      	orrs	r3, r2
 800117a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800117c:	4a30      	ldr	r2, [pc, #192]	@ (8001240 <HAL_GPIO_Init+0x300>)
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001182:	4b2f      	ldr	r3, [pc, #188]	@ (8001240 <HAL_GPIO_Init+0x300>)
 8001184:	68db      	ldr	r3, [r3, #12]
 8001186:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	43db      	mvns	r3, r3
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	4013      	ands	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d003      	beq.n	80011a6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011a6:	4a26      	ldr	r2, [pc, #152]	@ (8001240 <HAL_GPIO_Init+0x300>)
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80011ac:	4b24      	ldr	r3, [pc, #144]	@ (8001240 <HAL_GPIO_Init+0x300>)
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	43db      	mvns	r3, r3
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	4013      	ands	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d003      	beq.n	80011d0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011d0:	4a1b      	ldr	r2, [pc, #108]	@ (8001240 <HAL_GPIO_Init+0x300>)
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80011d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001240 <HAL_GPIO_Init+0x300>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	43db      	mvns	r3, r3
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	4013      	ands	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d003      	beq.n	80011fa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011fa:	4a11      	ldr	r2, [pc, #68]	@ (8001240 <HAL_GPIO_Init+0x300>)
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	3301      	adds	r3, #1
 8001204:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	fa22 f303 	lsr.w	r3, r2, r3
 8001210:	2b00      	cmp	r3, #0
 8001212:	f47f ae9d 	bne.w	8000f50 <HAL_GPIO_Init+0x10>
  }
}
 8001216:	bf00      	nop
 8001218:	bf00      	nop
 800121a:	371c      	adds	r7, #28
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	40021000 	.word	0x40021000
 8001228:	40010000 	.word	0x40010000
 800122c:	48000400 	.word	0x48000400
 8001230:	48000800 	.word	0x48000800
 8001234:	48000c00 	.word	0x48000c00
 8001238:	48001000 	.word	0x48001000
 800123c:	48001400 	.word	0x48001400
 8001240:	40010400 	.word	0x40010400

08001244 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	460b      	mov	r3, r1
 800124e:	807b      	strh	r3, [r7, #2]
 8001250:	4613      	mov	r3, r2
 8001252:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001254:	787b      	ldrb	r3, [r7, #1]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d003      	beq.n	8001262 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800125a:	887a      	ldrh	r2, [r7, #2]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001260:	e002      	b.n	8001268 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001262:	887a      	ldrh	r2, [r7, #2]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001268:	bf00      	nop
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001274:	b480      	push	{r7}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d141      	bne.n	8001306 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001282:	4b4b      	ldr	r3, [pc, #300]	@ (80013b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800128a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800128e:	d131      	bne.n	80012f4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001290:	4b47      	ldr	r3, [pc, #284]	@ (80013b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001292:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001296:	4a46      	ldr	r2, [pc, #280]	@ (80013b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001298:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800129c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012a0:	4b43      	ldr	r3, [pc, #268]	@ (80013b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80012a8:	4a41      	ldr	r2, [pc, #260]	@ (80013b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012ae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012b0:	4b40      	ldr	r3, [pc, #256]	@ (80013b4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2232      	movs	r2, #50	@ 0x32
 80012b6:	fb02 f303 	mul.w	r3, r2, r3
 80012ba:	4a3f      	ldr	r2, [pc, #252]	@ (80013b8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80012bc:	fba2 2303 	umull	r2, r3, r2, r3
 80012c0:	0c9b      	lsrs	r3, r3, #18
 80012c2:	3301      	adds	r3, #1
 80012c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012c6:	e002      	b.n	80012ce <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	3b01      	subs	r3, #1
 80012cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012ce:	4b38      	ldr	r3, [pc, #224]	@ (80013b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012d0:	695b      	ldr	r3, [r3, #20]
 80012d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012da:	d102      	bne.n	80012e2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d1f2      	bne.n	80012c8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012e2:	4b33      	ldr	r3, [pc, #204]	@ (80013b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012e4:	695b      	ldr	r3, [r3, #20]
 80012e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012ee:	d158      	bne.n	80013a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80012f0:	2303      	movs	r3, #3
 80012f2:	e057      	b.n	80013a4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012f4:	4b2e      	ldr	r3, [pc, #184]	@ (80013b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80012fa:	4a2d      	ldr	r2, [pc, #180]	@ (80013b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001300:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001304:	e04d      	b.n	80013a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800130c:	d141      	bne.n	8001392 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800130e:	4b28      	ldr	r3, [pc, #160]	@ (80013b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001316:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800131a:	d131      	bne.n	8001380 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800131c:	4b24      	ldr	r3, [pc, #144]	@ (80013b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800131e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001322:	4a23      	ldr	r2, [pc, #140]	@ (80013b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001324:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001328:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800132c:	4b20      	ldr	r3, [pc, #128]	@ (80013b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001334:	4a1e      	ldr	r2, [pc, #120]	@ (80013b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001336:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800133a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800133c:	4b1d      	ldr	r3, [pc, #116]	@ (80013b4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2232      	movs	r2, #50	@ 0x32
 8001342:	fb02 f303 	mul.w	r3, r2, r3
 8001346:	4a1c      	ldr	r2, [pc, #112]	@ (80013b8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001348:	fba2 2303 	umull	r2, r3, r2, r3
 800134c:	0c9b      	lsrs	r3, r3, #18
 800134e:	3301      	adds	r3, #1
 8001350:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001352:	e002      	b.n	800135a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	3b01      	subs	r3, #1
 8001358:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800135a:	4b15      	ldr	r3, [pc, #84]	@ (80013b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001362:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001366:	d102      	bne.n	800136e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d1f2      	bne.n	8001354 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800136e:	4b10      	ldr	r3, [pc, #64]	@ (80013b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001370:	695b      	ldr	r3, [r3, #20]
 8001372:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001376:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800137a:	d112      	bne.n	80013a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e011      	b.n	80013a4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001380:	4b0b      	ldr	r3, [pc, #44]	@ (80013b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001382:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001386:	4a0a      	ldr	r2, [pc, #40]	@ (80013b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001388:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800138c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001390:	e007      	b.n	80013a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001392:	4b07      	ldr	r3, [pc, #28]	@ (80013b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800139a:	4a05      	ldr	r2, [pc, #20]	@ (80013b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800139c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013a0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80013a2:	2300      	movs	r3, #0
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3714      	adds	r7, #20
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	40007000 	.word	0x40007000
 80013b4:	20000000 	.word	0x20000000
 80013b8:	431bde83 	.word	0x431bde83

080013bc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80013c0:	4b05      	ldr	r3, [pc, #20]	@ (80013d8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	4a04      	ldr	r2, [pc, #16]	@ (80013d8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80013c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013ca:	6093      	str	r3, [r2, #8]
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	40007000 	.word	0x40007000

080013dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b088      	sub	sp, #32
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d101      	bne.n	80013ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e2fe      	b.n	80019ec <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d075      	beq.n	80014e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013fa:	4b97      	ldr	r3, [pc, #604]	@ (8001658 <HAL_RCC_OscConfig+0x27c>)
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	f003 030c 	and.w	r3, r3, #12
 8001402:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001404:	4b94      	ldr	r3, [pc, #592]	@ (8001658 <HAL_RCC_OscConfig+0x27c>)
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	f003 0303 	and.w	r3, r3, #3
 800140c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	2b0c      	cmp	r3, #12
 8001412:	d102      	bne.n	800141a <HAL_RCC_OscConfig+0x3e>
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	2b03      	cmp	r3, #3
 8001418:	d002      	beq.n	8001420 <HAL_RCC_OscConfig+0x44>
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	2b08      	cmp	r3, #8
 800141e:	d10b      	bne.n	8001438 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001420:	4b8d      	ldr	r3, [pc, #564]	@ (8001658 <HAL_RCC_OscConfig+0x27c>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d05b      	beq.n	80014e4 <HAL_RCC_OscConfig+0x108>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d157      	bne.n	80014e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e2d9      	b.n	80019ec <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001440:	d106      	bne.n	8001450 <HAL_RCC_OscConfig+0x74>
 8001442:	4b85      	ldr	r3, [pc, #532]	@ (8001658 <HAL_RCC_OscConfig+0x27c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a84      	ldr	r2, [pc, #528]	@ (8001658 <HAL_RCC_OscConfig+0x27c>)
 8001448:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800144c:	6013      	str	r3, [r2, #0]
 800144e:	e01d      	b.n	800148c <HAL_RCC_OscConfig+0xb0>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001458:	d10c      	bne.n	8001474 <HAL_RCC_OscConfig+0x98>
 800145a:	4b7f      	ldr	r3, [pc, #508]	@ (8001658 <HAL_RCC_OscConfig+0x27c>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a7e      	ldr	r2, [pc, #504]	@ (8001658 <HAL_RCC_OscConfig+0x27c>)
 8001460:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001464:	6013      	str	r3, [r2, #0]
 8001466:	4b7c      	ldr	r3, [pc, #496]	@ (8001658 <HAL_RCC_OscConfig+0x27c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a7b      	ldr	r2, [pc, #492]	@ (8001658 <HAL_RCC_OscConfig+0x27c>)
 800146c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001470:	6013      	str	r3, [r2, #0]
 8001472:	e00b      	b.n	800148c <HAL_RCC_OscConfig+0xb0>
 8001474:	4b78      	ldr	r3, [pc, #480]	@ (8001658 <HAL_RCC_OscConfig+0x27c>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a77      	ldr	r2, [pc, #476]	@ (8001658 <HAL_RCC_OscConfig+0x27c>)
 800147a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800147e:	6013      	str	r3, [r2, #0]
 8001480:	4b75      	ldr	r3, [pc, #468]	@ (8001658 <HAL_RCC_OscConfig+0x27c>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a74      	ldr	r2, [pc, #464]	@ (8001658 <HAL_RCC_OscConfig+0x27c>)
 8001486:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800148a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d013      	beq.n	80014bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001494:	f7ff fc64 	bl	8000d60 <HAL_GetTick>
 8001498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800149a:	e008      	b.n	80014ae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800149c:	f7ff fc60 	bl	8000d60 <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	2b64      	cmp	r3, #100	@ 0x64
 80014a8:	d901      	bls.n	80014ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e29e      	b.n	80019ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014ae:	4b6a      	ldr	r3, [pc, #424]	@ (8001658 <HAL_RCC_OscConfig+0x27c>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d0f0      	beq.n	800149c <HAL_RCC_OscConfig+0xc0>
 80014ba:	e014      	b.n	80014e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014bc:	f7ff fc50 	bl	8000d60 <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014c2:	e008      	b.n	80014d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014c4:	f7ff fc4c 	bl	8000d60 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b64      	cmp	r3, #100	@ 0x64
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e28a      	b.n	80019ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014d6:	4b60      	ldr	r3, [pc, #384]	@ (8001658 <HAL_RCC_OscConfig+0x27c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d1f0      	bne.n	80014c4 <HAL_RCC_OscConfig+0xe8>
 80014e2:	e000      	b.n	80014e6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d075      	beq.n	80015de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014f2:	4b59      	ldr	r3, [pc, #356]	@ (8001658 <HAL_RCC_OscConfig+0x27c>)
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f003 030c 	and.w	r3, r3, #12
 80014fa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014fc:	4b56      	ldr	r3, [pc, #344]	@ (8001658 <HAL_RCC_OscConfig+0x27c>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	f003 0303 	and.w	r3, r3, #3
 8001504:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	2b0c      	cmp	r3, #12
 800150a:	d102      	bne.n	8001512 <HAL_RCC_OscConfig+0x136>
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	2b02      	cmp	r3, #2
 8001510:	d002      	beq.n	8001518 <HAL_RCC_OscConfig+0x13c>
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	2b04      	cmp	r3, #4
 8001516:	d11f      	bne.n	8001558 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001518:	4b4f      	ldr	r3, [pc, #316]	@ (8001658 <HAL_RCC_OscConfig+0x27c>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001520:	2b00      	cmp	r3, #0
 8001522:	d005      	beq.n	8001530 <HAL_RCC_OscConfig+0x154>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d101      	bne.n	8001530 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e25d      	b.n	80019ec <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001530:	4b49      	ldr	r3, [pc, #292]	@ (8001658 <HAL_RCC_OscConfig+0x27c>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	691b      	ldr	r3, [r3, #16]
 800153c:	061b      	lsls	r3, r3, #24
 800153e:	4946      	ldr	r1, [pc, #280]	@ (8001658 <HAL_RCC_OscConfig+0x27c>)
 8001540:	4313      	orrs	r3, r2
 8001542:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001544:	4b45      	ldr	r3, [pc, #276]	@ (800165c <HAL_RCC_OscConfig+0x280>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff fbbd 	bl	8000cc8 <HAL_InitTick>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d043      	beq.n	80015dc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e249      	b.n	80019ec <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d023      	beq.n	80015a8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001560:	4b3d      	ldr	r3, [pc, #244]	@ (8001658 <HAL_RCC_OscConfig+0x27c>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a3c      	ldr	r2, [pc, #240]	@ (8001658 <HAL_RCC_OscConfig+0x27c>)
 8001566:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800156a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800156c:	f7ff fbf8 	bl	8000d60 <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001574:	f7ff fbf4 	bl	8000d60 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b02      	cmp	r3, #2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e232      	b.n	80019ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001586:	4b34      	ldr	r3, [pc, #208]	@ (8001658 <HAL_RCC_OscConfig+0x27c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800158e:	2b00      	cmp	r3, #0
 8001590:	d0f0      	beq.n	8001574 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001592:	4b31      	ldr	r3, [pc, #196]	@ (8001658 <HAL_RCC_OscConfig+0x27c>)
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	691b      	ldr	r3, [r3, #16]
 800159e:	061b      	lsls	r3, r3, #24
 80015a0:	492d      	ldr	r1, [pc, #180]	@ (8001658 <HAL_RCC_OscConfig+0x27c>)
 80015a2:	4313      	orrs	r3, r2
 80015a4:	604b      	str	r3, [r1, #4]
 80015a6:	e01a      	b.n	80015de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015a8:	4b2b      	ldr	r3, [pc, #172]	@ (8001658 <HAL_RCC_OscConfig+0x27c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a2a      	ldr	r2, [pc, #168]	@ (8001658 <HAL_RCC_OscConfig+0x27c>)
 80015ae:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80015b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b4:	f7ff fbd4 	bl	8000d60 <HAL_GetTick>
 80015b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015ba:	e008      	b.n	80015ce <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015bc:	f7ff fbd0 	bl	8000d60 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e20e      	b.n	80019ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015ce:	4b22      	ldr	r3, [pc, #136]	@ (8001658 <HAL_RCC_OscConfig+0x27c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d1f0      	bne.n	80015bc <HAL_RCC_OscConfig+0x1e0>
 80015da:	e000      	b.n	80015de <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015dc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0308 	and.w	r3, r3, #8
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d041      	beq.n	800166e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	695b      	ldr	r3, [r3, #20]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d01c      	beq.n	800162c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015f2:	4b19      	ldr	r3, [pc, #100]	@ (8001658 <HAL_RCC_OscConfig+0x27c>)
 80015f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015f8:	4a17      	ldr	r2, [pc, #92]	@ (8001658 <HAL_RCC_OscConfig+0x27c>)
 80015fa:	f043 0301 	orr.w	r3, r3, #1
 80015fe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001602:	f7ff fbad 	bl	8000d60 <HAL_GetTick>
 8001606:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001608:	e008      	b.n	800161c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800160a:	f7ff fba9 	bl	8000d60 <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	2b02      	cmp	r3, #2
 8001616:	d901      	bls.n	800161c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e1e7      	b.n	80019ec <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800161c:	4b0e      	ldr	r3, [pc, #56]	@ (8001658 <HAL_RCC_OscConfig+0x27c>)
 800161e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d0ef      	beq.n	800160a <HAL_RCC_OscConfig+0x22e>
 800162a:	e020      	b.n	800166e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800162c:	4b0a      	ldr	r3, [pc, #40]	@ (8001658 <HAL_RCC_OscConfig+0x27c>)
 800162e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001632:	4a09      	ldr	r2, [pc, #36]	@ (8001658 <HAL_RCC_OscConfig+0x27c>)
 8001634:	f023 0301 	bic.w	r3, r3, #1
 8001638:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800163c:	f7ff fb90 	bl	8000d60 <HAL_GetTick>
 8001640:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001642:	e00d      	b.n	8001660 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001644:	f7ff fb8c 	bl	8000d60 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b02      	cmp	r3, #2
 8001650:	d906      	bls.n	8001660 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e1ca      	b.n	80019ec <HAL_RCC_OscConfig+0x610>
 8001656:	bf00      	nop
 8001658:	40021000 	.word	0x40021000
 800165c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001660:	4b8c      	ldr	r3, [pc, #560]	@ (8001894 <HAL_RCC_OscConfig+0x4b8>)
 8001662:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1ea      	bne.n	8001644 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0304 	and.w	r3, r3, #4
 8001676:	2b00      	cmp	r3, #0
 8001678:	f000 80a6 	beq.w	80017c8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800167c:	2300      	movs	r3, #0
 800167e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001680:	4b84      	ldr	r3, [pc, #528]	@ (8001894 <HAL_RCC_OscConfig+0x4b8>)
 8001682:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001684:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d101      	bne.n	8001690 <HAL_RCC_OscConfig+0x2b4>
 800168c:	2301      	movs	r3, #1
 800168e:	e000      	b.n	8001692 <HAL_RCC_OscConfig+0x2b6>
 8001690:	2300      	movs	r3, #0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d00d      	beq.n	80016b2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001696:	4b7f      	ldr	r3, [pc, #508]	@ (8001894 <HAL_RCC_OscConfig+0x4b8>)
 8001698:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800169a:	4a7e      	ldr	r2, [pc, #504]	@ (8001894 <HAL_RCC_OscConfig+0x4b8>)
 800169c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80016a2:	4b7c      	ldr	r3, [pc, #496]	@ (8001894 <HAL_RCC_OscConfig+0x4b8>)
 80016a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80016ae:	2301      	movs	r3, #1
 80016b0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016b2:	4b79      	ldr	r3, [pc, #484]	@ (8001898 <HAL_RCC_OscConfig+0x4bc>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d118      	bne.n	80016f0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016be:	4b76      	ldr	r3, [pc, #472]	@ (8001898 <HAL_RCC_OscConfig+0x4bc>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a75      	ldr	r2, [pc, #468]	@ (8001898 <HAL_RCC_OscConfig+0x4bc>)
 80016c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016ca:	f7ff fb49 	bl	8000d60 <HAL_GetTick>
 80016ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016d0:	e008      	b.n	80016e4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016d2:	f7ff fb45 	bl	8000d60 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e183      	b.n	80019ec <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016e4:	4b6c      	ldr	r3, [pc, #432]	@ (8001898 <HAL_RCC_OscConfig+0x4bc>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d0f0      	beq.n	80016d2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d108      	bne.n	800170a <HAL_RCC_OscConfig+0x32e>
 80016f8:	4b66      	ldr	r3, [pc, #408]	@ (8001894 <HAL_RCC_OscConfig+0x4b8>)
 80016fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016fe:	4a65      	ldr	r2, [pc, #404]	@ (8001894 <HAL_RCC_OscConfig+0x4b8>)
 8001700:	f043 0301 	orr.w	r3, r3, #1
 8001704:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001708:	e024      	b.n	8001754 <HAL_RCC_OscConfig+0x378>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	2b05      	cmp	r3, #5
 8001710:	d110      	bne.n	8001734 <HAL_RCC_OscConfig+0x358>
 8001712:	4b60      	ldr	r3, [pc, #384]	@ (8001894 <HAL_RCC_OscConfig+0x4b8>)
 8001714:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001718:	4a5e      	ldr	r2, [pc, #376]	@ (8001894 <HAL_RCC_OscConfig+0x4b8>)
 800171a:	f043 0304 	orr.w	r3, r3, #4
 800171e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001722:	4b5c      	ldr	r3, [pc, #368]	@ (8001894 <HAL_RCC_OscConfig+0x4b8>)
 8001724:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001728:	4a5a      	ldr	r2, [pc, #360]	@ (8001894 <HAL_RCC_OscConfig+0x4b8>)
 800172a:	f043 0301 	orr.w	r3, r3, #1
 800172e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001732:	e00f      	b.n	8001754 <HAL_RCC_OscConfig+0x378>
 8001734:	4b57      	ldr	r3, [pc, #348]	@ (8001894 <HAL_RCC_OscConfig+0x4b8>)
 8001736:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800173a:	4a56      	ldr	r2, [pc, #344]	@ (8001894 <HAL_RCC_OscConfig+0x4b8>)
 800173c:	f023 0301 	bic.w	r3, r3, #1
 8001740:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001744:	4b53      	ldr	r3, [pc, #332]	@ (8001894 <HAL_RCC_OscConfig+0x4b8>)
 8001746:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800174a:	4a52      	ldr	r2, [pc, #328]	@ (8001894 <HAL_RCC_OscConfig+0x4b8>)
 800174c:	f023 0304 	bic.w	r3, r3, #4
 8001750:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d016      	beq.n	800178a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800175c:	f7ff fb00 	bl	8000d60 <HAL_GetTick>
 8001760:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001762:	e00a      	b.n	800177a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001764:	f7ff fafc 	bl	8000d60 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001772:	4293      	cmp	r3, r2
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e138      	b.n	80019ec <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800177a:	4b46      	ldr	r3, [pc, #280]	@ (8001894 <HAL_RCC_OscConfig+0x4b8>)
 800177c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d0ed      	beq.n	8001764 <HAL_RCC_OscConfig+0x388>
 8001788:	e015      	b.n	80017b6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800178a:	f7ff fae9 	bl	8000d60 <HAL_GetTick>
 800178e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001790:	e00a      	b.n	80017a8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001792:	f7ff fae5 	bl	8000d60 <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d901      	bls.n	80017a8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e121      	b.n	80019ec <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017a8:	4b3a      	ldr	r3, [pc, #232]	@ (8001894 <HAL_RCC_OscConfig+0x4b8>)
 80017aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1ed      	bne.n	8001792 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80017b6:	7ffb      	ldrb	r3, [r7, #31]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d105      	bne.n	80017c8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017bc:	4b35      	ldr	r3, [pc, #212]	@ (8001894 <HAL_RCC_OscConfig+0x4b8>)
 80017be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017c0:	4a34      	ldr	r2, [pc, #208]	@ (8001894 <HAL_RCC_OscConfig+0x4b8>)
 80017c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017c6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0320 	and.w	r3, r3, #32
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d03c      	beq.n	800184e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d01c      	beq.n	8001816 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80017dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001894 <HAL_RCC_OscConfig+0x4b8>)
 80017de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80017e2:	4a2c      	ldr	r2, [pc, #176]	@ (8001894 <HAL_RCC_OscConfig+0x4b8>)
 80017e4:	f043 0301 	orr.w	r3, r3, #1
 80017e8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ec:	f7ff fab8 	bl	8000d60 <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017f4:	f7ff fab4 	bl	8000d60 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e0f2      	b.n	80019ec <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001806:	4b23      	ldr	r3, [pc, #140]	@ (8001894 <HAL_RCC_OscConfig+0x4b8>)
 8001808:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800180c:	f003 0302 	and.w	r3, r3, #2
 8001810:	2b00      	cmp	r3, #0
 8001812:	d0ef      	beq.n	80017f4 <HAL_RCC_OscConfig+0x418>
 8001814:	e01b      	b.n	800184e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001816:	4b1f      	ldr	r3, [pc, #124]	@ (8001894 <HAL_RCC_OscConfig+0x4b8>)
 8001818:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800181c:	4a1d      	ldr	r2, [pc, #116]	@ (8001894 <HAL_RCC_OscConfig+0x4b8>)
 800181e:	f023 0301 	bic.w	r3, r3, #1
 8001822:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001826:	f7ff fa9b 	bl	8000d60 <HAL_GetTick>
 800182a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800182c:	e008      	b.n	8001840 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800182e:	f7ff fa97 	bl	8000d60 <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	2b02      	cmp	r3, #2
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e0d5      	b.n	80019ec <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001840:	4b14      	ldr	r3, [pc, #80]	@ (8001894 <HAL_RCC_OscConfig+0x4b8>)
 8001842:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1ef      	bne.n	800182e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	69db      	ldr	r3, [r3, #28]
 8001852:	2b00      	cmp	r3, #0
 8001854:	f000 80c9 	beq.w	80019ea <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001858:	4b0e      	ldr	r3, [pc, #56]	@ (8001894 <HAL_RCC_OscConfig+0x4b8>)
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	f003 030c 	and.w	r3, r3, #12
 8001860:	2b0c      	cmp	r3, #12
 8001862:	f000 8083 	beq.w	800196c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	69db      	ldr	r3, [r3, #28]
 800186a:	2b02      	cmp	r3, #2
 800186c:	d15e      	bne.n	800192c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800186e:	4b09      	ldr	r3, [pc, #36]	@ (8001894 <HAL_RCC_OscConfig+0x4b8>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a08      	ldr	r2, [pc, #32]	@ (8001894 <HAL_RCC_OscConfig+0x4b8>)
 8001874:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001878:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800187a:	f7ff fa71 	bl	8000d60 <HAL_GetTick>
 800187e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001880:	e00c      	b.n	800189c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001882:	f7ff fa6d 	bl	8000d60 <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d905      	bls.n	800189c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e0ab      	b.n	80019ec <HAL_RCC_OscConfig+0x610>
 8001894:	40021000 	.word	0x40021000
 8001898:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800189c:	4b55      	ldr	r3, [pc, #340]	@ (80019f4 <HAL_RCC_OscConfig+0x618>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d1ec      	bne.n	8001882 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018a8:	4b52      	ldr	r3, [pc, #328]	@ (80019f4 <HAL_RCC_OscConfig+0x618>)
 80018aa:	68da      	ldr	r2, [r3, #12]
 80018ac:	4b52      	ldr	r3, [pc, #328]	@ (80019f8 <HAL_RCC_OscConfig+0x61c>)
 80018ae:	4013      	ands	r3, r2
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	6a11      	ldr	r1, [r2, #32]
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80018b8:	3a01      	subs	r2, #1
 80018ba:	0112      	lsls	r2, r2, #4
 80018bc:	4311      	orrs	r1, r2
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80018c2:	0212      	lsls	r2, r2, #8
 80018c4:	4311      	orrs	r1, r2
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80018ca:	0852      	lsrs	r2, r2, #1
 80018cc:	3a01      	subs	r2, #1
 80018ce:	0552      	lsls	r2, r2, #21
 80018d0:	4311      	orrs	r1, r2
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80018d6:	0852      	lsrs	r2, r2, #1
 80018d8:	3a01      	subs	r2, #1
 80018da:	0652      	lsls	r2, r2, #25
 80018dc:	4311      	orrs	r1, r2
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80018e2:	06d2      	lsls	r2, r2, #27
 80018e4:	430a      	orrs	r2, r1
 80018e6:	4943      	ldr	r1, [pc, #268]	@ (80019f4 <HAL_RCC_OscConfig+0x618>)
 80018e8:	4313      	orrs	r3, r2
 80018ea:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018ec:	4b41      	ldr	r3, [pc, #260]	@ (80019f4 <HAL_RCC_OscConfig+0x618>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a40      	ldr	r2, [pc, #256]	@ (80019f4 <HAL_RCC_OscConfig+0x618>)
 80018f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018f6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018f8:	4b3e      	ldr	r3, [pc, #248]	@ (80019f4 <HAL_RCC_OscConfig+0x618>)
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	4a3d      	ldr	r2, [pc, #244]	@ (80019f4 <HAL_RCC_OscConfig+0x618>)
 80018fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001902:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001904:	f7ff fa2c 	bl	8000d60 <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800190c:	f7ff fa28 	bl	8000d60 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e066      	b.n	80019ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800191e:	4b35      	ldr	r3, [pc, #212]	@ (80019f4 <HAL_RCC_OscConfig+0x618>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d0f0      	beq.n	800190c <HAL_RCC_OscConfig+0x530>
 800192a:	e05e      	b.n	80019ea <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800192c:	4b31      	ldr	r3, [pc, #196]	@ (80019f4 <HAL_RCC_OscConfig+0x618>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a30      	ldr	r2, [pc, #192]	@ (80019f4 <HAL_RCC_OscConfig+0x618>)
 8001932:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001936:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001938:	f7ff fa12 	bl	8000d60 <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800193e:	e008      	b.n	8001952 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001940:	f7ff fa0e 	bl	8000d60 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b02      	cmp	r3, #2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e04c      	b.n	80019ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001952:	4b28      	ldr	r3, [pc, #160]	@ (80019f4 <HAL_RCC_OscConfig+0x618>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d1f0      	bne.n	8001940 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800195e:	4b25      	ldr	r3, [pc, #148]	@ (80019f4 <HAL_RCC_OscConfig+0x618>)
 8001960:	68da      	ldr	r2, [r3, #12]
 8001962:	4924      	ldr	r1, [pc, #144]	@ (80019f4 <HAL_RCC_OscConfig+0x618>)
 8001964:	4b25      	ldr	r3, [pc, #148]	@ (80019fc <HAL_RCC_OscConfig+0x620>)
 8001966:	4013      	ands	r3, r2
 8001968:	60cb      	str	r3, [r1, #12]
 800196a:	e03e      	b.n	80019ea <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	69db      	ldr	r3, [r3, #28]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d101      	bne.n	8001978 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e039      	b.n	80019ec <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001978:	4b1e      	ldr	r3, [pc, #120]	@ (80019f4 <HAL_RCC_OscConfig+0x618>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	f003 0203 	and.w	r2, r3, #3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a1b      	ldr	r3, [r3, #32]
 8001988:	429a      	cmp	r2, r3
 800198a:	d12c      	bne.n	80019e6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001996:	3b01      	subs	r3, #1
 8001998:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800199a:	429a      	cmp	r2, r3
 800199c:	d123      	bne.n	80019e6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019a8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d11b      	bne.n	80019e6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019b8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d113      	bne.n	80019e6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c8:	085b      	lsrs	r3, r3, #1
 80019ca:	3b01      	subs	r3, #1
 80019cc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d109      	bne.n	80019e6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019dc:	085b      	lsrs	r3, r3, #1
 80019de:	3b01      	subs	r3, #1
 80019e0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d001      	beq.n	80019ea <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e000      	b.n	80019ec <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3720      	adds	r7, #32
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40021000 	.word	0x40021000
 80019f8:	019f800c 	.word	0x019f800c
 80019fc:	feeefffc 	.word	0xfeeefffc

08001a00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d101      	bne.n	8001a18 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e11e      	b.n	8001c56 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a18:	4b91      	ldr	r3, [pc, #580]	@ (8001c60 <HAL_RCC_ClockConfig+0x260>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 030f 	and.w	r3, r3, #15
 8001a20:	683a      	ldr	r2, [r7, #0]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d910      	bls.n	8001a48 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a26:	4b8e      	ldr	r3, [pc, #568]	@ (8001c60 <HAL_RCC_ClockConfig+0x260>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f023 020f 	bic.w	r2, r3, #15
 8001a2e:	498c      	ldr	r1, [pc, #560]	@ (8001c60 <HAL_RCC_ClockConfig+0x260>)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a36:	4b8a      	ldr	r3, [pc, #552]	@ (8001c60 <HAL_RCC_ClockConfig+0x260>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 030f 	and.w	r3, r3, #15
 8001a3e:	683a      	ldr	r2, [r7, #0]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d001      	beq.n	8001a48 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e106      	b.n	8001c56 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0301 	and.w	r3, r3, #1
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d073      	beq.n	8001b3c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	2b03      	cmp	r3, #3
 8001a5a:	d129      	bne.n	8001ab0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a5c:	4b81      	ldr	r3, [pc, #516]	@ (8001c64 <HAL_RCC_ClockConfig+0x264>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d101      	bne.n	8001a6c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e0f4      	b.n	8001c56 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001a6c:	f000 f99e 	bl	8001dac <RCC_GetSysClockFreqFromPLLSource>
 8001a70:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	4a7c      	ldr	r2, [pc, #496]	@ (8001c68 <HAL_RCC_ClockConfig+0x268>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d93f      	bls.n	8001afa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001a7a:	4b7a      	ldr	r3, [pc, #488]	@ (8001c64 <HAL_RCC_ClockConfig+0x264>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d009      	beq.n	8001a9a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d033      	beq.n	8001afa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d12f      	bne.n	8001afa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001a9a:	4b72      	ldr	r3, [pc, #456]	@ (8001c64 <HAL_RCC_ClockConfig+0x264>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001aa2:	4a70      	ldr	r2, [pc, #448]	@ (8001c64 <HAL_RCC_ClockConfig+0x264>)
 8001aa4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001aa8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001aaa:	2380      	movs	r3, #128	@ 0x80
 8001aac:	617b      	str	r3, [r7, #20]
 8001aae:	e024      	b.n	8001afa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d107      	bne.n	8001ac8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ab8:	4b6a      	ldr	r3, [pc, #424]	@ (8001c64 <HAL_RCC_ClockConfig+0x264>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d109      	bne.n	8001ad8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e0c6      	b.n	8001c56 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ac8:	4b66      	ldr	r3, [pc, #408]	@ (8001c64 <HAL_RCC_ClockConfig+0x264>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d101      	bne.n	8001ad8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e0be      	b.n	8001c56 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001ad8:	f000 f8ce 	bl	8001c78 <HAL_RCC_GetSysClockFreq>
 8001adc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	4a61      	ldr	r2, [pc, #388]	@ (8001c68 <HAL_RCC_ClockConfig+0x268>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d909      	bls.n	8001afa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001ae6:	4b5f      	ldr	r3, [pc, #380]	@ (8001c64 <HAL_RCC_ClockConfig+0x264>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001aee:	4a5d      	ldr	r2, [pc, #372]	@ (8001c64 <HAL_RCC_ClockConfig+0x264>)
 8001af0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001af4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001af6:	2380      	movs	r3, #128	@ 0x80
 8001af8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001afa:	4b5a      	ldr	r3, [pc, #360]	@ (8001c64 <HAL_RCC_ClockConfig+0x264>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f023 0203 	bic.w	r2, r3, #3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	4957      	ldr	r1, [pc, #348]	@ (8001c64 <HAL_RCC_ClockConfig+0x264>)
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b0c:	f7ff f928 	bl	8000d60 <HAL_GetTick>
 8001b10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b12:	e00a      	b.n	8001b2a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b14:	f7ff f924 	bl	8000d60 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e095      	b.n	8001c56 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b2a:	4b4e      	ldr	r3, [pc, #312]	@ (8001c64 <HAL_RCC_ClockConfig+0x264>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f003 020c 	and.w	r2, r3, #12
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d1eb      	bne.n	8001b14 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0302 	and.w	r3, r3, #2
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d023      	beq.n	8001b90 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0304 	and.w	r3, r3, #4
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d005      	beq.n	8001b60 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b54:	4b43      	ldr	r3, [pc, #268]	@ (8001c64 <HAL_RCC_ClockConfig+0x264>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	4a42      	ldr	r2, [pc, #264]	@ (8001c64 <HAL_RCC_ClockConfig+0x264>)
 8001b5a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001b5e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0308 	and.w	r3, r3, #8
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d007      	beq.n	8001b7c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001b6c:	4b3d      	ldr	r3, [pc, #244]	@ (8001c64 <HAL_RCC_ClockConfig+0x264>)
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001b74:	4a3b      	ldr	r2, [pc, #236]	@ (8001c64 <HAL_RCC_ClockConfig+0x264>)
 8001b76:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001b7a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b7c:	4b39      	ldr	r3, [pc, #228]	@ (8001c64 <HAL_RCC_ClockConfig+0x264>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	4936      	ldr	r1, [pc, #216]	@ (8001c64 <HAL_RCC_ClockConfig+0x264>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	608b      	str	r3, [r1, #8]
 8001b8e:	e008      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	2b80      	cmp	r3, #128	@ 0x80
 8001b94:	d105      	bne.n	8001ba2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001b96:	4b33      	ldr	r3, [pc, #204]	@ (8001c64 <HAL_RCC_ClockConfig+0x264>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	4a32      	ldr	r2, [pc, #200]	@ (8001c64 <HAL_RCC_ClockConfig+0x264>)
 8001b9c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001ba0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ba2:	4b2f      	ldr	r3, [pc, #188]	@ (8001c60 <HAL_RCC_ClockConfig+0x260>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 030f 	and.w	r3, r3, #15
 8001baa:	683a      	ldr	r2, [r7, #0]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d21d      	bcs.n	8001bec <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bb0:	4b2b      	ldr	r3, [pc, #172]	@ (8001c60 <HAL_RCC_ClockConfig+0x260>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f023 020f 	bic.w	r2, r3, #15
 8001bb8:	4929      	ldr	r1, [pc, #164]	@ (8001c60 <HAL_RCC_ClockConfig+0x260>)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001bc0:	f7ff f8ce 	bl	8000d60 <HAL_GetTick>
 8001bc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bc6:	e00a      	b.n	8001bde <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bc8:	f7ff f8ca 	bl	8000d60 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e03b      	b.n	8001c56 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bde:	4b20      	ldr	r3, [pc, #128]	@ (8001c60 <HAL_RCC_ClockConfig+0x260>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 030f 	and.w	r3, r3, #15
 8001be6:	683a      	ldr	r2, [r7, #0]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d1ed      	bne.n	8001bc8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0304 	and.w	r3, r3, #4
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d008      	beq.n	8001c0a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bf8:	4b1a      	ldr	r3, [pc, #104]	@ (8001c64 <HAL_RCC_ClockConfig+0x264>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	4917      	ldr	r1, [pc, #92]	@ (8001c64 <HAL_RCC_ClockConfig+0x264>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0308 	and.w	r3, r3, #8
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d009      	beq.n	8001c2a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c16:	4b13      	ldr	r3, [pc, #76]	@ (8001c64 <HAL_RCC_ClockConfig+0x264>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	490f      	ldr	r1, [pc, #60]	@ (8001c64 <HAL_RCC_ClockConfig+0x264>)
 8001c26:	4313      	orrs	r3, r2
 8001c28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c2a:	f000 f825 	bl	8001c78 <HAL_RCC_GetSysClockFreq>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	4b0c      	ldr	r3, [pc, #48]	@ (8001c64 <HAL_RCC_ClockConfig+0x264>)
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	091b      	lsrs	r3, r3, #4
 8001c36:	f003 030f 	and.w	r3, r3, #15
 8001c3a:	490c      	ldr	r1, [pc, #48]	@ (8001c6c <HAL_RCC_ClockConfig+0x26c>)
 8001c3c:	5ccb      	ldrb	r3, [r1, r3]
 8001c3e:	f003 031f 	and.w	r3, r3, #31
 8001c42:	fa22 f303 	lsr.w	r3, r2, r3
 8001c46:	4a0a      	ldr	r2, [pc, #40]	@ (8001c70 <HAL_RCC_ClockConfig+0x270>)
 8001c48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c74 <HAL_RCC_ClockConfig+0x274>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7ff f83a 	bl	8000cc8 <HAL_InitTick>
 8001c54:	4603      	mov	r3, r0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3718      	adds	r7, #24
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40022000 	.word	0x40022000
 8001c64:	40021000 	.word	0x40021000
 8001c68:	04c4b400 	.word	0x04c4b400
 8001c6c:	08003974 	.word	0x08003974
 8001c70:	20000000 	.word	0x20000000
 8001c74:	20000004 	.word	0x20000004

08001c78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b087      	sub	sp, #28
 8001c7c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001c7e:	4b2c      	ldr	r3, [pc, #176]	@ (8001d30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 030c 	and.w	r3, r3, #12
 8001c86:	2b04      	cmp	r3, #4
 8001c88:	d102      	bne.n	8001c90 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c8a:	4b2a      	ldr	r3, [pc, #168]	@ (8001d34 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c8c:	613b      	str	r3, [r7, #16]
 8001c8e:	e047      	b.n	8001d20 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001c90:	4b27      	ldr	r3, [pc, #156]	@ (8001d30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f003 030c 	and.w	r3, r3, #12
 8001c98:	2b08      	cmp	r3, #8
 8001c9a:	d102      	bne.n	8001ca2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c9c:	4b26      	ldr	r3, [pc, #152]	@ (8001d38 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c9e:	613b      	str	r3, [r7, #16]
 8001ca0:	e03e      	b.n	8001d20 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001ca2:	4b23      	ldr	r3, [pc, #140]	@ (8001d30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f003 030c 	and.w	r3, r3, #12
 8001caa:	2b0c      	cmp	r3, #12
 8001cac:	d136      	bne.n	8001d1c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cae:	4b20      	ldr	r3, [pc, #128]	@ (8001d30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	f003 0303 	and.w	r3, r3, #3
 8001cb6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cb8:	4b1d      	ldr	r3, [pc, #116]	@ (8001d30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	091b      	lsrs	r3, r3, #4
 8001cbe:	f003 030f 	and.w	r3, r3, #15
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2b03      	cmp	r3, #3
 8001cca:	d10c      	bne.n	8001ce6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ccc:	4a1a      	ldr	r2, [pc, #104]	@ (8001d38 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd4:	4a16      	ldr	r2, [pc, #88]	@ (8001d30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cd6:	68d2      	ldr	r2, [r2, #12]
 8001cd8:	0a12      	lsrs	r2, r2, #8
 8001cda:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001cde:	fb02 f303 	mul.w	r3, r2, r3
 8001ce2:	617b      	str	r3, [r7, #20]
      break;
 8001ce4:	e00c      	b.n	8001d00 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ce6:	4a13      	ldr	r2, [pc, #76]	@ (8001d34 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cee:	4a10      	ldr	r2, [pc, #64]	@ (8001d30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cf0:	68d2      	ldr	r2, [r2, #12]
 8001cf2:	0a12      	lsrs	r2, r2, #8
 8001cf4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001cf8:	fb02 f303 	mul.w	r3, r2, r3
 8001cfc:	617b      	str	r3, [r7, #20]
      break;
 8001cfe:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d00:	4b0b      	ldr	r3, [pc, #44]	@ (8001d30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	0e5b      	lsrs	r3, r3, #25
 8001d06:	f003 0303 	and.w	r3, r3, #3
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001d10:	697a      	ldr	r2, [r7, #20]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d18:	613b      	str	r3, [r7, #16]
 8001d1a:	e001      	b.n	8001d20 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001d20:	693b      	ldr	r3, [r7, #16]
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	371c      	adds	r7, #28
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	40021000 	.word	0x40021000
 8001d34:	00f42400 	.word	0x00f42400
 8001d38:	016e3600 	.word	0x016e3600

08001d3c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d40:	4b03      	ldr	r3, [pc, #12]	@ (8001d50 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d42:	681b      	ldr	r3, [r3, #0]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	20000000 	.word	0x20000000

08001d54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d58:	f7ff fff0 	bl	8001d3c <HAL_RCC_GetHCLKFreq>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	4b06      	ldr	r3, [pc, #24]	@ (8001d78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	0a1b      	lsrs	r3, r3, #8
 8001d64:	f003 0307 	and.w	r3, r3, #7
 8001d68:	4904      	ldr	r1, [pc, #16]	@ (8001d7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d6a:	5ccb      	ldrb	r3, [r1, r3]
 8001d6c:	f003 031f 	and.w	r3, r3, #31
 8001d70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	08003984 	.word	0x08003984

08001d80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d84:	f7ff ffda 	bl	8001d3c <HAL_RCC_GetHCLKFreq>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	4b06      	ldr	r3, [pc, #24]	@ (8001da4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	0adb      	lsrs	r3, r3, #11
 8001d90:	f003 0307 	and.w	r3, r3, #7
 8001d94:	4904      	ldr	r1, [pc, #16]	@ (8001da8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d96:	5ccb      	ldrb	r3, [r1, r3]
 8001d98:	f003 031f 	and.w	r3, r3, #31
 8001d9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	40021000 	.word	0x40021000
 8001da8:	08003984 	.word	0x08003984

08001dac <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b087      	sub	sp, #28
 8001db0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001db2:	4b1e      	ldr	r3, [pc, #120]	@ (8001e2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	f003 0303 	and.w	r3, r3, #3
 8001dba:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001dbc:	4b1b      	ldr	r3, [pc, #108]	@ (8001e2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	091b      	lsrs	r3, r3, #4
 8001dc2:	f003 030f 	and.w	r3, r3, #15
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	2b03      	cmp	r3, #3
 8001dce:	d10c      	bne.n	8001dea <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001dd0:	4a17      	ldr	r2, [pc, #92]	@ (8001e30 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd8:	4a14      	ldr	r2, [pc, #80]	@ (8001e2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001dda:	68d2      	ldr	r2, [r2, #12]
 8001ddc:	0a12      	lsrs	r2, r2, #8
 8001dde:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001de2:	fb02 f303 	mul.w	r3, r2, r3
 8001de6:	617b      	str	r3, [r7, #20]
    break;
 8001de8:	e00c      	b.n	8001e04 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001dea:	4a12      	ldr	r2, [pc, #72]	@ (8001e34 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df2:	4a0e      	ldr	r2, [pc, #56]	@ (8001e2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001df4:	68d2      	ldr	r2, [r2, #12]
 8001df6:	0a12      	lsrs	r2, r2, #8
 8001df8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001dfc:	fb02 f303 	mul.w	r3, r2, r3
 8001e00:	617b      	str	r3, [r7, #20]
    break;
 8001e02:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e04:	4b09      	ldr	r3, [pc, #36]	@ (8001e2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	0e5b      	lsrs	r3, r3, #25
 8001e0a:	f003 0303 	and.w	r3, r3, #3
 8001e0e:	3301      	adds	r3, #1
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001e14:	697a      	ldr	r2, [r7, #20]
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e1c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001e1e:	687b      	ldr	r3, [r7, #4]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	371c      	adds	r7, #28
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	016e3600 	.word	0x016e3600
 8001e34:	00f42400 	.word	0x00f42400

08001e38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e40:	2300      	movs	r3, #0
 8001e42:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e44:	2300      	movs	r3, #0
 8001e46:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	f000 8098 	beq.w	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e56:	2300      	movs	r3, #0
 8001e58:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e5a:	4b43      	ldr	r3, [pc, #268]	@ (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d10d      	bne.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e66:	4b40      	ldr	r3, [pc, #256]	@ (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e6a:	4a3f      	ldr	r2, [pc, #252]	@ (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e70:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e72:	4b3d      	ldr	r3, [pc, #244]	@ (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e7a:	60bb      	str	r3, [r7, #8]
 8001e7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e82:	4b3a      	ldr	r3, [pc, #232]	@ (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a39      	ldr	r2, [pc, #228]	@ (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001e88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e8c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e8e:	f7fe ff67 	bl	8000d60 <HAL_GetTick>
 8001e92:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e94:	e009      	b.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e96:	f7fe ff63 	bl	8000d60 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d902      	bls.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	74fb      	strb	r3, [r7, #19]
        break;
 8001ea8:	e005      	b.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001eaa:	4b30      	ldr	r3, [pc, #192]	@ (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d0ef      	beq.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001eb6:	7cfb      	ldrb	r3, [r7, #19]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d159      	bne.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001ebc:	4b2a      	ldr	r3, [pc, #168]	@ (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ec2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ec6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d01e      	beq.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ed2:	697a      	ldr	r2, [r7, #20]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d019      	beq.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001ed8:	4b23      	ldr	r3, [pc, #140]	@ (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ede:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ee2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001ee4:	4b20      	ldr	r3, [pc, #128]	@ (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eea:	4a1f      	ldr	r2, [pc, #124]	@ (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001eec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ef0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001ef4:	4b1c      	ldr	r3, [pc, #112]	@ (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001efa:	4a1b      	ldr	r2, [pc, #108]	@ (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001efc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f04:	4a18      	ldr	r2, [pc, #96]	@ (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d016      	beq.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f16:	f7fe ff23 	bl	8000d60 <HAL_GetTick>
 8001f1a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f1c:	e00b      	b.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f1e:	f7fe ff1f 	bl	8000d60 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d902      	bls.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	74fb      	strb	r3, [r7, #19]
            break;
 8001f34:	e006      	b.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f36:	4b0c      	ldr	r3, [pc, #48]	@ (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d0ec      	beq.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001f44:	7cfb      	ldrb	r3, [r7, #19]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d10b      	bne.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f4a:	4b07      	ldr	r3, [pc, #28]	@ (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f50:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f58:	4903      	ldr	r1, [pc, #12]	@ (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001f60:	e008      	b.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f62:	7cfb      	ldrb	r3, [r7, #19]
 8001f64:	74bb      	strb	r3, [r7, #18]
 8001f66:	e005      	b.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f70:	7cfb      	ldrb	r3, [r7, #19]
 8001f72:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f74:	7c7b      	ldrb	r3, [r7, #17]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d105      	bne.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f7a:	4ba7      	ldr	r3, [pc, #668]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f7e:	4aa6      	ldr	r2, [pc, #664]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f84:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d00a      	beq.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f92:	4ba1      	ldr	r3, [pc, #644]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f98:	f023 0203 	bic.w	r2, r3, #3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	499d      	ldr	r1, [pc, #628]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d00a      	beq.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001fb4:	4b98      	ldr	r3, [pc, #608]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fba:	f023 020c 	bic.w	r2, r3, #12
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	4995      	ldr	r1, [pc, #596]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0304 	and.w	r3, r3, #4
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d00a      	beq.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001fd6:	4b90      	ldr	r3, [pc, #576]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fdc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	498c      	ldr	r1, [pc, #560]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0308 	and.w	r3, r3, #8
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d00a      	beq.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001ff8:	4b87      	ldr	r3, [pc, #540]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ffe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	4984      	ldr	r1, [pc, #528]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002008:	4313      	orrs	r3, r2
 800200a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0310 	and.w	r3, r3, #16
 8002016:	2b00      	cmp	r3, #0
 8002018:	d00a      	beq.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800201a:	4b7f      	ldr	r3, [pc, #508]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800201c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002020:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	695b      	ldr	r3, [r3, #20]
 8002028:	497b      	ldr	r1, [pc, #492]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800202a:	4313      	orrs	r3, r2
 800202c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0320 	and.w	r3, r3, #32
 8002038:	2b00      	cmp	r3, #0
 800203a:	d00a      	beq.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800203c:	4b76      	ldr	r3, [pc, #472]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800203e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002042:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	4973      	ldr	r1, [pc, #460]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800204c:	4313      	orrs	r3, r2
 800204e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800205a:	2b00      	cmp	r3, #0
 800205c:	d00a      	beq.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800205e:	4b6e      	ldr	r3, [pc, #440]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002060:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002064:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	69db      	ldr	r3, [r3, #28]
 800206c:	496a      	ldr	r1, [pc, #424]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800206e:	4313      	orrs	r3, r2
 8002070:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800207c:	2b00      	cmp	r3, #0
 800207e:	d00a      	beq.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002080:	4b65      	ldr	r3, [pc, #404]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002082:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002086:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a1b      	ldr	r3, [r3, #32]
 800208e:	4962      	ldr	r1, [pc, #392]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002090:	4313      	orrs	r3, r2
 8002092:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d00a      	beq.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80020a2:	4b5d      	ldr	r3, [pc, #372]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020a8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b0:	4959      	ldr	r1, [pc, #356]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d00a      	beq.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80020c4:	4b54      	ldr	r3, [pc, #336]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80020ca:	f023 0203 	bic.w	r2, r3, #3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020d2:	4951      	ldr	r1, [pc, #324]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020d4:	4313      	orrs	r3, r2
 80020d6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d00a      	beq.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80020e6:	4b4c      	ldr	r3, [pc, #304]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020ec:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020f4:	4948      	ldr	r1, [pc, #288]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002104:	2b00      	cmp	r3, #0
 8002106:	d015      	beq.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002108:	4b43      	ldr	r3, [pc, #268]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800210a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800210e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002116:	4940      	ldr	r1, [pc, #256]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002118:	4313      	orrs	r3, r2
 800211a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002122:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002126:	d105      	bne.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002128:	4b3b      	ldr	r3, [pc, #236]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	4a3a      	ldr	r2, [pc, #232]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800212e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002132:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800213c:	2b00      	cmp	r3, #0
 800213e:	d015      	beq.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002140:	4b35      	ldr	r3, [pc, #212]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002142:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002146:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800214e:	4932      	ldr	r1, [pc, #200]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002150:	4313      	orrs	r3, r2
 8002152:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800215a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800215e:	d105      	bne.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002160:	4b2d      	ldr	r3, [pc, #180]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	4a2c      	ldr	r2, [pc, #176]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002166:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800216a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d015      	beq.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002178:	4b27      	ldr	r3, [pc, #156]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800217a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800217e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002186:	4924      	ldr	r1, [pc, #144]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002188:	4313      	orrs	r3, r2
 800218a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002192:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002196:	d105      	bne.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002198:	4b1f      	ldr	r3, [pc, #124]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	4a1e      	ldr	r2, [pc, #120]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800219e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021a2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d015      	beq.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021b0:	4b19      	ldr	r3, [pc, #100]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021b6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021be:	4916      	ldr	r1, [pc, #88]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80021ce:	d105      	bne.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021d0:	4b11      	ldr	r3, [pc, #68]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	4a10      	ldr	r2, [pc, #64]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021da:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d019      	beq.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80021e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f6:	4908      	ldr	r1, [pc, #32]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002202:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002206:	d109      	bne.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002208:	4b03      	ldr	r3, [pc, #12]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	4a02      	ldr	r2, [pc, #8]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800220e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002212:	60d3      	str	r3, [r2, #12]
 8002214:	e002      	b.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002216:	bf00      	nop
 8002218:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d015      	beq.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002228:	4b29      	ldr	r3, [pc, #164]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800222a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800222e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002236:	4926      	ldr	r1, [pc, #152]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002238:	4313      	orrs	r3, r2
 800223a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002242:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002246:	d105      	bne.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002248:	4b21      	ldr	r3, [pc, #132]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	4a20      	ldr	r2, [pc, #128]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800224e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002252:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d015      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002260:	4b1b      	ldr	r3, [pc, #108]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002262:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002266:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800226e:	4918      	ldr	r1, [pc, #96]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002270:	4313      	orrs	r3, r2
 8002272:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800227a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800227e:	d105      	bne.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002280:	4b13      	ldr	r3, [pc, #76]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	4a12      	ldr	r2, [pc, #72]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002286:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800228a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d015      	beq.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002298:	4b0d      	ldr	r3, [pc, #52]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800229a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800229e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022a6:	490a      	ldr	r1, [pc, #40]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80022b6:	d105      	bne.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022b8:	4b05      	ldr	r3, [pc, #20]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	4a04      	ldr	r2, [pc, #16]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022c2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80022c4:	7cbb      	ldrb	r3, [r7, #18]
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3718      	adds	r7, #24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	40021000 	.word	0x40021000

080022d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e049      	b.n	800237a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d106      	bne.n	8002300 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f7fe fbd4 	bl	8000aa8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2202      	movs	r2, #2
 8002304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	3304      	adds	r3, #4
 8002310:	4619      	mov	r1, r3
 8002312:	4610      	mov	r0, r2
 8002314:	f000 f94c 	bl	80025b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
	...

08002384 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800238e:	2300      	movs	r3, #0
 8002390:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002398:	2b01      	cmp	r3, #1
 800239a:	d101      	bne.n	80023a0 <HAL_TIM_ConfigClockSource+0x1c>
 800239c:	2302      	movs	r3, #2
 800239e:	e0f6      	b.n	800258e <HAL_TIM_ConfigClockSource+0x20a>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2202      	movs	r2, #2
 80023ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80023be:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80023c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80023ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	68ba      	ldr	r2, [r7, #8]
 80023d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a6f      	ldr	r2, [pc, #444]	@ (8002598 <HAL_TIM_ConfigClockSource+0x214>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	f000 80c1 	beq.w	8002562 <HAL_TIM_ConfigClockSource+0x1de>
 80023e0:	4a6d      	ldr	r2, [pc, #436]	@ (8002598 <HAL_TIM_ConfigClockSource+0x214>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	f200 80c6 	bhi.w	8002574 <HAL_TIM_ConfigClockSource+0x1f0>
 80023e8:	4a6c      	ldr	r2, [pc, #432]	@ (800259c <HAL_TIM_ConfigClockSource+0x218>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	f000 80b9 	beq.w	8002562 <HAL_TIM_ConfigClockSource+0x1de>
 80023f0:	4a6a      	ldr	r2, [pc, #424]	@ (800259c <HAL_TIM_ConfigClockSource+0x218>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	f200 80be 	bhi.w	8002574 <HAL_TIM_ConfigClockSource+0x1f0>
 80023f8:	4a69      	ldr	r2, [pc, #420]	@ (80025a0 <HAL_TIM_ConfigClockSource+0x21c>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	f000 80b1 	beq.w	8002562 <HAL_TIM_ConfigClockSource+0x1de>
 8002400:	4a67      	ldr	r2, [pc, #412]	@ (80025a0 <HAL_TIM_ConfigClockSource+0x21c>)
 8002402:	4293      	cmp	r3, r2
 8002404:	f200 80b6 	bhi.w	8002574 <HAL_TIM_ConfigClockSource+0x1f0>
 8002408:	4a66      	ldr	r2, [pc, #408]	@ (80025a4 <HAL_TIM_ConfigClockSource+0x220>)
 800240a:	4293      	cmp	r3, r2
 800240c:	f000 80a9 	beq.w	8002562 <HAL_TIM_ConfigClockSource+0x1de>
 8002410:	4a64      	ldr	r2, [pc, #400]	@ (80025a4 <HAL_TIM_ConfigClockSource+0x220>)
 8002412:	4293      	cmp	r3, r2
 8002414:	f200 80ae 	bhi.w	8002574 <HAL_TIM_ConfigClockSource+0x1f0>
 8002418:	4a63      	ldr	r2, [pc, #396]	@ (80025a8 <HAL_TIM_ConfigClockSource+0x224>)
 800241a:	4293      	cmp	r3, r2
 800241c:	f000 80a1 	beq.w	8002562 <HAL_TIM_ConfigClockSource+0x1de>
 8002420:	4a61      	ldr	r2, [pc, #388]	@ (80025a8 <HAL_TIM_ConfigClockSource+0x224>)
 8002422:	4293      	cmp	r3, r2
 8002424:	f200 80a6 	bhi.w	8002574 <HAL_TIM_ConfigClockSource+0x1f0>
 8002428:	4a60      	ldr	r2, [pc, #384]	@ (80025ac <HAL_TIM_ConfigClockSource+0x228>)
 800242a:	4293      	cmp	r3, r2
 800242c:	f000 8099 	beq.w	8002562 <HAL_TIM_ConfigClockSource+0x1de>
 8002430:	4a5e      	ldr	r2, [pc, #376]	@ (80025ac <HAL_TIM_ConfigClockSource+0x228>)
 8002432:	4293      	cmp	r3, r2
 8002434:	f200 809e 	bhi.w	8002574 <HAL_TIM_ConfigClockSource+0x1f0>
 8002438:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800243c:	f000 8091 	beq.w	8002562 <HAL_TIM_ConfigClockSource+0x1de>
 8002440:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8002444:	f200 8096 	bhi.w	8002574 <HAL_TIM_ConfigClockSource+0x1f0>
 8002448:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800244c:	f000 8089 	beq.w	8002562 <HAL_TIM_ConfigClockSource+0x1de>
 8002450:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002454:	f200 808e 	bhi.w	8002574 <HAL_TIM_ConfigClockSource+0x1f0>
 8002458:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800245c:	d03e      	beq.n	80024dc <HAL_TIM_ConfigClockSource+0x158>
 800245e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002462:	f200 8087 	bhi.w	8002574 <HAL_TIM_ConfigClockSource+0x1f0>
 8002466:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800246a:	f000 8086 	beq.w	800257a <HAL_TIM_ConfigClockSource+0x1f6>
 800246e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002472:	d87f      	bhi.n	8002574 <HAL_TIM_ConfigClockSource+0x1f0>
 8002474:	2b70      	cmp	r3, #112	@ 0x70
 8002476:	d01a      	beq.n	80024ae <HAL_TIM_ConfigClockSource+0x12a>
 8002478:	2b70      	cmp	r3, #112	@ 0x70
 800247a:	d87b      	bhi.n	8002574 <HAL_TIM_ConfigClockSource+0x1f0>
 800247c:	2b60      	cmp	r3, #96	@ 0x60
 800247e:	d050      	beq.n	8002522 <HAL_TIM_ConfigClockSource+0x19e>
 8002480:	2b60      	cmp	r3, #96	@ 0x60
 8002482:	d877      	bhi.n	8002574 <HAL_TIM_ConfigClockSource+0x1f0>
 8002484:	2b50      	cmp	r3, #80	@ 0x50
 8002486:	d03c      	beq.n	8002502 <HAL_TIM_ConfigClockSource+0x17e>
 8002488:	2b50      	cmp	r3, #80	@ 0x50
 800248a:	d873      	bhi.n	8002574 <HAL_TIM_ConfigClockSource+0x1f0>
 800248c:	2b40      	cmp	r3, #64	@ 0x40
 800248e:	d058      	beq.n	8002542 <HAL_TIM_ConfigClockSource+0x1be>
 8002490:	2b40      	cmp	r3, #64	@ 0x40
 8002492:	d86f      	bhi.n	8002574 <HAL_TIM_ConfigClockSource+0x1f0>
 8002494:	2b30      	cmp	r3, #48	@ 0x30
 8002496:	d064      	beq.n	8002562 <HAL_TIM_ConfigClockSource+0x1de>
 8002498:	2b30      	cmp	r3, #48	@ 0x30
 800249a:	d86b      	bhi.n	8002574 <HAL_TIM_ConfigClockSource+0x1f0>
 800249c:	2b20      	cmp	r3, #32
 800249e:	d060      	beq.n	8002562 <HAL_TIM_ConfigClockSource+0x1de>
 80024a0:	2b20      	cmp	r3, #32
 80024a2:	d867      	bhi.n	8002574 <HAL_TIM_ConfigClockSource+0x1f0>
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d05c      	beq.n	8002562 <HAL_TIM_ConfigClockSource+0x1de>
 80024a8:	2b10      	cmp	r3, #16
 80024aa:	d05a      	beq.n	8002562 <HAL_TIM_ConfigClockSource+0x1de>
 80024ac:	e062      	b.n	8002574 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80024be:	f000 f9a7 	bl	8002810 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80024d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68ba      	ldr	r2, [r7, #8]
 80024d8:	609a      	str	r2, [r3, #8]
      break;
 80024da:	e04f      	b.n	800257c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80024ec:	f000 f990 	bl	8002810 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	689a      	ldr	r2, [r3, #8]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80024fe:	609a      	str	r2, [r3, #8]
      break;
 8002500:	e03c      	b.n	800257c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800250e:	461a      	mov	r2, r3
 8002510:	f000 f902 	bl	8002718 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2150      	movs	r1, #80	@ 0x50
 800251a:	4618      	mov	r0, r3
 800251c:	f000 f95b 	bl	80027d6 <TIM_ITRx_SetConfig>
      break;
 8002520:	e02c      	b.n	800257c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800252e:	461a      	mov	r2, r3
 8002530:	f000 f921 	bl	8002776 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2160      	movs	r1, #96	@ 0x60
 800253a:	4618      	mov	r0, r3
 800253c:	f000 f94b 	bl	80027d6 <TIM_ITRx_SetConfig>
      break;
 8002540:	e01c      	b.n	800257c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800254e:	461a      	mov	r2, r3
 8002550:	f000 f8e2 	bl	8002718 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2140      	movs	r1, #64	@ 0x40
 800255a:	4618      	mov	r0, r3
 800255c:	f000 f93b 	bl	80027d6 <TIM_ITRx_SetConfig>
      break;
 8002560:	e00c      	b.n	800257c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4619      	mov	r1, r3
 800256c:	4610      	mov	r0, r2
 800256e:	f000 f932 	bl	80027d6 <TIM_ITRx_SetConfig>
      break;
 8002572:	e003      	b.n	800257c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	73fb      	strb	r3, [r7, #15]
      break;
 8002578:	e000      	b.n	800257c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800257a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800258c:	7bfb      	ldrb	r3, [r7, #15]
}
 800258e:	4618      	mov	r0, r3
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	00100070 	.word	0x00100070
 800259c:	00100060 	.word	0x00100060
 80025a0:	00100050 	.word	0x00100050
 80025a4:	00100040 	.word	0x00100040
 80025a8:	00100030 	.word	0x00100030
 80025ac:	00100020 	.word	0x00100020

080025b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4a4c      	ldr	r2, [pc, #304]	@ (80026f4 <TIM_Base_SetConfig+0x144>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d017      	beq.n	80025f8 <TIM_Base_SetConfig+0x48>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025ce:	d013      	beq.n	80025f8 <TIM_Base_SetConfig+0x48>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4a49      	ldr	r2, [pc, #292]	@ (80026f8 <TIM_Base_SetConfig+0x148>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d00f      	beq.n	80025f8 <TIM_Base_SetConfig+0x48>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4a48      	ldr	r2, [pc, #288]	@ (80026fc <TIM_Base_SetConfig+0x14c>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d00b      	beq.n	80025f8 <TIM_Base_SetConfig+0x48>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4a47      	ldr	r2, [pc, #284]	@ (8002700 <TIM_Base_SetConfig+0x150>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d007      	beq.n	80025f8 <TIM_Base_SetConfig+0x48>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	4a46      	ldr	r2, [pc, #280]	@ (8002704 <TIM_Base_SetConfig+0x154>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d003      	beq.n	80025f8 <TIM_Base_SetConfig+0x48>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4a45      	ldr	r2, [pc, #276]	@ (8002708 <TIM_Base_SetConfig+0x158>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d108      	bne.n	800260a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	68fa      	ldr	r2, [r7, #12]
 8002606:	4313      	orrs	r3, r2
 8002608:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a39      	ldr	r2, [pc, #228]	@ (80026f4 <TIM_Base_SetConfig+0x144>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d023      	beq.n	800265a <TIM_Base_SetConfig+0xaa>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002618:	d01f      	beq.n	800265a <TIM_Base_SetConfig+0xaa>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a36      	ldr	r2, [pc, #216]	@ (80026f8 <TIM_Base_SetConfig+0x148>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d01b      	beq.n	800265a <TIM_Base_SetConfig+0xaa>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a35      	ldr	r2, [pc, #212]	@ (80026fc <TIM_Base_SetConfig+0x14c>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d017      	beq.n	800265a <TIM_Base_SetConfig+0xaa>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a34      	ldr	r2, [pc, #208]	@ (8002700 <TIM_Base_SetConfig+0x150>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d013      	beq.n	800265a <TIM_Base_SetConfig+0xaa>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a33      	ldr	r2, [pc, #204]	@ (8002704 <TIM_Base_SetConfig+0x154>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d00f      	beq.n	800265a <TIM_Base_SetConfig+0xaa>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a33      	ldr	r2, [pc, #204]	@ (800270c <TIM_Base_SetConfig+0x15c>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d00b      	beq.n	800265a <TIM_Base_SetConfig+0xaa>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a32      	ldr	r2, [pc, #200]	@ (8002710 <TIM_Base_SetConfig+0x160>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d007      	beq.n	800265a <TIM_Base_SetConfig+0xaa>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a31      	ldr	r2, [pc, #196]	@ (8002714 <TIM_Base_SetConfig+0x164>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d003      	beq.n	800265a <TIM_Base_SetConfig+0xaa>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a2c      	ldr	r2, [pc, #176]	@ (8002708 <TIM_Base_SetConfig+0x158>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d108      	bne.n	800266c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002660:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	4313      	orrs	r3, r2
 800266a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	4313      	orrs	r3, r2
 8002678:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	68fa      	ldr	r2, [r7, #12]
 800267e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	689a      	ldr	r2, [r3, #8]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4a18      	ldr	r2, [pc, #96]	@ (80026f4 <TIM_Base_SetConfig+0x144>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d013      	beq.n	80026c0 <TIM_Base_SetConfig+0x110>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4a1a      	ldr	r2, [pc, #104]	@ (8002704 <TIM_Base_SetConfig+0x154>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d00f      	beq.n	80026c0 <TIM_Base_SetConfig+0x110>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a1a      	ldr	r2, [pc, #104]	@ (800270c <TIM_Base_SetConfig+0x15c>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d00b      	beq.n	80026c0 <TIM_Base_SetConfig+0x110>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4a19      	ldr	r2, [pc, #100]	@ (8002710 <TIM_Base_SetConfig+0x160>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d007      	beq.n	80026c0 <TIM_Base_SetConfig+0x110>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4a18      	ldr	r2, [pc, #96]	@ (8002714 <TIM_Base_SetConfig+0x164>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d003      	beq.n	80026c0 <TIM_Base_SetConfig+0x110>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	4a13      	ldr	r2, [pc, #76]	@ (8002708 <TIM_Base_SetConfig+0x158>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d103      	bne.n	80026c8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	691a      	ldr	r2, [r3, #16]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d105      	bne.n	80026e6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	f023 0201 	bic.w	r2, r3, #1
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	611a      	str	r2, [r3, #16]
  }
}
 80026e6:	bf00      	nop
 80026e8:	3714      	adds	r7, #20
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	40012c00 	.word	0x40012c00
 80026f8:	40000400 	.word	0x40000400
 80026fc:	40000800 	.word	0x40000800
 8002700:	40000c00 	.word	0x40000c00
 8002704:	40013400 	.word	0x40013400
 8002708:	40015000 	.word	0x40015000
 800270c:	40014000 	.word	0x40014000
 8002710:	40014400 	.word	0x40014400
 8002714:	40014800 	.word	0x40014800

08002718 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002718:	b480      	push	{r7}
 800271a:	b087      	sub	sp, #28
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6a1b      	ldr	r3, [r3, #32]
 8002728:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6a1b      	ldr	r3, [r3, #32]
 800272e:	f023 0201 	bic.w	r2, r3, #1
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002742:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	011b      	lsls	r3, r3, #4
 8002748:	693a      	ldr	r2, [r7, #16]
 800274a:	4313      	orrs	r3, r2
 800274c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	f023 030a 	bic.w	r3, r3, #10
 8002754:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002756:	697a      	ldr	r2, [r7, #20]
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	4313      	orrs	r3, r2
 800275c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	697a      	ldr	r2, [r7, #20]
 8002768:	621a      	str	r2, [r3, #32]
}
 800276a:	bf00      	nop
 800276c:	371c      	adds	r7, #28
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr

08002776 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002776:	b480      	push	{r7}
 8002778:	b087      	sub	sp, #28
 800277a:	af00      	add	r7, sp, #0
 800277c:	60f8      	str	r0, [r7, #12]
 800277e:	60b9      	str	r1, [r7, #8]
 8002780:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6a1b      	ldr	r3, [r3, #32]
 8002786:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6a1b      	ldr	r3, [r3, #32]
 800278c:	f023 0210 	bic.w	r2, r3, #16
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80027a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	031b      	lsls	r3, r3, #12
 80027a6:	693a      	ldr	r2, [r7, #16]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80027b2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	011b      	lsls	r3, r3, #4
 80027b8:	697a      	ldr	r2, [r7, #20]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	621a      	str	r2, [r3, #32]
}
 80027ca:	bf00      	nop
 80027cc:	371c      	adds	r7, #28
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr

080027d6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80027d6:	b480      	push	{r7}
 80027d8:	b085      	sub	sp, #20
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
 80027de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80027ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80027f2:	683a      	ldr	r2, [r7, #0]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	f043 0307 	orr.w	r3, r3, #7
 80027fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68fa      	ldr	r2, [r7, #12]
 8002802:	609a      	str	r2, [r3, #8]
}
 8002804:	bf00      	nop
 8002806:	3714      	adds	r7, #20
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002810:	b480      	push	{r7}
 8002812:	b087      	sub	sp, #28
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	607a      	str	r2, [r7, #4]
 800281c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800282a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	021a      	lsls	r2, r3, #8
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	431a      	orrs	r2, r3
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	4313      	orrs	r3, r2
 8002838:	697a      	ldr	r2, [r7, #20]
 800283a:	4313      	orrs	r3, r2
 800283c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	697a      	ldr	r2, [r7, #20]
 8002842:	609a      	str	r2, [r3, #8]
}
 8002844:	bf00      	nop
 8002846:	371c      	adds	r7, #28
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002850:	b480      	push	{r7}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002860:	2b01      	cmp	r3, #1
 8002862:	d101      	bne.n	8002868 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002864:	2302      	movs	r3, #2
 8002866:	e074      	b.n	8002952 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2202      	movs	r2, #2
 8002874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a34      	ldr	r2, [pc, #208]	@ (8002960 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d009      	beq.n	80028a6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a33      	ldr	r2, [pc, #204]	@ (8002964 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d004      	beq.n	80028a6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a31      	ldr	r2, [pc, #196]	@ (8002968 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d108      	bne.n	80028b8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80028ac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80028be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a21      	ldr	r2, [pc, #132]	@ (8002960 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d022      	beq.n	8002926 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028e8:	d01d      	beq.n	8002926 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a1f      	ldr	r2, [pc, #124]	@ (800296c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d018      	beq.n	8002926 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a1d      	ldr	r2, [pc, #116]	@ (8002970 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d013      	beq.n	8002926 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a1c      	ldr	r2, [pc, #112]	@ (8002974 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d00e      	beq.n	8002926 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a15      	ldr	r2, [pc, #84]	@ (8002964 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d009      	beq.n	8002926 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a18      	ldr	r2, [pc, #96]	@ (8002978 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d004      	beq.n	8002926 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a11      	ldr	r2, [pc, #68]	@ (8002968 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d10c      	bne.n	8002940 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800292c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	68ba      	ldr	r2, [r7, #8]
 8002934:	4313      	orrs	r3, r2
 8002936:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68ba      	ldr	r2, [r7, #8]
 800293e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3714      	adds	r7, #20
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	40012c00 	.word	0x40012c00
 8002964:	40013400 	.word	0x40013400
 8002968:	40015000 	.word	0x40015000
 800296c:	40000400 	.word	0x40000400
 8002970:	40000800 	.word	0x40000800
 8002974:	40000c00 	.word	0x40000c00
 8002978:	40014000 	.word	0x40014000

0800297c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d101      	bne.n	800298e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e042      	b.n	8002a14 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002994:	2b00      	cmp	r3, #0
 8002996:	d106      	bne.n	80029a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f7fe f8b5 	bl	8000b10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2224      	movs	r2, #36	@ 0x24
 80029aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f022 0201 	bic.w	r2, r2, #1
 80029bc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d002      	beq.n	80029cc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 fc7a 	bl	80032c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f000 f97b 	bl	8002cc8 <UART_SetConfig>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d101      	bne.n	80029dc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e01b      	b.n	8002a14 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	685a      	ldr	r2, [r3, #4]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80029ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	689a      	ldr	r2, [r3, #8]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80029fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f042 0201 	orr.w	r2, r2, #1
 8002a0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 fcf9 	bl	8003404 <UART_CheckIdleState>
 8002a12:	4603      	mov	r3, r0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3708      	adds	r7, #8
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b08a      	sub	sp, #40	@ 0x28
 8002a20:	af02      	add	r7, sp, #8
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	603b      	str	r3, [r7, #0]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a32:	2b20      	cmp	r3, #32
 8002a34:	d17b      	bne.n	8002b2e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d002      	beq.n	8002a42 <HAL_UART_Transmit+0x26>
 8002a3c:	88fb      	ldrh	r3, [r7, #6]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e074      	b.n	8002b30 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2221      	movs	r2, #33	@ 0x21
 8002a52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a56:	f7fe f983 	bl	8000d60 <HAL_GetTick>
 8002a5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	88fa      	ldrh	r2, [r7, #6]
 8002a60:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	88fa      	ldrh	r2, [r7, #6]
 8002a68:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a74:	d108      	bne.n	8002a88 <HAL_UART_Transmit+0x6c>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d104      	bne.n	8002a88 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	61bb      	str	r3, [r7, #24]
 8002a86:	e003      	b.n	8002a90 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002a90:	e030      	b.n	8002af4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	9300      	str	r3, [sp, #0]
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	2180      	movs	r1, #128	@ 0x80
 8002a9c:	68f8      	ldr	r0, [r7, #12]
 8002a9e:	f000 fd5b 	bl	8003558 <UART_WaitOnFlagUntilTimeout>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d005      	beq.n	8002ab4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2220      	movs	r2, #32
 8002aac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e03d      	b.n	8002b30 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d10b      	bne.n	8002ad2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	881b      	ldrh	r3, [r3, #0]
 8002abe:	461a      	mov	r2, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ac8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	3302      	adds	r3, #2
 8002ace:	61bb      	str	r3, [r7, #24]
 8002ad0:	e007      	b.n	8002ae2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	781a      	ldrb	r2, [r3, #0]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	3301      	adds	r3, #1
 8002ae0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	3b01      	subs	r3, #1
 8002aec:	b29a      	uxth	r2, r3
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d1c8      	bne.n	8002a92 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	9300      	str	r3, [sp, #0]
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	2200      	movs	r2, #0
 8002b08:	2140      	movs	r1, #64	@ 0x40
 8002b0a:	68f8      	ldr	r0, [r7, #12]
 8002b0c:	f000 fd24 	bl	8003558 <UART_WaitOnFlagUntilTimeout>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d005      	beq.n	8002b22 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2220      	movs	r2, #32
 8002b1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e006      	b.n	8002b30 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2220      	movs	r2, #32
 8002b26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	e000      	b.n	8002b30 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8002b2e:	2302      	movs	r3, #2
  }
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3720      	adds	r7, #32
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b08a      	sub	sp, #40	@ 0x28
 8002b3c:	af02      	add	r7, sp, #8
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	603b      	str	r3, [r7, #0]
 8002b44:	4613      	mov	r3, r2
 8002b46:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b4e:	2b20      	cmp	r3, #32
 8002b50:	f040 80b5 	bne.w	8002cbe <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d002      	beq.n	8002b60 <HAL_UART_Receive+0x28>
 8002b5a:	88fb      	ldrh	r3, [r7, #6]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d101      	bne.n	8002b64 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e0ad      	b.n	8002cc0 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2222      	movs	r2, #34	@ 0x22
 8002b70:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2200      	movs	r2, #0
 8002b78:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b7a:	f7fe f8f1 	bl	8000d60 <HAL_GetTick>
 8002b7e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	88fa      	ldrh	r2, [r7, #6]
 8002b84:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	88fa      	ldrh	r2, [r7, #6]
 8002b8c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b98:	d10e      	bne.n	8002bb8 <HAL_UART_Receive+0x80>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d105      	bne.n	8002bae <HAL_UART_Receive+0x76>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8002ba8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8002bac:	e02d      	b.n	8002c0a <HAL_UART_Receive+0xd2>
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	22ff      	movs	r2, #255	@ 0xff
 8002bb2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8002bb6:	e028      	b.n	8002c0a <HAL_UART_Receive+0xd2>
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d10d      	bne.n	8002bdc <HAL_UART_Receive+0xa4>
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d104      	bne.n	8002bd2 <HAL_UART_Receive+0x9a>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	22ff      	movs	r2, #255	@ 0xff
 8002bcc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8002bd0:	e01b      	b.n	8002c0a <HAL_UART_Receive+0xd2>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	227f      	movs	r2, #127	@ 0x7f
 8002bd6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8002bda:	e016      	b.n	8002c0a <HAL_UART_Receive+0xd2>
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002be4:	d10d      	bne.n	8002c02 <HAL_UART_Receive+0xca>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d104      	bne.n	8002bf8 <HAL_UART_Receive+0xc0>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	227f      	movs	r2, #127	@ 0x7f
 8002bf2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8002bf6:	e008      	b.n	8002c0a <HAL_UART_Receive+0xd2>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	223f      	movs	r2, #63	@ 0x3f
 8002bfc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8002c00:	e003      	b.n	8002c0a <HAL_UART_Receive+0xd2>
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8002c10:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c1a:	d108      	bne.n	8002c2e <HAL_UART_Receive+0xf6>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	691b      	ldr	r3, [r3, #16]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d104      	bne.n	8002c2e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002c24:	2300      	movs	r3, #0
 8002c26:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	61bb      	str	r3, [r7, #24]
 8002c2c:	e003      	b.n	8002c36 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c32:	2300      	movs	r3, #0
 8002c34:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002c36:	e036      	b.n	8002ca6 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	9300      	str	r3, [sp, #0]
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	2120      	movs	r1, #32
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	f000 fc88 	bl	8003558 <UART_WaitOnFlagUntilTimeout>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d005      	beq.n	8002c5a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2220      	movs	r2, #32
 8002c52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e032      	b.n	8002cc0 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d10c      	bne.n	8002c7a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c66:	b29a      	uxth	r2, r3
 8002c68:	8a7b      	ldrh	r3, [r7, #18]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	3302      	adds	r3, #2
 8002c76:	61bb      	str	r3, [r7, #24]
 8002c78:	e00c      	b.n	8002c94 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c80:	b2da      	uxtb	r2, r3
 8002c82:	8a7b      	ldrh	r3, [r7, #18]
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	4013      	ands	r3, r2
 8002c88:	b2da      	uxtb	r2, r3
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	3301      	adds	r3, #1
 8002c92:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	b29a      	uxth	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1c2      	bne.n	8002c38 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2220      	movs	r2, #32
 8002cb6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	e000      	b.n	8002cc0 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8002cbe:	2302      	movs	r3, #2
  }
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3720      	adds	r7, #32
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ccc:	b08c      	sub	sp, #48	@ 0x30
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	431a      	orrs	r2, r3
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	69db      	ldr	r3, [r3, #28]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	4baa      	ldr	r3, [pc, #680]	@ (8002fa0 <UART_SetConfig+0x2d8>)
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	697a      	ldr	r2, [r7, #20]
 8002cfc:	6812      	ldr	r2, [r2, #0]
 8002cfe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002d00:	430b      	orrs	r3, r1
 8002d02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	68da      	ldr	r2, [r3, #12]
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	430a      	orrs	r2, r1
 8002d18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a9f      	ldr	r2, [pc, #636]	@ (8002fa4 <UART_SetConfig+0x2dc>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d004      	beq.n	8002d34 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d30:	4313      	orrs	r3, r2
 8002d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8002d3e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	6812      	ldr	r2, [r2, #0]
 8002d46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002d48:	430b      	orrs	r3, r1
 8002d4a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d52:	f023 010f 	bic.w	r1, r3, #15
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a90      	ldr	r2, [pc, #576]	@ (8002fa8 <UART_SetConfig+0x2e0>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d125      	bne.n	8002db8 <UART_SetConfig+0xf0>
 8002d6c:	4b8f      	ldr	r3, [pc, #572]	@ (8002fac <UART_SetConfig+0x2e4>)
 8002d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d72:	f003 0303 	and.w	r3, r3, #3
 8002d76:	2b03      	cmp	r3, #3
 8002d78:	d81a      	bhi.n	8002db0 <UART_SetConfig+0xe8>
 8002d7a:	a201      	add	r2, pc, #4	@ (adr r2, 8002d80 <UART_SetConfig+0xb8>)
 8002d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d80:	08002d91 	.word	0x08002d91
 8002d84:	08002da1 	.word	0x08002da1
 8002d88:	08002d99 	.word	0x08002d99
 8002d8c:	08002da9 	.word	0x08002da9
 8002d90:	2301      	movs	r3, #1
 8002d92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d96:	e116      	b.n	8002fc6 <UART_SetConfig+0x2fe>
 8002d98:	2302      	movs	r3, #2
 8002d9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d9e:	e112      	b.n	8002fc6 <UART_SetConfig+0x2fe>
 8002da0:	2304      	movs	r3, #4
 8002da2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002da6:	e10e      	b.n	8002fc6 <UART_SetConfig+0x2fe>
 8002da8:	2308      	movs	r3, #8
 8002daa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002dae:	e10a      	b.n	8002fc6 <UART_SetConfig+0x2fe>
 8002db0:	2310      	movs	r3, #16
 8002db2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002db6:	e106      	b.n	8002fc6 <UART_SetConfig+0x2fe>
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a7c      	ldr	r2, [pc, #496]	@ (8002fb0 <UART_SetConfig+0x2e8>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d138      	bne.n	8002e34 <UART_SetConfig+0x16c>
 8002dc2:	4b7a      	ldr	r3, [pc, #488]	@ (8002fac <UART_SetConfig+0x2e4>)
 8002dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dc8:	f003 030c 	and.w	r3, r3, #12
 8002dcc:	2b0c      	cmp	r3, #12
 8002dce:	d82d      	bhi.n	8002e2c <UART_SetConfig+0x164>
 8002dd0:	a201      	add	r2, pc, #4	@ (adr r2, 8002dd8 <UART_SetConfig+0x110>)
 8002dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd6:	bf00      	nop
 8002dd8:	08002e0d 	.word	0x08002e0d
 8002ddc:	08002e2d 	.word	0x08002e2d
 8002de0:	08002e2d 	.word	0x08002e2d
 8002de4:	08002e2d 	.word	0x08002e2d
 8002de8:	08002e1d 	.word	0x08002e1d
 8002dec:	08002e2d 	.word	0x08002e2d
 8002df0:	08002e2d 	.word	0x08002e2d
 8002df4:	08002e2d 	.word	0x08002e2d
 8002df8:	08002e15 	.word	0x08002e15
 8002dfc:	08002e2d 	.word	0x08002e2d
 8002e00:	08002e2d 	.word	0x08002e2d
 8002e04:	08002e2d 	.word	0x08002e2d
 8002e08:	08002e25 	.word	0x08002e25
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e12:	e0d8      	b.n	8002fc6 <UART_SetConfig+0x2fe>
 8002e14:	2302      	movs	r3, #2
 8002e16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e1a:	e0d4      	b.n	8002fc6 <UART_SetConfig+0x2fe>
 8002e1c:	2304      	movs	r3, #4
 8002e1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e22:	e0d0      	b.n	8002fc6 <UART_SetConfig+0x2fe>
 8002e24:	2308      	movs	r3, #8
 8002e26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e2a:	e0cc      	b.n	8002fc6 <UART_SetConfig+0x2fe>
 8002e2c:	2310      	movs	r3, #16
 8002e2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e32:	e0c8      	b.n	8002fc6 <UART_SetConfig+0x2fe>
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a5e      	ldr	r2, [pc, #376]	@ (8002fb4 <UART_SetConfig+0x2ec>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d125      	bne.n	8002e8a <UART_SetConfig+0x1c2>
 8002e3e:	4b5b      	ldr	r3, [pc, #364]	@ (8002fac <UART_SetConfig+0x2e4>)
 8002e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e44:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002e48:	2b30      	cmp	r3, #48	@ 0x30
 8002e4a:	d016      	beq.n	8002e7a <UART_SetConfig+0x1b2>
 8002e4c:	2b30      	cmp	r3, #48	@ 0x30
 8002e4e:	d818      	bhi.n	8002e82 <UART_SetConfig+0x1ba>
 8002e50:	2b20      	cmp	r3, #32
 8002e52:	d00a      	beq.n	8002e6a <UART_SetConfig+0x1a2>
 8002e54:	2b20      	cmp	r3, #32
 8002e56:	d814      	bhi.n	8002e82 <UART_SetConfig+0x1ba>
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d002      	beq.n	8002e62 <UART_SetConfig+0x19a>
 8002e5c:	2b10      	cmp	r3, #16
 8002e5e:	d008      	beq.n	8002e72 <UART_SetConfig+0x1aa>
 8002e60:	e00f      	b.n	8002e82 <UART_SetConfig+0x1ba>
 8002e62:	2300      	movs	r3, #0
 8002e64:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e68:	e0ad      	b.n	8002fc6 <UART_SetConfig+0x2fe>
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e70:	e0a9      	b.n	8002fc6 <UART_SetConfig+0x2fe>
 8002e72:	2304      	movs	r3, #4
 8002e74:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e78:	e0a5      	b.n	8002fc6 <UART_SetConfig+0x2fe>
 8002e7a:	2308      	movs	r3, #8
 8002e7c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e80:	e0a1      	b.n	8002fc6 <UART_SetConfig+0x2fe>
 8002e82:	2310      	movs	r3, #16
 8002e84:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e88:	e09d      	b.n	8002fc6 <UART_SetConfig+0x2fe>
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a4a      	ldr	r2, [pc, #296]	@ (8002fb8 <UART_SetConfig+0x2f0>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d125      	bne.n	8002ee0 <UART_SetConfig+0x218>
 8002e94:	4b45      	ldr	r3, [pc, #276]	@ (8002fac <UART_SetConfig+0x2e4>)
 8002e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e9a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002e9e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002ea0:	d016      	beq.n	8002ed0 <UART_SetConfig+0x208>
 8002ea2:	2bc0      	cmp	r3, #192	@ 0xc0
 8002ea4:	d818      	bhi.n	8002ed8 <UART_SetConfig+0x210>
 8002ea6:	2b80      	cmp	r3, #128	@ 0x80
 8002ea8:	d00a      	beq.n	8002ec0 <UART_SetConfig+0x1f8>
 8002eaa:	2b80      	cmp	r3, #128	@ 0x80
 8002eac:	d814      	bhi.n	8002ed8 <UART_SetConfig+0x210>
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d002      	beq.n	8002eb8 <UART_SetConfig+0x1f0>
 8002eb2:	2b40      	cmp	r3, #64	@ 0x40
 8002eb4:	d008      	beq.n	8002ec8 <UART_SetConfig+0x200>
 8002eb6:	e00f      	b.n	8002ed8 <UART_SetConfig+0x210>
 8002eb8:	2300      	movs	r3, #0
 8002eba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ebe:	e082      	b.n	8002fc6 <UART_SetConfig+0x2fe>
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ec6:	e07e      	b.n	8002fc6 <UART_SetConfig+0x2fe>
 8002ec8:	2304      	movs	r3, #4
 8002eca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ece:	e07a      	b.n	8002fc6 <UART_SetConfig+0x2fe>
 8002ed0:	2308      	movs	r3, #8
 8002ed2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ed6:	e076      	b.n	8002fc6 <UART_SetConfig+0x2fe>
 8002ed8:	2310      	movs	r3, #16
 8002eda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ede:	e072      	b.n	8002fc6 <UART_SetConfig+0x2fe>
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a35      	ldr	r2, [pc, #212]	@ (8002fbc <UART_SetConfig+0x2f4>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d12a      	bne.n	8002f40 <UART_SetConfig+0x278>
 8002eea:	4b30      	ldr	r3, [pc, #192]	@ (8002fac <UART_SetConfig+0x2e4>)
 8002eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ef0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ef4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002ef8:	d01a      	beq.n	8002f30 <UART_SetConfig+0x268>
 8002efa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002efe:	d81b      	bhi.n	8002f38 <UART_SetConfig+0x270>
 8002f00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f04:	d00c      	beq.n	8002f20 <UART_SetConfig+0x258>
 8002f06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f0a:	d815      	bhi.n	8002f38 <UART_SetConfig+0x270>
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d003      	beq.n	8002f18 <UART_SetConfig+0x250>
 8002f10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f14:	d008      	beq.n	8002f28 <UART_SetConfig+0x260>
 8002f16:	e00f      	b.n	8002f38 <UART_SetConfig+0x270>
 8002f18:	2300      	movs	r3, #0
 8002f1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f1e:	e052      	b.n	8002fc6 <UART_SetConfig+0x2fe>
 8002f20:	2302      	movs	r3, #2
 8002f22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f26:	e04e      	b.n	8002fc6 <UART_SetConfig+0x2fe>
 8002f28:	2304      	movs	r3, #4
 8002f2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f2e:	e04a      	b.n	8002fc6 <UART_SetConfig+0x2fe>
 8002f30:	2308      	movs	r3, #8
 8002f32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f36:	e046      	b.n	8002fc6 <UART_SetConfig+0x2fe>
 8002f38:	2310      	movs	r3, #16
 8002f3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f3e:	e042      	b.n	8002fc6 <UART_SetConfig+0x2fe>
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a17      	ldr	r2, [pc, #92]	@ (8002fa4 <UART_SetConfig+0x2dc>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d13a      	bne.n	8002fc0 <UART_SetConfig+0x2f8>
 8002f4a:	4b18      	ldr	r3, [pc, #96]	@ (8002fac <UART_SetConfig+0x2e4>)
 8002f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f50:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002f54:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002f58:	d01a      	beq.n	8002f90 <UART_SetConfig+0x2c8>
 8002f5a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002f5e:	d81b      	bhi.n	8002f98 <UART_SetConfig+0x2d0>
 8002f60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f64:	d00c      	beq.n	8002f80 <UART_SetConfig+0x2b8>
 8002f66:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f6a:	d815      	bhi.n	8002f98 <UART_SetConfig+0x2d0>
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d003      	beq.n	8002f78 <UART_SetConfig+0x2b0>
 8002f70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f74:	d008      	beq.n	8002f88 <UART_SetConfig+0x2c0>
 8002f76:	e00f      	b.n	8002f98 <UART_SetConfig+0x2d0>
 8002f78:	2300      	movs	r3, #0
 8002f7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f7e:	e022      	b.n	8002fc6 <UART_SetConfig+0x2fe>
 8002f80:	2302      	movs	r3, #2
 8002f82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f86:	e01e      	b.n	8002fc6 <UART_SetConfig+0x2fe>
 8002f88:	2304      	movs	r3, #4
 8002f8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f8e:	e01a      	b.n	8002fc6 <UART_SetConfig+0x2fe>
 8002f90:	2308      	movs	r3, #8
 8002f92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f96:	e016      	b.n	8002fc6 <UART_SetConfig+0x2fe>
 8002f98:	2310      	movs	r3, #16
 8002f9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f9e:	e012      	b.n	8002fc6 <UART_SetConfig+0x2fe>
 8002fa0:	cfff69f3 	.word	0xcfff69f3
 8002fa4:	40008000 	.word	0x40008000
 8002fa8:	40013800 	.word	0x40013800
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	40004400 	.word	0x40004400
 8002fb4:	40004800 	.word	0x40004800
 8002fb8:	40004c00 	.word	0x40004c00
 8002fbc:	40005000 	.word	0x40005000
 8002fc0:	2310      	movs	r3, #16
 8002fc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4aae      	ldr	r2, [pc, #696]	@ (8003284 <UART_SetConfig+0x5bc>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	f040 8097 	bne.w	8003100 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002fd2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002fd6:	2b08      	cmp	r3, #8
 8002fd8:	d823      	bhi.n	8003022 <UART_SetConfig+0x35a>
 8002fda:	a201      	add	r2, pc, #4	@ (adr r2, 8002fe0 <UART_SetConfig+0x318>)
 8002fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fe0:	08003005 	.word	0x08003005
 8002fe4:	08003023 	.word	0x08003023
 8002fe8:	0800300d 	.word	0x0800300d
 8002fec:	08003023 	.word	0x08003023
 8002ff0:	08003013 	.word	0x08003013
 8002ff4:	08003023 	.word	0x08003023
 8002ff8:	08003023 	.word	0x08003023
 8002ffc:	08003023 	.word	0x08003023
 8003000:	0800301b 	.word	0x0800301b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003004:	f7fe fea6 	bl	8001d54 <HAL_RCC_GetPCLK1Freq>
 8003008:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800300a:	e010      	b.n	800302e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800300c:	4b9e      	ldr	r3, [pc, #632]	@ (8003288 <UART_SetConfig+0x5c0>)
 800300e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003010:	e00d      	b.n	800302e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003012:	f7fe fe31 	bl	8001c78 <HAL_RCC_GetSysClockFreq>
 8003016:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003018:	e009      	b.n	800302e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800301a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800301e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003020:	e005      	b.n	800302e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003022:	2300      	movs	r3, #0
 8003024:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800302c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800302e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003030:	2b00      	cmp	r3, #0
 8003032:	f000 8130 	beq.w	8003296 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800303a:	4a94      	ldr	r2, [pc, #592]	@ (800328c <UART_SetConfig+0x5c4>)
 800303c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003040:	461a      	mov	r2, r3
 8003042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003044:	fbb3 f3f2 	udiv	r3, r3, r2
 8003048:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	685a      	ldr	r2, [r3, #4]
 800304e:	4613      	mov	r3, r2
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	4413      	add	r3, r2
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	429a      	cmp	r2, r3
 8003058:	d305      	bcc.n	8003066 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	429a      	cmp	r2, r3
 8003064:	d903      	bls.n	800306e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800306c:	e113      	b.n	8003296 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800306e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003070:	2200      	movs	r2, #0
 8003072:	60bb      	str	r3, [r7, #8]
 8003074:	60fa      	str	r2, [r7, #12]
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800307a:	4a84      	ldr	r2, [pc, #528]	@ (800328c <UART_SetConfig+0x5c4>)
 800307c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003080:	b29b      	uxth	r3, r3
 8003082:	2200      	movs	r2, #0
 8003084:	603b      	str	r3, [r7, #0]
 8003086:	607a      	str	r2, [r7, #4]
 8003088:	e9d7 2300 	ldrd	r2, r3, [r7]
 800308c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003090:	f7fd f8c2 	bl	8000218 <__aeabi_uldivmod>
 8003094:	4602      	mov	r2, r0
 8003096:	460b      	mov	r3, r1
 8003098:	4610      	mov	r0, r2
 800309a:	4619      	mov	r1, r3
 800309c:	f04f 0200 	mov.w	r2, #0
 80030a0:	f04f 0300 	mov.w	r3, #0
 80030a4:	020b      	lsls	r3, r1, #8
 80030a6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80030aa:	0202      	lsls	r2, r0, #8
 80030ac:	6979      	ldr	r1, [r7, #20]
 80030ae:	6849      	ldr	r1, [r1, #4]
 80030b0:	0849      	lsrs	r1, r1, #1
 80030b2:	2000      	movs	r0, #0
 80030b4:	460c      	mov	r4, r1
 80030b6:	4605      	mov	r5, r0
 80030b8:	eb12 0804 	adds.w	r8, r2, r4
 80030bc:	eb43 0905 	adc.w	r9, r3, r5
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	469a      	mov	sl, r3
 80030c8:	4693      	mov	fp, r2
 80030ca:	4652      	mov	r2, sl
 80030cc:	465b      	mov	r3, fp
 80030ce:	4640      	mov	r0, r8
 80030d0:	4649      	mov	r1, r9
 80030d2:	f7fd f8a1 	bl	8000218 <__aeabi_uldivmod>
 80030d6:	4602      	mov	r2, r0
 80030d8:	460b      	mov	r3, r1
 80030da:	4613      	mov	r3, r2
 80030dc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80030de:	6a3b      	ldr	r3, [r7, #32]
 80030e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80030e4:	d308      	bcc.n	80030f8 <UART_SetConfig+0x430>
 80030e6:	6a3b      	ldr	r3, [r7, #32]
 80030e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80030ec:	d204      	bcs.n	80030f8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	6a3a      	ldr	r2, [r7, #32]
 80030f4:	60da      	str	r2, [r3, #12]
 80030f6:	e0ce      	b.n	8003296 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80030fe:	e0ca      	b.n	8003296 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	69db      	ldr	r3, [r3, #28]
 8003104:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003108:	d166      	bne.n	80031d8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800310a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800310e:	2b08      	cmp	r3, #8
 8003110:	d827      	bhi.n	8003162 <UART_SetConfig+0x49a>
 8003112:	a201      	add	r2, pc, #4	@ (adr r2, 8003118 <UART_SetConfig+0x450>)
 8003114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003118:	0800313d 	.word	0x0800313d
 800311c:	08003145 	.word	0x08003145
 8003120:	0800314d 	.word	0x0800314d
 8003124:	08003163 	.word	0x08003163
 8003128:	08003153 	.word	0x08003153
 800312c:	08003163 	.word	0x08003163
 8003130:	08003163 	.word	0x08003163
 8003134:	08003163 	.word	0x08003163
 8003138:	0800315b 	.word	0x0800315b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800313c:	f7fe fe0a 	bl	8001d54 <HAL_RCC_GetPCLK1Freq>
 8003140:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003142:	e014      	b.n	800316e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003144:	f7fe fe1c 	bl	8001d80 <HAL_RCC_GetPCLK2Freq>
 8003148:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800314a:	e010      	b.n	800316e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800314c:	4b4e      	ldr	r3, [pc, #312]	@ (8003288 <UART_SetConfig+0x5c0>)
 800314e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003150:	e00d      	b.n	800316e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003152:	f7fe fd91 	bl	8001c78 <HAL_RCC_GetSysClockFreq>
 8003156:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003158:	e009      	b.n	800316e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800315a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800315e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003160:	e005      	b.n	800316e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003162:	2300      	movs	r3, #0
 8003164:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800316c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800316e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003170:	2b00      	cmp	r3, #0
 8003172:	f000 8090 	beq.w	8003296 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317a:	4a44      	ldr	r2, [pc, #272]	@ (800328c <UART_SetConfig+0x5c4>)
 800317c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003180:	461a      	mov	r2, r3
 8003182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003184:	fbb3 f3f2 	udiv	r3, r3, r2
 8003188:	005a      	lsls	r2, r3, #1
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	085b      	lsrs	r3, r3, #1
 8003190:	441a      	add	r2, r3
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	fbb2 f3f3 	udiv	r3, r2, r3
 800319a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800319c:	6a3b      	ldr	r3, [r7, #32]
 800319e:	2b0f      	cmp	r3, #15
 80031a0:	d916      	bls.n	80031d0 <UART_SetConfig+0x508>
 80031a2:	6a3b      	ldr	r3, [r7, #32]
 80031a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031a8:	d212      	bcs.n	80031d0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031aa:	6a3b      	ldr	r3, [r7, #32]
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	f023 030f 	bic.w	r3, r3, #15
 80031b2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031b4:	6a3b      	ldr	r3, [r7, #32]
 80031b6:	085b      	lsrs	r3, r3, #1
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	f003 0307 	and.w	r3, r3, #7
 80031be:	b29a      	uxth	r2, r3
 80031c0:	8bfb      	ldrh	r3, [r7, #30]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	8bfa      	ldrh	r2, [r7, #30]
 80031cc:	60da      	str	r2, [r3, #12]
 80031ce:	e062      	b.n	8003296 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80031d6:	e05e      	b.n	8003296 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80031d8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80031dc:	2b08      	cmp	r3, #8
 80031de:	d828      	bhi.n	8003232 <UART_SetConfig+0x56a>
 80031e0:	a201      	add	r2, pc, #4	@ (adr r2, 80031e8 <UART_SetConfig+0x520>)
 80031e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e6:	bf00      	nop
 80031e8:	0800320d 	.word	0x0800320d
 80031ec:	08003215 	.word	0x08003215
 80031f0:	0800321d 	.word	0x0800321d
 80031f4:	08003233 	.word	0x08003233
 80031f8:	08003223 	.word	0x08003223
 80031fc:	08003233 	.word	0x08003233
 8003200:	08003233 	.word	0x08003233
 8003204:	08003233 	.word	0x08003233
 8003208:	0800322b 	.word	0x0800322b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800320c:	f7fe fda2 	bl	8001d54 <HAL_RCC_GetPCLK1Freq>
 8003210:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003212:	e014      	b.n	800323e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003214:	f7fe fdb4 	bl	8001d80 <HAL_RCC_GetPCLK2Freq>
 8003218:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800321a:	e010      	b.n	800323e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800321c:	4b1a      	ldr	r3, [pc, #104]	@ (8003288 <UART_SetConfig+0x5c0>)
 800321e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003220:	e00d      	b.n	800323e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003222:	f7fe fd29 	bl	8001c78 <HAL_RCC_GetSysClockFreq>
 8003226:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003228:	e009      	b.n	800323e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800322a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800322e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003230:	e005      	b.n	800323e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003232:	2300      	movs	r3, #0
 8003234:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800323c:	bf00      	nop
    }

    if (pclk != 0U)
 800323e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003240:	2b00      	cmp	r3, #0
 8003242:	d028      	beq.n	8003296 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003248:	4a10      	ldr	r2, [pc, #64]	@ (800328c <UART_SetConfig+0x5c4>)
 800324a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800324e:	461a      	mov	r2, r3
 8003250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003252:	fbb3 f2f2 	udiv	r2, r3, r2
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	085b      	lsrs	r3, r3, #1
 800325c:	441a      	add	r2, r3
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	fbb2 f3f3 	udiv	r3, r2, r3
 8003266:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003268:	6a3b      	ldr	r3, [r7, #32]
 800326a:	2b0f      	cmp	r3, #15
 800326c:	d910      	bls.n	8003290 <UART_SetConfig+0x5c8>
 800326e:	6a3b      	ldr	r3, [r7, #32]
 8003270:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003274:	d20c      	bcs.n	8003290 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003276:	6a3b      	ldr	r3, [r7, #32]
 8003278:	b29a      	uxth	r2, r3
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	60da      	str	r2, [r3, #12]
 8003280:	e009      	b.n	8003296 <UART_SetConfig+0x5ce>
 8003282:	bf00      	nop
 8003284:	40008000 	.word	0x40008000
 8003288:	00f42400 	.word	0x00f42400
 800328c:	0800398c 	.word	0x0800398c
      }
      else
      {
        ret = HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	2201      	movs	r2, #1
 800329a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	2200      	movs	r2, #0
 80032aa:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	2200      	movs	r2, #0
 80032b0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80032b2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3730      	adds	r7, #48	@ 0x30
 80032ba:	46bd      	mov	sp, r7
 80032bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080032c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032cc:	f003 0308 	and.w	r3, r3, #8
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00a      	beq.n	80032ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	430a      	orrs	r2, r1
 80032e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00a      	beq.n	800330c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	430a      	orrs	r2, r1
 800330a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003310:	f003 0302 	and.w	r3, r3, #2
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00a      	beq.n	800332e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	430a      	orrs	r2, r1
 800332c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003332:	f003 0304 	and.w	r3, r3, #4
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00a      	beq.n	8003350 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	430a      	orrs	r2, r1
 800334e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003354:	f003 0310 	and.w	r3, r3, #16
 8003358:	2b00      	cmp	r3, #0
 800335a:	d00a      	beq.n	8003372 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	430a      	orrs	r2, r1
 8003370:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003376:	f003 0320 	and.w	r3, r3, #32
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00a      	beq.n	8003394 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	430a      	orrs	r2, r1
 8003392:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003398:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800339c:	2b00      	cmp	r3, #0
 800339e:	d01a      	beq.n	80033d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033be:	d10a      	bne.n	80033d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	430a      	orrs	r2, r1
 80033d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00a      	beq.n	80033f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	430a      	orrs	r2, r1
 80033f6:	605a      	str	r2, [r3, #4]
  }
}
 80033f8:	bf00      	nop
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b098      	sub	sp, #96	@ 0x60
 8003408:	af02      	add	r7, sp, #8
 800340a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003414:	f7fd fca4 	bl	8000d60 <HAL_GetTick>
 8003418:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0308 	and.w	r3, r3, #8
 8003424:	2b08      	cmp	r3, #8
 8003426:	d12f      	bne.n	8003488 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003428:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800342c:	9300      	str	r3, [sp, #0]
 800342e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003430:	2200      	movs	r2, #0
 8003432:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 f88e 	bl	8003558 <UART_WaitOnFlagUntilTimeout>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d022      	beq.n	8003488 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800344a:	e853 3f00 	ldrex	r3, [r3]
 800344e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003450:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003452:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003456:	653b      	str	r3, [r7, #80]	@ 0x50
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	461a      	mov	r2, r3
 800345e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003460:	647b      	str	r3, [r7, #68]	@ 0x44
 8003462:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003464:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003466:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003468:	e841 2300 	strex	r3, r2, [r1]
 800346c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800346e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003470:	2b00      	cmp	r3, #0
 8003472:	d1e6      	bne.n	8003442 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2220      	movs	r2, #32
 8003478:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e063      	b.n	8003550 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0304 	and.w	r3, r3, #4
 8003492:	2b04      	cmp	r3, #4
 8003494:	d149      	bne.n	800352a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003496:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800349a:	9300      	str	r3, [sp, #0]
 800349c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800349e:	2200      	movs	r2, #0
 80034a0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f000 f857 	bl	8003558 <UART_WaitOnFlagUntilTimeout>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d03c      	beq.n	800352a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b8:	e853 3f00 	ldrex	r3, [r3]
 80034bc:	623b      	str	r3, [r7, #32]
   return(result);
 80034be:	6a3b      	ldr	r3, [r7, #32]
 80034c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80034c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	461a      	mov	r2, r3
 80034cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80034d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80034d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034d6:	e841 2300 	strex	r3, r2, [r1]
 80034da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80034dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d1e6      	bne.n	80034b0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	3308      	adds	r3, #8
 80034e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	e853 3f00 	ldrex	r3, [r3]
 80034f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f023 0301 	bic.w	r3, r3, #1
 80034f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	3308      	adds	r3, #8
 8003500:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003502:	61fa      	str	r2, [r7, #28]
 8003504:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003506:	69b9      	ldr	r1, [r7, #24]
 8003508:	69fa      	ldr	r2, [r7, #28]
 800350a:	e841 2300 	strex	r3, r2, [r1]
 800350e:	617b      	str	r3, [r7, #20]
   return(result);
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1e5      	bne.n	80034e2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2220      	movs	r2, #32
 800351a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e012      	b.n	8003550 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2220      	movs	r2, #32
 800352e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2220      	movs	r2, #32
 8003536:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800354e:	2300      	movs	r3, #0
}
 8003550:	4618      	mov	r0, r3
 8003552:	3758      	adds	r7, #88	@ 0x58
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	603b      	str	r3, [r7, #0]
 8003564:	4613      	mov	r3, r2
 8003566:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003568:	e04f      	b.n	800360a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003570:	d04b      	beq.n	800360a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003572:	f7fd fbf5 	bl	8000d60 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	429a      	cmp	r2, r3
 8003580:	d302      	bcc.n	8003588 <UART_WaitOnFlagUntilTimeout+0x30>
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d101      	bne.n	800358c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e04e      	b.n	800362a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0304 	and.w	r3, r3, #4
 8003596:	2b00      	cmp	r3, #0
 8003598:	d037      	beq.n	800360a <UART_WaitOnFlagUntilTimeout+0xb2>
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	2b80      	cmp	r3, #128	@ 0x80
 800359e:	d034      	beq.n	800360a <UART_WaitOnFlagUntilTimeout+0xb2>
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	2b40      	cmp	r3, #64	@ 0x40
 80035a4:	d031      	beq.n	800360a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	69db      	ldr	r3, [r3, #28]
 80035ac:	f003 0308 	and.w	r3, r3, #8
 80035b0:	2b08      	cmp	r3, #8
 80035b2:	d110      	bne.n	80035d6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2208      	movs	r2, #8
 80035ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	f000 f838 	bl	8003632 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2208      	movs	r2, #8
 80035c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e029      	b.n	800362a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	69db      	ldr	r3, [r3, #28]
 80035dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035e4:	d111      	bne.n	800360a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80035ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035f0:	68f8      	ldr	r0, [r7, #12]
 80035f2:	f000 f81e 	bl	8003632 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2220      	movs	r2, #32
 80035fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e00f      	b.n	800362a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	69da      	ldr	r2, [r3, #28]
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	4013      	ands	r3, r2
 8003614:	68ba      	ldr	r2, [r7, #8]
 8003616:	429a      	cmp	r2, r3
 8003618:	bf0c      	ite	eq
 800361a:	2301      	moveq	r3, #1
 800361c:	2300      	movne	r3, #0
 800361e:	b2db      	uxtb	r3, r3
 8003620:	461a      	mov	r2, r3
 8003622:	79fb      	ldrb	r3, [r7, #7]
 8003624:	429a      	cmp	r2, r3
 8003626:	d0a0      	beq.n	800356a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3710      	adds	r7, #16
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}

08003632 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003632:	b480      	push	{r7}
 8003634:	b095      	sub	sp, #84	@ 0x54
 8003636:	af00      	add	r7, sp, #0
 8003638:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003640:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003642:	e853 3f00 	ldrex	r3, [r3]
 8003646:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800364a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800364e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	461a      	mov	r2, r3
 8003656:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003658:	643b      	str	r3, [r7, #64]	@ 0x40
 800365a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800365c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800365e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003660:	e841 2300 	strex	r3, r2, [r1]
 8003664:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003668:	2b00      	cmp	r3, #0
 800366a:	d1e6      	bne.n	800363a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	3308      	adds	r3, #8
 8003672:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003674:	6a3b      	ldr	r3, [r7, #32]
 8003676:	e853 3f00 	ldrex	r3, [r3]
 800367a:	61fb      	str	r3, [r7, #28]
   return(result);
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003682:	f023 0301 	bic.w	r3, r3, #1
 8003686:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	3308      	adds	r3, #8
 800368e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003690:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003692:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003694:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003696:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003698:	e841 2300 	strex	r3, r2, [r1]
 800369c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800369e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d1e3      	bne.n	800366c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d118      	bne.n	80036de <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	e853 3f00 	ldrex	r3, [r3]
 80036b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	f023 0310 	bic.w	r3, r3, #16
 80036c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	461a      	mov	r2, r3
 80036c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036ca:	61bb      	str	r3, [r7, #24]
 80036cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ce:	6979      	ldr	r1, [r7, #20]
 80036d0:	69ba      	ldr	r2, [r7, #24]
 80036d2:	e841 2300 	strex	r3, r2, [r1]
 80036d6:	613b      	str	r3, [r7, #16]
   return(result);
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1e6      	bne.n	80036ac <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2220      	movs	r2, #32
 80036e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80036f2:	bf00      	nop
 80036f4:	3754      	adds	r7, #84	@ 0x54
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr

080036fe <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80036fe:	b480      	push	{r7}
 8003700:	b085      	sub	sp, #20
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800370c:	2b01      	cmp	r3, #1
 800370e:	d101      	bne.n	8003714 <HAL_UARTEx_DisableFifoMode+0x16>
 8003710:	2302      	movs	r3, #2
 8003712:	e027      	b.n	8003764 <HAL_UARTEx_DisableFifoMode+0x66>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2224      	movs	r2, #36	@ 0x24
 8003720:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f022 0201 	bic.w	r2, r2, #1
 800373a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8003742:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2220      	movs	r2, #32
 8003756:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3714      	adds	r7, #20
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003780:	2b01      	cmp	r3, #1
 8003782:	d101      	bne.n	8003788 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003784:	2302      	movs	r3, #2
 8003786:	e02d      	b.n	80037e4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2224      	movs	r2, #36	@ 0x24
 8003794:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f022 0201 	bic.w	r2, r2, #1
 80037ae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	683a      	ldr	r2, [r7, #0]
 80037c0:	430a      	orrs	r2, r1
 80037c2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f000 f84f 	bl	8003868 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2220      	movs	r2, #32
 80037d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80037e2:	2300      	movs	r3, #0
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3710      	adds	r7, #16
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d101      	bne.n	8003804 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003800:	2302      	movs	r3, #2
 8003802:	e02d      	b.n	8003860 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2224      	movs	r2, #36	@ 0x24
 8003810:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f022 0201 	bic.w	r2, r2, #1
 800382a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	683a      	ldr	r2, [r7, #0]
 800383c:	430a      	orrs	r2, r1
 800383e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 f811 	bl	8003868 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2220      	movs	r2, #32
 8003852:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	3710      	adds	r7, #16
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003868:	b480      	push	{r7}
 800386a:	b085      	sub	sp, #20
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003874:	2b00      	cmp	r3, #0
 8003876:	d108      	bne.n	800388a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003888:	e031      	b.n	80038ee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800388a:	2308      	movs	r3, #8
 800388c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800388e:	2308      	movs	r3, #8
 8003890:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	0e5b      	lsrs	r3, r3, #25
 800389a:	b2db      	uxtb	r3, r3
 800389c:	f003 0307 	and.w	r3, r3, #7
 80038a0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	0f5b      	lsrs	r3, r3, #29
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	f003 0307 	and.w	r3, r3, #7
 80038b0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038b2:	7bbb      	ldrb	r3, [r7, #14]
 80038b4:	7b3a      	ldrb	r2, [r7, #12]
 80038b6:	4911      	ldr	r1, [pc, #68]	@ (80038fc <UARTEx_SetNbDataToProcess+0x94>)
 80038b8:	5c8a      	ldrb	r2, [r1, r2]
 80038ba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80038be:	7b3a      	ldrb	r2, [r7, #12]
 80038c0:	490f      	ldr	r1, [pc, #60]	@ (8003900 <UARTEx_SetNbDataToProcess+0x98>)
 80038c2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80038c8:	b29a      	uxth	r2, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038d0:	7bfb      	ldrb	r3, [r7, #15]
 80038d2:	7b7a      	ldrb	r2, [r7, #13]
 80038d4:	4909      	ldr	r1, [pc, #36]	@ (80038fc <UARTEx_SetNbDataToProcess+0x94>)
 80038d6:	5c8a      	ldrb	r2, [r1, r2]
 80038d8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80038dc:	7b7a      	ldrb	r2, [r7, #13]
 80038de:	4908      	ldr	r1, [pc, #32]	@ (8003900 <UARTEx_SetNbDataToProcess+0x98>)
 80038e0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80038e6:	b29a      	uxth	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80038ee:	bf00      	nop
 80038f0:	3714      	adds	r7, #20
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	080039a4 	.word	0x080039a4
 8003900:	080039ac 	.word	0x080039ac

08003904 <memset>:
 8003904:	4402      	add	r2, r0
 8003906:	4603      	mov	r3, r0
 8003908:	4293      	cmp	r3, r2
 800390a:	d100      	bne.n	800390e <memset+0xa>
 800390c:	4770      	bx	lr
 800390e:	f803 1b01 	strb.w	r1, [r3], #1
 8003912:	e7f9      	b.n	8003908 <memset+0x4>

08003914 <__libc_init_array>:
 8003914:	b570      	push	{r4, r5, r6, lr}
 8003916:	4d0d      	ldr	r5, [pc, #52]	@ (800394c <__libc_init_array+0x38>)
 8003918:	4c0d      	ldr	r4, [pc, #52]	@ (8003950 <__libc_init_array+0x3c>)
 800391a:	1b64      	subs	r4, r4, r5
 800391c:	10a4      	asrs	r4, r4, #2
 800391e:	2600      	movs	r6, #0
 8003920:	42a6      	cmp	r6, r4
 8003922:	d109      	bne.n	8003938 <__libc_init_array+0x24>
 8003924:	4d0b      	ldr	r5, [pc, #44]	@ (8003954 <__libc_init_array+0x40>)
 8003926:	4c0c      	ldr	r4, [pc, #48]	@ (8003958 <__libc_init_array+0x44>)
 8003928:	f000 f818 	bl	800395c <_init>
 800392c:	1b64      	subs	r4, r4, r5
 800392e:	10a4      	asrs	r4, r4, #2
 8003930:	2600      	movs	r6, #0
 8003932:	42a6      	cmp	r6, r4
 8003934:	d105      	bne.n	8003942 <__libc_init_array+0x2e>
 8003936:	bd70      	pop	{r4, r5, r6, pc}
 8003938:	f855 3b04 	ldr.w	r3, [r5], #4
 800393c:	4798      	blx	r3
 800393e:	3601      	adds	r6, #1
 8003940:	e7ee      	b.n	8003920 <__libc_init_array+0xc>
 8003942:	f855 3b04 	ldr.w	r3, [r5], #4
 8003946:	4798      	blx	r3
 8003948:	3601      	adds	r6, #1
 800394a:	e7f2      	b.n	8003932 <__libc_init_array+0x1e>
 800394c:	080039bc 	.word	0x080039bc
 8003950:	080039bc 	.word	0x080039bc
 8003954:	080039bc 	.word	0x080039bc
 8003958:	080039c0 	.word	0x080039c0

0800395c <_init>:
 800395c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800395e:	bf00      	nop
 8003960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003962:	bc08      	pop	{r3}
 8003964:	469e      	mov	lr, r3
 8003966:	4770      	bx	lr

08003968 <_fini>:
 8003968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800396a:	bf00      	nop
 800396c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800396e:	bc08      	pop	{r3}
 8003970:	469e      	mov	lr, r3
 8003972:	4770      	bx	lr
