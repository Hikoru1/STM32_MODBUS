
015_PETIT_MODBUS_LED_EX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c00  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003dd8  08003dd8  00004dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e18  08003e18  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003e18  08003e18  00004e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e20  08003e20  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e20  08003e20  00004e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003e24  08003e24  00004e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003e28  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  2000000c  08003e34  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  08003e34  00005158  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012309  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002395  00000000  00000000  00017345  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001038  00000000  00000000  000196e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cb7  00000000  00000000  0001a718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025822  00000000  00000000  0001b3cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012f61  00000000  00000000  00040bf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7d4d  00000000  00000000  00053b52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014b89f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004524  00000000  00000000  0014b8e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  0014fe08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003dc0 	.word	0x08003dc0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08003dc0 	.word	0x08003dc0

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 fa9d 	bl	8000a4a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f80a 	bl	8000528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 f91c 	bl	8000750 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000518:	f000 f852 	bl	80005c0 <MX_TIM1_Init>
  MX_TIM16_Init();
 800051c:	f000 f8a4 	bl	8000668 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 8000520:	f000 f8ca 	bl	80006b8 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000524:	bf00      	nop
 8000526:	e7fd      	b.n	8000524 <main+0x1c>

08000528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b094      	sub	sp, #80	@ 0x50
 800052c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052e:	f107 0318 	add.w	r3, r7, #24
 8000532:	2238      	movs	r2, #56	@ 0x38
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f003 fc16 	bl	8003d68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053c:	1d3b      	adds	r3, r7, #4
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
 8000542:	605a      	str	r2, [r3, #4]
 8000544:	609a      	str	r2, [r3, #8]
 8000546:	60da      	str	r2, [r3, #12]
 8000548:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800054a:	2000      	movs	r0, #0
 800054c:	f000 fe58 	bl	8001200 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000550:	2302      	movs	r3, #2
 8000552:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000554:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000558:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800055a:	2340      	movs	r3, #64	@ 0x40
 800055c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800055e:	2302      	movs	r3, #2
 8000560:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000562:	2302      	movs	r3, #2
 8000564:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000566:	2304      	movs	r3, #4
 8000568:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800056a:	2355      	movs	r3, #85	@ 0x55
 800056c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800056e:	2302      	movs	r3, #2
 8000570:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000572:	2302      	movs	r3, #2
 8000574:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000576:	2302      	movs	r3, #2
 8000578:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057a:	f107 0318 	add.w	r3, r7, #24
 800057e:	4618      	mov	r0, r3
 8000580:	f000 fef2 	bl	8001368 <HAL_RCC_OscConfig>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800058a:	f000 f92b 	bl	80007e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058e:	230f      	movs	r3, #15
 8000590:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000592:	2303      	movs	r3, #3
 8000594:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000596:	2300      	movs	r3, #0
 8000598:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800059a:	2300      	movs	r3, #0
 800059c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800059e:	2300      	movs	r3, #0
 80005a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005a2:	1d3b      	adds	r3, r7, #4
 80005a4:	2104      	movs	r1, #4
 80005a6:	4618      	mov	r0, r3
 80005a8:	f001 f9f0 	bl	800198c <HAL_RCC_ClockConfig>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005b2:	f000 f917 	bl	80007e4 <Error_Handler>
  }
}
 80005b6:	bf00      	nop
 80005b8:	3750      	adds	r7, #80	@ 0x50
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
	...

080005c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b088      	sub	sp, #32
 80005c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005c6:	f107 0310 	add.w	r3, r7, #16
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]
 80005d0:	609a      	str	r2, [r3, #8]
 80005d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005d4:	1d3b      	adds	r3, r7, #4
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
 80005da:	605a      	str	r2, [r3, #4]
 80005dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80005de:	4b20      	ldr	r3, [pc, #128]	@ (8000660 <MX_TIM1_Init+0xa0>)
 80005e0:	4a20      	ldr	r2, [pc, #128]	@ (8000664 <MX_TIM1_Init+0xa4>)
 80005e2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80005e4:	4b1e      	ldr	r3, [pc, #120]	@ (8000660 <MX_TIM1_Init+0xa0>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ea:	4b1d      	ldr	r3, [pc, #116]	@ (8000660 <MX_TIM1_Init+0xa0>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80005f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000660 <MX_TIM1_Init+0xa0>)
 80005f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80005f6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005f8:	4b19      	ldr	r3, [pc, #100]	@ (8000660 <MX_TIM1_Init+0xa0>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80005fe:	4b18      	ldr	r3, [pc, #96]	@ (8000660 <MX_TIM1_Init+0xa0>)
 8000600:	2200      	movs	r2, #0
 8000602:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000604:	4b16      	ldr	r3, [pc, #88]	@ (8000660 <MX_TIM1_Init+0xa0>)
 8000606:	2200      	movs	r2, #0
 8000608:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800060a:	4815      	ldr	r0, [pc, #84]	@ (8000660 <MX_TIM1_Init+0xa0>)
 800060c:	f001 fe28 	bl	8002260 <HAL_TIM_Base_Init>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000616:	f000 f8e5 	bl	80007e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800061a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800061e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000620:	f107 0310 	add.w	r3, r7, #16
 8000624:	4619      	mov	r1, r3
 8000626:	480e      	ldr	r0, [pc, #56]	@ (8000660 <MX_TIM1_Init+0xa0>)
 8000628:	f001 fe72 	bl	8002310 <HAL_TIM_ConfigClockSource>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000632:	f000 f8d7 	bl	80007e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000636:	2300      	movs	r3, #0
 8000638:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800063a:	2300      	movs	r3, #0
 800063c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800063e:	2300      	movs	r3, #0
 8000640:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	4619      	mov	r1, r3
 8000646:	4806      	ldr	r0, [pc, #24]	@ (8000660 <MX_TIM1_Init+0xa0>)
 8000648:	f002 f8c8 	bl	80027dc <HAL_TIMEx_MasterConfigSynchronization>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000652:	f000 f8c7 	bl	80007e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000656:	bf00      	nop
 8000658:	3720      	adds	r7, #32
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	20000028 	.word	0x20000028
 8000664:	40012c00 	.word	0x40012c00

08000668 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800066c:	4b10      	ldr	r3, [pc, #64]	@ (80006b0 <MX_TIM16_Init+0x48>)
 800066e:	4a11      	ldr	r2, [pc, #68]	@ (80006b4 <MX_TIM16_Init+0x4c>)
 8000670:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 17000;
 8000672:	4b0f      	ldr	r3, [pc, #60]	@ (80006b0 <MX_TIM16_Init+0x48>)
 8000674:	f244 2268 	movw	r2, #17000	@ 0x4268
 8000678:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800067a:	4b0d      	ldr	r3, [pc, #52]	@ (80006b0 <MX_TIM16_Init+0x48>)
 800067c:	2200      	movs	r2, #0
 800067e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000;
 8000680:	4b0b      	ldr	r3, [pc, #44]	@ (80006b0 <MX_TIM16_Init+0x48>)
 8000682:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000686:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000688:	4b09      	ldr	r3, [pc, #36]	@ (80006b0 <MX_TIM16_Init+0x48>)
 800068a:	2200      	movs	r2, #0
 800068c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800068e:	4b08      	ldr	r3, [pc, #32]	@ (80006b0 <MX_TIM16_Init+0x48>)
 8000690:	2200      	movs	r2, #0
 8000692:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000694:	4b06      	ldr	r3, [pc, #24]	@ (80006b0 <MX_TIM16_Init+0x48>)
 8000696:	2200      	movs	r2, #0
 8000698:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800069a:	4805      	ldr	r0, [pc, #20]	@ (80006b0 <MX_TIM16_Init+0x48>)
 800069c:	f001 fde0 	bl	8002260 <HAL_TIM_Base_Init>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80006a6:	f000 f89d 	bl	80007e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000074 	.word	0x20000074
 80006b4:	40014400 	.word	0x40014400

080006b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006bc:	4b22      	ldr	r3, [pc, #136]	@ (8000748 <MX_USART2_UART_Init+0x90>)
 80006be:	4a23      	ldr	r2, [pc, #140]	@ (800074c <MX_USART2_UART_Init+0x94>)
 80006c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006c2:	4b21      	ldr	r3, [pc, #132]	@ (8000748 <MX_USART2_UART_Init+0x90>)
 80006c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ca:	4b1f      	ldr	r3, [pc, #124]	@ (8000748 <MX_USART2_UART_Init+0x90>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006d0:	4b1d      	ldr	r3, [pc, #116]	@ (8000748 <MX_USART2_UART_Init+0x90>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000748 <MX_USART2_UART_Init+0x90>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006dc:	4b1a      	ldr	r3, [pc, #104]	@ (8000748 <MX_USART2_UART_Init+0x90>)
 80006de:	220c      	movs	r2, #12
 80006e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e2:	4b19      	ldr	r3, [pc, #100]	@ (8000748 <MX_USART2_UART_Init+0x90>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e8:	4b17      	ldr	r3, [pc, #92]	@ (8000748 <MX_USART2_UART_Init+0x90>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ee:	4b16      	ldr	r3, [pc, #88]	@ (8000748 <MX_USART2_UART_Init+0x90>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006f4:	4b14      	ldr	r3, [pc, #80]	@ (8000748 <MX_USART2_UART_Init+0x90>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006fa:	4b13      	ldr	r3, [pc, #76]	@ (8000748 <MX_USART2_UART_Init+0x90>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000700:	4811      	ldr	r0, [pc, #68]	@ (8000748 <MX_USART2_UART_Init+0x90>)
 8000702:	f002 f901 	bl	8002908 <HAL_UART_Init>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800070c:	f000 f86a 	bl	80007e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000710:	2100      	movs	r1, #0
 8000712:	480d      	ldr	r0, [pc, #52]	@ (8000748 <MX_USART2_UART_Init+0x90>)
 8000714:	f003 fa5d 	bl	8003bd2 <HAL_UARTEx_SetTxFifoThreshold>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800071e:	f000 f861 	bl	80007e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000722:	2100      	movs	r1, #0
 8000724:	4808      	ldr	r0, [pc, #32]	@ (8000748 <MX_USART2_UART_Init+0x90>)
 8000726:	f003 fa92 	bl	8003c4e <HAL_UARTEx_SetRxFifoThreshold>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000730:	f000 f858 	bl	80007e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000734:	4804      	ldr	r0, [pc, #16]	@ (8000748 <MX_USART2_UART_Init+0x90>)
 8000736:	f003 fa13 	bl	8003b60 <HAL_UARTEx_DisableFifoMode>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000740:	f000 f850 	bl	80007e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}
 8000748:	200000c0 	.word	0x200000c0
 800074c:	40004400 	.word	0x40004400

08000750 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b088      	sub	sp, #32
 8000754:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000756:	f107 030c 	add.w	r3, r7, #12
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]
 8000764:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000766:	4b1e      	ldr	r3, [pc, #120]	@ (80007e0 <MX_GPIO_Init+0x90>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800076a:	4a1d      	ldr	r2, [pc, #116]	@ (80007e0 <MX_GPIO_Init+0x90>)
 800076c:	f043 0304 	orr.w	r3, r3, #4
 8000770:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000772:	4b1b      	ldr	r3, [pc, #108]	@ (80007e0 <MX_GPIO_Init+0x90>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000776:	f003 0304 	and.w	r3, r3, #4
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800077e:	4b18      	ldr	r3, [pc, #96]	@ (80007e0 <MX_GPIO_Init+0x90>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000782:	4a17      	ldr	r2, [pc, #92]	@ (80007e0 <MX_GPIO_Init+0x90>)
 8000784:	f043 0320 	orr.w	r3, r3, #32
 8000788:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800078a:	4b15      	ldr	r3, [pc, #84]	@ (80007e0 <MX_GPIO_Init+0x90>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800078e:	f003 0320 	and.w	r3, r3, #32
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000796:	4b12      	ldr	r3, [pc, #72]	@ (80007e0 <MX_GPIO_Init+0x90>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800079a:	4a11      	ldr	r2, [pc, #68]	@ (80007e0 <MX_GPIO_Init+0x90>)
 800079c:	f043 0301 	orr.w	r3, r3, #1
 80007a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007a2:	4b0f      	ldr	r3, [pc, #60]	@ (80007e0 <MX_GPIO_Init+0x90>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	603b      	str	r3, [r7, #0]
 80007ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	2120      	movs	r1, #32
 80007b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007b6:	f000 fd0b 	bl	80011d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80007ba:	2320      	movs	r3, #32
 80007bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007be:	2301      	movs	r3, #1
 80007c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c6:	2300      	movs	r3, #0
 80007c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80007ca:	f107 030c 	add.w	r3, r7, #12
 80007ce:	4619      	mov	r1, r3
 80007d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007d4:	f000 fb7a 	bl	8000ecc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007d8:	bf00      	nop
 80007da:	3720      	adds	r7, #32
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40021000 	.word	0x40021000

080007e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e8:	b672      	cpsid	i
}
 80007ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ec:	bf00      	nop
 80007ee:	e7fd      	b.n	80007ec <Error_Handler+0x8>

080007f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000834 <HAL_MspInit+0x44>)
 80007f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007fa:	4a0e      	ldr	r2, [pc, #56]	@ (8000834 <HAL_MspInit+0x44>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6613      	str	r3, [r2, #96]	@ 0x60
 8000802:	4b0c      	ldr	r3, [pc, #48]	@ (8000834 <HAL_MspInit+0x44>)
 8000804:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800080e:	4b09      	ldr	r3, [pc, #36]	@ (8000834 <HAL_MspInit+0x44>)
 8000810:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000812:	4a08      	ldr	r2, [pc, #32]	@ (8000834 <HAL_MspInit+0x44>)
 8000814:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000818:	6593      	str	r3, [r2, #88]	@ 0x58
 800081a:	4b06      	ldr	r3, [pc, #24]	@ (8000834 <HAL_MspInit+0x44>)
 800081c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800081e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000822:	603b      	str	r3, [r7, #0]
 8000824:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000826:	f000 fd8f 	bl	8001348 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40021000 	.word	0x40021000

08000838 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000838:	b480      	push	{r7}
 800083a:	b085      	sub	sp, #20
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a13      	ldr	r2, [pc, #76]	@ (8000894 <HAL_TIM_Base_MspInit+0x5c>)
 8000846:	4293      	cmp	r3, r2
 8000848:	d10c      	bne.n	8000864 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800084a:	4b13      	ldr	r3, [pc, #76]	@ (8000898 <HAL_TIM_Base_MspInit+0x60>)
 800084c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800084e:	4a12      	ldr	r2, [pc, #72]	@ (8000898 <HAL_TIM_Base_MspInit+0x60>)
 8000850:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000854:	6613      	str	r3, [r2, #96]	@ 0x60
 8000856:	4b10      	ldr	r3, [pc, #64]	@ (8000898 <HAL_TIM_Base_MspInit+0x60>)
 8000858:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800085a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000862:	e010      	b.n	8000886 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM16)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a0c      	ldr	r2, [pc, #48]	@ (800089c <HAL_TIM_Base_MspInit+0x64>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d10b      	bne.n	8000886 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800086e:	4b0a      	ldr	r3, [pc, #40]	@ (8000898 <HAL_TIM_Base_MspInit+0x60>)
 8000870:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000872:	4a09      	ldr	r2, [pc, #36]	@ (8000898 <HAL_TIM_Base_MspInit+0x60>)
 8000874:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000878:	6613      	str	r3, [r2, #96]	@ 0x60
 800087a:	4b07      	ldr	r3, [pc, #28]	@ (8000898 <HAL_TIM_Base_MspInit+0x60>)
 800087c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800087e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000882:	60bb      	str	r3, [r7, #8]
 8000884:	68bb      	ldr	r3, [r7, #8]
}
 8000886:	bf00      	nop
 8000888:	3714      	adds	r7, #20
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	40012c00 	.word	0x40012c00
 8000898:	40021000 	.word	0x40021000
 800089c:	40014400 	.word	0x40014400

080008a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b09e      	sub	sp, #120	@ 0x78
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008b8:	f107 0310 	add.w	r3, r7, #16
 80008bc:	2254      	movs	r2, #84	@ 0x54
 80008be:	2100      	movs	r1, #0
 80008c0:	4618      	mov	r0, r3
 80008c2:	f003 fa51 	bl	8003d68 <memset>
  if(huart->Instance==USART2)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4a23      	ldr	r2, [pc, #140]	@ (8000958 <HAL_UART_MspInit+0xb8>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d13e      	bne.n	800094e <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008d0:	2302      	movs	r3, #2
 80008d2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008d4:	2300      	movs	r3, #0
 80008d6:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008d8:	f107 0310 	add.w	r3, r7, #16
 80008dc:	4618      	mov	r0, r3
 80008de:	f001 fa71 	bl	8001dc4 <HAL_RCCEx_PeriphCLKConfig>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80008e8:	f7ff ff7c 	bl	80007e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008ec:	4b1b      	ldr	r3, [pc, #108]	@ (800095c <HAL_UART_MspInit+0xbc>)
 80008ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008f0:	4a1a      	ldr	r2, [pc, #104]	@ (800095c <HAL_UART_MspInit+0xbc>)
 80008f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80008f8:	4b18      	ldr	r3, [pc, #96]	@ (800095c <HAL_UART_MspInit+0xbc>)
 80008fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000904:	4b15      	ldr	r3, [pc, #84]	@ (800095c <HAL_UART_MspInit+0xbc>)
 8000906:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000908:	4a14      	ldr	r2, [pc, #80]	@ (800095c <HAL_UART_MspInit+0xbc>)
 800090a:	f043 0301 	orr.w	r3, r3, #1
 800090e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000910:	4b12      	ldr	r3, [pc, #72]	@ (800095c <HAL_UART_MspInit+0xbc>)
 8000912:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000914:	f003 0301 	and.w	r3, r3, #1
 8000918:	60bb      	str	r3, [r7, #8]
 800091a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800091c:	230c      	movs	r3, #12
 800091e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000920:	2302      	movs	r3, #2
 8000922:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000928:	2300      	movs	r3, #0
 800092a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800092c:	2307      	movs	r3, #7
 800092e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000930:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000934:	4619      	mov	r1, r3
 8000936:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800093a:	f000 fac7 	bl	8000ecc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800093e:	2200      	movs	r2, #0
 8000940:	2100      	movs	r1, #0
 8000942:	2026      	movs	r0, #38	@ 0x26
 8000944:	f000 f9cd 	bl	8000ce2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000948:	2026      	movs	r0, #38	@ 0x26
 800094a:	f000 f9e4 	bl	8000d16 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800094e:	bf00      	nop
 8000950:	3778      	adds	r7, #120	@ 0x78
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40004400 	.word	0x40004400
 800095c:	40021000 	.word	0x40021000

08000960 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000964:	bf00      	nop
 8000966:	e7fd      	b.n	8000964 <NMI_Handler+0x4>

08000968 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800096c:	bf00      	nop
 800096e:	e7fd      	b.n	800096c <HardFault_Handler+0x4>

08000970 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000974:	bf00      	nop
 8000976:	e7fd      	b.n	8000974 <MemManage_Handler+0x4>

08000978 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800097c:	bf00      	nop
 800097e:	e7fd      	b.n	800097c <BusFault_Handler+0x4>

08000980 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000984:	bf00      	nop
 8000986:	e7fd      	b.n	8000984 <UsageFault_Handler+0x4>

08000988 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr

08000996 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800099a:	bf00      	nop
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr

080009a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr

080009b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b2:	b580      	push	{r7, lr}
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b6:	f000 f89b 	bl	8000af0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
	...

080009c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009c4:	4802      	ldr	r0, [pc, #8]	@ (80009d0 <USART2_IRQHandler+0x10>)
 80009c6:	f001 ffef 	bl	80029a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	200000c0 	.word	0x200000c0

080009d4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80009d8:	4b06      	ldr	r3, [pc, #24]	@ (80009f4 <SystemInit+0x20>)
 80009da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009de:	4a05      	ldr	r2, [pc, #20]	@ (80009f4 <SystemInit+0x20>)
 80009e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	e000ed00 	.word	0xe000ed00

080009f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009f8:	480d      	ldr	r0, [pc, #52]	@ (8000a30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009fa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009fc:	f7ff ffea 	bl	80009d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a00:	480c      	ldr	r0, [pc, #48]	@ (8000a34 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a02:	490d      	ldr	r1, [pc, #52]	@ (8000a38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a04:	4a0d      	ldr	r2, [pc, #52]	@ (8000a3c <LoopForever+0xe>)
  movs r3, #0
 8000a06:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000a08:	e002      	b.n	8000a10 <LoopCopyDataInit>

08000a0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a0e:	3304      	adds	r3, #4

08000a10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a14:	d3f9      	bcc.n	8000a0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a16:	4a0a      	ldr	r2, [pc, #40]	@ (8000a40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a18:	4c0a      	ldr	r4, [pc, #40]	@ (8000a44 <LoopForever+0x16>)
  movs r3, #0
 8000a1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a1c:	e001      	b.n	8000a22 <LoopFillZerobss>

08000a1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a20:	3204      	adds	r2, #4

08000a22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a24:	d3fb      	bcc.n	8000a1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a26:	f003 f9a7 	bl	8003d78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a2a:	f7ff fd6d 	bl	8000508 <main>

08000a2e <LoopForever>:

LoopForever:
    b LoopForever
 8000a2e:	e7fe      	b.n	8000a2e <LoopForever>
  ldr   r0, =_estack
 8000a30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a38:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a3c:	08003e28 	.word	0x08003e28
  ldr r2, =_sbss
 8000a40:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a44:	20000158 	.word	0x20000158

08000a48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a48:	e7fe      	b.n	8000a48 <ADC1_2_IRQHandler>

08000a4a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b082      	sub	sp, #8
 8000a4e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a50:	2300      	movs	r3, #0
 8000a52:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a54:	2003      	movs	r0, #3
 8000a56:	f000 f939 	bl	8000ccc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a5a:	2000      	movs	r0, #0
 8000a5c:	f000 f80e 	bl	8000a7c <HAL_InitTick>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d002      	beq.n	8000a6c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a66:	2301      	movs	r3, #1
 8000a68:	71fb      	strb	r3, [r7, #7]
 8000a6a:	e001      	b.n	8000a70 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a6c:	f7ff fec0 	bl	80007f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a70:	79fb      	ldrb	r3, [r7, #7]

}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
	...

08000a7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a84:	2300      	movs	r3, #0
 8000a86:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000a88:	4b16      	ldr	r3, [pc, #88]	@ (8000ae4 <HAL_InitTick+0x68>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d022      	beq.n	8000ad6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000a90:	4b15      	ldr	r3, [pc, #84]	@ (8000ae8 <HAL_InitTick+0x6c>)
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	4b13      	ldr	r3, [pc, #76]	@ (8000ae4 <HAL_InitTick+0x68>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000a9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f000 f944 	bl	8000d32 <HAL_SYSTICK_Config>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d10f      	bne.n	8000ad0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2b0f      	cmp	r3, #15
 8000ab4:	d809      	bhi.n	8000aca <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	6879      	ldr	r1, [r7, #4]
 8000aba:	f04f 30ff 	mov.w	r0, #4294967295
 8000abe:	f000 f910 	bl	8000ce2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ac2:	4a0a      	ldr	r2, [pc, #40]	@ (8000aec <HAL_InitTick+0x70>)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	6013      	str	r3, [r2, #0]
 8000ac8:	e007      	b.n	8000ada <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000aca:	2301      	movs	r3, #1
 8000acc:	73fb      	strb	r3, [r7, #15]
 8000ace:	e004      	b.n	8000ada <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	73fb      	strb	r3, [r7, #15]
 8000ad4:	e001      	b.n	8000ada <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3710      	adds	r7, #16
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20000008 	.word	0x20000008
 8000ae8:	20000000 	.word	0x20000000
 8000aec:	20000004 	.word	0x20000004

08000af0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000af4:	4b05      	ldr	r3, [pc, #20]	@ (8000b0c <HAL_IncTick+0x1c>)
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	4b05      	ldr	r3, [pc, #20]	@ (8000b10 <HAL_IncTick+0x20>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4413      	add	r3, r2
 8000afe:	4a03      	ldr	r2, [pc, #12]	@ (8000b0c <HAL_IncTick+0x1c>)
 8000b00:	6013      	str	r3, [r2, #0]
}
 8000b02:	bf00      	nop
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	20000154 	.word	0x20000154
 8000b10:	20000008 	.word	0x20000008

08000b14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  return uwTick;
 8000b18:	4b03      	ldr	r3, [pc, #12]	@ (8000b28 <HAL_GetTick+0x14>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	20000154 	.word	0x20000154

08000b2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	f003 0307 	and.w	r3, r3, #7
 8000b3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b70 <__NVIC_SetPriorityGrouping+0x44>)
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b42:	68ba      	ldr	r2, [r7, #8]
 8000b44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b48:	4013      	ands	r3, r2
 8000b4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b5e:	4a04      	ldr	r2, [pc, #16]	@ (8000b70 <__NVIC_SetPriorityGrouping+0x44>)
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	60d3      	str	r3, [r2, #12]
}
 8000b64:	bf00      	nop
 8000b66:	3714      	adds	r7, #20
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	e000ed00 	.word	0xe000ed00

08000b74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b78:	4b04      	ldr	r3, [pc, #16]	@ (8000b8c <__NVIC_GetPriorityGrouping+0x18>)
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	0a1b      	lsrs	r3, r3, #8
 8000b7e:	f003 0307 	and.w	r3, r3, #7
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	db0b      	blt.n	8000bba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	f003 021f 	and.w	r2, r3, #31
 8000ba8:	4907      	ldr	r1, [pc, #28]	@ (8000bc8 <__NVIC_EnableIRQ+0x38>)
 8000baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bae:	095b      	lsrs	r3, r3, #5
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	fa00 f202 	lsl.w	r2, r0, r2
 8000bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bba:	bf00      	nop
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	e000e100 	.word	0xe000e100

08000bcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	6039      	str	r1, [r7, #0]
 8000bd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	db0a      	blt.n	8000bf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	b2da      	uxtb	r2, r3
 8000be4:	490c      	ldr	r1, [pc, #48]	@ (8000c18 <__NVIC_SetPriority+0x4c>)
 8000be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bea:	0112      	lsls	r2, r2, #4
 8000bec:	b2d2      	uxtb	r2, r2
 8000bee:	440b      	add	r3, r1
 8000bf0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bf4:	e00a      	b.n	8000c0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	b2da      	uxtb	r2, r3
 8000bfa:	4908      	ldr	r1, [pc, #32]	@ (8000c1c <__NVIC_SetPriority+0x50>)
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	f003 030f 	and.w	r3, r3, #15
 8000c02:	3b04      	subs	r3, #4
 8000c04:	0112      	lsls	r2, r2, #4
 8000c06:	b2d2      	uxtb	r2, r2
 8000c08:	440b      	add	r3, r1
 8000c0a:	761a      	strb	r2, [r3, #24]
}
 8000c0c:	bf00      	nop
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	e000e100 	.word	0xe000e100
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b089      	sub	sp, #36	@ 0x24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60f8      	str	r0, [r7, #12]
 8000c28:	60b9      	str	r1, [r7, #8]
 8000c2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	f003 0307 	and.w	r3, r3, #7
 8000c32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c34:	69fb      	ldr	r3, [r7, #28]
 8000c36:	f1c3 0307 	rsb	r3, r3, #7
 8000c3a:	2b04      	cmp	r3, #4
 8000c3c:	bf28      	it	cs
 8000c3e:	2304      	movcs	r3, #4
 8000c40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	3304      	adds	r3, #4
 8000c46:	2b06      	cmp	r3, #6
 8000c48:	d902      	bls.n	8000c50 <NVIC_EncodePriority+0x30>
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	3b03      	subs	r3, #3
 8000c4e:	e000      	b.n	8000c52 <NVIC_EncodePriority+0x32>
 8000c50:	2300      	movs	r3, #0
 8000c52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c54:	f04f 32ff 	mov.w	r2, #4294967295
 8000c58:	69bb      	ldr	r3, [r7, #24]
 8000c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5e:	43da      	mvns	r2, r3
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	401a      	ands	r2, r3
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c68:	f04f 31ff 	mov.w	r1, #4294967295
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c72:	43d9      	mvns	r1, r3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c78:	4313      	orrs	r3, r2
         );
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3724      	adds	r7, #36	@ 0x24
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
	...

08000c88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	3b01      	subs	r3, #1
 8000c94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c98:	d301      	bcc.n	8000c9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e00f      	b.n	8000cbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc8 <SysTick_Config+0x40>)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ca6:	210f      	movs	r1, #15
 8000ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cac:	f7ff ff8e 	bl	8000bcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cb0:	4b05      	ldr	r3, [pc, #20]	@ (8000cc8 <SysTick_Config+0x40>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cb6:	4b04      	ldr	r3, [pc, #16]	@ (8000cc8 <SysTick_Config+0x40>)
 8000cb8:	2207      	movs	r2, #7
 8000cba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cbc:	2300      	movs	r3, #0
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	e000e010 	.word	0xe000e010

08000ccc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cd4:	6878      	ldr	r0, [r7, #4]
 8000cd6:	f7ff ff29 	bl	8000b2c <__NVIC_SetPriorityGrouping>
}
 8000cda:	bf00      	nop
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b086      	sub	sp, #24
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	4603      	mov	r3, r0
 8000cea:	60b9      	str	r1, [r7, #8]
 8000cec:	607a      	str	r2, [r7, #4]
 8000cee:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cf0:	f7ff ff40 	bl	8000b74 <__NVIC_GetPriorityGrouping>
 8000cf4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cf6:	687a      	ldr	r2, [r7, #4]
 8000cf8:	68b9      	ldr	r1, [r7, #8]
 8000cfa:	6978      	ldr	r0, [r7, #20]
 8000cfc:	f7ff ff90 	bl	8000c20 <NVIC_EncodePriority>
 8000d00:	4602      	mov	r2, r0
 8000d02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d06:	4611      	mov	r1, r2
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff ff5f 	bl	8000bcc <__NVIC_SetPriority>
}
 8000d0e:	bf00      	nop
 8000d10:	3718      	adds	r7, #24
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b082      	sub	sp, #8
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff ff33 	bl	8000b90 <__NVIC_EnableIRQ>
}
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b082      	sub	sp, #8
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f7ff ffa4 	bl	8000c88 <SysTick_Config>
 8000d40:	4603      	mov	r3, r0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	b085      	sub	sp, #20
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d52:	2300      	movs	r3, #0
 8000d54:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	2b02      	cmp	r3, #2
 8000d60:	d005      	beq.n	8000d6e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2204      	movs	r2, #4
 8000d66:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	73fb      	strb	r3, [r7, #15]
 8000d6c:	e037      	b.n	8000dde <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f022 020e 	bic.w	r2, r2, #14
 8000d7c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d88:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000d8c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f022 0201 	bic.w	r2, r2, #1
 8000d9c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000da2:	f003 021f 	and.w	r2, r3, #31
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000daa:	2101      	movs	r1, #1
 8000dac:	fa01 f202 	lsl.w	r2, r1, r2
 8000db0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000db6:	687a      	ldr	r2, [r7, #4]
 8000db8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000dba:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d00c      	beq.n	8000dde <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000dce:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000dd2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dd8:	687a      	ldr	r2, [r7, #4]
 8000dda:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000ddc:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2201      	movs	r2, #1
 8000de2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2200      	movs	r2, #0
 8000dea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8000dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3714      	adds	r7, #20
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr

08000dfc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e04:	2300      	movs	r3, #0
 8000e06:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	d00d      	beq.n	8000e30 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2204      	movs	r2, #4
 8000e18:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2200      	movs	r2, #0
 8000e26:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	73fb      	strb	r3, [r7, #15]
 8000e2e:	e047      	b.n	8000ec0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f022 020e 	bic.w	r2, r2, #14
 8000e3e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f022 0201 	bic.w	r2, r2, #1
 8000e4e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e5a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000e5e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e64:	f003 021f 	and.w	r2, r3, #31
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e72:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e78:	687a      	ldr	r2, [r7, #4]
 8000e7a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000e7c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d00c      	beq.n	8000ea0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e90:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000e94:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000e9e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d003      	beq.n	8000ec0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	4798      	blx	r3
    }
  }
  return status;
 8000ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3710      	adds	r7, #16
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
	...

08000ecc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b087      	sub	sp, #28
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000eda:	e15a      	b.n	8001192 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	2101      	movs	r1, #1
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee8:	4013      	ands	r3, r2
 8000eea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	f000 814c 	beq.w	800118c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f003 0303 	and.w	r3, r3, #3
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d005      	beq.n	8000f0c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f08:	2b02      	cmp	r3, #2
 8000f0a:	d130      	bne.n	8000f6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	2203      	movs	r2, #3
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	4013      	ands	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	68da      	ldr	r2, [r3, #12]
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f42:	2201      	movs	r2, #1
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	43db      	mvns	r3, r3
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	4013      	ands	r3, r2
 8000f50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	091b      	lsrs	r3, r3, #4
 8000f58:	f003 0201 	and.w	r2, r3, #1
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f003 0303 	and.w	r3, r3, #3
 8000f76:	2b03      	cmp	r3, #3
 8000f78:	d017      	beq.n	8000faa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	68db      	ldr	r3, [r3, #12]
 8000f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	2203      	movs	r2, #3
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	43db      	mvns	r3, r3
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	689a      	ldr	r2, [r3, #8]
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f003 0303 	and.w	r3, r3, #3
 8000fb2:	2b02      	cmp	r3, #2
 8000fb4:	d123      	bne.n	8000ffe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	08da      	lsrs	r2, r3, #3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	3208      	adds	r2, #8
 8000fbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	f003 0307 	and.w	r3, r3, #7
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	220f      	movs	r2, #15
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	691a      	ldr	r2, [r3, #16]
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	f003 0307 	and.w	r3, r3, #7
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	08da      	lsrs	r2, r3, #3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	3208      	adds	r2, #8
 8000ff8:	6939      	ldr	r1, [r7, #16]
 8000ffa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	2203      	movs	r2, #3
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	43db      	mvns	r3, r3
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	4013      	ands	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f003 0203 	and.w	r2, r3, #3
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	4313      	orrs	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800103a:	2b00      	cmp	r3, #0
 800103c:	f000 80a6 	beq.w	800118c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001040:	4b5b      	ldr	r3, [pc, #364]	@ (80011b0 <HAL_GPIO_Init+0x2e4>)
 8001042:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001044:	4a5a      	ldr	r2, [pc, #360]	@ (80011b0 <HAL_GPIO_Init+0x2e4>)
 8001046:	f043 0301 	orr.w	r3, r3, #1
 800104a:	6613      	str	r3, [r2, #96]	@ 0x60
 800104c:	4b58      	ldr	r3, [pc, #352]	@ (80011b0 <HAL_GPIO_Init+0x2e4>)
 800104e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001050:	f003 0301 	and.w	r3, r3, #1
 8001054:	60bb      	str	r3, [r7, #8]
 8001056:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001058:	4a56      	ldr	r2, [pc, #344]	@ (80011b4 <HAL_GPIO_Init+0x2e8>)
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	089b      	lsrs	r3, r3, #2
 800105e:	3302      	adds	r3, #2
 8001060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001064:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	f003 0303 	and.w	r3, r3, #3
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	220f      	movs	r2, #15
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	43db      	mvns	r3, r3
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	4013      	ands	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001082:	d01f      	beq.n	80010c4 <HAL_GPIO_Init+0x1f8>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	4a4c      	ldr	r2, [pc, #304]	@ (80011b8 <HAL_GPIO_Init+0x2ec>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d019      	beq.n	80010c0 <HAL_GPIO_Init+0x1f4>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	4a4b      	ldr	r2, [pc, #300]	@ (80011bc <HAL_GPIO_Init+0x2f0>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d013      	beq.n	80010bc <HAL_GPIO_Init+0x1f0>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4a4a      	ldr	r2, [pc, #296]	@ (80011c0 <HAL_GPIO_Init+0x2f4>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d00d      	beq.n	80010b8 <HAL_GPIO_Init+0x1ec>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4a49      	ldr	r2, [pc, #292]	@ (80011c4 <HAL_GPIO_Init+0x2f8>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d007      	beq.n	80010b4 <HAL_GPIO_Init+0x1e8>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	4a48      	ldr	r2, [pc, #288]	@ (80011c8 <HAL_GPIO_Init+0x2fc>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d101      	bne.n	80010b0 <HAL_GPIO_Init+0x1e4>
 80010ac:	2305      	movs	r3, #5
 80010ae:	e00a      	b.n	80010c6 <HAL_GPIO_Init+0x1fa>
 80010b0:	2306      	movs	r3, #6
 80010b2:	e008      	b.n	80010c6 <HAL_GPIO_Init+0x1fa>
 80010b4:	2304      	movs	r3, #4
 80010b6:	e006      	b.n	80010c6 <HAL_GPIO_Init+0x1fa>
 80010b8:	2303      	movs	r3, #3
 80010ba:	e004      	b.n	80010c6 <HAL_GPIO_Init+0x1fa>
 80010bc:	2302      	movs	r3, #2
 80010be:	e002      	b.n	80010c6 <HAL_GPIO_Init+0x1fa>
 80010c0:	2301      	movs	r3, #1
 80010c2:	e000      	b.n	80010c6 <HAL_GPIO_Init+0x1fa>
 80010c4:	2300      	movs	r3, #0
 80010c6:	697a      	ldr	r2, [r7, #20]
 80010c8:	f002 0203 	and.w	r2, r2, #3
 80010cc:	0092      	lsls	r2, r2, #2
 80010ce:	4093      	lsls	r3, r2
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010d6:	4937      	ldr	r1, [pc, #220]	@ (80011b4 <HAL_GPIO_Init+0x2e8>)
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	089b      	lsrs	r3, r3, #2
 80010dc:	3302      	adds	r3, #2
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010e4:	4b39      	ldr	r3, [pc, #228]	@ (80011cc <HAL_GPIO_Init+0x300>)
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	43db      	mvns	r3, r3
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	4013      	ands	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d003      	beq.n	8001108 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	4313      	orrs	r3, r2
 8001106:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001108:	4a30      	ldr	r2, [pc, #192]	@ (80011cc <HAL_GPIO_Init+0x300>)
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800110e:	4b2f      	ldr	r3, [pc, #188]	@ (80011cc <HAL_GPIO_Init+0x300>)
 8001110:	68db      	ldr	r3, [r3, #12]
 8001112:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	43db      	mvns	r3, r3
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	4013      	ands	r3, r2
 800111c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d003      	beq.n	8001132 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	4313      	orrs	r3, r2
 8001130:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001132:	4a26      	ldr	r2, [pc, #152]	@ (80011cc <HAL_GPIO_Init+0x300>)
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001138:	4b24      	ldr	r3, [pc, #144]	@ (80011cc <HAL_GPIO_Init+0x300>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	43db      	mvns	r3, r3
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	4013      	ands	r3, r2
 8001146:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d003      	beq.n	800115c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	4313      	orrs	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800115c:	4a1b      	ldr	r2, [pc, #108]	@ (80011cc <HAL_GPIO_Init+0x300>)
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001162:	4b1a      	ldr	r3, [pc, #104]	@ (80011cc <HAL_GPIO_Init+0x300>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	43db      	mvns	r3, r3
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	4013      	ands	r3, r2
 8001170:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d003      	beq.n	8001186 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	4313      	orrs	r3, r2
 8001184:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001186:	4a11      	ldr	r2, [pc, #68]	@ (80011cc <HAL_GPIO_Init+0x300>)
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	3301      	adds	r3, #1
 8001190:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	fa22 f303 	lsr.w	r3, r2, r3
 800119c:	2b00      	cmp	r3, #0
 800119e:	f47f ae9d 	bne.w	8000edc <HAL_GPIO_Init+0x10>
  }
}
 80011a2:	bf00      	nop
 80011a4:	bf00      	nop
 80011a6:	371c      	adds	r7, #28
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	40021000 	.word	0x40021000
 80011b4:	40010000 	.word	0x40010000
 80011b8:	48000400 	.word	0x48000400
 80011bc:	48000800 	.word	0x48000800
 80011c0:	48000c00 	.word	0x48000c00
 80011c4:	48001000 	.word	0x48001000
 80011c8:	48001400 	.word	0x48001400
 80011cc:	40010400 	.word	0x40010400

080011d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	460b      	mov	r3, r1
 80011da:	807b      	strh	r3, [r7, #2]
 80011dc:	4613      	mov	r3, r2
 80011de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011e0:	787b      	ldrb	r3, [r7, #1]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d003      	beq.n	80011ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011e6:	887a      	ldrh	r2, [r7, #2]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011ec:	e002      	b.n	80011f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011ee:	887a      	ldrh	r2, [r7, #2]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d141      	bne.n	8001292 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800120e:	4b4b      	ldr	r3, [pc, #300]	@ (800133c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001216:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800121a:	d131      	bne.n	8001280 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800121c:	4b47      	ldr	r3, [pc, #284]	@ (800133c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800121e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001222:	4a46      	ldr	r2, [pc, #280]	@ (800133c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001224:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001228:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800122c:	4b43      	ldr	r3, [pc, #268]	@ (800133c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001234:	4a41      	ldr	r2, [pc, #260]	@ (800133c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001236:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800123a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800123c:	4b40      	ldr	r3, [pc, #256]	@ (8001340 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2232      	movs	r2, #50	@ 0x32
 8001242:	fb02 f303 	mul.w	r3, r2, r3
 8001246:	4a3f      	ldr	r2, [pc, #252]	@ (8001344 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001248:	fba2 2303 	umull	r2, r3, r2, r3
 800124c:	0c9b      	lsrs	r3, r3, #18
 800124e:	3301      	adds	r3, #1
 8001250:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001252:	e002      	b.n	800125a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	3b01      	subs	r3, #1
 8001258:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800125a:	4b38      	ldr	r3, [pc, #224]	@ (800133c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800125c:	695b      	ldr	r3, [r3, #20]
 800125e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001262:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001266:	d102      	bne.n	800126e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d1f2      	bne.n	8001254 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800126e:	4b33      	ldr	r3, [pc, #204]	@ (800133c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001270:	695b      	ldr	r3, [r3, #20]
 8001272:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001276:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800127a:	d158      	bne.n	800132e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800127c:	2303      	movs	r3, #3
 800127e:	e057      	b.n	8001330 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001280:	4b2e      	ldr	r3, [pc, #184]	@ (800133c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001282:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001286:	4a2d      	ldr	r2, [pc, #180]	@ (800133c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001288:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800128c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001290:	e04d      	b.n	800132e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001298:	d141      	bne.n	800131e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800129a:	4b28      	ldr	r3, [pc, #160]	@ (800133c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80012a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012a6:	d131      	bne.n	800130c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012a8:	4b24      	ldr	r3, [pc, #144]	@ (800133c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80012ae:	4a23      	ldr	r2, [pc, #140]	@ (800133c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012b4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012b8:	4b20      	ldr	r3, [pc, #128]	@ (800133c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80012c0:	4a1e      	ldr	r2, [pc, #120]	@ (800133c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001340 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2232      	movs	r2, #50	@ 0x32
 80012ce:	fb02 f303 	mul.w	r3, r2, r3
 80012d2:	4a1c      	ldr	r2, [pc, #112]	@ (8001344 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80012d4:	fba2 2303 	umull	r2, r3, r2, r3
 80012d8:	0c9b      	lsrs	r3, r3, #18
 80012da:	3301      	adds	r3, #1
 80012dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012de:	e002      	b.n	80012e6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012e6:	4b15      	ldr	r3, [pc, #84]	@ (800133c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012e8:	695b      	ldr	r3, [r3, #20]
 80012ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012f2:	d102      	bne.n	80012fa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d1f2      	bne.n	80012e0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012fa:	4b10      	ldr	r3, [pc, #64]	@ (800133c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001302:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001306:	d112      	bne.n	800132e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001308:	2303      	movs	r3, #3
 800130a:	e011      	b.n	8001330 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800130c:	4b0b      	ldr	r3, [pc, #44]	@ (800133c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800130e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001312:	4a0a      	ldr	r2, [pc, #40]	@ (800133c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001314:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001318:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800131c:	e007      	b.n	800132e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800131e:	4b07      	ldr	r3, [pc, #28]	@ (800133c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001326:	4a05      	ldr	r2, [pc, #20]	@ (800133c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001328:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800132c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800132e:	2300      	movs	r3, #0
}
 8001330:	4618      	mov	r0, r3
 8001332:	3714      	adds	r7, #20
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	40007000 	.word	0x40007000
 8001340:	20000000 	.word	0x20000000
 8001344:	431bde83 	.word	0x431bde83

08001348 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800134c:	4b05      	ldr	r3, [pc, #20]	@ (8001364 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	4a04      	ldr	r2, [pc, #16]	@ (8001364 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001352:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001356:	6093      	str	r3, [r2, #8]
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	40007000 	.word	0x40007000

08001368 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b088      	sub	sp, #32
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d101      	bne.n	800137a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e2fe      	b.n	8001978 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	2b00      	cmp	r3, #0
 8001384:	d075      	beq.n	8001472 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001386:	4b97      	ldr	r3, [pc, #604]	@ (80015e4 <HAL_RCC_OscConfig+0x27c>)
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	f003 030c 	and.w	r3, r3, #12
 800138e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001390:	4b94      	ldr	r3, [pc, #592]	@ (80015e4 <HAL_RCC_OscConfig+0x27c>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	f003 0303 	and.w	r3, r3, #3
 8001398:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	2b0c      	cmp	r3, #12
 800139e:	d102      	bne.n	80013a6 <HAL_RCC_OscConfig+0x3e>
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	2b03      	cmp	r3, #3
 80013a4:	d002      	beq.n	80013ac <HAL_RCC_OscConfig+0x44>
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	2b08      	cmp	r3, #8
 80013aa:	d10b      	bne.n	80013c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ac:	4b8d      	ldr	r3, [pc, #564]	@ (80015e4 <HAL_RCC_OscConfig+0x27c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d05b      	beq.n	8001470 <HAL_RCC_OscConfig+0x108>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d157      	bne.n	8001470 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e2d9      	b.n	8001978 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013cc:	d106      	bne.n	80013dc <HAL_RCC_OscConfig+0x74>
 80013ce:	4b85      	ldr	r3, [pc, #532]	@ (80015e4 <HAL_RCC_OscConfig+0x27c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a84      	ldr	r2, [pc, #528]	@ (80015e4 <HAL_RCC_OscConfig+0x27c>)
 80013d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013d8:	6013      	str	r3, [r2, #0]
 80013da:	e01d      	b.n	8001418 <HAL_RCC_OscConfig+0xb0>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80013e4:	d10c      	bne.n	8001400 <HAL_RCC_OscConfig+0x98>
 80013e6:	4b7f      	ldr	r3, [pc, #508]	@ (80015e4 <HAL_RCC_OscConfig+0x27c>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a7e      	ldr	r2, [pc, #504]	@ (80015e4 <HAL_RCC_OscConfig+0x27c>)
 80013ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013f0:	6013      	str	r3, [r2, #0]
 80013f2:	4b7c      	ldr	r3, [pc, #496]	@ (80015e4 <HAL_RCC_OscConfig+0x27c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a7b      	ldr	r2, [pc, #492]	@ (80015e4 <HAL_RCC_OscConfig+0x27c>)
 80013f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013fc:	6013      	str	r3, [r2, #0]
 80013fe:	e00b      	b.n	8001418 <HAL_RCC_OscConfig+0xb0>
 8001400:	4b78      	ldr	r3, [pc, #480]	@ (80015e4 <HAL_RCC_OscConfig+0x27c>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a77      	ldr	r2, [pc, #476]	@ (80015e4 <HAL_RCC_OscConfig+0x27c>)
 8001406:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800140a:	6013      	str	r3, [r2, #0]
 800140c:	4b75      	ldr	r3, [pc, #468]	@ (80015e4 <HAL_RCC_OscConfig+0x27c>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a74      	ldr	r2, [pc, #464]	@ (80015e4 <HAL_RCC_OscConfig+0x27c>)
 8001412:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001416:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d013      	beq.n	8001448 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001420:	f7ff fb78 	bl	8000b14 <HAL_GetTick>
 8001424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001426:	e008      	b.n	800143a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001428:	f7ff fb74 	bl	8000b14 <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b64      	cmp	r3, #100	@ 0x64
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e29e      	b.n	8001978 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800143a:	4b6a      	ldr	r3, [pc, #424]	@ (80015e4 <HAL_RCC_OscConfig+0x27c>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d0f0      	beq.n	8001428 <HAL_RCC_OscConfig+0xc0>
 8001446:	e014      	b.n	8001472 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001448:	f7ff fb64 	bl	8000b14 <HAL_GetTick>
 800144c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800144e:	e008      	b.n	8001462 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001450:	f7ff fb60 	bl	8000b14 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b64      	cmp	r3, #100	@ 0x64
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e28a      	b.n	8001978 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001462:	4b60      	ldr	r3, [pc, #384]	@ (80015e4 <HAL_RCC_OscConfig+0x27c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d1f0      	bne.n	8001450 <HAL_RCC_OscConfig+0xe8>
 800146e:	e000      	b.n	8001472 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001470:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d075      	beq.n	800156a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800147e:	4b59      	ldr	r3, [pc, #356]	@ (80015e4 <HAL_RCC_OscConfig+0x27c>)
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	f003 030c 	and.w	r3, r3, #12
 8001486:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001488:	4b56      	ldr	r3, [pc, #344]	@ (80015e4 <HAL_RCC_OscConfig+0x27c>)
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	f003 0303 	and.w	r3, r3, #3
 8001490:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	2b0c      	cmp	r3, #12
 8001496:	d102      	bne.n	800149e <HAL_RCC_OscConfig+0x136>
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	2b02      	cmp	r3, #2
 800149c:	d002      	beq.n	80014a4 <HAL_RCC_OscConfig+0x13c>
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	2b04      	cmp	r3, #4
 80014a2:	d11f      	bne.n	80014e4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014a4:	4b4f      	ldr	r3, [pc, #316]	@ (80015e4 <HAL_RCC_OscConfig+0x27c>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d005      	beq.n	80014bc <HAL_RCC_OscConfig+0x154>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d101      	bne.n	80014bc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e25d      	b.n	8001978 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014bc:	4b49      	ldr	r3, [pc, #292]	@ (80015e4 <HAL_RCC_OscConfig+0x27c>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	691b      	ldr	r3, [r3, #16]
 80014c8:	061b      	lsls	r3, r3, #24
 80014ca:	4946      	ldr	r1, [pc, #280]	@ (80015e4 <HAL_RCC_OscConfig+0x27c>)
 80014cc:	4313      	orrs	r3, r2
 80014ce:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80014d0:	4b45      	ldr	r3, [pc, #276]	@ (80015e8 <HAL_RCC_OscConfig+0x280>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff fad1 	bl	8000a7c <HAL_InitTick>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d043      	beq.n	8001568 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e249      	b.n	8001978 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d023      	beq.n	8001534 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014ec:	4b3d      	ldr	r3, [pc, #244]	@ (80015e4 <HAL_RCC_OscConfig+0x27c>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a3c      	ldr	r2, [pc, #240]	@ (80015e4 <HAL_RCC_OscConfig+0x27c>)
 80014f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f8:	f7ff fb0c 	bl	8000b14 <HAL_GetTick>
 80014fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014fe:	e008      	b.n	8001512 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001500:	f7ff fb08 	bl	8000b14 <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b02      	cmp	r3, #2
 800150c:	d901      	bls.n	8001512 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e232      	b.n	8001978 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001512:	4b34      	ldr	r3, [pc, #208]	@ (80015e4 <HAL_RCC_OscConfig+0x27c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800151a:	2b00      	cmp	r3, #0
 800151c:	d0f0      	beq.n	8001500 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800151e:	4b31      	ldr	r3, [pc, #196]	@ (80015e4 <HAL_RCC_OscConfig+0x27c>)
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	691b      	ldr	r3, [r3, #16]
 800152a:	061b      	lsls	r3, r3, #24
 800152c:	492d      	ldr	r1, [pc, #180]	@ (80015e4 <HAL_RCC_OscConfig+0x27c>)
 800152e:	4313      	orrs	r3, r2
 8001530:	604b      	str	r3, [r1, #4]
 8001532:	e01a      	b.n	800156a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001534:	4b2b      	ldr	r3, [pc, #172]	@ (80015e4 <HAL_RCC_OscConfig+0x27c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a2a      	ldr	r2, [pc, #168]	@ (80015e4 <HAL_RCC_OscConfig+0x27c>)
 800153a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800153e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001540:	f7ff fae8 	bl	8000b14 <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001548:	f7ff fae4 	bl	8000b14 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b02      	cmp	r3, #2
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e20e      	b.n	8001978 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800155a:	4b22      	ldr	r3, [pc, #136]	@ (80015e4 <HAL_RCC_OscConfig+0x27c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1f0      	bne.n	8001548 <HAL_RCC_OscConfig+0x1e0>
 8001566:	e000      	b.n	800156a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001568:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0308 	and.w	r3, r3, #8
 8001572:	2b00      	cmp	r3, #0
 8001574:	d041      	beq.n	80015fa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	695b      	ldr	r3, [r3, #20]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d01c      	beq.n	80015b8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800157e:	4b19      	ldr	r3, [pc, #100]	@ (80015e4 <HAL_RCC_OscConfig+0x27c>)
 8001580:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001584:	4a17      	ldr	r2, [pc, #92]	@ (80015e4 <HAL_RCC_OscConfig+0x27c>)
 8001586:	f043 0301 	orr.w	r3, r3, #1
 800158a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800158e:	f7ff fac1 	bl	8000b14 <HAL_GetTick>
 8001592:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001594:	e008      	b.n	80015a8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001596:	f7ff fabd 	bl	8000b14 <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e1e7      	b.n	8001978 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015a8:	4b0e      	ldr	r3, [pc, #56]	@ (80015e4 <HAL_RCC_OscConfig+0x27c>)
 80015aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d0ef      	beq.n	8001596 <HAL_RCC_OscConfig+0x22e>
 80015b6:	e020      	b.n	80015fa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015b8:	4b0a      	ldr	r3, [pc, #40]	@ (80015e4 <HAL_RCC_OscConfig+0x27c>)
 80015ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015be:	4a09      	ldr	r2, [pc, #36]	@ (80015e4 <HAL_RCC_OscConfig+0x27c>)
 80015c0:	f023 0301 	bic.w	r3, r3, #1
 80015c4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015c8:	f7ff faa4 	bl	8000b14 <HAL_GetTick>
 80015cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015ce:	e00d      	b.n	80015ec <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015d0:	f7ff faa0 	bl	8000b14 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d906      	bls.n	80015ec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e1ca      	b.n	8001978 <HAL_RCC_OscConfig+0x610>
 80015e2:	bf00      	nop
 80015e4:	40021000 	.word	0x40021000
 80015e8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015ec:	4b8c      	ldr	r3, [pc, #560]	@ (8001820 <HAL_RCC_OscConfig+0x4b8>)
 80015ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d1ea      	bne.n	80015d0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0304 	and.w	r3, r3, #4
 8001602:	2b00      	cmp	r3, #0
 8001604:	f000 80a6 	beq.w	8001754 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001608:	2300      	movs	r3, #0
 800160a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800160c:	4b84      	ldr	r3, [pc, #528]	@ (8001820 <HAL_RCC_OscConfig+0x4b8>)
 800160e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001610:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d101      	bne.n	800161c <HAL_RCC_OscConfig+0x2b4>
 8001618:	2301      	movs	r3, #1
 800161a:	e000      	b.n	800161e <HAL_RCC_OscConfig+0x2b6>
 800161c:	2300      	movs	r3, #0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d00d      	beq.n	800163e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001622:	4b7f      	ldr	r3, [pc, #508]	@ (8001820 <HAL_RCC_OscConfig+0x4b8>)
 8001624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001626:	4a7e      	ldr	r2, [pc, #504]	@ (8001820 <HAL_RCC_OscConfig+0x4b8>)
 8001628:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800162c:	6593      	str	r3, [r2, #88]	@ 0x58
 800162e:	4b7c      	ldr	r3, [pc, #496]	@ (8001820 <HAL_RCC_OscConfig+0x4b8>)
 8001630:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001632:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800163a:	2301      	movs	r3, #1
 800163c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800163e:	4b79      	ldr	r3, [pc, #484]	@ (8001824 <HAL_RCC_OscConfig+0x4bc>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001646:	2b00      	cmp	r3, #0
 8001648:	d118      	bne.n	800167c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800164a:	4b76      	ldr	r3, [pc, #472]	@ (8001824 <HAL_RCC_OscConfig+0x4bc>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a75      	ldr	r2, [pc, #468]	@ (8001824 <HAL_RCC_OscConfig+0x4bc>)
 8001650:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001654:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001656:	f7ff fa5d 	bl	8000b14 <HAL_GetTick>
 800165a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800165c:	e008      	b.n	8001670 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800165e:	f7ff fa59 	bl	8000b14 <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	2b02      	cmp	r3, #2
 800166a:	d901      	bls.n	8001670 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e183      	b.n	8001978 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001670:	4b6c      	ldr	r3, [pc, #432]	@ (8001824 <HAL_RCC_OscConfig+0x4bc>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001678:	2b00      	cmp	r3, #0
 800167a:	d0f0      	beq.n	800165e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d108      	bne.n	8001696 <HAL_RCC_OscConfig+0x32e>
 8001684:	4b66      	ldr	r3, [pc, #408]	@ (8001820 <HAL_RCC_OscConfig+0x4b8>)
 8001686:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800168a:	4a65      	ldr	r2, [pc, #404]	@ (8001820 <HAL_RCC_OscConfig+0x4b8>)
 800168c:	f043 0301 	orr.w	r3, r3, #1
 8001690:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001694:	e024      	b.n	80016e0 <HAL_RCC_OscConfig+0x378>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	2b05      	cmp	r3, #5
 800169c:	d110      	bne.n	80016c0 <HAL_RCC_OscConfig+0x358>
 800169e:	4b60      	ldr	r3, [pc, #384]	@ (8001820 <HAL_RCC_OscConfig+0x4b8>)
 80016a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016a4:	4a5e      	ldr	r2, [pc, #376]	@ (8001820 <HAL_RCC_OscConfig+0x4b8>)
 80016a6:	f043 0304 	orr.w	r3, r3, #4
 80016aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016ae:	4b5c      	ldr	r3, [pc, #368]	@ (8001820 <HAL_RCC_OscConfig+0x4b8>)
 80016b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016b4:	4a5a      	ldr	r2, [pc, #360]	@ (8001820 <HAL_RCC_OscConfig+0x4b8>)
 80016b6:	f043 0301 	orr.w	r3, r3, #1
 80016ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016be:	e00f      	b.n	80016e0 <HAL_RCC_OscConfig+0x378>
 80016c0:	4b57      	ldr	r3, [pc, #348]	@ (8001820 <HAL_RCC_OscConfig+0x4b8>)
 80016c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016c6:	4a56      	ldr	r2, [pc, #344]	@ (8001820 <HAL_RCC_OscConfig+0x4b8>)
 80016c8:	f023 0301 	bic.w	r3, r3, #1
 80016cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016d0:	4b53      	ldr	r3, [pc, #332]	@ (8001820 <HAL_RCC_OscConfig+0x4b8>)
 80016d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016d6:	4a52      	ldr	r2, [pc, #328]	@ (8001820 <HAL_RCC_OscConfig+0x4b8>)
 80016d8:	f023 0304 	bic.w	r3, r3, #4
 80016dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d016      	beq.n	8001716 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016e8:	f7ff fa14 	bl	8000b14 <HAL_GetTick>
 80016ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016ee:	e00a      	b.n	8001706 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016f0:	f7ff fa10 	bl	8000b14 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016fe:	4293      	cmp	r3, r2
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e138      	b.n	8001978 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001706:	4b46      	ldr	r3, [pc, #280]	@ (8001820 <HAL_RCC_OscConfig+0x4b8>)
 8001708:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800170c:	f003 0302 	and.w	r3, r3, #2
 8001710:	2b00      	cmp	r3, #0
 8001712:	d0ed      	beq.n	80016f0 <HAL_RCC_OscConfig+0x388>
 8001714:	e015      	b.n	8001742 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001716:	f7ff f9fd 	bl	8000b14 <HAL_GetTick>
 800171a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800171c:	e00a      	b.n	8001734 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800171e:	f7ff f9f9 	bl	8000b14 <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	f241 3288 	movw	r2, #5000	@ 0x1388
 800172c:	4293      	cmp	r3, r2
 800172e:	d901      	bls.n	8001734 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e121      	b.n	8001978 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001734:	4b3a      	ldr	r3, [pc, #232]	@ (8001820 <HAL_RCC_OscConfig+0x4b8>)
 8001736:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d1ed      	bne.n	800171e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001742:	7ffb      	ldrb	r3, [r7, #31]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d105      	bne.n	8001754 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001748:	4b35      	ldr	r3, [pc, #212]	@ (8001820 <HAL_RCC_OscConfig+0x4b8>)
 800174a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800174c:	4a34      	ldr	r2, [pc, #208]	@ (8001820 <HAL_RCC_OscConfig+0x4b8>)
 800174e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001752:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0320 	and.w	r3, r3, #32
 800175c:	2b00      	cmp	r3, #0
 800175e:	d03c      	beq.n	80017da <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d01c      	beq.n	80017a2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001768:	4b2d      	ldr	r3, [pc, #180]	@ (8001820 <HAL_RCC_OscConfig+0x4b8>)
 800176a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800176e:	4a2c      	ldr	r2, [pc, #176]	@ (8001820 <HAL_RCC_OscConfig+0x4b8>)
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001778:	f7ff f9cc 	bl	8000b14 <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800177e:	e008      	b.n	8001792 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001780:	f7ff f9c8 	bl	8000b14 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b02      	cmp	r3, #2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e0f2      	b.n	8001978 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001792:	4b23      	ldr	r3, [pc, #140]	@ (8001820 <HAL_RCC_OscConfig+0x4b8>)
 8001794:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001798:	f003 0302 	and.w	r3, r3, #2
 800179c:	2b00      	cmp	r3, #0
 800179e:	d0ef      	beq.n	8001780 <HAL_RCC_OscConfig+0x418>
 80017a0:	e01b      	b.n	80017da <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80017a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001820 <HAL_RCC_OscConfig+0x4b8>)
 80017a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80017a8:	4a1d      	ldr	r2, [pc, #116]	@ (8001820 <HAL_RCC_OscConfig+0x4b8>)
 80017aa:	f023 0301 	bic.w	r3, r3, #1
 80017ae:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b2:	f7ff f9af 	bl	8000b14 <HAL_GetTick>
 80017b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80017b8:	e008      	b.n	80017cc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017ba:	f7ff f9ab 	bl	8000b14 <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e0d5      	b.n	8001978 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80017cc:	4b14      	ldr	r3, [pc, #80]	@ (8001820 <HAL_RCC_OscConfig+0x4b8>)
 80017ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d1ef      	bne.n	80017ba <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	69db      	ldr	r3, [r3, #28]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f000 80c9 	beq.w	8001976 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001820 <HAL_RCC_OscConfig+0x4b8>)
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	f003 030c 	and.w	r3, r3, #12
 80017ec:	2b0c      	cmp	r3, #12
 80017ee:	f000 8083 	beq.w	80018f8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	69db      	ldr	r3, [r3, #28]
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d15e      	bne.n	80018b8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017fa:	4b09      	ldr	r3, [pc, #36]	@ (8001820 <HAL_RCC_OscConfig+0x4b8>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a08      	ldr	r2, [pc, #32]	@ (8001820 <HAL_RCC_OscConfig+0x4b8>)
 8001800:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001804:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001806:	f7ff f985 	bl	8000b14 <HAL_GetTick>
 800180a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800180c:	e00c      	b.n	8001828 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800180e:	f7ff f981 	bl	8000b14 <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d905      	bls.n	8001828 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e0ab      	b.n	8001978 <HAL_RCC_OscConfig+0x610>
 8001820:	40021000 	.word	0x40021000
 8001824:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001828:	4b55      	ldr	r3, [pc, #340]	@ (8001980 <HAL_RCC_OscConfig+0x618>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d1ec      	bne.n	800180e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001834:	4b52      	ldr	r3, [pc, #328]	@ (8001980 <HAL_RCC_OscConfig+0x618>)
 8001836:	68da      	ldr	r2, [r3, #12]
 8001838:	4b52      	ldr	r3, [pc, #328]	@ (8001984 <HAL_RCC_OscConfig+0x61c>)
 800183a:	4013      	ands	r3, r2
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	6a11      	ldr	r1, [r2, #32]
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001844:	3a01      	subs	r2, #1
 8001846:	0112      	lsls	r2, r2, #4
 8001848:	4311      	orrs	r1, r2
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800184e:	0212      	lsls	r2, r2, #8
 8001850:	4311      	orrs	r1, r2
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001856:	0852      	lsrs	r2, r2, #1
 8001858:	3a01      	subs	r2, #1
 800185a:	0552      	lsls	r2, r2, #21
 800185c:	4311      	orrs	r1, r2
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001862:	0852      	lsrs	r2, r2, #1
 8001864:	3a01      	subs	r2, #1
 8001866:	0652      	lsls	r2, r2, #25
 8001868:	4311      	orrs	r1, r2
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800186e:	06d2      	lsls	r2, r2, #27
 8001870:	430a      	orrs	r2, r1
 8001872:	4943      	ldr	r1, [pc, #268]	@ (8001980 <HAL_RCC_OscConfig+0x618>)
 8001874:	4313      	orrs	r3, r2
 8001876:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001878:	4b41      	ldr	r3, [pc, #260]	@ (8001980 <HAL_RCC_OscConfig+0x618>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a40      	ldr	r2, [pc, #256]	@ (8001980 <HAL_RCC_OscConfig+0x618>)
 800187e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001882:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001884:	4b3e      	ldr	r3, [pc, #248]	@ (8001980 <HAL_RCC_OscConfig+0x618>)
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	4a3d      	ldr	r2, [pc, #244]	@ (8001980 <HAL_RCC_OscConfig+0x618>)
 800188a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800188e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001890:	f7ff f940 	bl	8000b14 <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001898:	f7ff f93c 	bl	8000b14 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e066      	b.n	8001978 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018aa:	4b35      	ldr	r3, [pc, #212]	@ (8001980 <HAL_RCC_OscConfig+0x618>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d0f0      	beq.n	8001898 <HAL_RCC_OscConfig+0x530>
 80018b6:	e05e      	b.n	8001976 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018b8:	4b31      	ldr	r3, [pc, #196]	@ (8001980 <HAL_RCC_OscConfig+0x618>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a30      	ldr	r2, [pc, #192]	@ (8001980 <HAL_RCC_OscConfig+0x618>)
 80018be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c4:	f7ff f926 	bl	8000b14 <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018cc:	f7ff f922 	bl	8000b14 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e04c      	b.n	8001978 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018de:	4b28      	ldr	r3, [pc, #160]	@ (8001980 <HAL_RCC_OscConfig+0x618>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1f0      	bne.n	80018cc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80018ea:	4b25      	ldr	r3, [pc, #148]	@ (8001980 <HAL_RCC_OscConfig+0x618>)
 80018ec:	68da      	ldr	r2, [r3, #12]
 80018ee:	4924      	ldr	r1, [pc, #144]	@ (8001980 <HAL_RCC_OscConfig+0x618>)
 80018f0:	4b25      	ldr	r3, [pc, #148]	@ (8001988 <HAL_RCC_OscConfig+0x620>)
 80018f2:	4013      	ands	r3, r2
 80018f4:	60cb      	str	r3, [r1, #12]
 80018f6:	e03e      	b.n	8001976 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	69db      	ldr	r3, [r3, #28]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d101      	bne.n	8001904 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e039      	b.n	8001978 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001904:	4b1e      	ldr	r3, [pc, #120]	@ (8001980 <HAL_RCC_OscConfig+0x618>)
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	f003 0203 	and.w	r2, r3, #3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6a1b      	ldr	r3, [r3, #32]
 8001914:	429a      	cmp	r2, r3
 8001916:	d12c      	bne.n	8001972 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001922:	3b01      	subs	r3, #1
 8001924:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001926:	429a      	cmp	r2, r3
 8001928:	d123      	bne.n	8001972 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001934:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001936:	429a      	cmp	r2, r3
 8001938:	d11b      	bne.n	8001972 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001944:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001946:	429a      	cmp	r2, r3
 8001948:	d113      	bne.n	8001972 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001954:	085b      	lsrs	r3, r3, #1
 8001956:	3b01      	subs	r3, #1
 8001958:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800195a:	429a      	cmp	r2, r3
 800195c:	d109      	bne.n	8001972 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001968:	085b      	lsrs	r3, r3, #1
 800196a:	3b01      	subs	r3, #1
 800196c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800196e:	429a      	cmp	r2, r3
 8001970:	d001      	beq.n	8001976 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e000      	b.n	8001978 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001976:	2300      	movs	r3, #0
}
 8001978:	4618      	mov	r0, r3
 800197a:	3720      	adds	r7, #32
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40021000 	.word	0x40021000
 8001984:	019f800c 	.word	0x019f800c
 8001988:	feeefffc 	.word	0xfeeefffc

0800198c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001996:	2300      	movs	r3, #0
 8001998:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d101      	bne.n	80019a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e11e      	b.n	8001be2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019a4:	4b91      	ldr	r3, [pc, #580]	@ (8001bec <HAL_RCC_ClockConfig+0x260>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 030f 	and.w	r3, r3, #15
 80019ac:	683a      	ldr	r2, [r7, #0]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d910      	bls.n	80019d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019b2:	4b8e      	ldr	r3, [pc, #568]	@ (8001bec <HAL_RCC_ClockConfig+0x260>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f023 020f 	bic.w	r2, r3, #15
 80019ba:	498c      	ldr	r1, [pc, #560]	@ (8001bec <HAL_RCC_ClockConfig+0x260>)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	4313      	orrs	r3, r2
 80019c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019c2:	4b8a      	ldr	r3, [pc, #552]	@ (8001bec <HAL_RCC_ClockConfig+0x260>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 030f 	and.w	r3, r3, #15
 80019ca:	683a      	ldr	r2, [r7, #0]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d001      	beq.n	80019d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e106      	b.n	8001be2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0301 	and.w	r3, r3, #1
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d073      	beq.n	8001ac8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	2b03      	cmp	r3, #3
 80019e6:	d129      	bne.n	8001a3c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019e8:	4b81      	ldr	r3, [pc, #516]	@ (8001bf0 <HAL_RCC_ClockConfig+0x264>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d101      	bne.n	80019f8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e0f4      	b.n	8001be2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80019f8:	f000 f99e 	bl	8001d38 <RCC_GetSysClockFreqFromPLLSource>
 80019fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	4a7c      	ldr	r2, [pc, #496]	@ (8001bf4 <HAL_RCC_ClockConfig+0x268>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d93f      	bls.n	8001a86 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001a06:	4b7a      	ldr	r3, [pc, #488]	@ (8001bf0 <HAL_RCC_ClockConfig+0x264>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d009      	beq.n	8001a26 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d033      	beq.n	8001a86 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d12f      	bne.n	8001a86 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001a26:	4b72      	ldr	r3, [pc, #456]	@ (8001bf0 <HAL_RCC_ClockConfig+0x264>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001a2e:	4a70      	ldr	r2, [pc, #448]	@ (8001bf0 <HAL_RCC_ClockConfig+0x264>)
 8001a30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a34:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001a36:	2380      	movs	r3, #128	@ 0x80
 8001a38:	617b      	str	r3, [r7, #20]
 8001a3a:	e024      	b.n	8001a86 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d107      	bne.n	8001a54 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a44:	4b6a      	ldr	r3, [pc, #424]	@ (8001bf0 <HAL_RCC_ClockConfig+0x264>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d109      	bne.n	8001a64 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e0c6      	b.n	8001be2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a54:	4b66      	ldr	r3, [pc, #408]	@ (8001bf0 <HAL_RCC_ClockConfig+0x264>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d101      	bne.n	8001a64 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e0be      	b.n	8001be2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001a64:	f000 f8ce 	bl	8001c04 <HAL_RCC_GetSysClockFreq>
 8001a68:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	4a61      	ldr	r2, [pc, #388]	@ (8001bf4 <HAL_RCC_ClockConfig+0x268>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d909      	bls.n	8001a86 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001a72:	4b5f      	ldr	r3, [pc, #380]	@ (8001bf0 <HAL_RCC_ClockConfig+0x264>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001a7a:	4a5d      	ldr	r2, [pc, #372]	@ (8001bf0 <HAL_RCC_ClockConfig+0x264>)
 8001a7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a80:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001a82:	2380      	movs	r3, #128	@ 0x80
 8001a84:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a86:	4b5a      	ldr	r3, [pc, #360]	@ (8001bf0 <HAL_RCC_ClockConfig+0x264>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f023 0203 	bic.w	r2, r3, #3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	4957      	ldr	r1, [pc, #348]	@ (8001bf0 <HAL_RCC_ClockConfig+0x264>)
 8001a94:	4313      	orrs	r3, r2
 8001a96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a98:	f7ff f83c 	bl	8000b14 <HAL_GetTick>
 8001a9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a9e:	e00a      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aa0:	f7ff f838 	bl	8000b14 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e095      	b.n	8001be2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ab6:	4b4e      	ldr	r3, [pc, #312]	@ (8001bf0 <HAL_RCC_ClockConfig+0x264>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f003 020c 	and.w	r2, r3, #12
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d1eb      	bne.n	8001aa0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d023      	beq.n	8001b1c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0304 	and.w	r3, r3, #4
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d005      	beq.n	8001aec <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ae0:	4b43      	ldr	r3, [pc, #268]	@ (8001bf0 <HAL_RCC_ClockConfig+0x264>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	4a42      	ldr	r2, [pc, #264]	@ (8001bf0 <HAL_RCC_ClockConfig+0x264>)
 8001ae6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001aea:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0308 	and.w	r3, r3, #8
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d007      	beq.n	8001b08 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001af8:	4b3d      	ldr	r3, [pc, #244]	@ (8001bf0 <HAL_RCC_ClockConfig+0x264>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001b00:	4a3b      	ldr	r2, [pc, #236]	@ (8001bf0 <HAL_RCC_ClockConfig+0x264>)
 8001b02:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001b06:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b08:	4b39      	ldr	r3, [pc, #228]	@ (8001bf0 <HAL_RCC_ClockConfig+0x264>)
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	4936      	ldr	r1, [pc, #216]	@ (8001bf0 <HAL_RCC_ClockConfig+0x264>)
 8001b16:	4313      	orrs	r3, r2
 8001b18:	608b      	str	r3, [r1, #8]
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	2b80      	cmp	r3, #128	@ 0x80
 8001b20:	d105      	bne.n	8001b2e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001b22:	4b33      	ldr	r3, [pc, #204]	@ (8001bf0 <HAL_RCC_ClockConfig+0x264>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	4a32      	ldr	r2, [pc, #200]	@ (8001bf0 <HAL_RCC_ClockConfig+0x264>)
 8001b28:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001b2c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b2e:	4b2f      	ldr	r3, [pc, #188]	@ (8001bec <HAL_RCC_ClockConfig+0x260>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 030f 	and.w	r3, r3, #15
 8001b36:	683a      	ldr	r2, [r7, #0]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d21d      	bcs.n	8001b78 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b3c:	4b2b      	ldr	r3, [pc, #172]	@ (8001bec <HAL_RCC_ClockConfig+0x260>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f023 020f 	bic.w	r2, r3, #15
 8001b44:	4929      	ldr	r1, [pc, #164]	@ (8001bec <HAL_RCC_ClockConfig+0x260>)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b4c:	f7fe ffe2 	bl	8000b14 <HAL_GetTick>
 8001b50:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b52:	e00a      	b.n	8001b6a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b54:	f7fe ffde 	bl	8000b14 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e03b      	b.n	8001be2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b6a:	4b20      	ldr	r3, [pc, #128]	@ (8001bec <HAL_RCC_ClockConfig+0x260>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 030f 	and.w	r3, r3, #15
 8001b72:	683a      	ldr	r2, [r7, #0]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d1ed      	bne.n	8001b54 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0304 	and.w	r3, r3, #4
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d008      	beq.n	8001b96 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b84:	4b1a      	ldr	r3, [pc, #104]	@ (8001bf0 <HAL_RCC_ClockConfig+0x264>)
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	4917      	ldr	r1, [pc, #92]	@ (8001bf0 <HAL_RCC_ClockConfig+0x264>)
 8001b92:	4313      	orrs	r3, r2
 8001b94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0308 	and.w	r3, r3, #8
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d009      	beq.n	8001bb6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ba2:	4b13      	ldr	r3, [pc, #76]	@ (8001bf0 <HAL_RCC_ClockConfig+0x264>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	00db      	lsls	r3, r3, #3
 8001bb0:	490f      	ldr	r1, [pc, #60]	@ (8001bf0 <HAL_RCC_ClockConfig+0x264>)
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bb6:	f000 f825 	bl	8001c04 <HAL_RCC_GetSysClockFreq>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf0 <HAL_RCC_ClockConfig+0x264>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	091b      	lsrs	r3, r3, #4
 8001bc2:	f003 030f 	and.w	r3, r3, #15
 8001bc6:	490c      	ldr	r1, [pc, #48]	@ (8001bf8 <HAL_RCC_ClockConfig+0x26c>)
 8001bc8:	5ccb      	ldrb	r3, [r1, r3]
 8001bca:	f003 031f 	and.w	r3, r3, #31
 8001bce:	fa22 f303 	lsr.w	r3, r2, r3
 8001bd2:	4a0a      	ldr	r2, [pc, #40]	@ (8001bfc <HAL_RCC_ClockConfig+0x270>)
 8001bd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001bd6:	4b0a      	ldr	r3, [pc, #40]	@ (8001c00 <HAL_RCC_ClockConfig+0x274>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7fe ff4e 	bl	8000a7c <HAL_InitTick>
 8001be0:	4603      	mov	r3, r0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3718      	adds	r7, #24
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40022000 	.word	0x40022000
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	04c4b400 	.word	0x04c4b400
 8001bf8:	08003dd8 	.word	0x08003dd8
 8001bfc:	20000000 	.word	0x20000000
 8001c00:	20000004 	.word	0x20000004

08001c04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b087      	sub	sp, #28
 8001c08:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001c0a:	4b2c      	ldr	r3, [pc, #176]	@ (8001cbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f003 030c 	and.w	r3, r3, #12
 8001c12:	2b04      	cmp	r3, #4
 8001c14:	d102      	bne.n	8001c1c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c16:	4b2a      	ldr	r3, [pc, #168]	@ (8001cc0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c18:	613b      	str	r3, [r7, #16]
 8001c1a:	e047      	b.n	8001cac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001c1c:	4b27      	ldr	r3, [pc, #156]	@ (8001cbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f003 030c 	and.w	r3, r3, #12
 8001c24:	2b08      	cmp	r3, #8
 8001c26:	d102      	bne.n	8001c2e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c28:	4b26      	ldr	r3, [pc, #152]	@ (8001cc4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c2a:	613b      	str	r3, [r7, #16]
 8001c2c:	e03e      	b.n	8001cac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001c2e:	4b23      	ldr	r3, [pc, #140]	@ (8001cbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f003 030c 	and.w	r3, r3, #12
 8001c36:	2b0c      	cmp	r3, #12
 8001c38:	d136      	bne.n	8001ca8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c3a:	4b20      	ldr	r3, [pc, #128]	@ (8001cbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	f003 0303 	and.w	r3, r3, #3
 8001c42:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c44:	4b1d      	ldr	r3, [pc, #116]	@ (8001cbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	091b      	lsrs	r3, r3, #4
 8001c4a:	f003 030f 	and.w	r3, r3, #15
 8001c4e:	3301      	adds	r3, #1
 8001c50:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2b03      	cmp	r3, #3
 8001c56:	d10c      	bne.n	8001c72 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c58:	4a1a      	ldr	r2, [pc, #104]	@ (8001cc4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c60:	4a16      	ldr	r2, [pc, #88]	@ (8001cbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c62:	68d2      	ldr	r2, [r2, #12]
 8001c64:	0a12      	lsrs	r2, r2, #8
 8001c66:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001c6a:	fb02 f303 	mul.w	r3, r2, r3
 8001c6e:	617b      	str	r3, [r7, #20]
      break;
 8001c70:	e00c      	b.n	8001c8c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c72:	4a13      	ldr	r2, [pc, #76]	@ (8001cc0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c7a:	4a10      	ldr	r2, [pc, #64]	@ (8001cbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c7c:	68d2      	ldr	r2, [r2, #12]
 8001c7e:	0a12      	lsrs	r2, r2, #8
 8001c80:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001c84:	fb02 f303 	mul.w	r3, r2, r3
 8001c88:	617b      	str	r3, [r7, #20]
      break;
 8001c8a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001cbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	0e5b      	lsrs	r3, r3, #25
 8001c92:	f003 0303 	and.w	r3, r3, #3
 8001c96:	3301      	adds	r3, #1
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001c9c:	697a      	ldr	r2, [r7, #20]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca4:	613b      	str	r3, [r7, #16]
 8001ca6:	e001      	b.n	8001cac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001cac:	693b      	ldr	r3, [r7, #16]
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	371c      	adds	r7, #28
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	00f42400 	.word	0x00f42400
 8001cc4:	016e3600 	.word	0x016e3600

08001cc8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ccc:	4b03      	ldr	r3, [pc, #12]	@ (8001cdc <HAL_RCC_GetHCLKFreq+0x14>)
 8001cce:	681b      	ldr	r3, [r3, #0]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	20000000 	.word	0x20000000

08001ce0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001ce4:	f7ff fff0 	bl	8001cc8 <HAL_RCC_GetHCLKFreq>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	4b06      	ldr	r3, [pc, #24]	@ (8001d04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	0a1b      	lsrs	r3, r3, #8
 8001cf0:	f003 0307 	and.w	r3, r3, #7
 8001cf4:	4904      	ldr	r1, [pc, #16]	@ (8001d08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001cf6:	5ccb      	ldrb	r3, [r1, r3]
 8001cf8:	f003 031f 	and.w	r3, r3, #31
 8001cfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	40021000 	.word	0x40021000
 8001d08:	08003de8 	.word	0x08003de8

08001d0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d10:	f7ff ffda 	bl	8001cc8 <HAL_RCC_GetHCLKFreq>
 8001d14:	4602      	mov	r2, r0
 8001d16:	4b06      	ldr	r3, [pc, #24]	@ (8001d30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	0adb      	lsrs	r3, r3, #11
 8001d1c:	f003 0307 	and.w	r3, r3, #7
 8001d20:	4904      	ldr	r1, [pc, #16]	@ (8001d34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d22:	5ccb      	ldrb	r3, [r1, r3]
 8001d24:	f003 031f 	and.w	r3, r3, #31
 8001d28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40021000 	.word	0x40021000
 8001d34:	08003de8 	.word	0x08003de8

08001d38 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b087      	sub	sp, #28
 8001d3c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d3e:	4b1e      	ldr	r3, [pc, #120]	@ (8001db8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	f003 0303 	and.w	r3, r3, #3
 8001d46:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d48:	4b1b      	ldr	r3, [pc, #108]	@ (8001db8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	091b      	lsrs	r3, r3, #4
 8001d4e:	f003 030f 	and.w	r3, r3, #15
 8001d52:	3301      	adds	r3, #1
 8001d54:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	2b03      	cmp	r3, #3
 8001d5a:	d10c      	bne.n	8001d76 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d5c:	4a17      	ldr	r2, [pc, #92]	@ (8001dbc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d64:	4a14      	ldr	r2, [pc, #80]	@ (8001db8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d66:	68d2      	ldr	r2, [r2, #12]
 8001d68:	0a12      	lsrs	r2, r2, #8
 8001d6a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001d6e:	fb02 f303 	mul.w	r3, r2, r3
 8001d72:	617b      	str	r3, [r7, #20]
    break;
 8001d74:	e00c      	b.n	8001d90 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d76:	4a12      	ldr	r2, [pc, #72]	@ (8001dc0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d7e:	4a0e      	ldr	r2, [pc, #56]	@ (8001db8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d80:	68d2      	ldr	r2, [r2, #12]
 8001d82:	0a12      	lsrs	r2, r2, #8
 8001d84:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001d88:	fb02 f303 	mul.w	r3, r2, r3
 8001d8c:	617b      	str	r3, [r7, #20]
    break;
 8001d8e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d90:	4b09      	ldr	r3, [pc, #36]	@ (8001db8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	0e5b      	lsrs	r3, r3, #25
 8001d96:	f003 0303 	and.w	r3, r3, #3
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001da0:	697a      	ldr	r2, [r7, #20]
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001daa:	687b      	ldr	r3, [r7, #4]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	371c      	adds	r7, #28
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	016e3600 	.word	0x016e3600
 8001dc0:	00f42400 	.word	0x00f42400

08001dc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001dcc:	2300      	movs	r3, #0
 8001dce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f000 8098 	beq.w	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001de2:	2300      	movs	r3, #0
 8001de4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001de6:	4b43      	ldr	r3, [pc, #268]	@ (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001de8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d10d      	bne.n	8001e0e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001df2:	4b40      	ldr	r3, [pc, #256]	@ (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001df4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001df6:	4a3f      	ldr	r2, [pc, #252]	@ (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001df8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dfc:	6593      	str	r3, [r2, #88]	@ 0x58
 8001dfe:	4b3d      	ldr	r3, [pc, #244]	@ (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e06:	60bb      	str	r3, [r7, #8]
 8001e08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e0e:	4b3a      	ldr	r3, [pc, #232]	@ (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a39      	ldr	r2, [pc, #228]	@ (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001e14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e18:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e1a:	f7fe fe7b 	bl	8000b14 <HAL_GetTick>
 8001e1e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e20:	e009      	b.n	8001e36 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e22:	f7fe fe77 	bl	8000b14 <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d902      	bls.n	8001e36 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	74fb      	strb	r3, [r7, #19]
        break;
 8001e34:	e005      	b.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e36:	4b30      	ldr	r3, [pc, #192]	@ (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d0ef      	beq.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001e42:	7cfb      	ldrb	r3, [r7, #19]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d159      	bne.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001e48:	4b2a      	ldr	r3, [pc, #168]	@ (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e52:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d01e      	beq.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e5e:	697a      	ldr	r2, [r7, #20]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d019      	beq.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001e64:	4b23      	ldr	r3, [pc, #140]	@ (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e6e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e70:	4b20      	ldr	r3, [pc, #128]	@ (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e76:	4a1f      	ldr	r2, [pc, #124]	@ (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e80:	4b1c      	ldr	r3, [pc, #112]	@ (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e86:	4a1b      	ldr	r2, [pc, #108]	@ (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001e90:	4a18      	ldr	r2, [pc, #96]	@ (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d016      	beq.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea2:	f7fe fe37 	bl	8000b14 <HAL_GetTick>
 8001ea6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ea8:	e00b      	b.n	8001ec2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eaa:	f7fe fe33 	bl	8000b14 <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d902      	bls.n	8001ec2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	74fb      	strb	r3, [r7, #19]
            break;
 8001ec0:	e006      	b.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ec2:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d0ec      	beq.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001ed0:	7cfb      	ldrb	r3, [r7, #19]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d10b      	bne.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ed6:	4b07      	ldr	r3, [pc, #28]	@ (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001edc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ee4:	4903      	ldr	r1, [pc, #12]	@ (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001eec:	e008      	b.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001eee:	7cfb      	ldrb	r3, [r7, #19]
 8001ef0:	74bb      	strb	r3, [r7, #18]
 8001ef2:	e005      	b.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001efc:	7cfb      	ldrb	r3, [r7, #19]
 8001efe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f00:	7c7b      	ldrb	r3, [r7, #17]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d105      	bne.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f06:	4ba7      	ldr	r3, [pc, #668]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f0a:	4aa6      	ldr	r2, [pc, #664]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f0c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f10:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d00a      	beq.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f1e:	4ba1      	ldr	r3, [pc, #644]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f24:	f023 0203 	bic.w	r2, r3, #3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	499d      	ldr	r1, [pc, #628]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d00a      	beq.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f40:	4b98      	ldr	r3, [pc, #608]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f46:	f023 020c 	bic.w	r2, r3, #12
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	4995      	ldr	r1, [pc, #596]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f50:	4313      	orrs	r3, r2
 8001f52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0304 	and.w	r3, r3, #4
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00a      	beq.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f62:	4b90      	ldr	r3, [pc, #576]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f68:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	498c      	ldr	r1, [pc, #560]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0308 	and.w	r3, r3, #8
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d00a      	beq.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001f84:	4b87      	ldr	r3, [pc, #540]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f8a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	4984      	ldr	r1, [pc, #528]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0310 	and.w	r3, r3, #16
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d00a      	beq.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001fa6:	4b7f      	ldr	r3, [pc, #508]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	695b      	ldr	r3, [r3, #20]
 8001fb4:	497b      	ldr	r1, [pc, #492]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0320 	and.w	r3, r3, #32
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d00a      	beq.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001fc8:	4b76      	ldr	r3, [pc, #472]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fce:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	4973      	ldr	r1, [pc, #460]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d00a      	beq.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001fea:	4b6e      	ldr	r3, [pc, #440]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ff0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	69db      	ldr	r3, [r3, #28]
 8001ff8:	496a      	ldr	r1, [pc, #424]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002008:	2b00      	cmp	r3, #0
 800200a:	d00a      	beq.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800200c:	4b65      	ldr	r3, [pc, #404]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800200e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002012:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a1b      	ldr	r3, [r3, #32]
 800201a:	4962      	ldr	r1, [pc, #392]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800201c:	4313      	orrs	r3, r2
 800201e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800202a:	2b00      	cmp	r3, #0
 800202c:	d00a      	beq.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800202e:	4b5d      	ldr	r3, [pc, #372]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002030:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002034:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800203c:	4959      	ldr	r1, [pc, #356]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800203e:	4313      	orrs	r3, r2
 8002040:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d00a      	beq.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002050:	4b54      	ldr	r3, [pc, #336]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002052:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002056:	f023 0203 	bic.w	r2, r3, #3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800205e:	4951      	ldr	r1, [pc, #324]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002060:	4313      	orrs	r3, r2
 8002062:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800206e:	2b00      	cmp	r3, #0
 8002070:	d00a      	beq.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002072:	4b4c      	ldr	r3, [pc, #304]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002074:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002078:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002080:	4948      	ldr	r1, [pc, #288]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002082:	4313      	orrs	r3, r2
 8002084:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002090:	2b00      	cmp	r3, #0
 8002092:	d015      	beq.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002094:	4b43      	ldr	r3, [pc, #268]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002096:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800209a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a2:	4940      	ldr	r1, [pc, #256]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020a4:	4313      	orrs	r3, r2
 80020a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80020b2:	d105      	bne.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020b4:	4b3b      	ldr	r3, [pc, #236]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	4a3a      	ldr	r2, [pc, #232]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80020be:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d015      	beq.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80020cc:	4b35      	ldr	r3, [pc, #212]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020d2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020da:	4932      	ldr	r1, [pc, #200]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80020ea:	d105      	bne.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020ec:	4b2d      	ldr	r3, [pc, #180]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	4a2c      	ldr	r2, [pc, #176]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80020f6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d015      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002104:	4b27      	ldr	r3, [pc, #156]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002106:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800210a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002112:	4924      	ldr	r1, [pc, #144]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002114:	4313      	orrs	r3, r2
 8002116:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800211e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002122:	d105      	bne.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002124:	4b1f      	ldr	r3, [pc, #124]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	4a1e      	ldr	r2, [pc, #120]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800212a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800212e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d015      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800213c:	4b19      	ldr	r3, [pc, #100]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800213e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002142:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800214a:	4916      	ldr	r1, [pc, #88]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800214c:	4313      	orrs	r3, r2
 800214e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002156:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800215a:	d105      	bne.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800215c:	4b11      	ldr	r3, [pc, #68]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	4a10      	ldr	r2, [pc, #64]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002162:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002166:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d019      	beq.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002174:	4b0b      	ldr	r3, [pc, #44]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002176:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800217a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002182:	4908      	ldr	r1, [pc, #32]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002184:	4313      	orrs	r3, r2
 8002186:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002192:	d109      	bne.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002194:	4b03      	ldr	r3, [pc, #12]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	4a02      	ldr	r2, [pc, #8]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800219a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800219e:	60d3      	str	r3, [r2, #12]
 80021a0:	e002      	b.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80021a2:	bf00      	nop
 80021a4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d015      	beq.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80021b4:	4b29      	ldr	r3, [pc, #164]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80021b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ba:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021c2:	4926      	ldr	r1, [pc, #152]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80021d2:	d105      	bne.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80021d4:	4b21      	ldr	r3, [pc, #132]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	4a20      	ldr	r2, [pc, #128]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80021da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021de:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d015      	beq.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80021ec:	4b1b      	ldr	r3, [pc, #108]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80021ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021f2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021fa:	4918      	ldr	r1, [pc, #96]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002206:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800220a:	d105      	bne.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800220c:	4b13      	ldr	r3, [pc, #76]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	4a12      	ldr	r2, [pc, #72]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002212:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002216:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d015      	beq.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002224:	4b0d      	ldr	r3, [pc, #52]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002226:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800222a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002232:	490a      	ldr	r1, [pc, #40]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002234:	4313      	orrs	r3, r2
 8002236:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800223e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002242:	d105      	bne.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002244:	4b05      	ldr	r3, [pc, #20]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	4a04      	ldr	r2, [pc, #16]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800224a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800224e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002250:	7cbb      	ldrb	r3, [r7, #18]
}
 8002252:	4618      	mov	r0, r3
 8002254:	3718      	adds	r7, #24
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	40021000 	.word	0x40021000

08002260 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d101      	bne.n	8002272 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e049      	b.n	8002306 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002278:	b2db      	uxtb	r3, r3
 800227a:	2b00      	cmp	r3, #0
 800227c:	d106      	bne.n	800228c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f7fe fad6 	bl	8000838 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2202      	movs	r2, #2
 8002290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3304      	adds	r3, #4
 800229c:	4619      	mov	r1, r3
 800229e:	4610      	mov	r0, r2
 80022a0:	f000 f94c 	bl	800253c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
	...

08002310 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800231a:	2300      	movs	r3, #0
 800231c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002324:	2b01      	cmp	r3, #1
 8002326:	d101      	bne.n	800232c <HAL_TIM_ConfigClockSource+0x1c>
 8002328:	2302      	movs	r3, #2
 800232a:	e0f6      	b.n	800251a <HAL_TIM_ConfigClockSource+0x20a>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2202      	movs	r2, #2
 8002338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800234a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800234e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002356:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	68ba      	ldr	r2, [r7, #8]
 800235e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a6f      	ldr	r2, [pc, #444]	@ (8002524 <HAL_TIM_ConfigClockSource+0x214>)
 8002366:	4293      	cmp	r3, r2
 8002368:	f000 80c1 	beq.w	80024ee <HAL_TIM_ConfigClockSource+0x1de>
 800236c:	4a6d      	ldr	r2, [pc, #436]	@ (8002524 <HAL_TIM_ConfigClockSource+0x214>)
 800236e:	4293      	cmp	r3, r2
 8002370:	f200 80c6 	bhi.w	8002500 <HAL_TIM_ConfigClockSource+0x1f0>
 8002374:	4a6c      	ldr	r2, [pc, #432]	@ (8002528 <HAL_TIM_ConfigClockSource+0x218>)
 8002376:	4293      	cmp	r3, r2
 8002378:	f000 80b9 	beq.w	80024ee <HAL_TIM_ConfigClockSource+0x1de>
 800237c:	4a6a      	ldr	r2, [pc, #424]	@ (8002528 <HAL_TIM_ConfigClockSource+0x218>)
 800237e:	4293      	cmp	r3, r2
 8002380:	f200 80be 	bhi.w	8002500 <HAL_TIM_ConfigClockSource+0x1f0>
 8002384:	4a69      	ldr	r2, [pc, #420]	@ (800252c <HAL_TIM_ConfigClockSource+0x21c>)
 8002386:	4293      	cmp	r3, r2
 8002388:	f000 80b1 	beq.w	80024ee <HAL_TIM_ConfigClockSource+0x1de>
 800238c:	4a67      	ldr	r2, [pc, #412]	@ (800252c <HAL_TIM_ConfigClockSource+0x21c>)
 800238e:	4293      	cmp	r3, r2
 8002390:	f200 80b6 	bhi.w	8002500 <HAL_TIM_ConfigClockSource+0x1f0>
 8002394:	4a66      	ldr	r2, [pc, #408]	@ (8002530 <HAL_TIM_ConfigClockSource+0x220>)
 8002396:	4293      	cmp	r3, r2
 8002398:	f000 80a9 	beq.w	80024ee <HAL_TIM_ConfigClockSource+0x1de>
 800239c:	4a64      	ldr	r2, [pc, #400]	@ (8002530 <HAL_TIM_ConfigClockSource+0x220>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	f200 80ae 	bhi.w	8002500 <HAL_TIM_ConfigClockSource+0x1f0>
 80023a4:	4a63      	ldr	r2, [pc, #396]	@ (8002534 <HAL_TIM_ConfigClockSource+0x224>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	f000 80a1 	beq.w	80024ee <HAL_TIM_ConfigClockSource+0x1de>
 80023ac:	4a61      	ldr	r2, [pc, #388]	@ (8002534 <HAL_TIM_ConfigClockSource+0x224>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	f200 80a6 	bhi.w	8002500 <HAL_TIM_ConfigClockSource+0x1f0>
 80023b4:	4a60      	ldr	r2, [pc, #384]	@ (8002538 <HAL_TIM_ConfigClockSource+0x228>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	f000 8099 	beq.w	80024ee <HAL_TIM_ConfigClockSource+0x1de>
 80023bc:	4a5e      	ldr	r2, [pc, #376]	@ (8002538 <HAL_TIM_ConfigClockSource+0x228>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	f200 809e 	bhi.w	8002500 <HAL_TIM_ConfigClockSource+0x1f0>
 80023c4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80023c8:	f000 8091 	beq.w	80024ee <HAL_TIM_ConfigClockSource+0x1de>
 80023cc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80023d0:	f200 8096 	bhi.w	8002500 <HAL_TIM_ConfigClockSource+0x1f0>
 80023d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80023d8:	f000 8089 	beq.w	80024ee <HAL_TIM_ConfigClockSource+0x1de>
 80023dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80023e0:	f200 808e 	bhi.w	8002500 <HAL_TIM_ConfigClockSource+0x1f0>
 80023e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023e8:	d03e      	beq.n	8002468 <HAL_TIM_ConfigClockSource+0x158>
 80023ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023ee:	f200 8087 	bhi.w	8002500 <HAL_TIM_ConfigClockSource+0x1f0>
 80023f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023f6:	f000 8086 	beq.w	8002506 <HAL_TIM_ConfigClockSource+0x1f6>
 80023fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023fe:	d87f      	bhi.n	8002500 <HAL_TIM_ConfigClockSource+0x1f0>
 8002400:	2b70      	cmp	r3, #112	@ 0x70
 8002402:	d01a      	beq.n	800243a <HAL_TIM_ConfigClockSource+0x12a>
 8002404:	2b70      	cmp	r3, #112	@ 0x70
 8002406:	d87b      	bhi.n	8002500 <HAL_TIM_ConfigClockSource+0x1f0>
 8002408:	2b60      	cmp	r3, #96	@ 0x60
 800240a:	d050      	beq.n	80024ae <HAL_TIM_ConfigClockSource+0x19e>
 800240c:	2b60      	cmp	r3, #96	@ 0x60
 800240e:	d877      	bhi.n	8002500 <HAL_TIM_ConfigClockSource+0x1f0>
 8002410:	2b50      	cmp	r3, #80	@ 0x50
 8002412:	d03c      	beq.n	800248e <HAL_TIM_ConfigClockSource+0x17e>
 8002414:	2b50      	cmp	r3, #80	@ 0x50
 8002416:	d873      	bhi.n	8002500 <HAL_TIM_ConfigClockSource+0x1f0>
 8002418:	2b40      	cmp	r3, #64	@ 0x40
 800241a:	d058      	beq.n	80024ce <HAL_TIM_ConfigClockSource+0x1be>
 800241c:	2b40      	cmp	r3, #64	@ 0x40
 800241e:	d86f      	bhi.n	8002500 <HAL_TIM_ConfigClockSource+0x1f0>
 8002420:	2b30      	cmp	r3, #48	@ 0x30
 8002422:	d064      	beq.n	80024ee <HAL_TIM_ConfigClockSource+0x1de>
 8002424:	2b30      	cmp	r3, #48	@ 0x30
 8002426:	d86b      	bhi.n	8002500 <HAL_TIM_ConfigClockSource+0x1f0>
 8002428:	2b20      	cmp	r3, #32
 800242a:	d060      	beq.n	80024ee <HAL_TIM_ConfigClockSource+0x1de>
 800242c:	2b20      	cmp	r3, #32
 800242e:	d867      	bhi.n	8002500 <HAL_TIM_ConfigClockSource+0x1f0>
 8002430:	2b00      	cmp	r3, #0
 8002432:	d05c      	beq.n	80024ee <HAL_TIM_ConfigClockSource+0x1de>
 8002434:	2b10      	cmp	r3, #16
 8002436:	d05a      	beq.n	80024ee <HAL_TIM_ConfigClockSource+0x1de>
 8002438:	e062      	b.n	8002500 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800244a:	f000 f9a7 	bl	800279c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800245c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68ba      	ldr	r2, [r7, #8]
 8002464:	609a      	str	r2, [r3, #8]
      break;
 8002466:	e04f      	b.n	8002508 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002478:	f000 f990 	bl	800279c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	689a      	ldr	r2, [r3, #8]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800248a:	609a      	str	r2, [r3, #8]
      break;
 800248c:	e03c      	b.n	8002508 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800249a:	461a      	mov	r2, r3
 800249c:	f000 f902 	bl	80026a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2150      	movs	r1, #80	@ 0x50
 80024a6:	4618      	mov	r0, r3
 80024a8:	f000 f95b 	bl	8002762 <TIM_ITRx_SetConfig>
      break;
 80024ac:	e02c      	b.n	8002508 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80024ba:	461a      	mov	r2, r3
 80024bc:	f000 f921 	bl	8002702 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2160      	movs	r1, #96	@ 0x60
 80024c6:	4618      	mov	r0, r3
 80024c8:	f000 f94b 	bl	8002762 <TIM_ITRx_SetConfig>
      break;
 80024cc:	e01c      	b.n	8002508 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024da:	461a      	mov	r2, r3
 80024dc:	f000 f8e2 	bl	80026a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2140      	movs	r1, #64	@ 0x40
 80024e6:	4618      	mov	r0, r3
 80024e8:	f000 f93b 	bl	8002762 <TIM_ITRx_SetConfig>
      break;
 80024ec:	e00c      	b.n	8002508 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4619      	mov	r1, r3
 80024f8:	4610      	mov	r0, r2
 80024fa:	f000 f932 	bl	8002762 <TIM_ITRx_SetConfig>
      break;
 80024fe:	e003      	b.n	8002508 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	73fb      	strb	r3, [r7, #15]
      break;
 8002504:	e000      	b.n	8002508 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8002506:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002518:	7bfb      	ldrb	r3, [r7, #15]
}
 800251a:	4618      	mov	r0, r3
 800251c:	3710      	adds	r7, #16
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	00100070 	.word	0x00100070
 8002528:	00100060 	.word	0x00100060
 800252c:	00100050 	.word	0x00100050
 8002530:	00100040 	.word	0x00100040
 8002534:	00100030 	.word	0x00100030
 8002538:	00100020 	.word	0x00100020

0800253c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4a4c      	ldr	r2, [pc, #304]	@ (8002680 <TIM_Base_SetConfig+0x144>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d017      	beq.n	8002584 <TIM_Base_SetConfig+0x48>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800255a:	d013      	beq.n	8002584 <TIM_Base_SetConfig+0x48>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4a49      	ldr	r2, [pc, #292]	@ (8002684 <TIM_Base_SetConfig+0x148>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d00f      	beq.n	8002584 <TIM_Base_SetConfig+0x48>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4a48      	ldr	r2, [pc, #288]	@ (8002688 <TIM_Base_SetConfig+0x14c>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d00b      	beq.n	8002584 <TIM_Base_SetConfig+0x48>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4a47      	ldr	r2, [pc, #284]	@ (800268c <TIM_Base_SetConfig+0x150>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d007      	beq.n	8002584 <TIM_Base_SetConfig+0x48>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4a46      	ldr	r2, [pc, #280]	@ (8002690 <TIM_Base_SetConfig+0x154>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d003      	beq.n	8002584 <TIM_Base_SetConfig+0x48>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4a45      	ldr	r2, [pc, #276]	@ (8002694 <TIM_Base_SetConfig+0x158>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d108      	bne.n	8002596 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800258a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	4313      	orrs	r3, r2
 8002594:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a39      	ldr	r2, [pc, #228]	@ (8002680 <TIM_Base_SetConfig+0x144>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d023      	beq.n	80025e6 <TIM_Base_SetConfig+0xaa>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025a4:	d01f      	beq.n	80025e6 <TIM_Base_SetConfig+0xaa>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a36      	ldr	r2, [pc, #216]	@ (8002684 <TIM_Base_SetConfig+0x148>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d01b      	beq.n	80025e6 <TIM_Base_SetConfig+0xaa>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a35      	ldr	r2, [pc, #212]	@ (8002688 <TIM_Base_SetConfig+0x14c>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d017      	beq.n	80025e6 <TIM_Base_SetConfig+0xaa>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a34      	ldr	r2, [pc, #208]	@ (800268c <TIM_Base_SetConfig+0x150>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d013      	beq.n	80025e6 <TIM_Base_SetConfig+0xaa>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a33      	ldr	r2, [pc, #204]	@ (8002690 <TIM_Base_SetConfig+0x154>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d00f      	beq.n	80025e6 <TIM_Base_SetConfig+0xaa>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a33      	ldr	r2, [pc, #204]	@ (8002698 <TIM_Base_SetConfig+0x15c>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d00b      	beq.n	80025e6 <TIM_Base_SetConfig+0xaa>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a32      	ldr	r2, [pc, #200]	@ (800269c <TIM_Base_SetConfig+0x160>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d007      	beq.n	80025e6 <TIM_Base_SetConfig+0xaa>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a31      	ldr	r2, [pc, #196]	@ (80026a0 <TIM_Base_SetConfig+0x164>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d003      	beq.n	80025e6 <TIM_Base_SetConfig+0xaa>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a2c      	ldr	r2, [pc, #176]	@ (8002694 <TIM_Base_SetConfig+0x158>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d108      	bne.n	80025f8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	4313      	orrs	r3, r2
 8002604:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	68fa      	ldr	r2, [r7, #12]
 800260a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	4a18      	ldr	r2, [pc, #96]	@ (8002680 <TIM_Base_SetConfig+0x144>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d013      	beq.n	800264c <TIM_Base_SetConfig+0x110>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	4a1a      	ldr	r2, [pc, #104]	@ (8002690 <TIM_Base_SetConfig+0x154>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d00f      	beq.n	800264c <TIM_Base_SetConfig+0x110>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	4a1a      	ldr	r2, [pc, #104]	@ (8002698 <TIM_Base_SetConfig+0x15c>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d00b      	beq.n	800264c <TIM_Base_SetConfig+0x110>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4a19      	ldr	r2, [pc, #100]	@ (800269c <TIM_Base_SetConfig+0x160>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d007      	beq.n	800264c <TIM_Base_SetConfig+0x110>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	4a18      	ldr	r2, [pc, #96]	@ (80026a0 <TIM_Base_SetConfig+0x164>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d003      	beq.n	800264c <TIM_Base_SetConfig+0x110>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4a13      	ldr	r2, [pc, #76]	@ (8002694 <TIM_Base_SetConfig+0x158>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d103      	bne.n	8002654 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	691a      	ldr	r2, [r3, #16]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	2b01      	cmp	r3, #1
 8002664:	d105      	bne.n	8002672 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	f023 0201 	bic.w	r2, r3, #1
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	611a      	str	r2, [r3, #16]
  }
}
 8002672:	bf00      	nop
 8002674:	3714      	adds	r7, #20
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	40012c00 	.word	0x40012c00
 8002684:	40000400 	.word	0x40000400
 8002688:	40000800 	.word	0x40000800
 800268c:	40000c00 	.word	0x40000c00
 8002690:	40013400 	.word	0x40013400
 8002694:	40015000 	.word	0x40015000
 8002698:	40014000 	.word	0x40014000
 800269c:	40014400 	.word	0x40014400
 80026a0:	40014800 	.word	0x40014800

080026a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b087      	sub	sp, #28
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6a1b      	ldr	r3, [r3, #32]
 80026ba:	f023 0201 	bic.w	r2, r3, #1
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	699b      	ldr	r3, [r3, #24]
 80026c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80026ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	011b      	lsls	r3, r3, #4
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	f023 030a 	bic.w	r3, r3, #10
 80026e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80026e2:	697a      	ldr	r2, [r7, #20]
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	697a      	ldr	r2, [r7, #20]
 80026f4:	621a      	str	r2, [r3, #32]
}
 80026f6:	bf00      	nop
 80026f8:	371c      	adds	r7, #28
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr

08002702 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002702:	b480      	push	{r7}
 8002704:	b087      	sub	sp, #28
 8002706:	af00      	add	r7, sp, #0
 8002708:	60f8      	str	r0, [r7, #12]
 800270a:	60b9      	str	r1, [r7, #8]
 800270c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6a1b      	ldr	r3, [r3, #32]
 8002718:	f023 0210 	bic.w	r2, r3, #16
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800272c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	031b      	lsls	r3, r3, #12
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	4313      	orrs	r3, r2
 8002736:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800273e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	011b      	lsls	r3, r3, #4
 8002744:	697a      	ldr	r2, [r7, #20]
 8002746:	4313      	orrs	r3, r2
 8002748:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	693a      	ldr	r2, [r7, #16]
 800274e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	621a      	str	r2, [r3, #32]
}
 8002756:	bf00      	nop
 8002758:	371c      	adds	r7, #28
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr

08002762 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002762:	b480      	push	{r7}
 8002764:	b085      	sub	sp, #20
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
 800276a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8002778:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800277c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800277e:	683a      	ldr	r2, [r7, #0]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	4313      	orrs	r3, r2
 8002784:	f043 0307 	orr.w	r3, r3, #7
 8002788:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	68fa      	ldr	r2, [r7, #12]
 800278e:	609a      	str	r2, [r3, #8]
}
 8002790:	bf00      	nop
 8002792:	3714      	adds	r7, #20
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800279c:	b480      	push	{r7}
 800279e:	b087      	sub	sp, #28
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
 80027a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80027b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	021a      	lsls	r2, r3, #8
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	431a      	orrs	r2, r3
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	697a      	ldr	r2, [r7, #20]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	697a      	ldr	r2, [r7, #20]
 80027ce:	609a      	str	r2, [r3, #8]
}
 80027d0:	bf00      	nop
 80027d2:	371c      	adds	r7, #28
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d101      	bne.n	80027f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80027f0:	2302      	movs	r3, #2
 80027f2:	e074      	b.n	80028de <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2202      	movs	r2, #2
 8002800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a34      	ldr	r2, [pc, #208]	@ (80028ec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d009      	beq.n	8002832 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a33      	ldr	r2, [pc, #204]	@ (80028f0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d004      	beq.n	8002832 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a31      	ldr	r2, [pc, #196]	@ (80028f4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d108      	bne.n	8002844 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8002838:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	4313      	orrs	r3, r2
 8002842:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800284a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800284e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	4313      	orrs	r3, r2
 8002858:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	68fa      	ldr	r2, [r7, #12]
 8002860:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a21      	ldr	r2, [pc, #132]	@ (80028ec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d022      	beq.n	80028b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002874:	d01d      	beq.n	80028b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a1f      	ldr	r2, [pc, #124]	@ (80028f8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d018      	beq.n	80028b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a1d      	ldr	r2, [pc, #116]	@ (80028fc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d013      	beq.n	80028b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a1c      	ldr	r2, [pc, #112]	@ (8002900 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d00e      	beq.n	80028b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a15      	ldr	r2, [pc, #84]	@ (80028f0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d009      	beq.n	80028b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a18      	ldr	r2, [pc, #96]	@ (8002904 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d004      	beq.n	80028b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a11      	ldr	r2, [pc, #68]	@ (80028f4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d10c      	bne.n	80028cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80028b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	68ba      	ldr	r2, [r7, #8]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	68ba      	ldr	r2, [r7, #8]
 80028ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3714      	adds	r7, #20
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	40012c00 	.word	0x40012c00
 80028f0:	40013400 	.word	0x40013400
 80028f4:	40015000 	.word	0x40015000
 80028f8:	40000400 	.word	0x40000400
 80028fc:	40000800 	.word	0x40000800
 8002900:	40000c00 	.word	0x40000c00
 8002904:	40014000 	.word	0x40014000

08002908 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e042      	b.n	80029a0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002920:	2b00      	cmp	r3, #0
 8002922:	d106      	bne.n	8002932 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f7fd ffb7 	bl	80008a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2224      	movs	r2, #36	@ 0x24
 8002936:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f022 0201 	bic.w	r2, r2, #1
 8002948:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800294e:	2b00      	cmp	r3, #0
 8002950:	d002      	beq.n	8002958 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 fe86 	bl	8003664 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f000 fb87 	bl	800306c <UART_SetConfig>
 800295e:	4603      	mov	r3, r0
 8002960:	2b01      	cmp	r3, #1
 8002962:	d101      	bne.n	8002968 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e01b      	b.n	80029a0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	685a      	ldr	r2, [r3, #4]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002976:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	689a      	ldr	r2, [r3, #8]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002986:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f042 0201 	orr.w	r2, r2, #1
 8002996:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f000 ff05 	bl	80037a8 <UART_CheckIdleState>
 800299e:	4603      	mov	r3, r0
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3708      	adds	r7, #8
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b0ba      	sub	sp, #232	@ 0xe8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	69db      	ldr	r3, [r3, #28]
 80029b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80029ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80029d2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80029d6:	4013      	ands	r3, r2
 80029d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80029dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d11b      	bne.n	8002a1c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80029e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029e8:	f003 0320 	and.w	r3, r3, #32
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d015      	beq.n	8002a1c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80029f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029f4:	f003 0320 	and.w	r3, r3, #32
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d105      	bne.n	8002a08 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80029fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d009      	beq.n	8002a1c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	f000 8300 	beq.w	8003012 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	4798      	blx	r3
      }
      return;
 8002a1a:	e2fa      	b.n	8003012 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002a1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f000 8123 	beq.w	8002c6c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002a26:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8002a2a:	4b8d      	ldr	r3, [pc, #564]	@ (8002c60 <HAL_UART_IRQHandler+0x2b8>)
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d106      	bne.n	8002a40 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002a32:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002a36:	4b8b      	ldr	r3, [pc, #556]	@ (8002c64 <HAL_UART_IRQHandler+0x2bc>)
 8002a38:	4013      	ands	r3, r2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f000 8116 	beq.w	8002c6c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002a40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a44:	f003 0301 	and.w	r3, r3, #1
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d011      	beq.n	8002a70 <HAL_UART_IRQHandler+0xc8>
 8002a4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d00b      	beq.n	8002a70 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a66:	f043 0201 	orr.w	r2, r3, #1
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a74:	f003 0302 	and.w	r3, r3, #2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d011      	beq.n	8002aa0 <HAL_UART_IRQHandler+0xf8>
 8002a7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a80:	f003 0301 	and.w	r3, r3, #1
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d00b      	beq.n	8002aa0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2202      	movs	r2, #2
 8002a8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a96:	f043 0204 	orr.w	r2, r3, #4
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002aa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002aa4:	f003 0304 	and.w	r3, r3, #4
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d011      	beq.n	8002ad0 <HAL_UART_IRQHandler+0x128>
 8002aac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ab0:	f003 0301 	and.w	r3, r3, #1
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00b      	beq.n	8002ad0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2204      	movs	r2, #4
 8002abe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ac6:	f043 0202 	orr.w	r2, r3, #2
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002ad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ad4:	f003 0308 	and.w	r3, r3, #8
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d017      	beq.n	8002b0c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002adc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ae0:	f003 0320 	and.w	r3, r3, #32
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d105      	bne.n	8002af4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002ae8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8002aec:	4b5c      	ldr	r3, [pc, #368]	@ (8002c60 <HAL_UART_IRQHandler+0x2b8>)
 8002aee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d00b      	beq.n	8002b0c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2208      	movs	r2, #8
 8002afa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b02:	f043 0208 	orr.w	r2, r3, #8
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002b0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d012      	beq.n	8002b3e <HAL_UART_IRQHandler+0x196>
 8002b18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b1c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d00c      	beq.n	8002b3e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002b2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b34:	f043 0220 	orr.w	r2, r3, #32
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f000 8266 	beq.w	8003016 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b4e:	f003 0320 	and.w	r3, r3, #32
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d013      	beq.n	8002b7e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002b56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b5a:	f003 0320 	and.w	r3, r3, #32
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d105      	bne.n	8002b6e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002b62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d007      	beq.n	8002b7e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d003      	beq.n	8002b7e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b84:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b92:	2b40      	cmp	r3, #64	@ 0x40
 8002b94:	d005      	beq.n	8002ba2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002b96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002b9a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d054      	beq.n	8002c4c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 ff17 	bl	80039d6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bb2:	2b40      	cmp	r3, #64	@ 0x40
 8002bb4:	d146      	bne.n	8002c44 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	3308      	adds	r3, #8
 8002bbc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002bc4:	e853 3f00 	ldrex	r3, [r3]
 8002bc8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002bcc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002bd0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002bd4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	3308      	adds	r3, #8
 8002bde:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002be2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002be6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002bee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002bf2:	e841 2300 	strex	r3, r2, [r1]
 8002bf6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002bfa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1d9      	bne.n	8002bb6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d017      	beq.n	8002c3c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c12:	4a15      	ldr	r2, [pc, #84]	@ (8002c68 <HAL_UART_IRQHandler+0x2c0>)
 8002c14:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7fe f8ed 	bl	8000dfc <HAL_DMA_Abort_IT>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d019      	beq.n	8002c5c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8002c36:	4610      	mov	r0, r2
 8002c38:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c3a:	e00f      	b.n	8002c5c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 f9ff 	bl	8003040 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c42:	e00b      	b.n	8002c5c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f000 f9fb 	bl	8003040 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c4a:	e007      	b.n	8002c5c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f000 f9f7 	bl	8003040 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8002c5a:	e1dc      	b.n	8003016 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c5c:	bf00      	nop
    return;
 8002c5e:	e1da      	b.n	8003016 <HAL_UART_IRQHandler+0x66e>
 8002c60:	10000001 	.word	0x10000001
 8002c64:	04000120 	.word	0x04000120
 8002c68:	08003aa3 	.word	0x08003aa3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	f040 8170 	bne.w	8002f56 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002c76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c7a:	f003 0310 	and.w	r3, r3, #16
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	f000 8169 	beq.w	8002f56 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002c84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c88:	f003 0310 	and.w	r3, r3, #16
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f000 8162 	beq.w	8002f56 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2210      	movs	r2, #16
 8002c98:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ca4:	2b40      	cmp	r3, #64	@ 0x40
 8002ca6:	f040 80d8 	bne.w	8002e5a <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002cb8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f000 80af 	beq.w	8002e20 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002cc8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	f080 80a7 	bcs.w	8002e20 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002cd8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0320 	and.w	r3, r3, #32
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	f040 8087 	bne.w	8002dfe <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cf8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002cfc:	e853 3f00 	ldrex	r3, [r3]
 8002d00:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002d04:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002d08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d0c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	461a      	mov	r2, r3
 8002d16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002d1a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002d1e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d22:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002d26:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002d2a:	e841 2300 	strex	r3, r2, [r1]
 8002d2e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002d32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1da      	bne.n	8002cf0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	3308      	adds	r3, #8
 8002d40:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d42:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d44:	e853 3f00 	ldrex	r3, [r3]
 8002d48:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002d4a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d4c:	f023 0301 	bic.w	r3, r3, #1
 8002d50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	3308      	adds	r3, #8
 8002d5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002d5e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002d62:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d64:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002d66:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002d6a:	e841 2300 	strex	r3, r2, [r1]
 8002d6e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002d70:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d1e1      	bne.n	8002d3a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	3308      	adds	r3, #8
 8002d7c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d7e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d80:	e853 3f00 	ldrex	r3, [r3]
 8002d84:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002d86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d8c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	3308      	adds	r3, #8
 8002d96:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002d9a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002d9c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d9e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002da0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002da2:	e841 2300 	strex	r3, r2, [r1]
 8002da6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002da8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1e3      	bne.n	8002d76 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2220      	movs	r2, #32
 8002db2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002dc4:	e853 3f00 	ldrex	r3, [r3]
 8002dc8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002dca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002dcc:	f023 0310 	bic.w	r3, r3, #16
 8002dd0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	461a      	mov	r2, r3
 8002dda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002dde:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002de0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002de2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002de4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002de6:	e841 2300 	strex	r3, r2, [r1]
 8002dea:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002dec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1e4      	bne.n	8002dbc <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7fd ffa6 	bl	8000d4a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2202      	movs	r2, #2
 8002e02:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	4619      	mov	r1, r3
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f000 f91b 	bl	8003054 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8002e1e:	e0fc      	b.n	800301a <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002e26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	f040 80f5 	bne.w	800301a <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0320 	and.w	r3, r3, #32
 8002e3e:	2b20      	cmp	r3, #32
 8002e40:	f040 80eb 	bne.w	800301a <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2202      	movs	r2, #2
 8002e48:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002e50:	4619      	mov	r1, r3
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 f8fe 	bl	8003054 <HAL_UARTEx_RxEventCallback>
      return;
 8002e58:	e0df      	b.n	800301a <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	f000 80d1 	beq.w	800301e <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8002e7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	f000 80cc 	beq.w	800301e <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e8e:	e853 3f00 	ldrex	r3, [r3]
 8002e92:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002e94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e96:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e9a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002ea8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002eaa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002eae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002eb0:	e841 2300 	strex	r3, r2, [r1]
 8002eb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002eb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d1e4      	bne.n	8002e86 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	3308      	adds	r3, #8
 8002ec2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec6:	e853 3f00 	ldrex	r3, [r3]
 8002eca:	623b      	str	r3, [r7, #32]
   return(result);
 8002ecc:	6a3b      	ldr	r3, [r7, #32]
 8002ece:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ed2:	f023 0301 	bic.w	r3, r3, #1
 8002ed6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	3308      	adds	r3, #8
 8002ee0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002ee4:	633a      	str	r2, [r7, #48]	@ 0x30
 8002ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ee8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002eea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002eec:	e841 2300 	strex	r3, r2, [r1]
 8002ef0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d1e1      	bne.n	8002ebc <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2220      	movs	r2, #32
 8002efc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	e853 3f00 	ldrex	r3, [r3]
 8002f18:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f023 0310 	bic.w	r3, r3, #16
 8002f20:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	461a      	mov	r2, r3
 8002f2a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f2e:	61fb      	str	r3, [r7, #28]
 8002f30:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f32:	69b9      	ldr	r1, [r7, #24]
 8002f34:	69fa      	ldr	r2, [r7, #28]
 8002f36:	e841 2300 	strex	r3, r2, [r1]
 8002f3a:	617b      	str	r3, [r7, #20]
   return(result);
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1e4      	bne.n	8002f0c <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2202      	movs	r2, #2
 8002f46:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 f880 	bl	8003054 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002f54:	e063      	b.n	800301e <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002f56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00e      	beq.n	8002f80 <HAL_UART_IRQHandler+0x5d8>
 8002f62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d008      	beq.n	8002f80 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002f76:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f000 fdd3 	bl	8003b24 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002f7e:	e051      	b.n	8003024 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002f80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d014      	beq.n	8002fb6 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002f8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d105      	bne.n	8002fa4 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002f98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f9c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d008      	beq.n	8002fb6 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d03a      	beq.n	8003022 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	4798      	blx	r3
    }
    return;
 8002fb4:	e035      	b.n	8003022 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d009      	beq.n	8002fd6 <HAL_UART_IRQHandler+0x62e>
 8002fc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d003      	beq.n	8002fd6 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 fd7d 	bl	8003ace <UART_EndTransmit_IT>
    return;
 8002fd4:	e026      	b.n	8003024 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fda:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d009      	beq.n	8002ff6 <HAL_UART_IRQHandler+0x64e>
 8002fe2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fe6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d003      	beq.n	8002ff6 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 fdac 	bl	8003b4c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002ff4:	e016      	b.n	8003024 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ffa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d010      	beq.n	8003024 <HAL_UART_IRQHandler+0x67c>
 8003002:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003006:	2b00      	cmp	r3, #0
 8003008:	da0c      	bge.n	8003024 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 fd94 	bl	8003b38 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003010:	e008      	b.n	8003024 <HAL_UART_IRQHandler+0x67c>
      return;
 8003012:	bf00      	nop
 8003014:	e006      	b.n	8003024 <HAL_UART_IRQHandler+0x67c>
    return;
 8003016:	bf00      	nop
 8003018:	e004      	b.n	8003024 <HAL_UART_IRQHandler+0x67c>
      return;
 800301a:	bf00      	nop
 800301c:	e002      	b.n	8003024 <HAL_UART_IRQHandler+0x67c>
      return;
 800301e:	bf00      	nop
 8003020:	e000      	b.n	8003024 <HAL_UART_IRQHandler+0x67c>
    return;
 8003022:	bf00      	nop
  }
}
 8003024:	37e8      	adds	r7, #232	@ 0xe8
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop

0800302c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003034:	bf00      	nop
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	460b      	mov	r3, r1
 800305e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003060:	bf00      	nop
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800306c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003070:	b08c      	sub	sp, #48	@ 0x30
 8003072:	af00      	add	r7, sp, #0
 8003074:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003076:	2300      	movs	r3, #0
 8003078:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	689a      	ldr	r2, [r3, #8]
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	431a      	orrs	r2, r3
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	431a      	orrs	r2, r3
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	69db      	ldr	r3, [r3, #28]
 8003090:	4313      	orrs	r3, r2
 8003092:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	4baa      	ldr	r3, [pc, #680]	@ (8003344 <UART_SetConfig+0x2d8>)
 800309c:	4013      	ands	r3, r2
 800309e:	697a      	ldr	r2, [r7, #20]
 80030a0:	6812      	ldr	r2, [r2, #0]
 80030a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80030a4:	430b      	orrs	r3, r1
 80030a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	68da      	ldr	r2, [r3, #12]
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	430a      	orrs	r2, r1
 80030bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a9f      	ldr	r2, [pc, #636]	@ (8003348 <UART_SetConfig+0x2dc>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d004      	beq.n	80030d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	6a1b      	ldr	r3, [r3, #32]
 80030d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030d4:	4313      	orrs	r3, r2
 80030d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80030e2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80030e6:	697a      	ldr	r2, [r7, #20]
 80030e8:	6812      	ldr	r2, [r2, #0]
 80030ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80030ec:	430b      	orrs	r3, r1
 80030ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030f6:	f023 010f 	bic.w	r1, r3, #15
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	430a      	orrs	r2, r1
 8003104:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a90      	ldr	r2, [pc, #576]	@ (800334c <UART_SetConfig+0x2e0>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d125      	bne.n	800315c <UART_SetConfig+0xf0>
 8003110:	4b8f      	ldr	r3, [pc, #572]	@ (8003350 <UART_SetConfig+0x2e4>)
 8003112:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003116:	f003 0303 	and.w	r3, r3, #3
 800311a:	2b03      	cmp	r3, #3
 800311c:	d81a      	bhi.n	8003154 <UART_SetConfig+0xe8>
 800311e:	a201      	add	r2, pc, #4	@ (adr r2, 8003124 <UART_SetConfig+0xb8>)
 8003120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003124:	08003135 	.word	0x08003135
 8003128:	08003145 	.word	0x08003145
 800312c:	0800313d 	.word	0x0800313d
 8003130:	0800314d 	.word	0x0800314d
 8003134:	2301      	movs	r3, #1
 8003136:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800313a:	e116      	b.n	800336a <UART_SetConfig+0x2fe>
 800313c:	2302      	movs	r3, #2
 800313e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003142:	e112      	b.n	800336a <UART_SetConfig+0x2fe>
 8003144:	2304      	movs	r3, #4
 8003146:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800314a:	e10e      	b.n	800336a <UART_SetConfig+0x2fe>
 800314c:	2308      	movs	r3, #8
 800314e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003152:	e10a      	b.n	800336a <UART_SetConfig+0x2fe>
 8003154:	2310      	movs	r3, #16
 8003156:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800315a:	e106      	b.n	800336a <UART_SetConfig+0x2fe>
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a7c      	ldr	r2, [pc, #496]	@ (8003354 <UART_SetConfig+0x2e8>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d138      	bne.n	80031d8 <UART_SetConfig+0x16c>
 8003166:	4b7a      	ldr	r3, [pc, #488]	@ (8003350 <UART_SetConfig+0x2e4>)
 8003168:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800316c:	f003 030c 	and.w	r3, r3, #12
 8003170:	2b0c      	cmp	r3, #12
 8003172:	d82d      	bhi.n	80031d0 <UART_SetConfig+0x164>
 8003174:	a201      	add	r2, pc, #4	@ (adr r2, 800317c <UART_SetConfig+0x110>)
 8003176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800317a:	bf00      	nop
 800317c:	080031b1 	.word	0x080031b1
 8003180:	080031d1 	.word	0x080031d1
 8003184:	080031d1 	.word	0x080031d1
 8003188:	080031d1 	.word	0x080031d1
 800318c:	080031c1 	.word	0x080031c1
 8003190:	080031d1 	.word	0x080031d1
 8003194:	080031d1 	.word	0x080031d1
 8003198:	080031d1 	.word	0x080031d1
 800319c:	080031b9 	.word	0x080031b9
 80031a0:	080031d1 	.word	0x080031d1
 80031a4:	080031d1 	.word	0x080031d1
 80031a8:	080031d1 	.word	0x080031d1
 80031ac:	080031c9 	.word	0x080031c9
 80031b0:	2300      	movs	r3, #0
 80031b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031b6:	e0d8      	b.n	800336a <UART_SetConfig+0x2fe>
 80031b8:	2302      	movs	r3, #2
 80031ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031be:	e0d4      	b.n	800336a <UART_SetConfig+0x2fe>
 80031c0:	2304      	movs	r3, #4
 80031c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031c6:	e0d0      	b.n	800336a <UART_SetConfig+0x2fe>
 80031c8:	2308      	movs	r3, #8
 80031ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031ce:	e0cc      	b.n	800336a <UART_SetConfig+0x2fe>
 80031d0:	2310      	movs	r3, #16
 80031d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031d6:	e0c8      	b.n	800336a <UART_SetConfig+0x2fe>
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a5e      	ldr	r2, [pc, #376]	@ (8003358 <UART_SetConfig+0x2ec>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d125      	bne.n	800322e <UART_SetConfig+0x1c2>
 80031e2:	4b5b      	ldr	r3, [pc, #364]	@ (8003350 <UART_SetConfig+0x2e4>)
 80031e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031e8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80031ec:	2b30      	cmp	r3, #48	@ 0x30
 80031ee:	d016      	beq.n	800321e <UART_SetConfig+0x1b2>
 80031f0:	2b30      	cmp	r3, #48	@ 0x30
 80031f2:	d818      	bhi.n	8003226 <UART_SetConfig+0x1ba>
 80031f4:	2b20      	cmp	r3, #32
 80031f6:	d00a      	beq.n	800320e <UART_SetConfig+0x1a2>
 80031f8:	2b20      	cmp	r3, #32
 80031fa:	d814      	bhi.n	8003226 <UART_SetConfig+0x1ba>
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d002      	beq.n	8003206 <UART_SetConfig+0x19a>
 8003200:	2b10      	cmp	r3, #16
 8003202:	d008      	beq.n	8003216 <UART_SetConfig+0x1aa>
 8003204:	e00f      	b.n	8003226 <UART_SetConfig+0x1ba>
 8003206:	2300      	movs	r3, #0
 8003208:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800320c:	e0ad      	b.n	800336a <UART_SetConfig+0x2fe>
 800320e:	2302      	movs	r3, #2
 8003210:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003214:	e0a9      	b.n	800336a <UART_SetConfig+0x2fe>
 8003216:	2304      	movs	r3, #4
 8003218:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800321c:	e0a5      	b.n	800336a <UART_SetConfig+0x2fe>
 800321e:	2308      	movs	r3, #8
 8003220:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003224:	e0a1      	b.n	800336a <UART_SetConfig+0x2fe>
 8003226:	2310      	movs	r3, #16
 8003228:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800322c:	e09d      	b.n	800336a <UART_SetConfig+0x2fe>
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a4a      	ldr	r2, [pc, #296]	@ (800335c <UART_SetConfig+0x2f0>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d125      	bne.n	8003284 <UART_SetConfig+0x218>
 8003238:	4b45      	ldr	r3, [pc, #276]	@ (8003350 <UART_SetConfig+0x2e4>)
 800323a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800323e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003242:	2bc0      	cmp	r3, #192	@ 0xc0
 8003244:	d016      	beq.n	8003274 <UART_SetConfig+0x208>
 8003246:	2bc0      	cmp	r3, #192	@ 0xc0
 8003248:	d818      	bhi.n	800327c <UART_SetConfig+0x210>
 800324a:	2b80      	cmp	r3, #128	@ 0x80
 800324c:	d00a      	beq.n	8003264 <UART_SetConfig+0x1f8>
 800324e:	2b80      	cmp	r3, #128	@ 0x80
 8003250:	d814      	bhi.n	800327c <UART_SetConfig+0x210>
 8003252:	2b00      	cmp	r3, #0
 8003254:	d002      	beq.n	800325c <UART_SetConfig+0x1f0>
 8003256:	2b40      	cmp	r3, #64	@ 0x40
 8003258:	d008      	beq.n	800326c <UART_SetConfig+0x200>
 800325a:	e00f      	b.n	800327c <UART_SetConfig+0x210>
 800325c:	2300      	movs	r3, #0
 800325e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003262:	e082      	b.n	800336a <UART_SetConfig+0x2fe>
 8003264:	2302      	movs	r3, #2
 8003266:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800326a:	e07e      	b.n	800336a <UART_SetConfig+0x2fe>
 800326c:	2304      	movs	r3, #4
 800326e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003272:	e07a      	b.n	800336a <UART_SetConfig+0x2fe>
 8003274:	2308      	movs	r3, #8
 8003276:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800327a:	e076      	b.n	800336a <UART_SetConfig+0x2fe>
 800327c:	2310      	movs	r3, #16
 800327e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003282:	e072      	b.n	800336a <UART_SetConfig+0x2fe>
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a35      	ldr	r2, [pc, #212]	@ (8003360 <UART_SetConfig+0x2f4>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d12a      	bne.n	80032e4 <UART_SetConfig+0x278>
 800328e:	4b30      	ldr	r3, [pc, #192]	@ (8003350 <UART_SetConfig+0x2e4>)
 8003290:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003294:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003298:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800329c:	d01a      	beq.n	80032d4 <UART_SetConfig+0x268>
 800329e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80032a2:	d81b      	bhi.n	80032dc <UART_SetConfig+0x270>
 80032a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032a8:	d00c      	beq.n	80032c4 <UART_SetConfig+0x258>
 80032aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032ae:	d815      	bhi.n	80032dc <UART_SetConfig+0x270>
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d003      	beq.n	80032bc <UART_SetConfig+0x250>
 80032b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032b8:	d008      	beq.n	80032cc <UART_SetConfig+0x260>
 80032ba:	e00f      	b.n	80032dc <UART_SetConfig+0x270>
 80032bc:	2300      	movs	r3, #0
 80032be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032c2:	e052      	b.n	800336a <UART_SetConfig+0x2fe>
 80032c4:	2302      	movs	r3, #2
 80032c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032ca:	e04e      	b.n	800336a <UART_SetConfig+0x2fe>
 80032cc:	2304      	movs	r3, #4
 80032ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032d2:	e04a      	b.n	800336a <UART_SetConfig+0x2fe>
 80032d4:	2308      	movs	r3, #8
 80032d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032da:	e046      	b.n	800336a <UART_SetConfig+0x2fe>
 80032dc:	2310      	movs	r3, #16
 80032de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032e2:	e042      	b.n	800336a <UART_SetConfig+0x2fe>
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a17      	ldr	r2, [pc, #92]	@ (8003348 <UART_SetConfig+0x2dc>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d13a      	bne.n	8003364 <UART_SetConfig+0x2f8>
 80032ee:	4b18      	ldr	r3, [pc, #96]	@ (8003350 <UART_SetConfig+0x2e4>)
 80032f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032f4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80032f8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80032fc:	d01a      	beq.n	8003334 <UART_SetConfig+0x2c8>
 80032fe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003302:	d81b      	bhi.n	800333c <UART_SetConfig+0x2d0>
 8003304:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003308:	d00c      	beq.n	8003324 <UART_SetConfig+0x2b8>
 800330a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800330e:	d815      	bhi.n	800333c <UART_SetConfig+0x2d0>
 8003310:	2b00      	cmp	r3, #0
 8003312:	d003      	beq.n	800331c <UART_SetConfig+0x2b0>
 8003314:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003318:	d008      	beq.n	800332c <UART_SetConfig+0x2c0>
 800331a:	e00f      	b.n	800333c <UART_SetConfig+0x2d0>
 800331c:	2300      	movs	r3, #0
 800331e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003322:	e022      	b.n	800336a <UART_SetConfig+0x2fe>
 8003324:	2302      	movs	r3, #2
 8003326:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800332a:	e01e      	b.n	800336a <UART_SetConfig+0x2fe>
 800332c:	2304      	movs	r3, #4
 800332e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003332:	e01a      	b.n	800336a <UART_SetConfig+0x2fe>
 8003334:	2308      	movs	r3, #8
 8003336:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800333a:	e016      	b.n	800336a <UART_SetConfig+0x2fe>
 800333c:	2310      	movs	r3, #16
 800333e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003342:	e012      	b.n	800336a <UART_SetConfig+0x2fe>
 8003344:	cfff69f3 	.word	0xcfff69f3
 8003348:	40008000 	.word	0x40008000
 800334c:	40013800 	.word	0x40013800
 8003350:	40021000 	.word	0x40021000
 8003354:	40004400 	.word	0x40004400
 8003358:	40004800 	.word	0x40004800
 800335c:	40004c00 	.word	0x40004c00
 8003360:	40005000 	.word	0x40005000
 8003364:	2310      	movs	r3, #16
 8003366:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4aae      	ldr	r2, [pc, #696]	@ (8003628 <UART_SetConfig+0x5bc>)
 8003370:	4293      	cmp	r3, r2
 8003372:	f040 8097 	bne.w	80034a4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003376:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800337a:	2b08      	cmp	r3, #8
 800337c:	d823      	bhi.n	80033c6 <UART_SetConfig+0x35a>
 800337e:	a201      	add	r2, pc, #4	@ (adr r2, 8003384 <UART_SetConfig+0x318>)
 8003380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003384:	080033a9 	.word	0x080033a9
 8003388:	080033c7 	.word	0x080033c7
 800338c:	080033b1 	.word	0x080033b1
 8003390:	080033c7 	.word	0x080033c7
 8003394:	080033b7 	.word	0x080033b7
 8003398:	080033c7 	.word	0x080033c7
 800339c:	080033c7 	.word	0x080033c7
 80033a0:	080033c7 	.word	0x080033c7
 80033a4:	080033bf 	.word	0x080033bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033a8:	f7fe fc9a 	bl	8001ce0 <HAL_RCC_GetPCLK1Freq>
 80033ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80033ae:	e010      	b.n	80033d2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033b0:	4b9e      	ldr	r3, [pc, #632]	@ (800362c <UART_SetConfig+0x5c0>)
 80033b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80033b4:	e00d      	b.n	80033d2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033b6:	f7fe fc25 	bl	8001c04 <HAL_RCC_GetSysClockFreq>
 80033ba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80033bc:	e009      	b.n	80033d2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80033c4:	e005      	b.n	80033d2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80033c6:	2300      	movs	r3, #0
 80033c8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80033d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80033d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f000 8130 	beq.w	800363a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033de:	4a94      	ldr	r2, [pc, #592]	@ (8003630 <UART_SetConfig+0x5c4>)
 80033e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033e4:	461a      	mov	r2, r3
 80033e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80033ec:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	685a      	ldr	r2, [r3, #4]
 80033f2:	4613      	mov	r3, r2
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	4413      	add	r3, r2
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d305      	bcc.n	800340a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	429a      	cmp	r2, r3
 8003408:	d903      	bls.n	8003412 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003410:	e113      	b.n	800363a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003414:	2200      	movs	r2, #0
 8003416:	60bb      	str	r3, [r7, #8]
 8003418:	60fa      	str	r2, [r7, #12]
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341e:	4a84      	ldr	r2, [pc, #528]	@ (8003630 <UART_SetConfig+0x5c4>)
 8003420:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003424:	b29b      	uxth	r3, r3
 8003426:	2200      	movs	r2, #0
 8003428:	603b      	str	r3, [r7, #0]
 800342a:	607a      	str	r2, [r7, #4]
 800342c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003430:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003434:	f7fc fef0 	bl	8000218 <__aeabi_uldivmod>
 8003438:	4602      	mov	r2, r0
 800343a:	460b      	mov	r3, r1
 800343c:	4610      	mov	r0, r2
 800343e:	4619      	mov	r1, r3
 8003440:	f04f 0200 	mov.w	r2, #0
 8003444:	f04f 0300 	mov.w	r3, #0
 8003448:	020b      	lsls	r3, r1, #8
 800344a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800344e:	0202      	lsls	r2, r0, #8
 8003450:	6979      	ldr	r1, [r7, #20]
 8003452:	6849      	ldr	r1, [r1, #4]
 8003454:	0849      	lsrs	r1, r1, #1
 8003456:	2000      	movs	r0, #0
 8003458:	460c      	mov	r4, r1
 800345a:	4605      	mov	r5, r0
 800345c:	eb12 0804 	adds.w	r8, r2, r4
 8003460:	eb43 0905 	adc.w	r9, r3, r5
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	469a      	mov	sl, r3
 800346c:	4693      	mov	fp, r2
 800346e:	4652      	mov	r2, sl
 8003470:	465b      	mov	r3, fp
 8003472:	4640      	mov	r0, r8
 8003474:	4649      	mov	r1, r9
 8003476:	f7fc fecf 	bl	8000218 <__aeabi_uldivmod>
 800347a:	4602      	mov	r2, r0
 800347c:	460b      	mov	r3, r1
 800347e:	4613      	mov	r3, r2
 8003480:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003482:	6a3b      	ldr	r3, [r7, #32]
 8003484:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003488:	d308      	bcc.n	800349c <UART_SetConfig+0x430>
 800348a:	6a3b      	ldr	r3, [r7, #32]
 800348c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003490:	d204      	bcs.n	800349c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	6a3a      	ldr	r2, [r7, #32]
 8003498:	60da      	str	r2, [r3, #12]
 800349a:	e0ce      	b.n	800363a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80034a2:	e0ca      	b.n	800363a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	69db      	ldr	r3, [r3, #28]
 80034a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034ac:	d166      	bne.n	800357c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80034ae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80034b2:	2b08      	cmp	r3, #8
 80034b4:	d827      	bhi.n	8003506 <UART_SetConfig+0x49a>
 80034b6:	a201      	add	r2, pc, #4	@ (adr r2, 80034bc <UART_SetConfig+0x450>)
 80034b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034bc:	080034e1 	.word	0x080034e1
 80034c0:	080034e9 	.word	0x080034e9
 80034c4:	080034f1 	.word	0x080034f1
 80034c8:	08003507 	.word	0x08003507
 80034cc:	080034f7 	.word	0x080034f7
 80034d0:	08003507 	.word	0x08003507
 80034d4:	08003507 	.word	0x08003507
 80034d8:	08003507 	.word	0x08003507
 80034dc:	080034ff 	.word	0x080034ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034e0:	f7fe fbfe 	bl	8001ce0 <HAL_RCC_GetPCLK1Freq>
 80034e4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80034e6:	e014      	b.n	8003512 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034e8:	f7fe fc10 	bl	8001d0c <HAL_RCC_GetPCLK2Freq>
 80034ec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80034ee:	e010      	b.n	8003512 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034f0:	4b4e      	ldr	r3, [pc, #312]	@ (800362c <UART_SetConfig+0x5c0>)
 80034f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80034f4:	e00d      	b.n	8003512 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034f6:	f7fe fb85 	bl	8001c04 <HAL_RCC_GetSysClockFreq>
 80034fa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80034fc:	e009      	b.n	8003512 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003502:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003504:	e005      	b.n	8003512 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003506:	2300      	movs	r3, #0
 8003508:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003510:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003514:	2b00      	cmp	r3, #0
 8003516:	f000 8090 	beq.w	800363a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800351e:	4a44      	ldr	r2, [pc, #272]	@ (8003630 <UART_SetConfig+0x5c4>)
 8003520:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003524:	461a      	mov	r2, r3
 8003526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003528:	fbb3 f3f2 	udiv	r3, r3, r2
 800352c:	005a      	lsls	r2, r3, #1
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	085b      	lsrs	r3, r3, #1
 8003534:	441a      	add	r2, r3
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	fbb2 f3f3 	udiv	r3, r2, r3
 800353e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003540:	6a3b      	ldr	r3, [r7, #32]
 8003542:	2b0f      	cmp	r3, #15
 8003544:	d916      	bls.n	8003574 <UART_SetConfig+0x508>
 8003546:	6a3b      	ldr	r3, [r7, #32]
 8003548:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800354c:	d212      	bcs.n	8003574 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800354e:	6a3b      	ldr	r3, [r7, #32]
 8003550:	b29b      	uxth	r3, r3
 8003552:	f023 030f 	bic.w	r3, r3, #15
 8003556:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003558:	6a3b      	ldr	r3, [r7, #32]
 800355a:	085b      	lsrs	r3, r3, #1
 800355c:	b29b      	uxth	r3, r3
 800355e:	f003 0307 	and.w	r3, r3, #7
 8003562:	b29a      	uxth	r2, r3
 8003564:	8bfb      	ldrh	r3, [r7, #30]
 8003566:	4313      	orrs	r3, r2
 8003568:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	8bfa      	ldrh	r2, [r7, #30]
 8003570:	60da      	str	r2, [r3, #12]
 8003572:	e062      	b.n	800363a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800357a:	e05e      	b.n	800363a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800357c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003580:	2b08      	cmp	r3, #8
 8003582:	d828      	bhi.n	80035d6 <UART_SetConfig+0x56a>
 8003584:	a201      	add	r2, pc, #4	@ (adr r2, 800358c <UART_SetConfig+0x520>)
 8003586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800358a:	bf00      	nop
 800358c:	080035b1 	.word	0x080035b1
 8003590:	080035b9 	.word	0x080035b9
 8003594:	080035c1 	.word	0x080035c1
 8003598:	080035d7 	.word	0x080035d7
 800359c:	080035c7 	.word	0x080035c7
 80035a0:	080035d7 	.word	0x080035d7
 80035a4:	080035d7 	.word	0x080035d7
 80035a8:	080035d7 	.word	0x080035d7
 80035ac:	080035cf 	.word	0x080035cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035b0:	f7fe fb96 	bl	8001ce0 <HAL_RCC_GetPCLK1Freq>
 80035b4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80035b6:	e014      	b.n	80035e2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035b8:	f7fe fba8 	bl	8001d0c <HAL_RCC_GetPCLK2Freq>
 80035bc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80035be:	e010      	b.n	80035e2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035c0:	4b1a      	ldr	r3, [pc, #104]	@ (800362c <UART_SetConfig+0x5c0>)
 80035c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80035c4:	e00d      	b.n	80035e2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035c6:	f7fe fb1d 	bl	8001c04 <HAL_RCC_GetSysClockFreq>
 80035ca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80035cc:	e009      	b.n	80035e2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80035d4:	e005      	b.n	80035e2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80035d6:	2300      	movs	r3, #0
 80035d8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80035e0:	bf00      	nop
    }

    if (pclk != 0U)
 80035e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d028      	beq.n	800363a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ec:	4a10      	ldr	r2, [pc, #64]	@ (8003630 <UART_SetConfig+0x5c4>)
 80035ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80035f2:	461a      	mov	r2, r3
 80035f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f6:	fbb3 f2f2 	udiv	r2, r3, r2
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	085b      	lsrs	r3, r3, #1
 8003600:	441a      	add	r2, r3
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	fbb2 f3f3 	udiv	r3, r2, r3
 800360a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800360c:	6a3b      	ldr	r3, [r7, #32]
 800360e:	2b0f      	cmp	r3, #15
 8003610:	d910      	bls.n	8003634 <UART_SetConfig+0x5c8>
 8003612:	6a3b      	ldr	r3, [r7, #32]
 8003614:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003618:	d20c      	bcs.n	8003634 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800361a:	6a3b      	ldr	r3, [r7, #32]
 800361c:	b29a      	uxth	r2, r3
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	60da      	str	r2, [r3, #12]
 8003624:	e009      	b.n	800363a <UART_SetConfig+0x5ce>
 8003626:	bf00      	nop
 8003628:	40008000 	.word	0x40008000
 800362c:	00f42400 	.word	0x00f42400
 8003630:	08003df0 	.word	0x08003df0
      }
      else
      {
        ret = HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	2201      	movs	r2, #1
 800363e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	2201      	movs	r2, #1
 8003646:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	2200      	movs	r2, #0
 800364e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	2200      	movs	r2, #0
 8003654:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003656:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800365a:	4618      	mov	r0, r3
 800365c:	3730      	adds	r7, #48	@ 0x30
 800365e:	46bd      	mov	sp, r7
 8003660:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003664 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003670:	f003 0308 	and.w	r3, r3, #8
 8003674:	2b00      	cmp	r3, #0
 8003676:	d00a      	beq.n	800368e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	430a      	orrs	r2, r1
 800368c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00a      	beq.n	80036b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	430a      	orrs	r2, r1
 80036ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d00a      	beq.n	80036d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	430a      	orrs	r2, r1
 80036d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036d6:	f003 0304 	and.w	r3, r3, #4
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00a      	beq.n	80036f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	430a      	orrs	r2, r1
 80036f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036f8:	f003 0310 	and.w	r3, r3, #16
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00a      	beq.n	8003716 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	430a      	orrs	r2, r1
 8003714:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800371a:	f003 0320 	and.w	r3, r3, #32
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00a      	beq.n	8003738 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	430a      	orrs	r2, r1
 8003736:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800373c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003740:	2b00      	cmp	r3, #0
 8003742:	d01a      	beq.n	800377a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	430a      	orrs	r2, r1
 8003758:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800375e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003762:	d10a      	bne.n	800377a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	430a      	orrs	r2, r1
 8003778:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800377e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00a      	beq.n	800379c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	430a      	orrs	r2, r1
 800379a:	605a      	str	r2, [r3, #4]
  }
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b098      	sub	sp, #96	@ 0x60
 80037ac:	af02      	add	r7, sp, #8
 80037ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80037b8:	f7fd f9ac 	bl	8000b14 <HAL_GetTick>
 80037bc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0308 	and.w	r3, r3, #8
 80037c8:	2b08      	cmp	r3, #8
 80037ca:	d12f      	bne.n	800382c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037cc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80037d0:	9300      	str	r3, [sp, #0]
 80037d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037d4:	2200      	movs	r2, #0
 80037d6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 f88e 	bl	80038fc <UART_WaitOnFlagUntilTimeout>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d022      	beq.n	800382c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037ee:	e853 3f00 	ldrex	r3, [r3]
 80037f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80037f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80037fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	461a      	mov	r2, r3
 8003802:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003804:	647b      	str	r3, [r7, #68]	@ 0x44
 8003806:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003808:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800380a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800380c:	e841 2300 	strex	r3, r2, [r1]
 8003810:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003812:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003814:	2b00      	cmp	r3, #0
 8003816:	d1e6      	bne.n	80037e6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2220      	movs	r2, #32
 800381c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e063      	b.n	80038f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0304 	and.w	r3, r3, #4
 8003836:	2b04      	cmp	r3, #4
 8003838:	d149      	bne.n	80038ce <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800383a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800383e:	9300      	str	r3, [sp, #0]
 8003840:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003842:	2200      	movs	r2, #0
 8003844:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f000 f857 	bl	80038fc <UART_WaitOnFlagUntilTimeout>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d03c      	beq.n	80038ce <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800385a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800385c:	e853 3f00 	ldrex	r3, [r3]
 8003860:	623b      	str	r3, [r7, #32]
   return(result);
 8003862:	6a3b      	ldr	r3, [r7, #32]
 8003864:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003868:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	461a      	mov	r2, r3
 8003870:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003872:	633b      	str	r3, [r7, #48]	@ 0x30
 8003874:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003876:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003878:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800387a:	e841 2300 	strex	r3, r2, [r1]
 800387e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1e6      	bne.n	8003854 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	3308      	adds	r3, #8
 800388c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	e853 3f00 	ldrex	r3, [r3]
 8003894:	60fb      	str	r3, [r7, #12]
   return(result);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f023 0301 	bic.w	r3, r3, #1
 800389c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	3308      	adds	r3, #8
 80038a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80038a6:	61fa      	str	r2, [r7, #28]
 80038a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038aa:	69b9      	ldr	r1, [r7, #24]
 80038ac:	69fa      	ldr	r2, [r7, #28]
 80038ae:	e841 2300 	strex	r3, r2, [r1]
 80038b2:	617b      	str	r3, [r7, #20]
   return(result);
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1e5      	bne.n	8003886 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2220      	movs	r2, #32
 80038be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e012      	b.n	80038f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2220      	movs	r2, #32
 80038d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2220      	movs	r2, #32
 80038da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3758      	adds	r7, #88	@ 0x58
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	603b      	str	r3, [r7, #0]
 8003908:	4613      	mov	r3, r2
 800390a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800390c:	e04f      	b.n	80039ae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003914:	d04b      	beq.n	80039ae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003916:	f7fd f8fd 	bl	8000b14 <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	429a      	cmp	r2, r3
 8003924:	d302      	bcc.n	800392c <UART_WaitOnFlagUntilTimeout+0x30>
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d101      	bne.n	8003930 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e04e      	b.n	80039ce <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0304 	and.w	r3, r3, #4
 800393a:	2b00      	cmp	r3, #0
 800393c:	d037      	beq.n	80039ae <UART_WaitOnFlagUntilTimeout+0xb2>
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	2b80      	cmp	r3, #128	@ 0x80
 8003942:	d034      	beq.n	80039ae <UART_WaitOnFlagUntilTimeout+0xb2>
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	2b40      	cmp	r3, #64	@ 0x40
 8003948:	d031      	beq.n	80039ae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	69db      	ldr	r3, [r3, #28]
 8003950:	f003 0308 	and.w	r3, r3, #8
 8003954:	2b08      	cmp	r3, #8
 8003956:	d110      	bne.n	800397a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2208      	movs	r2, #8
 800395e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003960:	68f8      	ldr	r0, [r7, #12]
 8003962:	f000 f838 	bl	80039d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2208      	movs	r2, #8
 800396a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e029      	b.n	80039ce <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	69db      	ldr	r3, [r3, #28]
 8003980:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003984:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003988:	d111      	bne.n	80039ae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003992:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003994:	68f8      	ldr	r0, [r7, #12]
 8003996:	f000 f81e 	bl	80039d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2220      	movs	r2, #32
 800399e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e00f      	b.n	80039ce <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	69da      	ldr	r2, [r3, #28]
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	4013      	ands	r3, r2
 80039b8:	68ba      	ldr	r2, [r7, #8]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	bf0c      	ite	eq
 80039be:	2301      	moveq	r3, #1
 80039c0:	2300      	movne	r3, #0
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	461a      	mov	r2, r3
 80039c6:	79fb      	ldrb	r3, [r7, #7]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d0a0      	beq.n	800390e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039d6:	b480      	push	{r7}
 80039d8:	b095      	sub	sp, #84	@ 0x54
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039e6:	e853 3f00 	ldrex	r3, [r3]
 80039ea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80039ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80039f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	461a      	mov	r2, r3
 80039fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80039fe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a00:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003a02:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003a04:	e841 2300 	strex	r3, r2, [r1]
 8003a08:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1e6      	bne.n	80039de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	3308      	adds	r3, #8
 8003a16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a18:	6a3b      	ldr	r3, [r7, #32]
 8003a1a:	e853 3f00 	ldrex	r3, [r3]
 8003a1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a26:	f023 0301 	bic.w	r3, r3, #1
 8003a2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	3308      	adds	r3, #8
 8003a32:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a34:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a36:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a3c:	e841 2300 	strex	r3, r2, [r1]
 8003a40:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1e3      	bne.n	8003a10 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d118      	bne.n	8003a82 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	e853 3f00 	ldrex	r3, [r3]
 8003a5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	f023 0310 	bic.w	r3, r3, #16
 8003a64:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a6e:	61bb      	str	r3, [r7, #24]
 8003a70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a72:	6979      	ldr	r1, [r7, #20]
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	e841 2300 	strex	r3, r2, [r1]
 8003a7a:	613b      	str	r3, [r7, #16]
   return(result);
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d1e6      	bne.n	8003a50 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2220      	movs	r2, #32
 8003a86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003a96:	bf00      	nop
 8003a98:	3754      	adds	r7, #84	@ 0x54
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr

08003aa2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	b084      	sub	sp, #16
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ac0:	68f8      	ldr	r0, [r7, #12]
 8003ac2:	f7ff fabd 	bl	8003040 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ac6:	bf00      	nop
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	b088      	sub	sp, #32
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	e853 3f00 	ldrex	r3, [r3]
 8003ae2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003aea:	61fb      	str	r3, [r7, #28]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	461a      	mov	r2, r3
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	61bb      	str	r3, [r7, #24]
 8003af6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af8:	6979      	ldr	r1, [r7, #20]
 8003afa:	69ba      	ldr	r2, [r7, #24]
 8003afc:	e841 2300 	strex	r3, r2, [r1]
 8003b00:	613b      	str	r3, [r7, #16]
   return(result);
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1e6      	bne.n	8003ad6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2220      	movs	r2, #32
 8003b0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f7ff fa88 	bl	800302c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b1c:	bf00      	nop
 8003b1e:	3720      	adds	r7, #32
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003b40:	bf00      	nop
 8003b42:	370c      	adds	r7, #12
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003b54:	bf00      	nop
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b085      	sub	sp, #20
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d101      	bne.n	8003b76 <HAL_UARTEx_DisableFifoMode+0x16>
 8003b72:	2302      	movs	r3, #2
 8003b74:	e027      	b.n	8003bc6 <HAL_UARTEx_DisableFifoMode+0x66>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2224      	movs	r2, #36	@ 0x24
 8003b82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f022 0201 	bic.w	r2, r2, #1
 8003b9c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8003ba4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2220      	movs	r2, #32
 8003bb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3714      	adds	r7, #20
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr

08003bd2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	b084      	sub	sp, #16
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
 8003bda:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d101      	bne.n	8003bea <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003be6:	2302      	movs	r3, #2
 8003be8:	e02d      	b.n	8003c46 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2201      	movs	r2, #1
 8003bee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2224      	movs	r2, #36	@ 0x24
 8003bf6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f022 0201 	bic.w	r2, r2, #1
 8003c10:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	683a      	ldr	r2, [r7, #0]
 8003c22:	430a      	orrs	r2, r1
 8003c24:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 f850 	bl	8003ccc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68fa      	ldr	r2, [r7, #12]
 8003c32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2220      	movs	r2, #32
 8003c38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3710      	adds	r7, #16
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b084      	sub	sp, #16
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
 8003c56:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d101      	bne.n	8003c66 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003c62:	2302      	movs	r3, #2
 8003c64:	e02d      	b.n	8003cc2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2224      	movs	r2, #36	@ 0x24
 8003c72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f022 0201 	bic.w	r2, r2, #1
 8003c8c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	683a      	ldr	r2, [r7, #0]
 8003c9e:	430a      	orrs	r2, r1
 8003ca0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 f812 	bl	8003ccc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68fa      	ldr	r2, [r7, #12]
 8003cae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3710      	adds	r7, #16
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
	...

08003ccc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b085      	sub	sp, #20
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d108      	bne.n	8003cee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003cec:	e031      	b.n	8003d52 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003cee:	2308      	movs	r3, #8
 8003cf0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003cf2:	2308      	movs	r3, #8
 8003cf4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	0e5b      	lsrs	r3, r3, #25
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	f003 0307 	and.w	r3, r3, #7
 8003d04:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	0f5b      	lsrs	r3, r3, #29
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	f003 0307 	and.w	r3, r3, #7
 8003d14:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003d16:	7bbb      	ldrb	r3, [r7, #14]
 8003d18:	7b3a      	ldrb	r2, [r7, #12]
 8003d1a:	4911      	ldr	r1, [pc, #68]	@ (8003d60 <UARTEx_SetNbDataToProcess+0x94>)
 8003d1c:	5c8a      	ldrb	r2, [r1, r2]
 8003d1e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003d22:	7b3a      	ldrb	r2, [r7, #12]
 8003d24:	490f      	ldr	r1, [pc, #60]	@ (8003d64 <UARTEx_SetNbDataToProcess+0x98>)
 8003d26:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003d28:	fb93 f3f2 	sdiv	r3, r3, r2
 8003d2c:	b29a      	uxth	r2, r3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003d34:	7bfb      	ldrb	r3, [r7, #15]
 8003d36:	7b7a      	ldrb	r2, [r7, #13]
 8003d38:	4909      	ldr	r1, [pc, #36]	@ (8003d60 <UARTEx_SetNbDataToProcess+0x94>)
 8003d3a:	5c8a      	ldrb	r2, [r1, r2]
 8003d3c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003d40:	7b7a      	ldrb	r2, [r7, #13]
 8003d42:	4908      	ldr	r1, [pc, #32]	@ (8003d64 <UARTEx_SetNbDataToProcess+0x98>)
 8003d44:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003d46:	fb93 f3f2 	sdiv	r3, r3, r2
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8003d52:	bf00      	nop
 8003d54:	3714      	adds	r7, #20
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	08003e08 	.word	0x08003e08
 8003d64:	08003e10 	.word	0x08003e10

08003d68 <memset>:
 8003d68:	4402      	add	r2, r0
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d100      	bne.n	8003d72 <memset+0xa>
 8003d70:	4770      	bx	lr
 8003d72:	f803 1b01 	strb.w	r1, [r3], #1
 8003d76:	e7f9      	b.n	8003d6c <memset+0x4>

08003d78 <__libc_init_array>:
 8003d78:	b570      	push	{r4, r5, r6, lr}
 8003d7a:	4d0d      	ldr	r5, [pc, #52]	@ (8003db0 <__libc_init_array+0x38>)
 8003d7c:	4c0d      	ldr	r4, [pc, #52]	@ (8003db4 <__libc_init_array+0x3c>)
 8003d7e:	1b64      	subs	r4, r4, r5
 8003d80:	10a4      	asrs	r4, r4, #2
 8003d82:	2600      	movs	r6, #0
 8003d84:	42a6      	cmp	r6, r4
 8003d86:	d109      	bne.n	8003d9c <__libc_init_array+0x24>
 8003d88:	4d0b      	ldr	r5, [pc, #44]	@ (8003db8 <__libc_init_array+0x40>)
 8003d8a:	4c0c      	ldr	r4, [pc, #48]	@ (8003dbc <__libc_init_array+0x44>)
 8003d8c:	f000 f818 	bl	8003dc0 <_init>
 8003d90:	1b64      	subs	r4, r4, r5
 8003d92:	10a4      	asrs	r4, r4, #2
 8003d94:	2600      	movs	r6, #0
 8003d96:	42a6      	cmp	r6, r4
 8003d98:	d105      	bne.n	8003da6 <__libc_init_array+0x2e>
 8003d9a:	bd70      	pop	{r4, r5, r6, pc}
 8003d9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003da0:	4798      	blx	r3
 8003da2:	3601      	adds	r6, #1
 8003da4:	e7ee      	b.n	8003d84 <__libc_init_array+0xc>
 8003da6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003daa:	4798      	blx	r3
 8003dac:	3601      	adds	r6, #1
 8003dae:	e7f2      	b.n	8003d96 <__libc_init_array+0x1e>
 8003db0:	08003e20 	.word	0x08003e20
 8003db4:	08003e20 	.word	0x08003e20
 8003db8:	08003e20 	.word	0x08003e20
 8003dbc:	08003e24 	.word	0x08003e24

08003dc0 <_init>:
 8003dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dc2:	bf00      	nop
 8003dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dc6:	bc08      	pop	{r3}
 8003dc8:	469e      	mov	lr, r3
 8003dca:	4770      	bx	lr

08003dcc <_fini>:
 8003dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dce:	bf00      	nop
 8003dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dd2:	bc08      	pop	{r3}
 8003dd4:	469e      	mov	lr, r3
 8003dd6:	4770      	bx	lr
