
018_PETIT_MODBUS_EXTRA_FEATURES.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004248  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080043e0  080043e0  000053e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004400  08004400  00006018  2**0
                  CONTENTS
  4 .ARM          00000008  08004400  08004400  00005400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004408  08004408  00006018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004408  08004408  00005408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800440c  0800440c  0000540c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08004410  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  20000018  08004428  00006018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000228  08004428  00006228  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d5b7  00000000  00000000  00006048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020b6  00000000  00000000  000135ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d20  00000000  00000000  000156b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a30  00000000  00000000  000163d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015a86  00000000  00000000  00016e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e8f5  00000000  00000000  0002c88e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008af51  00000000  00000000  0003b183  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c60d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003690  00000000  00000000  000c6118  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  000c97a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000018 	.word	0x20000018
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080043c8 	.word	0x080043c8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000001c 	.word	0x2000001c
 80001d4:	080043c8 	.word	0x080043c8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <Petit_CRC16>:
 * @param[in]           : Data  - Data to Calculate CRC
 * @param[in/out]       : CRC   - Anlik CRC degeri
 * @How to use          : First initial data has to be 0xFFFF.
 */
void Petit_CRC16(const unsigned char Data_Petit, unsigned int* CRC_Petit)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	6039      	str	r1, [r7, #0]
 80004d2:	71fb      	strb	r3, [r7, #7]
    unsigned int i;

    *CRC_Petit = *CRC_Petit ^(unsigned int) Data_Petit;
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	681a      	ldr	r2, [r3, #0]
 80004d8:	79fb      	ldrb	r3, [r7, #7]
 80004da:	405a      	eors	r2, r3
 80004dc:	683b      	ldr	r3, [r7, #0]
 80004de:	601a      	str	r2, [r3, #0]
    for (i = 8; i > 0; i--)
 80004e0:	2308      	movs	r3, #8
 80004e2:	60fb      	str	r3, [r7, #12]
 80004e4:	e017      	b.n	8000516 <Petit_CRC16+0x4e>
    {
        if (*CRC_Petit & 0x0001)
 80004e6:	683b      	ldr	r3, [r7, #0]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	f003 0301 	and.w	r3, r3, #1
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d009      	beq.n	8000506 <Petit_CRC16+0x3e>
            *CRC_Petit = (*CRC_Petit >> 1) ^ 0xA001;
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	085b      	lsrs	r3, r3, #1
 80004f8:	f483 4320 	eor.w	r3, r3, #40960	@ 0xa000
 80004fc:	f083 0301 	eor.w	r3, r3, #1
 8000500:	683a      	ldr	r2, [r7, #0]
 8000502:	6013      	str	r3, [r2, #0]
 8000504:	e004      	b.n	8000510 <Petit_CRC16+0x48>
        else
            *CRC_Petit >>= 1;
 8000506:	683b      	ldr	r3, [r7, #0]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	085a      	lsrs	r2, r3, #1
 800050c:	683b      	ldr	r3, [r7, #0]
 800050e:	601a      	str	r2, [r3, #0]
    for (i = 8; i > 0; i--)
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	3b01      	subs	r3, #1
 8000514:	60fb      	str	r3, [r7, #12]
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d1e4      	bne.n	80004e6 <Petit_CRC16+0x1e>
    }
}
 800051c:	bf00      	nop
 800051e:	bf00      	nop
 8000520:	3714      	adds	r7, #20
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
	...

0800052c <Petit_DoSlaveTX>:
 * Function Name        : DoTx
 * @param[out]          : TRUE
 * @How to use          : It is used for send data package over physical layer
 */
unsigned char Petit_DoSlaveTX(void)
{  
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0

    HAL_UART_Transmit_DMA(&huart2, Petit_Tx_Buf, Petit_Tx_Buf_Size);
 8000530:	4b06      	ldr	r3, [pc, #24]	@ (800054c <Petit_DoSlaveTX+0x20>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	b29b      	uxth	r3, r3
 8000536:	461a      	mov	r2, r3
 8000538:	4905      	ldr	r1, [pc, #20]	@ (8000550 <Petit_DoSlaveTX+0x24>)
 800053a:	4806      	ldr	r0, [pc, #24]	@ (8000554 <Petit_DoSlaveTX+0x28>)
 800053c:	f002 fd8e 	bl	800305c <HAL_UART_Transmit_DMA>

    Petit_Tx_Buf_Size = 0;
 8000540:	4b02      	ldr	r3, [pc, #8]	@ (800054c <Petit_DoSlaveTX+0x20>)
 8000542:	2200      	movs	r2, #0
 8000544:	601a      	str	r2, [r3, #0]
    return TRUE;
 8000546:	2301      	movs	r3, #1
}
 8000548:	4618      	mov	r0, r3
 800054a:	bd80      	pop	{r7, pc}
 800054c:	20000078 	.word	0x20000078
 8000550:	2000005c 	.word	0x2000005c
 8000554:	2000011c 	.word	0x2000011c

08000558 <PetitSendMessage>:
 * Function Name        : SendMessage
 * @param[out]          : TRUE/FALSE
 * @How to use          : This function start to sending messages
 */
unsigned char PetitSendMessage(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
    if (Petit_Tx_State != PETIT_RXTX_IDLE)
 800055c:	4b08      	ldr	r3, [pc, #32]	@ (8000580 <PetitSendMessage+0x28>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <PetitSendMessage+0x10>
        return FALSE;
 8000564:	2300      	movs	r3, #0
 8000566:	e006      	b.n	8000576 <PetitSendMessage+0x1e>

    Petit_Tx_Current  =0;
 8000568:	4b06      	ldr	r3, [pc, #24]	@ (8000584 <PetitSendMessage+0x2c>)
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
    Petit_Tx_State    =PETIT_RXTX_START;
 800056e:	4b04      	ldr	r3, [pc, #16]	@ (8000580 <PetitSendMessage+0x28>)
 8000570:	2201      	movs	r2, #1
 8000572:	701a      	strb	r2, [r3, #0]

    return TRUE;
 8000574:	2301      	movs	r3, #1
}
 8000576:	4618      	mov	r0, r3
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr
 8000580:	20000058 	.word	0x20000058
 8000584:	20000054 	.word	0x20000054

08000588 <HandlePetitModbusError>:
/*
 * Function Name        : HandleModbusError
 * @How to use          : This function generated errors to Modbus Master
 */
void HandlePetitModbusError(char ErrorCode)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	71fb      	strb	r3, [r7, #7]
    // Initialise the output buffer. The first byte in the buffer says how many registers we have read
    Petit_Tx_Data.Function    = Petit_Rx_Data.Function | 0x80;
 8000592:	4b0b      	ldr	r3, [pc, #44]	@ (80005c0 <HandlePetitModbusError+0x38>)
 8000594:	785b      	ldrb	r3, [r3, #1]
 8000596:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800059a:	b2da      	uxtb	r2, r3
 800059c:	4b09      	ldr	r3, [pc, #36]	@ (80005c4 <HandlePetitModbusError+0x3c>)
 800059e:	705a      	strb	r2, [r3, #1]
    Petit_Tx_Data.Address     = PETITMODBUS_SLAVE_ADDRESS;
 80005a0:	4b09      	ldr	r3, [pc, #36]	@ (80005c8 <HandlePetitModbusError+0x40>)
 80005a2:	781a      	ldrb	r2, [r3, #0]
 80005a4:	4b07      	ldr	r3, [pc, #28]	@ (80005c4 <HandlePetitModbusError+0x3c>)
 80005a6:	701a      	strb	r2, [r3, #0]
    Petit_Tx_Data.DataLen     = 1;
 80005a8:	4b06      	ldr	r3, [pc, #24]	@ (80005c4 <HandlePetitModbusError+0x3c>)
 80005aa:	2201      	movs	r2, #1
 80005ac:	839a      	strh	r2, [r3, #28]
    Petit_Tx_Data.DataBuf[0]  = ErrorCode;
 80005ae:	4a05      	ldr	r2, [pc, #20]	@ (80005c4 <HandlePetitModbusError+0x3c>)
 80005b0:	79fb      	ldrb	r3, [r7, #7]
 80005b2:	7093      	strb	r3, [r2, #2]
    PetitSendMessage();
 80005b4:	f7ff ffd0 	bl	8000558 <PetitSendMessage>
}
 80005b8:	bf00      	nop
 80005ba:	3708      	adds	r7, #8
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	2000007c 	.word	0x2000007c
 80005c4:	20000034 	.word	0x20000034
 80005c8:	20000000 	.word	0x20000000

080005cc <HandlePetitModbusReadHoldingRegisters>:
 * Function Name        : HandleModbusReadHoldingRegisters
 * @How to use          : Modbus function 03 - Read holding registers
 */
#if PETITMODBUS_READ_HOLDING_REGISTERS_ENABLED > 0
void HandlePetitModbusReadHoldingRegisters(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
    // Holding registers are effectively numerical outputs that can be written to by the host.
    // They can be control registers or analogue outputs.
    // We potientially have one - the pwm output value
    unsigned int    Petit_StartAddress        = 0;
 80005d2:	2300      	movs	r3, #0
 80005d4:	60bb      	str	r3, [r7, #8]
    unsigned int    Petit_NumberOfRegisters   = 0;
 80005d6:	2300      	movs	r3, #0
 80005d8:	607b      	str	r3, [r7, #4]
    unsigned int    Petit_i                   = 0;
 80005da:	2300      	movs	r3, #0
 80005dc:	60fb      	str	r3, [r7, #12]

    // The message contains the requested start address and number of registers
    Petit_StartAddress        = ((unsigned int) (Petit_Rx_Data.DataBuf[0]) << 8) + (unsigned int) (Petit_Rx_Data.DataBuf[1]);
 80005de:	4b2d      	ldr	r3, [pc, #180]	@ (8000694 <HandlePetitModbusReadHoldingRegisters+0xc8>)
 80005e0:	789b      	ldrb	r3, [r3, #2]
 80005e2:	021b      	lsls	r3, r3, #8
 80005e4:	4a2b      	ldr	r2, [pc, #172]	@ (8000694 <HandlePetitModbusReadHoldingRegisters+0xc8>)
 80005e6:	78d2      	ldrb	r2, [r2, #3]
 80005e8:	4413      	add	r3, r2
 80005ea:	60bb      	str	r3, [r7, #8]
    Petit_NumberOfRegisters   = ((unsigned int) (Petit_Rx_Data.DataBuf[2]) << 8) + (unsigned int) (Petit_Rx_Data.DataBuf[3]);
 80005ec:	4b29      	ldr	r3, [pc, #164]	@ (8000694 <HandlePetitModbusReadHoldingRegisters+0xc8>)
 80005ee:	791b      	ldrb	r3, [r3, #4]
 80005f0:	021b      	lsls	r3, r3, #8
 80005f2:	4a28      	ldr	r2, [pc, #160]	@ (8000694 <HandlePetitModbusReadHoldingRegisters+0xc8>)
 80005f4:	7952      	ldrb	r2, [r2, #5]
 80005f6:	4413      	add	r3, r2
 80005f8:	607b      	str	r3, [r7, #4]

    // If it is bigger than RegisterNumber return error to Modbus Master
    if((Petit_StartAddress+Petit_NumberOfRegisters)>NUMBER_OF_OUTPUT_PETITREGISTERS)
 80005fa:	68ba      	ldr	r2, [r7, #8]
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	4413      	add	r3, r2
 8000600:	2b0a      	cmp	r3, #10
 8000602:	d903      	bls.n	800060c <HandlePetitModbusReadHoldingRegisters+0x40>
        HandlePetitModbusError(PETIT_ERROR_CODE_02);
 8000604:	2002      	movs	r0, #2
 8000606:	f7ff ffbf 	bl	8000588 <HandlePetitModbusError>
            Petit_Tx_Data.DataBuf[0]                      = Petit_Tx_Data.DataLen - 1;
        }

        PetitSendMessage();
    }
}
 800060a:	e03f      	b.n	800068c <HandlePetitModbusReadHoldingRegisters+0xc0>
        Petit_Tx_Data.Function    = PETITMODBUS_READ_HOLDING_REGISTERS;
 800060c:	4b22      	ldr	r3, [pc, #136]	@ (8000698 <HandlePetitModbusReadHoldingRegisters+0xcc>)
 800060e:	2203      	movs	r2, #3
 8000610:	705a      	strb	r2, [r3, #1]
        Petit_Tx_Data.Address     = PETITMODBUS_SLAVE_ADDRESS;
 8000612:	4b22      	ldr	r3, [pc, #136]	@ (800069c <HandlePetitModbusReadHoldingRegisters+0xd0>)
 8000614:	781a      	ldrb	r2, [r3, #0]
 8000616:	4b20      	ldr	r3, [pc, #128]	@ (8000698 <HandlePetitModbusReadHoldingRegisters+0xcc>)
 8000618:	701a      	strb	r2, [r3, #0]
        Petit_Tx_Data.DataLen     = 1;
 800061a:	4b1f      	ldr	r3, [pc, #124]	@ (8000698 <HandlePetitModbusReadHoldingRegisters+0xcc>)
 800061c:	2201      	movs	r2, #1
 800061e:	839a      	strh	r2, [r3, #28]
        Petit_Tx_Data.DataBuf[0]  = 0;
 8000620:	4b1d      	ldr	r3, [pc, #116]	@ (8000698 <HandlePetitModbusReadHoldingRegisters+0xcc>)
 8000622:	2200      	movs	r2, #0
 8000624:	709a      	strb	r2, [r3, #2]
        for (Petit_i = 0; Petit_i < Petit_NumberOfRegisters; Petit_i++)
 8000626:	2300      	movs	r3, #0
 8000628:	60fb      	str	r3, [r7, #12]
 800062a:	e029      	b.n	8000680 <HandlePetitModbusReadHoldingRegisters+0xb4>
            unsigned short Petit_CurrentData = PetitRegisters[Petit_StartAddress+Petit_i].ActValue;
 800062c:	68ba      	ldr	r2, [r7, #8]
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	4413      	add	r3, r2
 8000632:	4a1b      	ldr	r2, [pc, #108]	@ (80006a0 <HandlePetitModbusReadHoldingRegisters+0xd4>)
 8000634:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000638:	807b      	strh	r3, [r7, #2]
            Petit_Tx_Data.DataBuf[Petit_Tx_Data.DataLen]        = (unsigned char) ((Petit_CurrentData & 0xFF00) >> 8);
 800063a:	887b      	ldrh	r3, [r7, #2]
 800063c:	0a1b      	lsrs	r3, r3, #8
 800063e:	b29a      	uxth	r2, r3
 8000640:	4b15      	ldr	r3, [pc, #84]	@ (8000698 <HandlePetitModbusReadHoldingRegisters+0xcc>)
 8000642:	8b9b      	ldrh	r3, [r3, #28]
 8000644:	4619      	mov	r1, r3
 8000646:	b2d2      	uxtb	r2, r2
 8000648:	4b13      	ldr	r3, [pc, #76]	@ (8000698 <HandlePetitModbusReadHoldingRegisters+0xcc>)
 800064a:	440b      	add	r3, r1
 800064c:	709a      	strb	r2, [r3, #2]
            Petit_Tx_Data.DataBuf[Petit_Tx_Data.DataLen + 1]    = (unsigned char) (Petit_CurrentData & 0xFF);
 800064e:	4b12      	ldr	r3, [pc, #72]	@ (8000698 <HandlePetitModbusReadHoldingRegisters+0xcc>)
 8000650:	8b9b      	ldrh	r3, [r3, #28]
 8000652:	3301      	adds	r3, #1
 8000654:	887a      	ldrh	r2, [r7, #2]
 8000656:	b2d1      	uxtb	r1, r2
 8000658:	4a0f      	ldr	r2, [pc, #60]	@ (8000698 <HandlePetitModbusReadHoldingRegisters+0xcc>)
 800065a:	4413      	add	r3, r2
 800065c:	460a      	mov	r2, r1
 800065e:	709a      	strb	r2, [r3, #2]
            Petit_Tx_Data.DataLen                        += 2;
 8000660:	4b0d      	ldr	r3, [pc, #52]	@ (8000698 <HandlePetitModbusReadHoldingRegisters+0xcc>)
 8000662:	8b9b      	ldrh	r3, [r3, #28]
 8000664:	3302      	adds	r3, #2
 8000666:	b29a      	uxth	r2, r3
 8000668:	4b0b      	ldr	r3, [pc, #44]	@ (8000698 <HandlePetitModbusReadHoldingRegisters+0xcc>)
 800066a:	839a      	strh	r2, [r3, #28]
            Petit_Tx_Data.DataBuf[0]                      = Petit_Tx_Data.DataLen - 1;
 800066c:	4b0a      	ldr	r3, [pc, #40]	@ (8000698 <HandlePetitModbusReadHoldingRegisters+0xcc>)
 800066e:	8b9b      	ldrh	r3, [r3, #28]
 8000670:	b2db      	uxtb	r3, r3
 8000672:	3b01      	subs	r3, #1
 8000674:	b2da      	uxtb	r2, r3
 8000676:	4b08      	ldr	r3, [pc, #32]	@ (8000698 <HandlePetitModbusReadHoldingRegisters+0xcc>)
 8000678:	709a      	strb	r2, [r3, #2]
        for (Petit_i = 0; Petit_i < Petit_NumberOfRegisters; Petit_i++)
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	3301      	adds	r3, #1
 800067e:	60fb      	str	r3, [r7, #12]
 8000680:	68fa      	ldr	r2, [r7, #12]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	429a      	cmp	r2, r3
 8000686:	d3d1      	bcc.n	800062c <HandlePetitModbusReadHoldingRegisters+0x60>
        PetitSendMessage();
 8000688:	f7ff ff66 	bl	8000558 <PetitSendMessage>
}
 800068c:	bf00      	nop
 800068e:	3710      	adds	r7, #16
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	2000007c 	.word	0x2000007c
 8000698:	20000034 	.word	0x20000034
 800069c:	20000000 	.word	0x20000000
 80006a0:	200000bc 	.word	0x200000bc

080006a4 <HandlePetitModbusWriteSingleRegister>:
 * Function Name        : HandleModbusReadInputRegisters
 * @How to use          : Modbus function 06 - Write single register
 */
#if PETITMODBUSWRITE_SINGLE_REGISTER_ENABLED > 0
void HandlePetitModbusWriteSingleRegister(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
    // Write single numerical output
    unsigned int    Petit_Address   = 0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	60bb      	str	r3, [r7, #8]
    unsigned int    Petit_Value     = 0;
 80006ae:	2300      	movs	r3, #0
 80006b0:	607b      	str	r3, [r7, #4]
    unsigned char   Petit_i         = 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	73fb      	strb	r3, [r7, #15]

    // The message contains the requested start address and number of registers
    Petit_Address   = ((unsigned int) (Petit_Rx_Data.DataBuf[0]) << 8) + (unsigned int) (Petit_Rx_Data.DataBuf[1]);
 80006b6:	4b1e      	ldr	r3, [pc, #120]	@ (8000730 <HandlePetitModbusWriteSingleRegister+0x8c>)
 80006b8:	789b      	ldrb	r3, [r3, #2]
 80006ba:	021b      	lsls	r3, r3, #8
 80006bc:	4a1c      	ldr	r2, [pc, #112]	@ (8000730 <HandlePetitModbusWriteSingleRegister+0x8c>)
 80006be:	78d2      	ldrb	r2, [r2, #3]
 80006c0:	4413      	add	r3, r2
 80006c2:	60bb      	str	r3, [r7, #8]
    Petit_Value     = ((unsigned int) (Petit_Rx_Data.DataBuf[2]) << 8) + (unsigned int) (Petit_Rx_Data.DataBuf[3]);
 80006c4:	4b1a      	ldr	r3, [pc, #104]	@ (8000730 <HandlePetitModbusWriteSingleRegister+0x8c>)
 80006c6:	791b      	ldrb	r3, [r3, #4]
 80006c8:	021b      	lsls	r3, r3, #8
 80006ca:	4a19      	ldr	r2, [pc, #100]	@ (8000730 <HandlePetitModbusWriteSingleRegister+0x8c>)
 80006cc:	7952      	ldrb	r2, [r2, #5]
 80006ce:	4413      	add	r3, r2
 80006d0:	607b      	str	r3, [r7, #4]

    // Initialise the output buffer. The first byte in the buffer says how many registers we have read
    Petit_Tx_Data.Function    = PETITMODBUS_WRITE_SINGLE_REGISTER;
 80006d2:	4b18      	ldr	r3, [pc, #96]	@ (8000734 <HandlePetitModbusWriteSingleRegister+0x90>)
 80006d4:	2206      	movs	r2, #6
 80006d6:	705a      	strb	r2, [r3, #1]
    Petit_Tx_Data.Address     = PETITMODBUS_SLAVE_ADDRESS;
 80006d8:	4b17      	ldr	r3, [pc, #92]	@ (8000738 <HandlePetitModbusWriteSingleRegister+0x94>)
 80006da:	781a      	ldrb	r2, [r3, #0]
 80006dc:	4b15      	ldr	r3, [pc, #84]	@ (8000734 <HandlePetitModbusWriteSingleRegister+0x90>)
 80006de:	701a      	strb	r2, [r3, #0]
    Petit_Tx_Data.DataLen     = 4;
 80006e0:	4b14      	ldr	r3, [pc, #80]	@ (8000734 <HandlePetitModbusWriteSingleRegister+0x90>)
 80006e2:	2204      	movs	r2, #4
 80006e4:	839a      	strh	r2, [r3, #28]

    if(Petit_Address>=NUMBER_OF_OUTPUT_PETITREGISTERS)
 80006e6:	68bb      	ldr	r3, [r7, #8]
 80006e8:	2b09      	cmp	r3, #9
 80006ea:	d903      	bls.n	80006f4 <HandlePetitModbusWriteSingleRegister+0x50>
        HandlePetitModbusError(PETIT_ERROR_CODE_02);
 80006ec:	2002      	movs	r0, #2
 80006ee:	f7ff ff4b 	bl	8000588 <HandlePetitModbusError>
 80006f2:	e017      	b.n	8000724 <HandlePetitModbusWriteSingleRegister+0x80>
    else
    {
        PetitRegisters[Petit_Address].ActValue=Petit_Value;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	b219      	sxth	r1, r3
 80006f8:	4a10      	ldr	r2, [pc, #64]	@ (800073c <HandlePetitModbusWriteSingleRegister+0x98>)
 80006fa:	68bb      	ldr	r3, [r7, #8]
 80006fc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        // Output data buffer is exact copy of input buffer
        for (Petit_i = 0; Petit_i < 4; ++Petit_i)
 8000700:	2300      	movs	r3, #0
 8000702:	73fb      	strb	r3, [r7, #15]
 8000704:	e00b      	b.n	800071e <HandlePetitModbusWriteSingleRegister+0x7a>
            Petit_Tx_Data.DataBuf[Petit_i] = Petit_Rx_Data.DataBuf[Petit_i];
 8000706:	7bfa      	ldrb	r2, [r7, #15]
 8000708:	7bfb      	ldrb	r3, [r7, #15]
 800070a:	4909      	ldr	r1, [pc, #36]	@ (8000730 <HandlePetitModbusWriteSingleRegister+0x8c>)
 800070c:	440a      	add	r2, r1
 800070e:	7891      	ldrb	r1, [r2, #2]
 8000710:	4a08      	ldr	r2, [pc, #32]	@ (8000734 <HandlePetitModbusWriteSingleRegister+0x90>)
 8000712:	4413      	add	r3, r2
 8000714:	460a      	mov	r2, r1
 8000716:	709a      	strb	r2, [r3, #2]
        for (Petit_i = 0; Petit_i < 4; ++Petit_i)
 8000718:	7bfb      	ldrb	r3, [r7, #15]
 800071a:	3301      	adds	r3, #1
 800071c:	73fb      	strb	r3, [r7, #15]
 800071e:	7bfb      	ldrb	r3, [r7, #15]
 8000720:	2b03      	cmp	r3, #3
 8000722:	d9f0      	bls.n	8000706 <HandlePetitModbusWriteSingleRegister+0x62>
    }

    PetitSendMessage();
 8000724:	f7ff ff18 	bl	8000558 <PetitSendMessage>
}
 8000728:	bf00      	nop
 800072a:	3710      	adds	r7, #16
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	2000007c 	.word	0x2000007c
 8000734:	20000034 	.word	0x20000034
 8000738:	20000000 	.word	0x20000000
 800073c:	200000bc 	.word	0x200000bc

08000740 <HandleMPetitodbusWriteMultipleRegisters>:
 * Function Name        : HandleModbusWriteMultipleRegisters
 * @How to use          : Modbus function 16 - Write multiple registers
 */
#if PETITMODBUS_WRITE_MULTIPLE_REGISTERS_ENABLED > 0
void HandleMPetitodbusWriteMultipleRegisters(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b086      	sub	sp, #24
 8000744:	af00      	add	r7, sp, #0
    // Write single numerical output
    unsigned int    Petit_StartAddress            =0;
 8000746:	2300      	movs	r3, #0
 8000748:	613b      	str	r3, [r7, #16]
    unsigned char   Petit_ByteCount               =0;
 800074a:	2300      	movs	r3, #0
 800074c:	73fb      	strb	r3, [r7, #15]
    unsigned int    Petit_NumberOfRegisters       =0;
 800074e:	2300      	movs	r3, #0
 8000750:	60bb      	str	r3, [r7, #8]
    unsigned char   Petit_i                       =0;
 8000752:	2300      	movs	r3, #0
 8000754:	75fb      	strb	r3, [r7, #23]
    unsigned int	Petit_Value                   =0;
 8000756:	2300      	movs	r3, #0
 8000758:	607b      	str	r3, [r7, #4]

    // The message contains the requested start address and number of registers
    Petit_StartAddress        = ((unsigned int) (Petit_Rx_Data.DataBuf[0]) << 8) + (unsigned int) (Petit_Rx_Data.DataBuf[1]);
 800075a:	4b2d      	ldr	r3, [pc, #180]	@ (8000810 <HandleMPetitodbusWriteMultipleRegisters+0xd0>)
 800075c:	789b      	ldrb	r3, [r3, #2]
 800075e:	021b      	lsls	r3, r3, #8
 8000760:	4a2b      	ldr	r2, [pc, #172]	@ (8000810 <HandleMPetitodbusWriteMultipleRegisters+0xd0>)
 8000762:	78d2      	ldrb	r2, [r2, #3]
 8000764:	4413      	add	r3, r2
 8000766:	613b      	str	r3, [r7, #16]
    Petit_NumberOfRegisters   = ((unsigned int) (Petit_Rx_Data.DataBuf[2]) << 8) + (unsigned int) (Petit_Rx_Data.DataBuf[3]);
 8000768:	4b29      	ldr	r3, [pc, #164]	@ (8000810 <HandleMPetitodbusWriteMultipleRegisters+0xd0>)
 800076a:	791b      	ldrb	r3, [r3, #4]
 800076c:	021b      	lsls	r3, r3, #8
 800076e:	4a28      	ldr	r2, [pc, #160]	@ (8000810 <HandleMPetitodbusWriteMultipleRegisters+0xd0>)
 8000770:	7952      	ldrb	r2, [r2, #5]
 8000772:	4413      	add	r3, r2
 8000774:	60bb      	str	r3, [r7, #8]
    Petit_ByteCount           = Petit_Rx_Data.DataBuf[4];
 8000776:	4b26      	ldr	r3, [pc, #152]	@ (8000810 <HandleMPetitodbusWriteMultipleRegisters+0xd0>)
 8000778:	799b      	ldrb	r3, [r3, #6]
 800077a:	73fb      	strb	r3, [r7, #15]

    // If it is bigger than RegisterNumber return error to Modbus Master
    if((Petit_StartAddress+Petit_NumberOfRegisters)>NUMBER_OF_OUTPUT_PETITREGISTERS)
 800077c:	693a      	ldr	r2, [r7, #16]
 800077e:	68bb      	ldr	r3, [r7, #8]
 8000780:	4413      	add	r3, r2
 8000782:	2b0a      	cmp	r3, #10
 8000784:	d903      	bls.n	800078e <HandleMPetitodbusWriteMultipleRegisters+0x4e>
        HandlePetitModbusError(PETIT_ERROR_CODE_02);
 8000786:	2002      	movs	r0, #2
 8000788:	f7ff fefe 	bl	8000588 <HandlePetitModbusError>
            PetitRegisters[Petit_StartAddress+Petit_i].ActValue=Petit_Value;
        }

        PetitSendMessage();
    }
}
 800078c:	e03c      	b.n	8000808 <HandleMPetitodbusWriteMultipleRegisters+0xc8>
        Petit_Tx_Data.Function    = PETITMODBUS_WRITE_MULTIPLE_REGISTERS;
 800078e:	4b21      	ldr	r3, [pc, #132]	@ (8000814 <HandleMPetitodbusWriteMultipleRegisters+0xd4>)
 8000790:	2210      	movs	r2, #16
 8000792:	705a      	strb	r2, [r3, #1]
        Petit_Tx_Data.Address     = PETITMODBUS_SLAVE_ADDRESS;
 8000794:	4b20      	ldr	r3, [pc, #128]	@ (8000818 <HandleMPetitodbusWriteMultipleRegisters+0xd8>)
 8000796:	781a      	ldrb	r2, [r3, #0]
 8000798:	4b1e      	ldr	r3, [pc, #120]	@ (8000814 <HandleMPetitodbusWriteMultipleRegisters+0xd4>)
 800079a:	701a      	strb	r2, [r3, #0]
        Petit_Tx_Data.DataLen     = 4;
 800079c:	4b1d      	ldr	r3, [pc, #116]	@ (8000814 <HandleMPetitodbusWriteMultipleRegisters+0xd4>)
 800079e:	2204      	movs	r2, #4
 80007a0:	839a      	strh	r2, [r3, #28]
        Petit_Tx_Data.DataBuf[0]  = Petit_Rx_Data.DataBuf[0];
 80007a2:	4b1b      	ldr	r3, [pc, #108]	@ (8000810 <HandleMPetitodbusWriteMultipleRegisters+0xd0>)
 80007a4:	789a      	ldrb	r2, [r3, #2]
 80007a6:	4b1b      	ldr	r3, [pc, #108]	@ (8000814 <HandleMPetitodbusWriteMultipleRegisters+0xd4>)
 80007a8:	709a      	strb	r2, [r3, #2]
        Petit_Tx_Data.DataBuf[1]  = Petit_Rx_Data.DataBuf[1];
 80007aa:	4b19      	ldr	r3, [pc, #100]	@ (8000810 <HandleMPetitodbusWriteMultipleRegisters+0xd0>)
 80007ac:	78da      	ldrb	r2, [r3, #3]
 80007ae:	4b19      	ldr	r3, [pc, #100]	@ (8000814 <HandleMPetitodbusWriteMultipleRegisters+0xd4>)
 80007b0:	70da      	strb	r2, [r3, #3]
        Petit_Tx_Data.DataBuf[2]  = Petit_Rx_Data.DataBuf[2];
 80007b2:	4b17      	ldr	r3, [pc, #92]	@ (8000810 <HandleMPetitodbusWriteMultipleRegisters+0xd0>)
 80007b4:	791a      	ldrb	r2, [r3, #4]
 80007b6:	4b17      	ldr	r3, [pc, #92]	@ (8000814 <HandleMPetitodbusWriteMultipleRegisters+0xd4>)
 80007b8:	711a      	strb	r2, [r3, #4]
        Petit_Tx_Data.DataBuf[3]  = Petit_Rx_Data.DataBuf[3];
 80007ba:	4b15      	ldr	r3, [pc, #84]	@ (8000810 <HandleMPetitodbusWriteMultipleRegisters+0xd0>)
 80007bc:	795a      	ldrb	r2, [r3, #5]
 80007be:	4b15      	ldr	r3, [pc, #84]	@ (8000814 <HandleMPetitodbusWriteMultipleRegisters+0xd4>)
 80007c0:	715a      	strb	r2, [r3, #5]
        for (Petit_i = 0; Petit_i <Petit_NumberOfRegisters; Petit_i++)
 80007c2:	2300      	movs	r3, #0
 80007c4:	75fb      	strb	r3, [r7, #23]
 80007c6:	e019      	b.n	80007fc <HandleMPetitodbusWriteMultipleRegisters+0xbc>
            Petit_Value=(Petit_Rx_Data.DataBuf[5+2*Petit_i]<<8)+(Petit_Rx_Data.DataBuf[6+2*Petit_i]);
 80007c8:	7dfb      	ldrb	r3, [r7, #23]
 80007ca:	005b      	lsls	r3, r3, #1
 80007cc:	3305      	adds	r3, #5
 80007ce:	4a10      	ldr	r2, [pc, #64]	@ (8000810 <HandleMPetitodbusWriteMultipleRegisters+0xd0>)
 80007d0:	4413      	add	r3, r2
 80007d2:	789b      	ldrb	r3, [r3, #2]
 80007d4:	021b      	lsls	r3, r3, #8
 80007d6:	7dfa      	ldrb	r2, [r7, #23]
 80007d8:	3203      	adds	r2, #3
 80007da:	0052      	lsls	r2, r2, #1
 80007dc:	490c      	ldr	r1, [pc, #48]	@ (8000810 <HandleMPetitodbusWriteMultipleRegisters+0xd0>)
 80007de:	440a      	add	r2, r1
 80007e0:	7892      	ldrb	r2, [r2, #2]
 80007e2:	4413      	add	r3, r2
 80007e4:	607b      	str	r3, [r7, #4]
            PetitRegisters[Petit_StartAddress+Petit_i].ActValue=Petit_Value;
 80007e6:	7dfa      	ldrb	r2, [r7, #23]
 80007e8:	693b      	ldr	r3, [r7, #16]
 80007ea:	4413      	add	r3, r2
 80007ec:	687a      	ldr	r2, [r7, #4]
 80007ee:	b211      	sxth	r1, r2
 80007f0:	4a0a      	ldr	r2, [pc, #40]	@ (800081c <HandleMPetitodbusWriteMultipleRegisters+0xdc>)
 80007f2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (Petit_i = 0; Petit_i <Petit_NumberOfRegisters; Petit_i++)
 80007f6:	7dfb      	ldrb	r3, [r7, #23]
 80007f8:	3301      	adds	r3, #1
 80007fa:	75fb      	strb	r3, [r7, #23]
 80007fc:	7dfb      	ldrb	r3, [r7, #23]
 80007fe:	68ba      	ldr	r2, [r7, #8]
 8000800:	429a      	cmp	r2, r3
 8000802:	d8e1      	bhi.n	80007c8 <HandleMPetitodbusWriteMultipleRegisters+0x88>
        PetitSendMessage();
 8000804:	f7ff fea8 	bl	8000558 <PetitSendMessage>
}
 8000808:	bf00      	nop
 800080a:	3718      	adds	r7, #24
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	2000007c 	.word	0x2000007c
 8000814:	20000034 	.word	0x20000034
 8000818:	20000000 	.word	0x20000000
 800081c:	200000bc 	.word	0x200000bc

08000820 <Petit_RxDataAvailable>:
 * Function Name        : RxDataAvailable
 * @return              : If Data is Ready, Return TRUE
 *                        If Data is not Ready, Return FALSE
 */
unsigned char Petit_RxDataAvailable(void)
{
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
    unsigned char Result    = Petit_Rx_Data_Available;
 8000826:	4b06      	ldr	r3, [pc, #24]	@ (8000840 <Petit_RxDataAvailable+0x20>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	71fb      	strb	r3, [r7, #7]
    
    Petit_Rx_Data_Available       = FALSE;
 800082c:	4b04      	ldr	r3, [pc, #16]	@ (8000840 <Petit_RxDataAvailable+0x20>)
 800082e:	2200      	movs	r2, #0
 8000830:	701a      	strb	r2, [r3, #0]

    return Result;
 8000832:	79fb      	ldrb	r3, [r7, #7]
}
 8000834:	4618      	mov	r0, r3
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr
 8000840:	2000009b 	.word	0x2000009b

08000844 <Petit_CheckRxTimeout>:
 * Function Name        : CheckRxTimeout
 * @return              : If Time is out return TRUE
 *                        If Time is not out return FALSE
 */
unsigned char Petit_CheckRxTimeout(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
    // A return value of true indicates there is a timeout    
    if (PetitModbusTimerValue>= PETITMODBUS_TIMEOUTTIMER)
 8000848:	4b09      	ldr	r3, [pc, #36]	@ (8000870 <Petit_CheckRxTimeout+0x2c>)
 800084a:	881b      	ldrh	r3, [r3, #0]
 800084c:	b29b      	uxth	r3, r3
 800084e:	2bf9      	cmp	r3, #249	@ 0xf9
 8000850:	d907      	bls.n	8000862 <Petit_CheckRxTimeout+0x1e>
    {
        PetitModbusTimerValue   =0;
 8000852:	4b07      	ldr	r3, [pc, #28]	@ (8000870 <Petit_CheckRxTimeout+0x2c>)
 8000854:	2200      	movs	r2, #0
 8000856:	801a      	strh	r2, [r3, #0]
        PetitReceiveCounter     =0;
 8000858:	4b06      	ldr	r3, [pc, #24]	@ (8000874 <Petit_CheckRxTimeout+0x30>)
 800085a:	2200      	movs	r2, #0
 800085c:	701a      	strb	r2, [r3, #0]
        return TRUE;
 800085e:	2301      	movs	r3, #1
 8000860:	e000      	b.n	8000864 <Petit_CheckRxTimeout+0x20>
    }

    return FALSE;
 8000862:	2300      	movs	r3, #0
}
 8000864:	4618      	mov	r0, r3
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	2000009c 	.word	0x2000009c
 8000874:	200000b9 	.word	0x200000b9

08000878 <CheckPetitModbusBufferComplete>:
 *                        If slave address is wrong, return     FALSE_SLAVE_ADDRESS
 *                        If data is not ready, return          DATA_NOT_READY
 *                        If functions is wrong, return         FALSE_FUNCTION
 */
unsigned char CheckPetitModbusBufferComplete(void)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
    int PetitExpectedReceiveCount=0;
 800087e:	2300      	movs	r3, #0
 8000880:	607b      	str	r3, [r7, #4]

    if(PetitReceiveCounter>4)
 8000882:	4b2c      	ldr	r3, [pc, #176]	@ (8000934 <CheckPetitModbusBufferComplete+0xbc>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	b2db      	uxtb	r3, r3
 8000888:	2b04      	cmp	r3, #4
 800088a:	d941      	bls.n	8000910 <CheckPetitModbusBufferComplete+0x98>
    {
        if(PetitReceiveBuffer[0]==PETITMODBUS_SLAVE_ADDRESS)
 800088c:	4b2a      	ldr	r3, [pc, #168]	@ (8000938 <CheckPetitModbusBufferComplete+0xc0>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	b2da      	uxtb	r2, r3
 8000892:	4b2a      	ldr	r3, [pc, #168]	@ (800093c <CheckPetitModbusBufferComplete+0xc4>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	429a      	cmp	r2, r3
 8000898:	d135      	bne.n	8000906 <CheckPetitModbusBufferComplete+0x8e>
        {
            if(PetitReceiveBuffer[1]==0x01 || PetitReceiveBuffer[1]==0x02 || PetitReceiveBuffer[1]==0x03 || PetitReceiveBuffer[1]==0x04 || PetitReceiveBuffer[1]==0x05 || PetitReceiveBuffer[1]==0x06)  // RHR
 800089a:	4b27      	ldr	r3, [pc, #156]	@ (8000938 <CheckPetitModbusBufferComplete+0xc0>)
 800089c:	785b      	ldrb	r3, [r3, #1]
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	d018      	beq.n	80008d6 <CheckPetitModbusBufferComplete+0x5e>
 80008a4:	4b24      	ldr	r3, [pc, #144]	@ (8000938 <CheckPetitModbusBufferComplete+0xc0>)
 80008a6:	785b      	ldrb	r3, [r3, #1]
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	2b02      	cmp	r3, #2
 80008ac:	d013      	beq.n	80008d6 <CheckPetitModbusBufferComplete+0x5e>
 80008ae:	4b22      	ldr	r3, [pc, #136]	@ (8000938 <CheckPetitModbusBufferComplete+0xc0>)
 80008b0:	785b      	ldrb	r3, [r3, #1]
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	2b03      	cmp	r3, #3
 80008b6:	d00e      	beq.n	80008d6 <CheckPetitModbusBufferComplete+0x5e>
 80008b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000938 <CheckPetitModbusBufferComplete+0xc0>)
 80008ba:	785b      	ldrb	r3, [r3, #1]
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	2b04      	cmp	r3, #4
 80008c0:	d009      	beq.n	80008d6 <CheckPetitModbusBufferComplete+0x5e>
 80008c2:	4b1d      	ldr	r3, [pc, #116]	@ (8000938 <CheckPetitModbusBufferComplete+0xc0>)
 80008c4:	785b      	ldrb	r3, [r3, #1]
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	2b05      	cmp	r3, #5
 80008ca:	d004      	beq.n	80008d6 <CheckPetitModbusBufferComplete+0x5e>
 80008cc:	4b1a      	ldr	r3, [pc, #104]	@ (8000938 <CheckPetitModbusBufferComplete+0xc0>)
 80008ce:	785b      	ldrb	r3, [r3, #1]
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	2b06      	cmp	r3, #6
 80008d4:	d102      	bne.n	80008dc <CheckPetitModbusBufferComplete+0x64>
            {
                PetitExpectedReceiveCount    =8;
 80008d6:	2308      	movs	r3, #8
 80008d8:	607b      	str	r3, [r7, #4]
 80008da:	e01b      	b.n	8000914 <CheckPetitModbusBufferComplete+0x9c>
            }
            else if(PetitReceiveBuffer[1]==0x0F || PetitReceiveBuffer[1]==0x10)
 80008dc:	4b16      	ldr	r3, [pc, #88]	@ (8000938 <CheckPetitModbusBufferComplete+0xc0>)
 80008de:	785b      	ldrb	r3, [r3, #1]
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	2b0f      	cmp	r3, #15
 80008e4:	d004      	beq.n	80008f0 <CheckPetitModbusBufferComplete+0x78>
 80008e6:	4b14      	ldr	r3, [pc, #80]	@ (8000938 <CheckPetitModbusBufferComplete+0xc0>)
 80008e8:	785b      	ldrb	r3, [r3, #1]
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	2b10      	cmp	r3, #16
 80008ee:	d105      	bne.n	80008fc <CheckPetitModbusBufferComplete+0x84>
            {
                PetitExpectedReceiveCount=PetitReceiveBuffer[6]+9;
 80008f0:	4b11      	ldr	r3, [pc, #68]	@ (8000938 <CheckPetitModbusBufferComplete+0xc0>)
 80008f2:	799b      	ldrb	r3, [r3, #6]
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	3309      	adds	r3, #9
 80008f8:	607b      	str	r3, [r7, #4]
 80008fa:	e00b      	b.n	8000914 <CheckPetitModbusBufferComplete+0x9c>
            }
            else
            {
                PetitReceiveCounter=0;
 80008fc:	4b0d      	ldr	r3, [pc, #52]	@ (8000934 <CheckPetitModbusBufferComplete+0xbc>)
 80008fe:	2200      	movs	r2, #0
 8000900:	701a      	strb	r2, [r3, #0]
                return PETIT_FALSE_FUNCTION;
 8000902:	2300      	movs	r3, #0
 8000904:	e010      	b.n	8000928 <CheckPetitModbusBufferComplete+0xb0>
            }
        }
        else
        {
            PetitReceiveCounter=0;
 8000906:	4b0b      	ldr	r3, [pc, #44]	@ (8000934 <CheckPetitModbusBufferComplete+0xbc>)
 8000908:	2200      	movs	r2, #0
 800090a:	701a      	strb	r2, [r3, #0]
            return PETIT_FALSE_SLAVE_ADDRESS;
 800090c:	2301      	movs	r3, #1
 800090e:	e00b      	b.n	8000928 <CheckPetitModbusBufferComplete+0xb0>
        }
    }
    else
        return PETIT_DATA_NOT_READY;
 8000910:	2302      	movs	r3, #2
 8000912:	e009      	b.n	8000928 <CheckPetitModbusBufferComplete+0xb0>

    if(PetitReceiveCounter==PetitExpectedReceiveCount)
 8000914:	4b07      	ldr	r3, [pc, #28]	@ (8000934 <CheckPetitModbusBufferComplete+0xbc>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	b2db      	uxtb	r3, r3
 800091a:	461a      	mov	r2, r3
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	4293      	cmp	r3, r2
 8000920:	d101      	bne.n	8000926 <CheckPetitModbusBufferComplete+0xae>
    {
        return PETIT_DATA_READY;
 8000922:	2303      	movs	r3, #3
 8000924:	e000      	b.n	8000928 <CheckPetitModbusBufferComplete+0xb0>
    }

    return PETIT_DATA_NOT_READY;
 8000926:	2302      	movs	r3, #2
}
 8000928:	4618      	mov	r0, r3
 800092a:	370c      	adds	r7, #12
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr
 8000934:	200000b9 	.word	0x200000b9
 8000938:	200000a0 	.word	0x200000a0
 800093c:	20000000 	.word	0x20000000

08000940 <Petit_RxRTU>:
/*
 * Function Name        : RxRTU
 * @How to use          : Check for data ready, if it is good return answer
 */
void Petit_RxRTU(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
    unsigned char   Petit_i;
    unsigned char   Petit_ReceiveBufferControl=0;
 8000946:	2300      	movs	r3, #0
 8000948:	71bb      	strb	r3, [r7, #6]

    Petit_ReceiveBufferControl    =CheckPetitModbusBufferComplete();
 800094a:	f7ff ff95 	bl	8000878 <CheckPetitModbusBufferComplete>
 800094e:	4603      	mov	r3, r0
 8000950:	71bb      	strb	r3, [r7, #6]

    if(Petit_ReceiveBufferControl==PETIT_DATA_READY)
 8000952:	79bb      	ldrb	r3, [r7, #6]
 8000954:	2b03      	cmp	r3, #3
 8000956:	d13c      	bne.n	80009d2 <Petit_RxRTU+0x92>
    {
        Petit_Rx_Data.Address               =PetitReceiveBuffer[0];
 8000958:	4b3e      	ldr	r3, [pc, #248]	@ (8000a54 <Petit_RxRTU+0x114>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	b2da      	uxtb	r2, r3
 800095e:	4b3e      	ldr	r3, [pc, #248]	@ (8000a58 <Petit_RxRTU+0x118>)
 8000960:	701a      	strb	r2, [r3, #0]
        Petit_Rx_CRC16                      = 0xffff;
 8000962:	4b3e      	ldr	r3, [pc, #248]	@ (8000a5c <Petit_RxRTU+0x11c>)
 8000964:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000968:	601a      	str	r2, [r3, #0]
        Petit_CRC16(Petit_Rx_Data.Address, &Petit_Rx_CRC16);
 800096a:	4b3b      	ldr	r3, [pc, #236]	@ (8000a58 <Petit_RxRTU+0x118>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	493b      	ldr	r1, [pc, #236]	@ (8000a5c <Petit_RxRTU+0x11c>)
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff fda9 	bl	80004c8 <Petit_CRC16>
        Petit_Rx_Data.Function              =PetitReceiveBuffer[1];
 8000976:	4b37      	ldr	r3, [pc, #220]	@ (8000a54 <Petit_RxRTU+0x114>)
 8000978:	785b      	ldrb	r3, [r3, #1]
 800097a:	b2da      	uxtb	r2, r3
 800097c:	4b36      	ldr	r3, [pc, #216]	@ (8000a58 <Petit_RxRTU+0x118>)
 800097e:	705a      	strb	r2, [r3, #1]
        Petit_CRC16(Petit_Rx_Data.Function, &Petit_Rx_CRC16);
 8000980:	4b35      	ldr	r3, [pc, #212]	@ (8000a58 <Petit_RxRTU+0x118>)
 8000982:	785b      	ldrb	r3, [r3, #1]
 8000984:	4935      	ldr	r1, [pc, #212]	@ (8000a5c <Petit_RxRTU+0x11c>)
 8000986:	4618      	mov	r0, r3
 8000988:	f7ff fd9e 	bl	80004c8 <Petit_CRC16>

        Petit_Rx_Data.DataLen=0;
 800098c:	4b32      	ldr	r3, [pc, #200]	@ (8000a58 <Petit_RxRTU+0x118>)
 800098e:	2200      	movs	r2, #0
 8000990:	839a      	strh	r2, [r3, #28]

        for(Petit_i=2;Petit_i<PetitReceiveCounter;Petit_i++)
 8000992:	2302      	movs	r3, #2
 8000994:	71fb      	strb	r3, [r7, #7]
 8000996:	e010      	b.n	80009ba <Petit_RxRTU+0x7a>
            Petit_Rx_Data.DataBuf[Petit_Rx_Data.DataLen++]=PetitReceiveBuffer[Petit_i];
 8000998:	79fa      	ldrb	r2, [r7, #7]
 800099a:	4b2f      	ldr	r3, [pc, #188]	@ (8000a58 <Petit_RxRTU+0x118>)
 800099c:	8b9b      	ldrh	r3, [r3, #28]
 800099e:	1c59      	adds	r1, r3, #1
 80009a0:	b288      	uxth	r0, r1
 80009a2:	492d      	ldr	r1, [pc, #180]	@ (8000a58 <Petit_RxRTU+0x118>)
 80009a4:	8388      	strh	r0, [r1, #28]
 80009a6:	4619      	mov	r1, r3
 80009a8:	4b2a      	ldr	r3, [pc, #168]	@ (8000a54 <Petit_RxRTU+0x114>)
 80009aa:	5c9b      	ldrb	r3, [r3, r2]
 80009ac:	b2da      	uxtb	r2, r3
 80009ae:	4b2a      	ldr	r3, [pc, #168]	@ (8000a58 <Petit_RxRTU+0x118>)
 80009b0:	440b      	add	r3, r1
 80009b2:	709a      	strb	r2, [r3, #2]
        for(Petit_i=2;Petit_i<PetitReceiveCounter;Petit_i++)
 80009b4:	79fb      	ldrb	r3, [r7, #7]
 80009b6:	3301      	adds	r3, #1
 80009b8:	71fb      	strb	r3, [r7, #7]
 80009ba:	4b29      	ldr	r3, [pc, #164]	@ (8000a60 <Petit_RxRTU+0x120>)
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	79fa      	ldrb	r2, [r7, #7]
 80009c2:	429a      	cmp	r2, r3
 80009c4:	d3e8      	bcc.n	8000998 <Petit_RxRTU+0x58>

        Petit_Rx_State =PETIT_RXTX_DATABUF;
 80009c6:	4b27      	ldr	r3, [pc, #156]	@ (8000a64 <Petit_RxRTU+0x124>)
 80009c8:	2202      	movs	r2, #2
 80009ca:	701a      	strb	r2, [r3, #0]

        PetitReceiveCounter=0;
 80009cc:	4b24      	ldr	r3, [pc, #144]	@ (8000a60 <Petit_RxRTU+0x120>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	701a      	strb	r2, [r3, #0]
    }

    Petit_CheckRxTimeout();
 80009d2:	f7ff ff37 	bl	8000844 <Petit_CheckRxTimeout>

    if ((Petit_Rx_State == PETIT_RXTX_DATABUF) && (Petit_Rx_Data.DataLen >= 2))
 80009d6:	4b23      	ldr	r3, [pc, #140]	@ (8000a64 <Petit_RxRTU+0x124>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	2b02      	cmp	r3, #2
 80009dc:	d136      	bne.n	8000a4c <Petit_RxRTU+0x10c>
 80009de:	4b1e      	ldr	r3, [pc, #120]	@ (8000a58 <Petit_RxRTU+0x118>)
 80009e0:	8b9b      	ldrh	r3, [r3, #28]
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d932      	bls.n	8000a4c <Petit_RxRTU+0x10c>
    {
        // Finish off our CRC check
        Petit_Rx_Data.DataLen -= 2;
 80009e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a58 <Petit_RxRTU+0x118>)
 80009e8:	8b9b      	ldrh	r3, [r3, #28]
 80009ea:	3b02      	subs	r3, #2
 80009ec:	b29a      	uxth	r2, r3
 80009ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000a58 <Petit_RxRTU+0x118>)
 80009f0:	839a      	strh	r2, [r3, #28]
        for (Petit_i = 0; Petit_i < Petit_Rx_Data.DataLen; ++Petit_i)
 80009f2:	2300      	movs	r3, #0
 80009f4:	71fb      	strb	r3, [r7, #7]
 80009f6:	e00a      	b.n	8000a0e <Petit_RxRTU+0xce>
        {
            Petit_CRC16(Petit_Rx_Data.DataBuf[Petit_i], &Petit_Rx_CRC16);
 80009f8:	79fb      	ldrb	r3, [r7, #7]
 80009fa:	4a17      	ldr	r2, [pc, #92]	@ (8000a58 <Petit_RxRTU+0x118>)
 80009fc:	4413      	add	r3, r2
 80009fe:	789b      	ldrb	r3, [r3, #2]
 8000a00:	4916      	ldr	r1, [pc, #88]	@ (8000a5c <Petit_RxRTU+0x11c>)
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff fd60 	bl	80004c8 <Petit_CRC16>
        for (Petit_i = 0; Petit_i < Petit_Rx_Data.DataLen; ++Petit_i)
 8000a08:	79fb      	ldrb	r3, [r7, #7]
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	71fb      	strb	r3, [r7, #7]
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	b29a      	uxth	r2, r3
 8000a12:	4b11      	ldr	r3, [pc, #68]	@ (8000a58 <Petit_RxRTU+0x118>)
 8000a14:	8b9b      	ldrh	r3, [r3, #28]
 8000a16:	429a      	cmp	r2, r3
 8000a18:	d3ee      	bcc.n	80009f8 <Petit_RxRTU+0xb8>
        }
        
        if (((unsigned int) Petit_Rx_Data.DataBuf[Petit_Rx_Data.DataLen] + ((unsigned int) Petit_Rx_Data.DataBuf[Petit_Rx_Data.DataLen + 1] << 8)) == Petit_Rx_CRC16)
 8000a1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a58 <Petit_RxRTU+0x118>)
 8000a1c:	8b9b      	ldrh	r3, [r3, #28]
 8000a1e:	461a      	mov	r2, r3
 8000a20:	4b0d      	ldr	r3, [pc, #52]	@ (8000a58 <Petit_RxRTU+0x118>)
 8000a22:	4413      	add	r3, r2
 8000a24:	789b      	ldrb	r3, [r3, #2]
 8000a26:	4619      	mov	r1, r3
 8000a28:	4b0b      	ldr	r3, [pc, #44]	@ (8000a58 <Petit_RxRTU+0x118>)
 8000a2a:	8b9b      	ldrh	r3, [r3, #28]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a58 <Petit_RxRTU+0x118>)
 8000a30:	4413      	add	r3, r2
 8000a32:	789b      	ldrb	r3, [r3, #2]
 8000a34:	021b      	lsls	r3, r3, #8
 8000a36:	18ca      	adds	r2, r1, r3
 8000a38:	4b08      	ldr	r3, [pc, #32]	@ (8000a5c <Petit_RxRTU+0x11c>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	d102      	bne.n	8000a46 <Petit_RxRTU+0x106>
        {
            // Valid message!
            Petit_Rx_Data_Available = TRUE;
 8000a40:	4b09      	ldr	r3, [pc, #36]	@ (8000a68 <Petit_RxRTU+0x128>)
 8000a42:	2201      	movs	r2, #1
 8000a44:	701a      	strb	r2, [r3, #0]
        }

        Petit_Rx_State = PETIT_RXTX_IDLE;
 8000a46:	4b07      	ldr	r3, [pc, #28]	@ (8000a64 <Petit_RxRTU+0x124>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	701a      	strb	r2, [r3, #0]
    }
}
 8000a4c:	bf00      	nop
 8000a4e:	3708      	adds	r7, #8
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	200000a0 	.word	0x200000a0
 8000a58:	2000007c 	.word	0x2000007c
 8000a5c:	20000008 	.word	0x20000008
 8000a60:	200000b9 	.word	0x200000b9
 8000a64:	2000009a 	.word	0x2000009a
 8000a68:	2000009b 	.word	0x2000009b

08000a6c <Petit_TxRTU>:
/*
 * Function Name        : TxRTU
 * @How to use          : If it is ready send answers!
 */
void Petit_TxRTU(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
    Petit_Tx_CRC16                =0xFFFF;
 8000a70:	4b32      	ldr	r3, [pc, #200]	@ (8000b3c <Petit_TxRTU+0xd0>)
 8000a72:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a76:	601a      	str	r2, [r3, #0]
    Petit_Tx_Buf_Size             =0;
 8000a78:	4b31      	ldr	r3, [pc, #196]	@ (8000b40 <Petit_TxRTU+0xd4>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
    Petit_Tx_Buf[Petit_Tx_Buf_Size++]   =Petit_Tx_Data.Address;
 8000a7e:	4b30      	ldr	r3, [pc, #192]	@ (8000b40 <Petit_TxRTU+0xd4>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	1c5a      	adds	r2, r3, #1
 8000a84:	492e      	ldr	r1, [pc, #184]	@ (8000b40 <Petit_TxRTU+0xd4>)
 8000a86:	600a      	str	r2, [r1, #0]
 8000a88:	4a2e      	ldr	r2, [pc, #184]	@ (8000b44 <Petit_TxRTU+0xd8>)
 8000a8a:	7811      	ldrb	r1, [r2, #0]
 8000a8c:	4a2e      	ldr	r2, [pc, #184]	@ (8000b48 <Petit_TxRTU+0xdc>)
 8000a8e:	54d1      	strb	r1, [r2, r3]
    Petit_CRC16(Petit_Tx_Data.Address, &Petit_Tx_CRC16);
 8000a90:	4b2c      	ldr	r3, [pc, #176]	@ (8000b44 <Petit_TxRTU+0xd8>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	4929      	ldr	r1, [pc, #164]	@ (8000b3c <Petit_TxRTU+0xd0>)
 8000a96:	4618      	mov	r0, r3
 8000a98:	f7ff fd16 	bl	80004c8 <Petit_CRC16>
    Petit_Tx_Buf[Petit_Tx_Buf_Size++]   =Petit_Tx_Data.Function;
 8000a9c:	4b28      	ldr	r3, [pc, #160]	@ (8000b40 <Petit_TxRTU+0xd4>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	1c5a      	adds	r2, r3, #1
 8000aa2:	4927      	ldr	r1, [pc, #156]	@ (8000b40 <Petit_TxRTU+0xd4>)
 8000aa4:	600a      	str	r2, [r1, #0]
 8000aa6:	4a27      	ldr	r2, [pc, #156]	@ (8000b44 <Petit_TxRTU+0xd8>)
 8000aa8:	7851      	ldrb	r1, [r2, #1]
 8000aaa:	4a27      	ldr	r2, [pc, #156]	@ (8000b48 <Petit_TxRTU+0xdc>)
 8000aac:	54d1      	strb	r1, [r2, r3]
    Petit_CRC16(Petit_Tx_Data.Function, &Petit_Tx_CRC16);
 8000aae:	4b25      	ldr	r3, [pc, #148]	@ (8000b44 <Petit_TxRTU+0xd8>)
 8000ab0:	785b      	ldrb	r3, [r3, #1]
 8000ab2:	4922      	ldr	r1, [pc, #136]	@ (8000b3c <Petit_TxRTU+0xd0>)
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff fd07 	bl	80004c8 <Petit_CRC16>

    for(Petit_Tx_Current=0; Petit_Tx_Current < Petit_Tx_Data.DataLen; Petit_Tx_Current++)
 8000aba:	4b24      	ldr	r3, [pc, #144]	@ (8000b4c <Petit_TxRTU+0xe0>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	e019      	b.n	8000af6 <Petit_TxRTU+0x8a>
    {
        Petit_Tx_Buf[Petit_Tx_Buf_Size++]=Petit_Tx_Data.DataBuf[Petit_Tx_Current];
 8000ac2:	4b22      	ldr	r3, [pc, #136]	@ (8000b4c <Petit_TxRTU+0xe0>)
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	4b1e      	ldr	r3, [pc, #120]	@ (8000b40 <Petit_TxRTU+0xd4>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	1c59      	adds	r1, r3, #1
 8000acc:	481c      	ldr	r0, [pc, #112]	@ (8000b40 <Petit_TxRTU+0xd4>)
 8000ace:	6001      	str	r1, [r0, #0]
 8000ad0:	491c      	ldr	r1, [pc, #112]	@ (8000b44 <Petit_TxRTU+0xd8>)
 8000ad2:	440a      	add	r2, r1
 8000ad4:	7891      	ldrb	r1, [r2, #2]
 8000ad6:	4a1c      	ldr	r2, [pc, #112]	@ (8000b48 <Petit_TxRTU+0xdc>)
 8000ad8:	54d1      	strb	r1, [r2, r3]
        Petit_CRC16(Petit_Tx_Data.DataBuf[Petit_Tx_Current], &Petit_Tx_CRC16);
 8000ada:	4b1c      	ldr	r3, [pc, #112]	@ (8000b4c <Petit_TxRTU+0xe0>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4a19      	ldr	r2, [pc, #100]	@ (8000b44 <Petit_TxRTU+0xd8>)
 8000ae0:	4413      	add	r3, r2
 8000ae2:	789b      	ldrb	r3, [r3, #2]
 8000ae4:	4915      	ldr	r1, [pc, #84]	@ (8000b3c <Petit_TxRTU+0xd0>)
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f7ff fcee 	bl	80004c8 <Petit_CRC16>
    for(Petit_Tx_Current=0; Petit_Tx_Current < Petit_Tx_Data.DataLen; Petit_Tx_Current++)
 8000aec:	4b17      	ldr	r3, [pc, #92]	@ (8000b4c <Petit_TxRTU+0xe0>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	3301      	adds	r3, #1
 8000af2:	4a16      	ldr	r2, [pc, #88]	@ (8000b4c <Petit_TxRTU+0xe0>)
 8000af4:	6013      	str	r3, [r2, #0]
 8000af6:	4b13      	ldr	r3, [pc, #76]	@ (8000b44 <Petit_TxRTU+0xd8>)
 8000af8:	8b9b      	ldrh	r3, [r3, #28]
 8000afa:	461a      	mov	r2, r3
 8000afc:	4b13      	ldr	r3, [pc, #76]	@ (8000b4c <Petit_TxRTU+0xe0>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d8de      	bhi.n	8000ac2 <Petit_TxRTU+0x56>
    }
    
    Petit_Tx_Buf[Petit_Tx_Buf_Size++] = Petit_Tx_CRC16 & 0x00FF;
 8000b04:	4b0d      	ldr	r3, [pc, #52]	@ (8000b3c <Petit_TxRTU+0xd0>)
 8000b06:	6818      	ldr	r0, [r3, #0]
 8000b08:	4b0d      	ldr	r3, [pc, #52]	@ (8000b40 <Petit_TxRTU+0xd4>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	1c5a      	adds	r2, r3, #1
 8000b0e:	490c      	ldr	r1, [pc, #48]	@ (8000b40 <Petit_TxRTU+0xd4>)
 8000b10:	600a      	str	r2, [r1, #0]
 8000b12:	b2c1      	uxtb	r1, r0
 8000b14:	4a0c      	ldr	r2, [pc, #48]	@ (8000b48 <Petit_TxRTU+0xdc>)
 8000b16:	54d1      	strb	r1, [r2, r3]
    Petit_Tx_Buf[Petit_Tx_Buf_Size++] =(Petit_Tx_CRC16 & 0xFF00) >> 8;
 8000b18:	4b08      	ldr	r3, [pc, #32]	@ (8000b3c <Petit_TxRTU+0xd0>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	0a18      	lsrs	r0, r3, #8
 8000b1e:	4b08      	ldr	r3, [pc, #32]	@ (8000b40 <Petit_TxRTU+0xd4>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	1c5a      	adds	r2, r3, #1
 8000b24:	4906      	ldr	r1, [pc, #24]	@ (8000b40 <Petit_TxRTU+0xd4>)
 8000b26:	600a      	str	r2, [r1, #0]
 8000b28:	b2c1      	uxtb	r1, r0
 8000b2a:	4a07      	ldr	r2, [pc, #28]	@ (8000b48 <Petit_TxRTU+0xdc>)
 8000b2c:	54d1      	strb	r1, [r2, r3]

    Petit_DoSlaveTX();
 8000b2e:	f7ff fcfd 	bl	800052c <Petit_DoSlaveTX>

    Petit_Tx_State    =PETIT_RXTX_IDLE;
 8000b32:	4b07      	ldr	r3, [pc, #28]	@ (8000b50 <Petit_TxRTU+0xe4>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	701a      	strb	r2, [r3, #0]
}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000004 	.word	0x20000004
 8000b40:	20000078 	.word	0x20000078
 8000b44:	20000034 	.word	0x20000034
 8000b48:	2000005c 	.word	0x2000005c
 8000b4c:	20000054 	.word	0x20000054
 8000b50:	20000058 	.word	0x20000058

08000b54 <ProcessPetitModbus>:
/*
 * Function Name        : ProcessModbus
 * @How to use          : ModBus main core! Call this function into main!
 */
void ProcessPetitModbus(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
    if (Petit_Tx_State != PETIT_RXTX_IDLE)                                      // If answer is ready, send it!
 8000b58:	4b16      	ldr	r3, [pc, #88]	@ (8000bb4 <ProcessPetitModbus+0x60>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <ProcessPetitModbus+0x10>
        Petit_TxRTU();
 8000b60:	f7ff ff84 	bl	8000a6c <Petit_TxRTU>

    Petit_RxRTU();                                                              // Call this function every cycle
 8000b64:	f7ff feec 	bl	8000940 <Petit_RxRTU>

    if (Petit_RxDataAvailable())                                                // If data is ready enter this!
 8000b68:	f7ff fe5a 	bl	8000820 <Petit_RxDataAvailable>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d01d      	beq.n	8000bae <ProcessPetitModbus+0x5a>
    {
        if (Petit_Rx_Data.Address == PETITMODBUS_SLAVE_ADDRESS)                 // Is Data for us?
 8000b72:	4b11      	ldr	r3, [pc, #68]	@ (8000bb8 <ProcessPetitModbus+0x64>)
 8000b74:	781a      	ldrb	r2, [r3, #0]
 8000b76:	4b11      	ldr	r3, [pc, #68]	@ (8000bbc <ProcessPetitModbus+0x68>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	429a      	cmp	r2, r3
 8000b7c:	d117      	bne.n	8000bae <ProcessPetitModbus+0x5a>
        {
            switch (Petit_Rx_Data.Function)                                     // Data is for us but which function?
 8000b7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb8 <ProcessPetitModbus+0x64>)
 8000b80:	785b      	ldrb	r3, [r3, #1]
 8000b82:	2b10      	cmp	r3, #16
 8000b84:	d00c      	beq.n	8000ba0 <ProcessPetitModbus+0x4c>
 8000b86:	2b10      	cmp	r3, #16
 8000b88:	dc0d      	bgt.n	8000ba6 <ProcessPetitModbus+0x52>
 8000b8a:	2b03      	cmp	r3, #3
 8000b8c:	d002      	beq.n	8000b94 <ProcessPetitModbus+0x40>
 8000b8e:	2b06      	cmp	r3, #6
 8000b90:	d003      	beq.n	8000b9a <ProcessPetitModbus+0x46>
 8000b92:	e008      	b.n	8000ba6 <ProcessPetitModbus+0x52>
            {
                #if PETITMODBUS_READ_HOLDING_REGISTERS_ENABLED > 0
                case PETITMODBUS_READ_HOLDING_REGISTERS:    {   HandlePetitModbusReadHoldingRegisters();        break;  }
 8000b94:	f7ff fd1a 	bl	80005cc <HandlePetitModbusReadHoldingRegisters>
 8000b98:	e009      	b.n	8000bae <ProcessPetitModbus+0x5a>
                #endif
                #if PETITMODBUSWRITE_SINGLE_REGISTER_ENABLED > 0
                case PETITMODBUS_WRITE_SINGLE_REGISTER:     {   HandlePetitModbusWriteSingleRegister();         break;  }
 8000b9a:	f7ff fd83 	bl	80006a4 <HandlePetitModbusWriteSingleRegister>
 8000b9e:	e006      	b.n	8000bae <ProcessPetitModbus+0x5a>
                #endif
                #if PETITMODBUS_WRITE_MULTIPLE_REGISTERS_ENABLED > 0
                case PETITMODBUS_WRITE_MULTIPLE_REGISTERS:  {   HandleMPetitodbusWriteMultipleRegisters();      break;  }
 8000ba0:	f7ff fdce 	bl	8000740 <HandleMPetitodbusWriteMultipleRegisters>
 8000ba4:	e003      	b.n	8000bae <ProcessPetitModbus+0x5a>
                #endif
                default:                                    {   HandlePetitModbusError(PETIT_ERROR_CODE_01);    break;  }
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	f7ff fcee 	bl	8000588 <HandlePetitModbusError>
 8000bac:	bf00      	nop
            }
        }
    }
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20000058 	.word	0x20000058
 8000bb8:	2000007c 	.word	0x2000007c
 8000bbc:	20000000 	.word	0x20000000

08000bc0 <InitPetitModbus>:
/*
 * Function Name        : InitPetitModbus
 * @How to use          : Petite ModBus slave initialize
 */
void InitPetitModbus(unsigned char PetitModbusSlaveAddress)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	71fb      	strb	r3, [r7, #7]
    PETITMODBUS_SLAVE_ADDRESS    =PetitModbusSlaveAddress;
 8000bca:	4a04      	ldr	r2, [pc, #16]	@ (8000bdc <InitPetitModbus+0x1c>)
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	7013      	strb	r3, [r2, #0]
    
    //PetitModBus_UART_Initialise();
    //PetitModBus_TIMER_Initialise();
}
 8000bd0:	bf00      	nop
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	20000000 	.word	0x20000000

08000be0 <ReceiveInterrupt>:

/*************************Interrupt Fonction Slave*****************************/
// Call this function into your UART Interrupt. Collect data from it!
// Better to use DMA
void ReceiveInterrupt(unsigned char Data)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	71fb      	strb	r3, [r7, #7]
    PetitReceiveBuffer[PetitReceiveCounter]   =Data;
 8000bea:	4b0f      	ldr	r3, [pc, #60]	@ (8000c28 <ReceiveInterrupt+0x48>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4a0e      	ldr	r2, [pc, #56]	@ (8000c2c <ReceiveInterrupt+0x4c>)
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	5453      	strb	r3, [r2, r1]
    PetitReceiveCounter++;
 8000bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8000c28 <ReceiveInterrupt+0x48>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	3301      	adds	r3, #1
 8000c00:	b2da      	uxtb	r2, r3
 8000c02:	4b09      	ldr	r3, [pc, #36]	@ (8000c28 <ReceiveInterrupt+0x48>)
 8000c04:	701a      	strb	r2, [r3, #0]

    if(PetitReceiveCounter>PETITMODBUS_RECEIVE_BUFFER_SIZE)  
 8000c06:	4b08      	ldr	r3, [pc, #32]	@ (8000c28 <ReceiveInterrupt+0x48>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	2b19      	cmp	r3, #25
 8000c0e:	d902      	bls.n	8000c16 <ReceiveInterrupt+0x36>
        PetitReceiveCounter=0;
 8000c10:	4b05      	ldr	r3, [pc, #20]	@ (8000c28 <ReceiveInterrupt+0x48>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	701a      	strb	r2, [r3, #0]

    PetitModbusTimerValue=0;
 8000c16:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <ReceiveInterrupt+0x50>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	801a      	strh	r2, [r3, #0]
}
 8000c1c:	bf00      	nop
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	200000b9 	.word	0x200000b9
 8000c2c:	200000a0 	.word	0x200000a0
 8000c30:	2000009c 	.word	0x2000009c

08000c34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c38:	f000 fb10 	bl	800125c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c3c:	f000 f81e 	bl	8000c7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c40:	f000 f92a 	bl	8000e98 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c44:	f000 f900 	bl	8000e48 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000c48:	f000 f8d4 	bl	8000df4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000c4c:	f000 f880 	bl	8000d50 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim1);
 8000c50:	4807      	ldr	r0, [pc, #28]	@ (8000c70 <main+0x3c>)
 8000c52:	f001 fef5 	bl	8002a40 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_DMA(&huart2, (uint8_t *)&rx_putch , 1);
 8000c56:	2201      	movs	r2, #1
 8000c58:	4906      	ldr	r1, [pc, #24]	@ (8000c74 <main+0x40>)
 8000c5a:	4807      	ldr	r0, [pc, #28]	@ (8000c78 <main+0x44>)
 8000c5c:	f002 fa6e 	bl	800313c <HAL_UART_Receive_DMA>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  InitPetitModbus(1);
 8000c60:	2001      	movs	r0, #1
 8000c62:	f7ff ffad 	bl	8000bc0 <InitPetitModbus>
	  ProcessPetitModbus();
 8000c66:	f7ff ff75 	bl	8000b54 <ProcessPetitModbus>
  {
 8000c6a:	bf00      	nop
 8000c6c:	e7f8      	b.n	8000c60 <main+0x2c>
 8000c6e:	bf00      	nop
 8000c70:	200000d4 	.word	0x200000d4
 8000c74:	200000d0 	.word	0x200000d0
 8000c78:	2000011c 	.word	0x2000011c

08000c7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b094      	sub	sp, #80	@ 0x50
 8000c80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c82:	f107 0320 	add.w	r3, r7, #32
 8000c86:	2230      	movs	r2, #48	@ 0x30
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f003 fb70 	bl	8004370 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c90:	f107 030c 	add.w	r3, r7, #12
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
 8000c9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	60bb      	str	r3, [r7, #8]
 8000ca4:	4b28      	ldr	r3, [pc, #160]	@ (8000d48 <SystemClock_Config+0xcc>)
 8000ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca8:	4a27      	ldr	r2, [pc, #156]	@ (8000d48 <SystemClock_Config+0xcc>)
 8000caa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cae:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cb0:	4b25      	ldr	r3, [pc, #148]	@ (8000d48 <SystemClock_Config+0xcc>)
 8000cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cb8:	60bb      	str	r3, [r7, #8]
 8000cba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	4b22      	ldr	r3, [pc, #136]	@ (8000d4c <SystemClock_Config+0xd0>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a21      	ldr	r2, [pc, #132]	@ (8000d4c <SystemClock_Config+0xd0>)
 8000cc6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000cca:	6013      	str	r3, [r2, #0]
 8000ccc:	4b1f      	ldr	r3, [pc, #124]	@ (8000d4c <SystemClock_Config+0xd0>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000cd4:	607b      	str	r3, [r7, #4]
 8000cd6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ce0:	2310      	movs	r3, #16
 8000ce2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000cec:	2310      	movs	r3, #16
 8000cee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000cf0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000cf4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000cf6:	2304      	movs	r3, #4
 8000cf8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000cfa:	2304      	movs	r3, #4
 8000cfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cfe:	f107 0320 	add.w	r3, r7, #32
 8000d02:	4618      	mov	r0, r3
 8000d04:	f001 f9b4 	bl	8002070 <HAL_RCC_OscConfig>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000d0e:	f000 f917 	bl	8000f40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d12:	230f      	movs	r3, #15
 8000d14:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d16:	2302      	movs	r3, #2
 8000d18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d22:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d24:	2300      	movs	r3, #0
 8000d26:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d28:	f107 030c 	add.w	r3, r7, #12
 8000d2c:	2102      	movs	r1, #2
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f001 fc16 	bl	8002560 <HAL_RCC_ClockConfig>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000d3a:	f000 f901 	bl	8000f40 <Error_Handler>
  }
}
 8000d3e:	bf00      	nop
 8000d40:	3750      	adds	r7, #80	@ 0x50
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40023800 	.word	0x40023800
 8000d4c:	40007000 	.word	0x40007000

08000d50 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d56:	f107 0308 	add.w	r3, r7, #8
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	605a      	str	r2, [r3, #4]
 8000d60:	609a      	str	r2, [r3, #8]
 8000d62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d64:	463b      	mov	r3, r7
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d6c:	4b1f      	ldr	r3, [pc, #124]	@ (8000dec <MX_TIM1_Init+0x9c>)
 8000d6e:	4a20      	ldr	r2, [pc, #128]	@ (8000df0 <MX_TIM1_Init+0xa0>)
 8000d70:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8400;
 8000d72:	4b1e      	ldr	r3, [pc, #120]	@ (8000dec <MX_TIM1_Init+0x9c>)
 8000d74:	f242 02d0 	movw	r2, #8400	@ 0x20d0
 8000d78:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000dec <MX_TIM1_Init+0x9c>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 8000d80:	4b1a      	ldr	r3, [pc, #104]	@ (8000dec <MX_TIM1_Init+0x9c>)
 8000d82:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000d86:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d88:	4b18      	ldr	r3, [pc, #96]	@ (8000dec <MX_TIM1_Init+0x9c>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d8e:	4b17      	ldr	r3, [pc, #92]	@ (8000dec <MX_TIM1_Init+0x9c>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d94:	4b15      	ldr	r3, [pc, #84]	@ (8000dec <MX_TIM1_Init+0x9c>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d9a:	4814      	ldr	r0, [pc, #80]	@ (8000dec <MX_TIM1_Init+0x9c>)
 8000d9c:	f001 fe00 	bl	80029a0 <HAL_TIM_Base_Init>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000da6:	f000 f8cb 	bl	8000f40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000daa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000db0:	f107 0308 	add.w	r3, r7, #8
 8000db4:	4619      	mov	r1, r3
 8000db6:	480d      	ldr	r0, [pc, #52]	@ (8000dec <MX_TIM1_Init+0x9c>)
 8000db8:	f001 fea4 	bl	8002b04 <HAL_TIM_ConfigClockSource>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000dc2:	f000 f8bd 	bl	8000f40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000dce:	463b      	mov	r3, r7
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4806      	ldr	r0, [pc, #24]	@ (8000dec <MX_TIM1_Init+0x9c>)
 8000dd4:	f002 f884 	bl	8002ee0 <HAL_TIMEx_MasterConfigSynchronization>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000dde:	f000 f8af 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000de2:	bf00      	nop
 8000de4:	3718      	adds	r7, #24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	200000d4 	.word	0x200000d4
 8000df0:	40010000 	.word	0x40010000

08000df4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000df8:	4b11      	ldr	r3, [pc, #68]	@ (8000e40 <MX_USART2_UART_Init+0x4c>)
 8000dfa:	4a12      	ldr	r2, [pc, #72]	@ (8000e44 <MX_USART2_UART_Init+0x50>)
 8000dfc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000dfe:	4b10      	ldr	r3, [pc, #64]	@ (8000e40 <MX_USART2_UART_Init+0x4c>)
 8000e00:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e06:	4b0e      	ldr	r3, [pc, #56]	@ (8000e40 <MX_USART2_UART_Init+0x4c>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e40 <MX_USART2_UART_Init+0x4c>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e12:	4b0b      	ldr	r3, [pc, #44]	@ (8000e40 <MX_USART2_UART_Init+0x4c>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e18:	4b09      	ldr	r3, [pc, #36]	@ (8000e40 <MX_USART2_UART_Init+0x4c>)
 8000e1a:	220c      	movs	r2, #12
 8000e1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e1e:	4b08      	ldr	r3, [pc, #32]	@ (8000e40 <MX_USART2_UART_Init+0x4c>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e24:	4b06      	ldr	r3, [pc, #24]	@ (8000e40 <MX_USART2_UART_Init+0x4c>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e2a:	4805      	ldr	r0, [pc, #20]	@ (8000e40 <MX_USART2_UART_Init+0x4c>)
 8000e2c:	f002 f8c6 	bl	8002fbc <HAL_UART_Init>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e36:	f000 f883 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	2000011c 	.word	0x2000011c
 8000e44:	40004400 	.word	0x40004400

08000e48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	607b      	str	r3, [r7, #4]
 8000e52:	4b10      	ldr	r3, [pc, #64]	@ (8000e94 <MX_DMA_Init+0x4c>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e56:	4a0f      	ldr	r2, [pc, #60]	@ (8000e94 <MX_DMA_Init+0x4c>)
 8000e58:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e5e:	4b0d      	ldr	r3, [pc, #52]	@ (8000e94 <MX_DMA_Init+0x4c>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e62:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e66:	607b      	str	r3, [r7, #4]
 8000e68:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	2010      	movs	r0, #16
 8000e70:	f000 fb41 	bl	80014f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000e74:	2010      	movs	r0, #16
 8000e76:	f000 fb5a 	bl	800152e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	2011      	movs	r0, #17
 8000e80:	f000 fb39 	bl	80014f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000e84:	2011      	movs	r0, #17
 8000e86:	f000 fb52 	bl	800152e <HAL_NVIC_EnableIRQ>

}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40023800 	.word	0x40023800

08000e98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60fb      	str	r3, [r7, #12]
 8000ea2:	4b17      	ldr	r3, [pc, #92]	@ (8000f00 <MX_GPIO_Init+0x68>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea6:	4a16      	ldr	r2, [pc, #88]	@ (8000f00 <MX_GPIO_Init+0x68>)
 8000ea8:	f043 0304 	orr.w	r3, r3, #4
 8000eac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eae:	4b14      	ldr	r3, [pc, #80]	@ (8000f00 <MX_GPIO_Init+0x68>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb2:	f003 0304 	and.w	r3, r3, #4
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60bb      	str	r3, [r7, #8]
 8000ebe:	4b10      	ldr	r3, [pc, #64]	@ (8000f00 <MX_GPIO_Init+0x68>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec2:	4a0f      	ldr	r2, [pc, #60]	@ (8000f00 <MX_GPIO_Init+0x68>)
 8000ec4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ec8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eca:	4b0d      	ldr	r3, [pc, #52]	@ (8000f00 <MX_GPIO_Init+0x68>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ece:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ed2:	60bb      	str	r3, [r7, #8]
 8000ed4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	607b      	str	r3, [r7, #4]
 8000eda:	4b09      	ldr	r3, [pc, #36]	@ (8000f00 <MX_GPIO_Init+0x68>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ede:	4a08      	ldr	r2, [pc, #32]	@ (8000f00 <MX_GPIO_Init+0x68>)
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ee6:	4b06      	ldr	r3, [pc, #24]	@ (8000f00 <MX_GPIO_Init+0x68>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	607b      	str	r3, [r7, #4]
 8000ef0:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ef2:	bf00      	nop
 8000ef4:	3714      	adds	r7, #20
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	40023800 	.word	0x40023800

08000f04 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART2)  // Eğer kesme USART1'den geliyorsa
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a08      	ldr	r2, [pc, #32]	@ (8000f34 <HAL_UART_RxCpltCallback+0x30>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d109      	bne.n	8000f2a <HAL_UART_RxCpltCallback+0x26>
	    {
		HAL_UART_Receive_DMA(&huart2, (uint8_t *)&rx_putch , 1);
 8000f16:	2201      	movs	r2, #1
 8000f18:	4907      	ldr	r1, [pc, #28]	@ (8000f38 <HAL_UART_RxCpltCallback+0x34>)
 8000f1a:	4808      	ldr	r0, [pc, #32]	@ (8000f3c <HAL_UART_RxCpltCallback+0x38>)
 8000f1c:	f002 f90e 	bl	800313c <HAL_UART_Receive_DMA>
		ReceiveInterrupt(rx_putch);
 8000f20:	4b05      	ldr	r3, [pc, #20]	@ (8000f38 <HAL_UART_RxCpltCallback+0x34>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff fe5b 	bl	8000be0 <ReceiveInterrupt>

	    }

}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40004400 	.word	0x40004400
 8000f38:	200000d0 	.word	0x200000d0
 8000f3c:	2000011c 	.word	0x2000011c

08000f40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f44:	b672      	cpsid	i
}
 8000f46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f48:	bf00      	nop
 8000f4a:	e7fd      	b.n	8000f48 <Error_Handler+0x8>

08000f4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	607b      	str	r3, [r7, #4]
 8000f56:	4b10      	ldr	r3, [pc, #64]	@ (8000f98 <HAL_MspInit+0x4c>)
 8000f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f5a:	4a0f      	ldr	r2, [pc, #60]	@ (8000f98 <HAL_MspInit+0x4c>)
 8000f5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f60:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f62:	4b0d      	ldr	r3, [pc, #52]	@ (8000f98 <HAL_MspInit+0x4c>)
 8000f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f6a:	607b      	str	r3, [r7, #4]
 8000f6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	603b      	str	r3, [r7, #0]
 8000f72:	4b09      	ldr	r3, [pc, #36]	@ (8000f98 <HAL_MspInit+0x4c>)
 8000f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f76:	4a08      	ldr	r2, [pc, #32]	@ (8000f98 <HAL_MspInit+0x4c>)
 8000f78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f7e:	4b06      	ldr	r3, [pc, #24]	@ (8000f98 <HAL_MspInit+0x4c>)
 8000f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f86:	603b      	str	r3, [r7, #0]
 8000f88:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f8a:	2007      	movs	r0, #7
 8000f8c:	f000 faa8 	bl	80014e0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f90:	bf00      	nop
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40023800 	.word	0x40023800

08000f9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a0b      	ldr	r2, [pc, #44]	@ (8000fd8 <HAL_TIM_Base_MspInit+0x3c>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d10d      	bne.n	8000fca <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8000fdc <HAL_TIM_Base_MspInit+0x40>)
 8000fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fb6:	4a09      	ldr	r2, [pc, #36]	@ (8000fdc <HAL_TIM_Base_MspInit+0x40>)
 8000fb8:	f043 0301 	orr.w	r3, r3, #1
 8000fbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fbe:	4b07      	ldr	r3, [pc, #28]	@ (8000fdc <HAL_TIM_Base_MspInit+0x40>)
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000fca:	bf00      	nop
 8000fcc:	3714      	adds	r7, #20
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	40010000 	.word	0x40010000
 8000fdc:	40023800 	.word	0x40023800

08000fe0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08a      	sub	sp, #40	@ 0x28
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a4b      	ldr	r2, [pc, #300]	@ (800112c <HAL_UART_MspInit+0x14c>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	f040 8090 	bne.w	8001124 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001004:	2300      	movs	r3, #0
 8001006:	613b      	str	r3, [r7, #16]
 8001008:	4b49      	ldr	r3, [pc, #292]	@ (8001130 <HAL_UART_MspInit+0x150>)
 800100a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800100c:	4a48      	ldr	r2, [pc, #288]	@ (8001130 <HAL_UART_MspInit+0x150>)
 800100e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001012:	6413      	str	r3, [r2, #64]	@ 0x40
 8001014:	4b46      	ldr	r3, [pc, #280]	@ (8001130 <HAL_UART_MspInit+0x150>)
 8001016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001018:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800101c:	613b      	str	r3, [r7, #16]
 800101e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001020:	2300      	movs	r3, #0
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	4b42      	ldr	r3, [pc, #264]	@ (8001130 <HAL_UART_MspInit+0x150>)
 8001026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001028:	4a41      	ldr	r2, [pc, #260]	@ (8001130 <HAL_UART_MspInit+0x150>)
 800102a:	f043 0301 	orr.w	r3, r3, #1
 800102e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001030:	4b3f      	ldr	r3, [pc, #252]	@ (8001130 <HAL_UART_MspInit+0x150>)
 8001032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001034:	f003 0301 	and.w	r3, r3, #1
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800103c:	230c      	movs	r3, #12
 800103e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001040:	2302      	movs	r3, #2
 8001042:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001048:	2303      	movs	r3, #3
 800104a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800104c:	2307      	movs	r3, #7
 800104e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001050:	f107 0314 	add.w	r3, r7, #20
 8001054:	4619      	mov	r1, r3
 8001056:	4837      	ldr	r0, [pc, #220]	@ (8001134 <HAL_UART_MspInit+0x154>)
 8001058:	f000 fe86 	bl	8001d68 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800105c:	4b36      	ldr	r3, [pc, #216]	@ (8001138 <HAL_UART_MspInit+0x158>)
 800105e:	4a37      	ldr	r2, [pc, #220]	@ (800113c <HAL_UART_MspInit+0x15c>)
 8001060:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001062:	4b35      	ldr	r3, [pc, #212]	@ (8001138 <HAL_UART_MspInit+0x158>)
 8001064:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001068:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800106a:	4b33      	ldr	r3, [pc, #204]	@ (8001138 <HAL_UART_MspInit+0x158>)
 800106c:	2200      	movs	r2, #0
 800106e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001070:	4b31      	ldr	r3, [pc, #196]	@ (8001138 <HAL_UART_MspInit+0x158>)
 8001072:	2200      	movs	r2, #0
 8001074:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001076:	4b30      	ldr	r3, [pc, #192]	@ (8001138 <HAL_UART_MspInit+0x158>)
 8001078:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800107c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800107e:	4b2e      	ldr	r3, [pc, #184]	@ (8001138 <HAL_UART_MspInit+0x158>)
 8001080:	2200      	movs	r2, #0
 8001082:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001084:	4b2c      	ldr	r3, [pc, #176]	@ (8001138 <HAL_UART_MspInit+0x158>)
 8001086:	2200      	movs	r2, #0
 8001088:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800108a:	4b2b      	ldr	r3, [pc, #172]	@ (8001138 <HAL_UART_MspInit+0x158>)
 800108c:	2200      	movs	r2, #0
 800108e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001090:	4b29      	ldr	r3, [pc, #164]	@ (8001138 <HAL_UART_MspInit+0x158>)
 8001092:	2200      	movs	r2, #0
 8001094:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001096:	4b28      	ldr	r3, [pc, #160]	@ (8001138 <HAL_UART_MspInit+0x158>)
 8001098:	2200      	movs	r2, #0
 800109a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800109c:	4826      	ldr	r0, [pc, #152]	@ (8001138 <HAL_UART_MspInit+0x158>)
 800109e:	f000 fa61 	bl	8001564 <HAL_DMA_Init>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80010a8:	f7ff ff4a 	bl	8000f40 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4a22      	ldr	r2, [pc, #136]	@ (8001138 <HAL_UART_MspInit+0x158>)
 80010b0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80010b2:	4a21      	ldr	r2, [pc, #132]	@ (8001138 <HAL_UART_MspInit+0x158>)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80010b8:	4b21      	ldr	r3, [pc, #132]	@ (8001140 <HAL_UART_MspInit+0x160>)
 80010ba:	4a22      	ldr	r2, [pc, #136]	@ (8001144 <HAL_UART_MspInit+0x164>)
 80010bc:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80010be:	4b20      	ldr	r3, [pc, #128]	@ (8001140 <HAL_UART_MspInit+0x160>)
 80010c0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80010c4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001140 <HAL_UART_MspInit+0x160>)
 80010c8:	2240      	movs	r2, #64	@ 0x40
 80010ca:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001140 <HAL_UART_MspInit+0x160>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001140 <HAL_UART_MspInit+0x160>)
 80010d4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010d8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010da:	4b19      	ldr	r3, [pc, #100]	@ (8001140 <HAL_UART_MspInit+0x160>)
 80010dc:	2200      	movs	r2, #0
 80010de:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010e0:	4b17      	ldr	r3, [pc, #92]	@ (8001140 <HAL_UART_MspInit+0x160>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80010e6:	4b16      	ldr	r3, [pc, #88]	@ (8001140 <HAL_UART_MspInit+0x160>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80010ec:	4b14      	ldr	r3, [pc, #80]	@ (8001140 <HAL_UART_MspInit+0x160>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010f2:	4b13      	ldr	r3, [pc, #76]	@ (8001140 <HAL_UART_MspInit+0x160>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80010f8:	4811      	ldr	r0, [pc, #68]	@ (8001140 <HAL_UART_MspInit+0x160>)
 80010fa:	f000 fa33 	bl	8001564 <HAL_DMA_Init>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8001104:	f7ff ff1c 	bl	8000f40 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4a0d      	ldr	r2, [pc, #52]	@ (8001140 <HAL_UART_MspInit+0x160>)
 800110c:	639a      	str	r2, [r3, #56]	@ 0x38
 800110e:	4a0c      	ldr	r2, [pc, #48]	@ (8001140 <HAL_UART_MspInit+0x160>)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001114:	2200      	movs	r2, #0
 8001116:	2100      	movs	r1, #0
 8001118:	2026      	movs	r0, #38	@ 0x26
 800111a:	f000 f9ec 	bl	80014f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800111e:	2026      	movs	r0, #38	@ 0x26
 8001120:	f000 fa05 	bl	800152e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001124:	bf00      	nop
 8001126:	3728      	adds	r7, #40	@ 0x28
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40004400 	.word	0x40004400
 8001130:	40023800 	.word	0x40023800
 8001134:	40020000 	.word	0x40020000
 8001138:	20000164 	.word	0x20000164
 800113c:	40026088 	.word	0x40026088
 8001140:	200001c4 	.word	0x200001c4
 8001144:	400260a0 	.word	0x400260a0

08001148 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800114c:	bf00      	nop
 800114e:	e7fd      	b.n	800114c <NMI_Handler+0x4>

08001150 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001154:	bf00      	nop
 8001156:	e7fd      	b.n	8001154 <HardFault_Handler+0x4>

08001158 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800115c:	bf00      	nop
 800115e:	e7fd      	b.n	800115c <MemManage_Handler+0x4>

08001160 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001164:	bf00      	nop
 8001166:	e7fd      	b.n	8001164 <BusFault_Handler+0x4>

08001168 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800116c:	bf00      	nop
 800116e:	e7fd      	b.n	800116c <UsageFault_Handler+0x4>

08001170 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr

0800117e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800117e:	b480      	push	{r7}
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr

0800119a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800119e:	f000 f8af 	bl	8001300 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
	...

080011a8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80011ac:	4802      	ldr	r0, [pc, #8]	@ (80011b8 <DMA1_Stream5_IRQHandler+0x10>)
 80011ae:	f000 fb71 	bl	8001894 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000164 	.word	0x20000164

080011bc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80011c0:	4802      	ldr	r0, [pc, #8]	@ (80011cc <DMA1_Stream6_IRQHandler+0x10>)
 80011c2:	f000 fb67 	bl	8001894 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	200001c4 	.word	0x200001c4

080011d0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80011d4:	4802      	ldr	r0, [pc, #8]	@ (80011e0 <USART2_IRQHandler+0x10>)
 80011d6:	f001 ffd7 	bl	8003188 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	2000011c 	.word	0x2000011c

080011e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011e8:	4b06      	ldr	r3, [pc, #24]	@ (8001204 <SystemInit+0x20>)
 80011ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011ee:	4a05      	ldr	r2, [pc, #20]	@ (8001204 <SystemInit+0x20>)
 80011f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001208:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001240 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800120c:	f7ff ffea 	bl	80011e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001210:	480c      	ldr	r0, [pc, #48]	@ (8001244 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001212:	490d      	ldr	r1, [pc, #52]	@ (8001248 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001214:	4a0d      	ldr	r2, [pc, #52]	@ (800124c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001216:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001218:	e002      	b.n	8001220 <LoopCopyDataInit>

0800121a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800121a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800121c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800121e:	3304      	adds	r3, #4

08001220 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001220:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001222:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001224:	d3f9      	bcc.n	800121a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001226:	4a0a      	ldr	r2, [pc, #40]	@ (8001250 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001228:	4c0a      	ldr	r4, [pc, #40]	@ (8001254 <LoopFillZerobss+0x22>)
  movs r3, #0
 800122a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800122c:	e001      	b.n	8001232 <LoopFillZerobss>

0800122e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800122e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001230:	3204      	adds	r2, #4

08001232 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001232:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001234:	d3fb      	bcc.n	800122e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001236:	f003 f8a3 	bl	8004380 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800123a:	f7ff fcfb 	bl	8000c34 <main>
  bx  lr    
 800123e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001240:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001244:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001248:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 800124c:	08004410 	.word	0x08004410
  ldr r2, =_sbss
 8001250:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001254:	20000228 	.word	0x20000228

08001258 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001258:	e7fe      	b.n	8001258 <ADC_IRQHandler>
	...

0800125c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001260:	4b0e      	ldr	r3, [pc, #56]	@ (800129c <HAL_Init+0x40>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a0d      	ldr	r2, [pc, #52]	@ (800129c <HAL_Init+0x40>)
 8001266:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800126a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800126c:	4b0b      	ldr	r3, [pc, #44]	@ (800129c <HAL_Init+0x40>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a0a      	ldr	r2, [pc, #40]	@ (800129c <HAL_Init+0x40>)
 8001272:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001276:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001278:	4b08      	ldr	r3, [pc, #32]	@ (800129c <HAL_Init+0x40>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a07      	ldr	r2, [pc, #28]	@ (800129c <HAL_Init+0x40>)
 800127e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001282:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001284:	2003      	movs	r0, #3
 8001286:	f000 f92b 	bl	80014e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800128a:	2000      	movs	r0, #0
 800128c:	f000 f808 	bl	80012a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001290:	f7ff fe5c 	bl	8000f4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001294:	2300      	movs	r3, #0
}
 8001296:	4618      	mov	r0, r3
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40023c00 	.word	0x40023c00

080012a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012a8:	4b12      	ldr	r3, [pc, #72]	@ (80012f4 <HAL_InitTick+0x54>)
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	4b12      	ldr	r3, [pc, #72]	@ (80012f8 <HAL_InitTick+0x58>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	4619      	mov	r1, r3
 80012b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80012be:	4618      	mov	r0, r3
 80012c0:	f000 f943 	bl	800154a <HAL_SYSTICK_Config>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e00e      	b.n	80012ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2b0f      	cmp	r3, #15
 80012d2:	d80a      	bhi.n	80012ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012d4:	2200      	movs	r2, #0
 80012d6:	6879      	ldr	r1, [r7, #4]
 80012d8:	f04f 30ff 	mov.w	r0, #4294967295
 80012dc:	f000 f90b 	bl	80014f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012e0:	4a06      	ldr	r2, [pc, #24]	@ (80012fc <HAL_InitTick+0x5c>)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012e6:	2300      	movs	r3, #0
 80012e8:	e000      	b.n	80012ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	2000000c 	.word	0x2000000c
 80012f8:	20000014 	.word	0x20000014
 80012fc:	20000010 	.word	0x20000010

08001300 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001304:	4b06      	ldr	r3, [pc, #24]	@ (8001320 <HAL_IncTick+0x20>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	461a      	mov	r2, r3
 800130a:	4b06      	ldr	r3, [pc, #24]	@ (8001324 <HAL_IncTick+0x24>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4413      	add	r3, r2
 8001310:	4a04      	ldr	r2, [pc, #16]	@ (8001324 <HAL_IncTick+0x24>)
 8001312:	6013      	str	r3, [r2, #0]
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	20000014 	.word	0x20000014
 8001324:	20000224 	.word	0x20000224

08001328 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  return uwTick;
 800132c:	4b03      	ldr	r3, [pc, #12]	@ (800133c <HAL_GetTick+0x14>)
 800132e:	681b      	ldr	r3, [r3, #0]
}
 8001330:	4618      	mov	r0, r3
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	20000224 	.word	0x20000224

08001340 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f003 0307 	and.w	r3, r3, #7
 800134e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001350:	4b0c      	ldr	r3, [pc, #48]	@ (8001384 <__NVIC_SetPriorityGrouping+0x44>)
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001356:	68ba      	ldr	r2, [r7, #8]
 8001358:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800135c:	4013      	ands	r3, r2
 800135e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001368:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800136c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001370:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001372:	4a04      	ldr	r2, [pc, #16]	@ (8001384 <__NVIC_SetPriorityGrouping+0x44>)
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	60d3      	str	r3, [r2, #12]
}
 8001378:	bf00      	nop
 800137a:	3714      	adds	r7, #20
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800138c:	4b04      	ldr	r3, [pc, #16]	@ (80013a0 <__NVIC_GetPriorityGrouping+0x18>)
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	0a1b      	lsrs	r3, r3, #8
 8001392:	f003 0307 	and.w	r3, r3, #7
}
 8001396:	4618      	mov	r0, r3
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	e000ed00 	.word	0xe000ed00

080013a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	db0b      	blt.n	80013ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013b6:	79fb      	ldrb	r3, [r7, #7]
 80013b8:	f003 021f 	and.w	r2, r3, #31
 80013bc:	4907      	ldr	r1, [pc, #28]	@ (80013dc <__NVIC_EnableIRQ+0x38>)
 80013be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c2:	095b      	lsrs	r3, r3, #5
 80013c4:	2001      	movs	r0, #1
 80013c6:	fa00 f202 	lsl.w	r2, r0, r2
 80013ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013ce:	bf00      	nop
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	e000e100 	.word	0xe000e100

080013e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	6039      	str	r1, [r7, #0]
 80013ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	db0a      	blt.n	800140a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	490c      	ldr	r1, [pc, #48]	@ (800142c <__NVIC_SetPriority+0x4c>)
 80013fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fe:	0112      	lsls	r2, r2, #4
 8001400:	b2d2      	uxtb	r2, r2
 8001402:	440b      	add	r3, r1
 8001404:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001408:	e00a      	b.n	8001420 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	b2da      	uxtb	r2, r3
 800140e:	4908      	ldr	r1, [pc, #32]	@ (8001430 <__NVIC_SetPriority+0x50>)
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	f003 030f 	and.w	r3, r3, #15
 8001416:	3b04      	subs	r3, #4
 8001418:	0112      	lsls	r2, r2, #4
 800141a:	b2d2      	uxtb	r2, r2
 800141c:	440b      	add	r3, r1
 800141e:	761a      	strb	r2, [r3, #24]
}
 8001420:	bf00      	nop
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	e000e100 	.word	0xe000e100
 8001430:	e000ed00 	.word	0xe000ed00

08001434 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001434:	b480      	push	{r7}
 8001436:	b089      	sub	sp, #36	@ 0x24
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	f003 0307 	and.w	r3, r3, #7
 8001446:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	f1c3 0307 	rsb	r3, r3, #7
 800144e:	2b04      	cmp	r3, #4
 8001450:	bf28      	it	cs
 8001452:	2304      	movcs	r3, #4
 8001454:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	3304      	adds	r3, #4
 800145a:	2b06      	cmp	r3, #6
 800145c:	d902      	bls.n	8001464 <NVIC_EncodePriority+0x30>
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	3b03      	subs	r3, #3
 8001462:	e000      	b.n	8001466 <NVIC_EncodePriority+0x32>
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001468:	f04f 32ff 	mov.w	r2, #4294967295
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	43da      	mvns	r2, r3
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	401a      	ands	r2, r3
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800147c:	f04f 31ff 	mov.w	r1, #4294967295
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	fa01 f303 	lsl.w	r3, r1, r3
 8001486:	43d9      	mvns	r1, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800148c:	4313      	orrs	r3, r2
         );
}
 800148e:	4618      	mov	r0, r3
 8001490:	3724      	adds	r7, #36	@ 0x24
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
	...

0800149c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	3b01      	subs	r3, #1
 80014a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014ac:	d301      	bcc.n	80014b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ae:	2301      	movs	r3, #1
 80014b0:	e00f      	b.n	80014d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014b2:	4a0a      	ldr	r2, [pc, #40]	@ (80014dc <SysTick_Config+0x40>)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	3b01      	subs	r3, #1
 80014b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ba:	210f      	movs	r1, #15
 80014bc:	f04f 30ff 	mov.w	r0, #4294967295
 80014c0:	f7ff ff8e 	bl	80013e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014c4:	4b05      	ldr	r3, [pc, #20]	@ (80014dc <SysTick_Config+0x40>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ca:	4b04      	ldr	r3, [pc, #16]	@ (80014dc <SysTick_Config+0x40>)
 80014cc:	2207      	movs	r2, #7
 80014ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	e000e010 	.word	0xe000e010

080014e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f7ff ff29 	bl	8001340 <__NVIC_SetPriorityGrouping>
}
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b086      	sub	sp, #24
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	4603      	mov	r3, r0
 80014fe:	60b9      	str	r1, [r7, #8]
 8001500:	607a      	str	r2, [r7, #4]
 8001502:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001504:	2300      	movs	r3, #0
 8001506:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001508:	f7ff ff3e 	bl	8001388 <__NVIC_GetPriorityGrouping>
 800150c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	68b9      	ldr	r1, [r7, #8]
 8001512:	6978      	ldr	r0, [r7, #20]
 8001514:	f7ff ff8e 	bl	8001434 <NVIC_EncodePriority>
 8001518:	4602      	mov	r2, r0
 800151a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800151e:	4611      	mov	r1, r2
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff ff5d 	bl	80013e0 <__NVIC_SetPriority>
}
 8001526:	bf00      	nop
 8001528:	3718      	adds	r7, #24
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b082      	sub	sp, #8
 8001532:	af00      	add	r7, sp, #0
 8001534:	4603      	mov	r3, r0
 8001536:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff ff31 	bl	80013a4 <__NVIC_EnableIRQ>
}
 8001542:	bf00      	nop
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b082      	sub	sp, #8
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f7ff ffa2 	bl	800149c <SysTick_Config>
 8001558:	4603      	mov	r3, r0
}
 800155a:	4618      	mov	r0, r3
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
	...

08001564 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001570:	f7ff feda 	bl	8001328 <HAL_GetTick>
 8001574:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d101      	bne.n	8001580 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e099      	b.n	80016b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2202      	movs	r2, #2
 8001584:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2200      	movs	r2, #0
 800158c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f022 0201 	bic.w	r2, r2, #1
 800159e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015a0:	e00f      	b.n	80015c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015a2:	f7ff fec1 	bl	8001328 <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b05      	cmp	r3, #5
 80015ae:	d908      	bls.n	80015c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2220      	movs	r2, #32
 80015b4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2203      	movs	r2, #3
 80015ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e078      	b.n	80016b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0301 	and.w	r3, r3, #1
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d1e8      	bne.n	80015a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80015d8:	697a      	ldr	r2, [r7, #20]
 80015da:	4b38      	ldr	r3, [pc, #224]	@ (80016bc <HAL_DMA_Init+0x158>)
 80015dc:	4013      	ands	r3, r2
 80015de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685a      	ldr	r2, [r3, #4]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	691b      	ldr	r3, [r3, #16]
 80015f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001606:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6a1b      	ldr	r3, [r3, #32]
 800160c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800160e:	697a      	ldr	r2, [r7, #20]
 8001610:	4313      	orrs	r3, r2
 8001612:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001618:	2b04      	cmp	r3, #4
 800161a:	d107      	bne.n	800162c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001624:	4313      	orrs	r3, r2
 8001626:	697a      	ldr	r2, [r7, #20]
 8001628:	4313      	orrs	r3, r2
 800162a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	697a      	ldr	r2, [r7, #20]
 8001632:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	695b      	ldr	r3, [r3, #20]
 800163a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	f023 0307 	bic.w	r3, r3, #7
 8001642:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001648:	697a      	ldr	r2, [r7, #20]
 800164a:	4313      	orrs	r3, r2
 800164c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001652:	2b04      	cmp	r3, #4
 8001654:	d117      	bne.n	8001686 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800165a:	697a      	ldr	r2, [r7, #20]
 800165c:	4313      	orrs	r3, r2
 800165e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001664:	2b00      	cmp	r3, #0
 8001666:	d00e      	beq.n	8001686 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f000 fb01 	bl	8001c70 <DMA_CheckFifoParam>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d008      	beq.n	8001686 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2240      	movs	r2, #64	@ 0x40
 8001678:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2201      	movs	r2, #1
 800167e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001682:	2301      	movs	r3, #1
 8001684:	e016      	b.n	80016b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	697a      	ldr	r2, [r7, #20]
 800168c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f000 fab8 	bl	8001c04 <DMA_CalcBaseAndBitshift>
 8001694:	4603      	mov	r3, r0
 8001696:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800169c:	223f      	movs	r2, #63	@ 0x3f
 800169e:	409a      	lsls	r2, r3
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2200      	movs	r2, #0
 80016a8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2201      	movs	r2, #1
 80016ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3718      	adds	r7, #24
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	f010803f 	.word	0xf010803f

080016c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
 80016cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016ce:	2300      	movs	r3, #0
 80016d0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016d6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d101      	bne.n	80016e6 <HAL_DMA_Start_IT+0x26>
 80016e2:	2302      	movs	r3, #2
 80016e4:	e040      	b.n	8001768 <HAL_DMA_Start_IT+0xa8>
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2201      	movs	r2, #1
 80016ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d12f      	bne.n	800175a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	2202      	movs	r2, #2
 80016fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2200      	movs	r2, #0
 8001706:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	68b9      	ldr	r1, [r7, #8]
 800170e:	68f8      	ldr	r0, [r7, #12]
 8001710:	f000 fa4a 	bl	8001ba8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001718:	223f      	movs	r2, #63	@ 0x3f
 800171a:	409a      	lsls	r2, r3
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f042 0216 	orr.w	r2, r2, #22
 800172e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001734:	2b00      	cmp	r3, #0
 8001736:	d007      	beq.n	8001748 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f042 0208 	orr.w	r2, r2, #8
 8001746:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f042 0201 	orr.w	r2, r2, #1
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	e005      	b.n	8001766 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2200      	movs	r2, #0
 800175e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001762:	2302      	movs	r3, #2
 8001764:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001766:	7dfb      	ldrb	r3, [r7, #23]
}
 8001768:	4618      	mov	r0, r3
 800176a:	3718      	adds	r7, #24
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800177c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800177e:	f7ff fdd3 	bl	8001328 <HAL_GetTick>
 8001782:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800178a:	b2db      	uxtb	r3, r3
 800178c:	2b02      	cmp	r3, #2
 800178e:	d008      	beq.n	80017a2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2280      	movs	r2, #128	@ 0x80
 8001794:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2200      	movs	r2, #0
 800179a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e052      	b.n	8001848 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f022 0216 	bic.w	r2, r2, #22
 80017b0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	695a      	ldr	r2, [r3, #20]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80017c0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d103      	bne.n	80017d2 <HAL_DMA_Abort+0x62>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d007      	beq.n	80017e2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f022 0208 	bic.w	r2, r2, #8
 80017e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f022 0201 	bic.w	r2, r2, #1
 80017f0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017f2:	e013      	b.n	800181c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017f4:	f7ff fd98 	bl	8001328 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b05      	cmp	r3, #5
 8001800:	d90c      	bls.n	800181c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2220      	movs	r2, #32
 8001806:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2203      	movs	r2, #3
 800180c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e015      	b.n	8001848 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	2b00      	cmp	r3, #0
 8001828:	d1e4      	bne.n	80017f4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800182e:	223f      	movs	r2, #63	@ 0x3f
 8001830:	409a      	lsls	r2, r3
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2201      	movs	r2, #1
 800183a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001846:	2300      	movs	r3, #0
}
 8001848:	4618      	mov	r0, r3
 800184a:	3710      	adds	r7, #16
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800185e:	b2db      	uxtb	r3, r3
 8001860:	2b02      	cmp	r3, #2
 8001862:	d004      	beq.n	800186e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2280      	movs	r2, #128	@ 0x80
 8001868:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e00c      	b.n	8001888 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2205      	movs	r2, #5
 8001872:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f022 0201 	bic.w	r2, r2, #1
 8001884:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001886:	2300      	movs	r3, #0
}
 8001888:	4618      	mov	r0, r3
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800189c:	2300      	movs	r3, #0
 800189e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80018a0:	4b8e      	ldr	r3, [pc, #568]	@ (8001adc <HAL_DMA_IRQHandler+0x248>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a8e      	ldr	r2, [pc, #568]	@ (8001ae0 <HAL_DMA_IRQHandler+0x24c>)
 80018a6:	fba2 2303 	umull	r2, r3, r2, r3
 80018aa:	0a9b      	lsrs	r3, r3, #10
 80018ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018be:	2208      	movs	r2, #8
 80018c0:	409a      	lsls	r2, r3
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	4013      	ands	r3, r2
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d01a      	beq.n	8001900 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0304 	and.w	r3, r3, #4
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d013      	beq.n	8001900 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f022 0204 	bic.w	r2, r2, #4
 80018e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018ec:	2208      	movs	r2, #8
 80018ee:	409a      	lsls	r2, r3
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018f8:	f043 0201 	orr.w	r2, r3, #1
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001904:	2201      	movs	r2, #1
 8001906:	409a      	lsls	r2, r3
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	4013      	ands	r3, r2
 800190c:	2b00      	cmp	r3, #0
 800190e:	d012      	beq.n	8001936 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	695b      	ldr	r3, [r3, #20]
 8001916:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800191a:	2b00      	cmp	r3, #0
 800191c:	d00b      	beq.n	8001936 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001922:	2201      	movs	r2, #1
 8001924:	409a      	lsls	r2, r3
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800192e:	f043 0202 	orr.w	r2, r3, #2
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800193a:	2204      	movs	r2, #4
 800193c:	409a      	lsls	r2, r3
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	4013      	ands	r3, r2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d012      	beq.n	800196c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0302 	and.w	r3, r3, #2
 8001950:	2b00      	cmp	r3, #0
 8001952:	d00b      	beq.n	800196c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001958:	2204      	movs	r2, #4
 800195a:	409a      	lsls	r2, r3
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001964:	f043 0204 	orr.w	r2, r3, #4
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001970:	2210      	movs	r2, #16
 8001972:	409a      	lsls	r2, r3
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	4013      	ands	r3, r2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d043      	beq.n	8001a04 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0308 	and.w	r3, r3, #8
 8001986:	2b00      	cmp	r3, #0
 8001988:	d03c      	beq.n	8001a04 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800198e:	2210      	movs	r2, #16
 8001990:	409a      	lsls	r2, r3
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d018      	beq.n	80019d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d108      	bne.n	80019c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d024      	beq.n	8001a04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	4798      	blx	r3
 80019c2:	e01f      	b.n	8001a04 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d01b      	beq.n	8001a04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	4798      	blx	r3
 80019d4:	e016      	b.n	8001a04 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d107      	bne.n	80019f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f022 0208 	bic.w	r2, r2, #8
 80019f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d003      	beq.n	8001a04 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a08:	2220      	movs	r2, #32
 8001a0a:	409a      	lsls	r2, r3
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	f000 808f 	beq.w	8001b34 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0310 	and.w	r3, r3, #16
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	f000 8087 	beq.w	8001b34 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a2a:	2220      	movs	r2, #32
 8001a2c:	409a      	lsls	r2, r3
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b05      	cmp	r3, #5
 8001a3c:	d136      	bne.n	8001aac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f022 0216 	bic.w	r2, r2, #22
 8001a4c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	695a      	ldr	r2, [r3, #20]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001a5c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d103      	bne.n	8001a6e <HAL_DMA_IRQHandler+0x1da>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d007      	beq.n	8001a7e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f022 0208 	bic.w	r2, r2, #8
 8001a7c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a82:	223f      	movs	r2, #63	@ 0x3f
 8001a84:	409a      	lsls	r2, r3
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d07e      	beq.n	8001ba0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	4798      	blx	r3
        }
        return;
 8001aaa:	e079      	b.n	8001ba0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d01d      	beq.n	8001af6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d10d      	bne.n	8001ae4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d031      	beq.n	8001b34 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	4798      	blx	r3
 8001ad8:	e02c      	b.n	8001b34 <HAL_DMA_IRQHandler+0x2a0>
 8001ada:	bf00      	nop
 8001adc:	2000000c 	.word	0x2000000c
 8001ae0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d023      	beq.n	8001b34 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	4798      	blx	r3
 8001af4:	e01e      	b.n	8001b34 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d10f      	bne.n	8001b24 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f022 0210 	bic.w	r2, r2, #16
 8001b12:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d003      	beq.n	8001b34 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d032      	beq.n	8001ba2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b40:	f003 0301 	and.w	r3, r3, #1
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d022      	beq.n	8001b8e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2205      	movs	r2, #5
 8001b4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f022 0201 	bic.w	r2, r2, #1
 8001b5e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	3301      	adds	r3, #1
 8001b64:	60bb      	str	r3, [r7, #8]
 8001b66:	697a      	ldr	r2, [r7, #20]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d307      	bcc.n	8001b7c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d1f2      	bne.n	8001b60 <HAL_DMA_IRQHandler+0x2cc>
 8001b7a:	e000      	b.n	8001b7e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001b7c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2201      	movs	r2, #1
 8001b82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d005      	beq.n	8001ba2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	4798      	blx	r3
 8001b9e:	e000      	b.n	8001ba2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001ba0:	bf00      	nop
    }
  }
}
 8001ba2:	3718      	adds	r7, #24
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
 8001bb4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001bc4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	683a      	ldr	r2, [r7, #0]
 8001bcc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	2b40      	cmp	r3, #64	@ 0x40
 8001bd4:	d108      	bne.n	8001be8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	68ba      	ldr	r2, [r7, #8]
 8001be4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001be6:	e007      	b.n	8001bf8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	68ba      	ldr	r2, [r7, #8]
 8001bee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	60da      	str	r2, [r3, #12]
}
 8001bf8:	bf00      	nop
 8001bfa:	3714      	adds	r7, #20
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	3b10      	subs	r3, #16
 8001c14:	4a14      	ldr	r2, [pc, #80]	@ (8001c68 <DMA_CalcBaseAndBitshift+0x64>)
 8001c16:	fba2 2303 	umull	r2, r3, r2, r3
 8001c1a:	091b      	lsrs	r3, r3, #4
 8001c1c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c1e:	4a13      	ldr	r2, [pc, #76]	@ (8001c6c <DMA_CalcBaseAndBitshift+0x68>)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	4413      	add	r3, r2
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	461a      	mov	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2b03      	cmp	r3, #3
 8001c30:	d909      	bls.n	8001c46 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001c3a:	f023 0303 	bic.w	r3, r3, #3
 8001c3e:	1d1a      	adds	r2, r3, #4
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	659a      	str	r2, [r3, #88]	@ 0x58
 8001c44:	e007      	b.n	8001c56 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001c4e:	f023 0303 	bic.w	r3, r3, #3
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3714      	adds	r7, #20
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	aaaaaaab 	.word	0xaaaaaaab
 8001c6c:	080043f8 	.word	0x080043f8

08001c70 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c80:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	699b      	ldr	r3, [r3, #24]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d11f      	bne.n	8001cca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	2b03      	cmp	r3, #3
 8001c8e:	d856      	bhi.n	8001d3e <DMA_CheckFifoParam+0xce>
 8001c90:	a201      	add	r2, pc, #4	@ (adr r2, 8001c98 <DMA_CheckFifoParam+0x28>)
 8001c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c96:	bf00      	nop
 8001c98:	08001ca9 	.word	0x08001ca9
 8001c9c:	08001cbb 	.word	0x08001cbb
 8001ca0:	08001ca9 	.word	0x08001ca9
 8001ca4:	08001d3f 	.word	0x08001d3f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d046      	beq.n	8001d42 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cb8:	e043      	b.n	8001d42 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cbe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001cc2:	d140      	bne.n	8001d46 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cc8:	e03d      	b.n	8001d46 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	699b      	ldr	r3, [r3, #24]
 8001cce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001cd2:	d121      	bne.n	8001d18 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	2b03      	cmp	r3, #3
 8001cd8:	d837      	bhi.n	8001d4a <DMA_CheckFifoParam+0xda>
 8001cda:	a201      	add	r2, pc, #4	@ (adr r2, 8001ce0 <DMA_CheckFifoParam+0x70>)
 8001cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ce0:	08001cf1 	.word	0x08001cf1
 8001ce4:	08001cf7 	.word	0x08001cf7
 8001ce8:	08001cf1 	.word	0x08001cf1
 8001cec:	08001d09 	.word	0x08001d09
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	73fb      	strb	r3, [r7, #15]
      break;
 8001cf4:	e030      	b.n	8001d58 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cfa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d025      	beq.n	8001d4e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d06:	e022      	b.n	8001d4e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d0c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001d10:	d11f      	bne.n	8001d52 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001d16:	e01c      	b.n	8001d52 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d903      	bls.n	8001d26 <DMA_CheckFifoParam+0xb6>
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	2b03      	cmp	r3, #3
 8001d22:	d003      	beq.n	8001d2c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001d24:	e018      	b.n	8001d58 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	73fb      	strb	r3, [r7, #15]
      break;
 8001d2a:	e015      	b.n	8001d58 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d00e      	beq.n	8001d56 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	73fb      	strb	r3, [r7, #15]
      break;
 8001d3c:	e00b      	b.n	8001d56 <DMA_CheckFifoParam+0xe6>
      break;
 8001d3e:	bf00      	nop
 8001d40:	e00a      	b.n	8001d58 <DMA_CheckFifoParam+0xe8>
      break;
 8001d42:	bf00      	nop
 8001d44:	e008      	b.n	8001d58 <DMA_CheckFifoParam+0xe8>
      break;
 8001d46:	bf00      	nop
 8001d48:	e006      	b.n	8001d58 <DMA_CheckFifoParam+0xe8>
      break;
 8001d4a:	bf00      	nop
 8001d4c:	e004      	b.n	8001d58 <DMA_CheckFifoParam+0xe8>
      break;
 8001d4e:	bf00      	nop
 8001d50:	e002      	b.n	8001d58 <DMA_CheckFifoParam+0xe8>
      break;   
 8001d52:	bf00      	nop
 8001d54:	e000      	b.n	8001d58 <DMA_CheckFifoParam+0xe8>
      break;
 8001d56:	bf00      	nop
    }
  } 
  
  return status; 
 8001d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3714      	adds	r7, #20
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop

08001d68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b089      	sub	sp, #36	@ 0x24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d72:	2300      	movs	r3, #0
 8001d74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d76:	2300      	movs	r3, #0
 8001d78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d7e:	2300      	movs	r3, #0
 8001d80:	61fb      	str	r3, [r7, #28]
 8001d82:	e159      	b.n	8002038 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d84:	2201      	movs	r2, #1
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	697a      	ldr	r2, [r7, #20]
 8001d94:	4013      	ands	r3, r2
 8001d96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	f040 8148 	bne.w	8002032 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f003 0303 	and.w	r3, r3, #3
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d005      	beq.n	8001dba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d130      	bne.n	8001e1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	2203      	movs	r2, #3
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	68da      	ldr	r2, [r3, #12]
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001df0:	2201      	movs	r2, #1
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	091b      	lsrs	r3, r3, #4
 8001e06:	f003 0201 	and.w	r2, r3, #1
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f003 0303 	and.w	r3, r3, #3
 8001e24:	2b03      	cmp	r3, #3
 8001e26:	d017      	beq.n	8001e58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	2203      	movs	r2, #3
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	689a      	ldr	r2, [r3, #8]
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f003 0303 	and.w	r3, r3, #3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d123      	bne.n	8001eac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	08da      	lsrs	r2, r3, #3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3208      	adds	r2, #8
 8001e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	f003 0307 	and.w	r3, r3, #7
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	220f      	movs	r2, #15
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	43db      	mvns	r3, r3
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	4013      	ands	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	691a      	ldr	r2, [r3, #16]
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	f003 0307 	and.w	r3, r3, #7
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	08da      	lsrs	r2, r3, #3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	3208      	adds	r2, #8
 8001ea6:	69b9      	ldr	r1, [r7, #24]
 8001ea8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	2203      	movs	r2, #3
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f003 0203 	and.w	r2, r3, #3
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f000 80a2 	beq.w	8002032 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	4b57      	ldr	r3, [pc, #348]	@ (8002050 <HAL_GPIO_Init+0x2e8>)
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ef6:	4a56      	ldr	r2, [pc, #344]	@ (8002050 <HAL_GPIO_Init+0x2e8>)
 8001ef8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001efc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001efe:	4b54      	ldr	r3, [pc, #336]	@ (8002050 <HAL_GPIO_Init+0x2e8>)
 8001f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f06:	60fb      	str	r3, [r7, #12]
 8001f08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f0a:	4a52      	ldr	r2, [pc, #328]	@ (8002054 <HAL_GPIO_Init+0x2ec>)
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	089b      	lsrs	r3, r3, #2
 8001f10:	3302      	adds	r3, #2
 8001f12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	f003 0303 	and.w	r3, r3, #3
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	220f      	movs	r2, #15
 8001f22:	fa02 f303 	lsl.w	r3, r2, r3
 8001f26:	43db      	mvns	r3, r3
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a49      	ldr	r2, [pc, #292]	@ (8002058 <HAL_GPIO_Init+0x2f0>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d019      	beq.n	8001f6a <HAL_GPIO_Init+0x202>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a48      	ldr	r2, [pc, #288]	@ (800205c <HAL_GPIO_Init+0x2f4>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d013      	beq.n	8001f66 <HAL_GPIO_Init+0x1fe>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a47      	ldr	r2, [pc, #284]	@ (8002060 <HAL_GPIO_Init+0x2f8>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d00d      	beq.n	8001f62 <HAL_GPIO_Init+0x1fa>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a46      	ldr	r2, [pc, #280]	@ (8002064 <HAL_GPIO_Init+0x2fc>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d007      	beq.n	8001f5e <HAL_GPIO_Init+0x1f6>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a45      	ldr	r2, [pc, #276]	@ (8002068 <HAL_GPIO_Init+0x300>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d101      	bne.n	8001f5a <HAL_GPIO_Init+0x1f2>
 8001f56:	2304      	movs	r3, #4
 8001f58:	e008      	b.n	8001f6c <HAL_GPIO_Init+0x204>
 8001f5a:	2307      	movs	r3, #7
 8001f5c:	e006      	b.n	8001f6c <HAL_GPIO_Init+0x204>
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e004      	b.n	8001f6c <HAL_GPIO_Init+0x204>
 8001f62:	2302      	movs	r3, #2
 8001f64:	e002      	b.n	8001f6c <HAL_GPIO_Init+0x204>
 8001f66:	2301      	movs	r3, #1
 8001f68:	e000      	b.n	8001f6c <HAL_GPIO_Init+0x204>
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	69fa      	ldr	r2, [r7, #28]
 8001f6e:	f002 0203 	and.w	r2, r2, #3
 8001f72:	0092      	lsls	r2, r2, #2
 8001f74:	4093      	lsls	r3, r2
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f7c:	4935      	ldr	r1, [pc, #212]	@ (8002054 <HAL_GPIO_Init+0x2ec>)
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	089b      	lsrs	r3, r3, #2
 8001f82:	3302      	adds	r3, #2
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f8a:	4b38      	ldr	r3, [pc, #224]	@ (800206c <HAL_GPIO_Init+0x304>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	43db      	mvns	r3, r3
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	4013      	ands	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d003      	beq.n	8001fae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fae:	4a2f      	ldr	r2, [pc, #188]	@ (800206c <HAL_GPIO_Init+0x304>)
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fb4:	4b2d      	ldr	r3, [pc, #180]	@ (800206c <HAL_GPIO_Init+0x304>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d003      	beq.n	8001fd8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fd8:	4a24      	ldr	r2, [pc, #144]	@ (800206c <HAL_GPIO_Init+0x304>)
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fde:	4b23      	ldr	r3, [pc, #140]	@ (800206c <HAL_GPIO_Init+0x304>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	43db      	mvns	r3, r3
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	4013      	ands	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002002:	4a1a      	ldr	r2, [pc, #104]	@ (800206c <HAL_GPIO_Init+0x304>)
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002008:	4b18      	ldr	r3, [pc, #96]	@ (800206c <HAL_GPIO_Init+0x304>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	43db      	mvns	r3, r3
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	4013      	ands	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d003      	beq.n	800202c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	4313      	orrs	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800202c:	4a0f      	ldr	r2, [pc, #60]	@ (800206c <HAL_GPIO_Init+0x304>)
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	3301      	adds	r3, #1
 8002036:	61fb      	str	r3, [r7, #28]
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	2b0f      	cmp	r3, #15
 800203c:	f67f aea2 	bls.w	8001d84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002040:	bf00      	nop
 8002042:	bf00      	nop
 8002044:	3724      	adds	r7, #36	@ 0x24
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	40023800 	.word	0x40023800
 8002054:	40013800 	.word	0x40013800
 8002058:	40020000 	.word	0x40020000
 800205c:	40020400 	.word	0x40020400
 8002060:	40020800 	.word	0x40020800
 8002064:	40020c00 	.word	0x40020c00
 8002068:	40021000 	.word	0x40021000
 800206c:	40013c00 	.word	0x40013c00

08002070 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d101      	bne.n	8002082 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e267      	b.n	8002552 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	2b00      	cmp	r3, #0
 800208c:	d075      	beq.n	800217a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800208e:	4b88      	ldr	r3, [pc, #544]	@ (80022b0 <HAL_RCC_OscConfig+0x240>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f003 030c 	and.w	r3, r3, #12
 8002096:	2b04      	cmp	r3, #4
 8002098:	d00c      	beq.n	80020b4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800209a:	4b85      	ldr	r3, [pc, #532]	@ (80022b0 <HAL_RCC_OscConfig+0x240>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80020a2:	2b08      	cmp	r3, #8
 80020a4:	d112      	bne.n	80020cc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020a6:	4b82      	ldr	r3, [pc, #520]	@ (80022b0 <HAL_RCC_OscConfig+0x240>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80020b2:	d10b      	bne.n	80020cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020b4:	4b7e      	ldr	r3, [pc, #504]	@ (80022b0 <HAL_RCC_OscConfig+0x240>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d05b      	beq.n	8002178 <HAL_RCC_OscConfig+0x108>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d157      	bne.n	8002178 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e242      	b.n	8002552 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020d4:	d106      	bne.n	80020e4 <HAL_RCC_OscConfig+0x74>
 80020d6:	4b76      	ldr	r3, [pc, #472]	@ (80022b0 <HAL_RCC_OscConfig+0x240>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a75      	ldr	r2, [pc, #468]	@ (80022b0 <HAL_RCC_OscConfig+0x240>)
 80020dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020e0:	6013      	str	r3, [r2, #0]
 80020e2:	e01d      	b.n	8002120 <HAL_RCC_OscConfig+0xb0>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80020ec:	d10c      	bne.n	8002108 <HAL_RCC_OscConfig+0x98>
 80020ee:	4b70      	ldr	r3, [pc, #448]	@ (80022b0 <HAL_RCC_OscConfig+0x240>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a6f      	ldr	r2, [pc, #444]	@ (80022b0 <HAL_RCC_OscConfig+0x240>)
 80020f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020f8:	6013      	str	r3, [r2, #0]
 80020fa:	4b6d      	ldr	r3, [pc, #436]	@ (80022b0 <HAL_RCC_OscConfig+0x240>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a6c      	ldr	r2, [pc, #432]	@ (80022b0 <HAL_RCC_OscConfig+0x240>)
 8002100:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002104:	6013      	str	r3, [r2, #0]
 8002106:	e00b      	b.n	8002120 <HAL_RCC_OscConfig+0xb0>
 8002108:	4b69      	ldr	r3, [pc, #420]	@ (80022b0 <HAL_RCC_OscConfig+0x240>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a68      	ldr	r2, [pc, #416]	@ (80022b0 <HAL_RCC_OscConfig+0x240>)
 800210e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002112:	6013      	str	r3, [r2, #0]
 8002114:	4b66      	ldr	r3, [pc, #408]	@ (80022b0 <HAL_RCC_OscConfig+0x240>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a65      	ldr	r2, [pc, #404]	@ (80022b0 <HAL_RCC_OscConfig+0x240>)
 800211a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800211e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d013      	beq.n	8002150 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002128:	f7ff f8fe 	bl	8001328 <HAL_GetTick>
 800212c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800212e:	e008      	b.n	8002142 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002130:	f7ff f8fa 	bl	8001328 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b64      	cmp	r3, #100	@ 0x64
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e207      	b.n	8002552 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002142:	4b5b      	ldr	r3, [pc, #364]	@ (80022b0 <HAL_RCC_OscConfig+0x240>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d0f0      	beq.n	8002130 <HAL_RCC_OscConfig+0xc0>
 800214e:	e014      	b.n	800217a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002150:	f7ff f8ea 	bl	8001328 <HAL_GetTick>
 8002154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002158:	f7ff f8e6 	bl	8001328 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b64      	cmp	r3, #100	@ 0x64
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e1f3      	b.n	8002552 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800216a:	4b51      	ldr	r3, [pc, #324]	@ (80022b0 <HAL_RCC_OscConfig+0x240>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1f0      	bne.n	8002158 <HAL_RCC_OscConfig+0xe8>
 8002176:	e000      	b.n	800217a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002178:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d063      	beq.n	800224e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002186:	4b4a      	ldr	r3, [pc, #296]	@ (80022b0 <HAL_RCC_OscConfig+0x240>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	f003 030c 	and.w	r3, r3, #12
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00b      	beq.n	80021aa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002192:	4b47      	ldr	r3, [pc, #284]	@ (80022b0 <HAL_RCC_OscConfig+0x240>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800219a:	2b08      	cmp	r3, #8
 800219c:	d11c      	bne.n	80021d8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800219e:	4b44      	ldr	r3, [pc, #272]	@ (80022b0 <HAL_RCC_OscConfig+0x240>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d116      	bne.n	80021d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021aa:	4b41      	ldr	r3, [pc, #260]	@ (80022b0 <HAL_RCC_OscConfig+0x240>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d005      	beq.n	80021c2 <HAL_RCC_OscConfig+0x152>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d001      	beq.n	80021c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e1c7      	b.n	8002552 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021c2:	4b3b      	ldr	r3, [pc, #236]	@ (80022b0 <HAL_RCC_OscConfig+0x240>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	4937      	ldr	r1, [pc, #220]	@ (80022b0 <HAL_RCC_OscConfig+0x240>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021d6:	e03a      	b.n	800224e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d020      	beq.n	8002222 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021e0:	4b34      	ldr	r3, [pc, #208]	@ (80022b4 <HAL_RCC_OscConfig+0x244>)
 80021e2:	2201      	movs	r2, #1
 80021e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e6:	f7ff f89f 	bl	8001328 <HAL_GetTick>
 80021ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ec:	e008      	b.n	8002200 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021ee:	f7ff f89b 	bl	8001328 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d901      	bls.n	8002200 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e1a8      	b.n	8002552 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002200:	4b2b      	ldr	r3, [pc, #172]	@ (80022b0 <HAL_RCC_OscConfig+0x240>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0302 	and.w	r3, r3, #2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d0f0      	beq.n	80021ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800220c:	4b28      	ldr	r3, [pc, #160]	@ (80022b0 <HAL_RCC_OscConfig+0x240>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	691b      	ldr	r3, [r3, #16]
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	4925      	ldr	r1, [pc, #148]	@ (80022b0 <HAL_RCC_OscConfig+0x240>)
 800221c:	4313      	orrs	r3, r2
 800221e:	600b      	str	r3, [r1, #0]
 8002220:	e015      	b.n	800224e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002222:	4b24      	ldr	r3, [pc, #144]	@ (80022b4 <HAL_RCC_OscConfig+0x244>)
 8002224:	2200      	movs	r2, #0
 8002226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002228:	f7ff f87e 	bl	8001328 <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800222e:	e008      	b.n	8002242 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002230:	f7ff f87a 	bl	8001328 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b02      	cmp	r3, #2
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e187      	b.n	8002552 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002242:	4b1b      	ldr	r3, [pc, #108]	@ (80022b0 <HAL_RCC_OscConfig+0x240>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1f0      	bne.n	8002230 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0308 	and.w	r3, r3, #8
 8002256:	2b00      	cmp	r3, #0
 8002258:	d036      	beq.n	80022c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	695b      	ldr	r3, [r3, #20]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d016      	beq.n	8002290 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002262:	4b15      	ldr	r3, [pc, #84]	@ (80022b8 <HAL_RCC_OscConfig+0x248>)
 8002264:	2201      	movs	r2, #1
 8002266:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002268:	f7ff f85e 	bl	8001328 <HAL_GetTick>
 800226c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800226e:	e008      	b.n	8002282 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002270:	f7ff f85a 	bl	8001328 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b02      	cmp	r3, #2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e167      	b.n	8002552 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002282:	4b0b      	ldr	r3, [pc, #44]	@ (80022b0 <HAL_RCC_OscConfig+0x240>)
 8002284:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d0f0      	beq.n	8002270 <HAL_RCC_OscConfig+0x200>
 800228e:	e01b      	b.n	80022c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002290:	4b09      	ldr	r3, [pc, #36]	@ (80022b8 <HAL_RCC_OscConfig+0x248>)
 8002292:	2200      	movs	r2, #0
 8002294:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002296:	f7ff f847 	bl	8001328 <HAL_GetTick>
 800229a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800229c:	e00e      	b.n	80022bc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800229e:	f7ff f843 	bl	8001328 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d907      	bls.n	80022bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e150      	b.n	8002552 <HAL_RCC_OscConfig+0x4e2>
 80022b0:	40023800 	.word	0x40023800
 80022b4:	42470000 	.word	0x42470000
 80022b8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022bc:	4b88      	ldr	r3, [pc, #544]	@ (80024e0 <HAL_RCC_OscConfig+0x470>)
 80022be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022c0:	f003 0302 	and.w	r3, r3, #2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d1ea      	bne.n	800229e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0304 	and.w	r3, r3, #4
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f000 8097 	beq.w	8002404 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022d6:	2300      	movs	r3, #0
 80022d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022da:	4b81      	ldr	r3, [pc, #516]	@ (80024e0 <HAL_RCC_OscConfig+0x470>)
 80022dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d10f      	bne.n	8002306 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022e6:	2300      	movs	r3, #0
 80022e8:	60bb      	str	r3, [r7, #8]
 80022ea:	4b7d      	ldr	r3, [pc, #500]	@ (80024e0 <HAL_RCC_OscConfig+0x470>)
 80022ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ee:	4a7c      	ldr	r2, [pc, #496]	@ (80024e0 <HAL_RCC_OscConfig+0x470>)
 80022f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80022f6:	4b7a      	ldr	r3, [pc, #488]	@ (80024e0 <HAL_RCC_OscConfig+0x470>)
 80022f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022fe:	60bb      	str	r3, [r7, #8]
 8002300:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002302:	2301      	movs	r3, #1
 8002304:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002306:	4b77      	ldr	r3, [pc, #476]	@ (80024e4 <HAL_RCC_OscConfig+0x474>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800230e:	2b00      	cmp	r3, #0
 8002310:	d118      	bne.n	8002344 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002312:	4b74      	ldr	r3, [pc, #464]	@ (80024e4 <HAL_RCC_OscConfig+0x474>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a73      	ldr	r2, [pc, #460]	@ (80024e4 <HAL_RCC_OscConfig+0x474>)
 8002318:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800231c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800231e:	f7ff f803 	bl	8001328 <HAL_GetTick>
 8002322:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002324:	e008      	b.n	8002338 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002326:	f7fe ffff 	bl	8001328 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d901      	bls.n	8002338 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e10c      	b.n	8002552 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002338:	4b6a      	ldr	r3, [pc, #424]	@ (80024e4 <HAL_RCC_OscConfig+0x474>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002340:	2b00      	cmp	r3, #0
 8002342:	d0f0      	beq.n	8002326 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	2b01      	cmp	r3, #1
 800234a:	d106      	bne.n	800235a <HAL_RCC_OscConfig+0x2ea>
 800234c:	4b64      	ldr	r3, [pc, #400]	@ (80024e0 <HAL_RCC_OscConfig+0x470>)
 800234e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002350:	4a63      	ldr	r2, [pc, #396]	@ (80024e0 <HAL_RCC_OscConfig+0x470>)
 8002352:	f043 0301 	orr.w	r3, r3, #1
 8002356:	6713      	str	r3, [r2, #112]	@ 0x70
 8002358:	e01c      	b.n	8002394 <HAL_RCC_OscConfig+0x324>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	2b05      	cmp	r3, #5
 8002360:	d10c      	bne.n	800237c <HAL_RCC_OscConfig+0x30c>
 8002362:	4b5f      	ldr	r3, [pc, #380]	@ (80024e0 <HAL_RCC_OscConfig+0x470>)
 8002364:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002366:	4a5e      	ldr	r2, [pc, #376]	@ (80024e0 <HAL_RCC_OscConfig+0x470>)
 8002368:	f043 0304 	orr.w	r3, r3, #4
 800236c:	6713      	str	r3, [r2, #112]	@ 0x70
 800236e:	4b5c      	ldr	r3, [pc, #368]	@ (80024e0 <HAL_RCC_OscConfig+0x470>)
 8002370:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002372:	4a5b      	ldr	r2, [pc, #364]	@ (80024e0 <HAL_RCC_OscConfig+0x470>)
 8002374:	f043 0301 	orr.w	r3, r3, #1
 8002378:	6713      	str	r3, [r2, #112]	@ 0x70
 800237a:	e00b      	b.n	8002394 <HAL_RCC_OscConfig+0x324>
 800237c:	4b58      	ldr	r3, [pc, #352]	@ (80024e0 <HAL_RCC_OscConfig+0x470>)
 800237e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002380:	4a57      	ldr	r2, [pc, #348]	@ (80024e0 <HAL_RCC_OscConfig+0x470>)
 8002382:	f023 0301 	bic.w	r3, r3, #1
 8002386:	6713      	str	r3, [r2, #112]	@ 0x70
 8002388:	4b55      	ldr	r3, [pc, #340]	@ (80024e0 <HAL_RCC_OscConfig+0x470>)
 800238a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800238c:	4a54      	ldr	r2, [pc, #336]	@ (80024e0 <HAL_RCC_OscConfig+0x470>)
 800238e:	f023 0304 	bic.w	r3, r3, #4
 8002392:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d015      	beq.n	80023c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800239c:	f7fe ffc4 	bl	8001328 <HAL_GetTick>
 80023a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023a2:	e00a      	b.n	80023ba <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023a4:	f7fe ffc0 	bl	8001328 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e0cb      	b.n	8002552 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ba:	4b49      	ldr	r3, [pc, #292]	@ (80024e0 <HAL_RCC_OscConfig+0x470>)
 80023bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d0ee      	beq.n	80023a4 <HAL_RCC_OscConfig+0x334>
 80023c6:	e014      	b.n	80023f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023c8:	f7fe ffae 	bl	8001328 <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023ce:	e00a      	b.n	80023e6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023d0:	f7fe ffaa 	bl	8001328 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023de:	4293      	cmp	r3, r2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e0b5      	b.n	8002552 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023e6:	4b3e      	ldr	r3, [pc, #248]	@ (80024e0 <HAL_RCC_OscConfig+0x470>)
 80023e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1ee      	bne.n	80023d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023f2:	7dfb      	ldrb	r3, [r7, #23]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d105      	bne.n	8002404 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023f8:	4b39      	ldr	r3, [pc, #228]	@ (80024e0 <HAL_RCC_OscConfig+0x470>)
 80023fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fc:	4a38      	ldr	r2, [pc, #224]	@ (80024e0 <HAL_RCC_OscConfig+0x470>)
 80023fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002402:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	2b00      	cmp	r3, #0
 800240a:	f000 80a1 	beq.w	8002550 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800240e:	4b34      	ldr	r3, [pc, #208]	@ (80024e0 <HAL_RCC_OscConfig+0x470>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f003 030c 	and.w	r3, r3, #12
 8002416:	2b08      	cmp	r3, #8
 8002418:	d05c      	beq.n	80024d4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	2b02      	cmp	r3, #2
 8002420:	d141      	bne.n	80024a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002422:	4b31      	ldr	r3, [pc, #196]	@ (80024e8 <HAL_RCC_OscConfig+0x478>)
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002428:	f7fe ff7e 	bl	8001328 <HAL_GetTick>
 800242c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800242e:	e008      	b.n	8002442 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002430:	f7fe ff7a 	bl	8001328 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b02      	cmp	r3, #2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e087      	b.n	8002552 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002442:	4b27      	ldr	r3, [pc, #156]	@ (80024e0 <HAL_RCC_OscConfig+0x470>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d1f0      	bne.n	8002430 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	69da      	ldr	r2, [r3, #28]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	431a      	orrs	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800245c:	019b      	lsls	r3, r3, #6
 800245e:	431a      	orrs	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002464:	085b      	lsrs	r3, r3, #1
 8002466:	3b01      	subs	r3, #1
 8002468:	041b      	lsls	r3, r3, #16
 800246a:	431a      	orrs	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002470:	061b      	lsls	r3, r3, #24
 8002472:	491b      	ldr	r1, [pc, #108]	@ (80024e0 <HAL_RCC_OscConfig+0x470>)
 8002474:	4313      	orrs	r3, r2
 8002476:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002478:	4b1b      	ldr	r3, [pc, #108]	@ (80024e8 <HAL_RCC_OscConfig+0x478>)
 800247a:	2201      	movs	r2, #1
 800247c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800247e:	f7fe ff53 	bl	8001328 <HAL_GetTick>
 8002482:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002484:	e008      	b.n	8002498 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002486:	f7fe ff4f 	bl	8001328 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	2b02      	cmp	r3, #2
 8002492:	d901      	bls.n	8002498 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e05c      	b.n	8002552 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002498:	4b11      	ldr	r3, [pc, #68]	@ (80024e0 <HAL_RCC_OscConfig+0x470>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d0f0      	beq.n	8002486 <HAL_RCC_OscConfig+0x416>
 80024a4:	e054      	b.n	8002550 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024a6:	4b10      	ldr	r3, [pc, #64]	@ (80024e8 <HAL_RCC_OscConfig+0x478>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ac:	f7fe ff3c 	bl	8001328 <HAL_GetTick>
 80024b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024b2:	e008      	b.n	80024c6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024b4:	f7fe ff38 	bl	8001328 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e045      	b.n	8002552 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024c6:	4b06      	ldr	r3, [pc, #24]	@ (80024e0 <HAL_RCC_OscConfig+0x470>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1f0      	bne.n	80024b4 <HAL_RCC_OscConfig+0x444>
 80024d2:	e03d      	b.n	8002550 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d107      	bne.n	80024ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e038      	b.n	8002552 <HAL_RCC_OscConfig+0x4e2>
 80024e0:	40023800 	.word	0x40023800
 80024e4:	40007000 	.word	0x40007000
 80024e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024ec:	4b1b      	ldr	r3, [pc, #108]	@ (800255c <HAL_RCC_OscConfig+0x4ec>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d028      	beq.n	800254c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002504:	429a      	cmp	r2, r3
 8002506:	d121      	bne.n	800254c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002512:	429a      	cmp	r2, r3
 8002514:	d11a      	bne.n	800254c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800251c:	4013      	ands	r3, r2
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002522:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002524:	4293      	cmp	r3, r2
 8002526:	d111      	bne.n	800254c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002532:	085b      	lsrs	r3, r3, #1
 8002534:	3b01      	subs	r3, #1
 8002536:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002538:	429a      	cmp	r2, r3
 800253a:	d107      	bne.n	800254c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002546:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002548:	429a      	cmp	r2, r3
 800254a:	d001      	beq.n	8002550 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e000      	b.n	8002552 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3718      	adds	r7, #24
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	40023800 	.word	0x40023800

08002560 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d101      	bne.n	8002574 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e0cc      	b.n	800270e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002574:	4b68      	ldr	r3, [pc, #416]	@ (8002718 <HAL_RCC_ClockConfig+0x1b8>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0307 	and.w	r3, r3, #7
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	429a      	cmp	r2, r3
 8002580:	d90c      	bls.n	800259c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002582:	4b65      	ldr	r3, [pc, #404]	@ (8002718 <HAL_RCC_ClockConfig+0x1b8>)
 8002584:	683a      	ldr	r2, [r7, #0]
 8002586:	b2d2      	uxtb	r2, r2
 8002588:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800258a:	4b63      	ldr	r3, [pc, #396]	@ (8002718 <HAL_RCC_ClockConfig+0x1b8>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0307 	and.w	r3, r3, #7
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	429a      	cmp	r2, r3
 8002596:	d001      	beq.n	800259c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e0b8      	b.n	800270e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0302 	and.w	r3, r3, #2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d020      	beq.n	80025ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0304 	and.w	r3, r3, #4
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d005      	beq.n	80025c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025b4:	4b59      	ldr	r3, [pc, #356]	@ (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	4a58      	ldr	r2, [pc, #352]	@ (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80025ba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80025be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0308 	and.w	r3, r3, #8
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d005      	beq.n	80025d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025cc:	4b53      	ldr	r3, [pc, #332]	@ (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	4a52      	ldr	r2, [pc, #328]	@ (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80025d2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80025d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025d8:	4b50      	ldr	r3, [pc, #320]	@ (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	494d      	ldr	r1, [pc, #308]	@ (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d044      	beq.n	8002680 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d107      	bne.n	800260e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025fe:	4b47      	ldr	r3, [pc, #284]	@ (800271c <HAL_RCC_ClockConfig+0x1bc>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d119      	bne.n	800263e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e07f      	b.n	800270e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	2b02      	cmp	r3, #2
 8002614:	d003      	beq.n	800261e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800261a:	2b03      	cmp	r3, #3
 800261c:	d107      	bne.n	800262e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800261e:	4b3f      	ldr	r3, [pc, #252]	@ (800271c <HAL_RCC_ClockConfig+0x1bc>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d109      	bne.n	800263e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e06f      	b.n	800270e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800262e:	4b3b      	ldr	r3, [pc, #236]	@ (800271c <HAL_RCC_ClockConfig+0x1bc>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e067      	b.n	800270e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800263e:	4b37      	ldr	r3, [pc, #220]	@ (800271c <HAL_RCC_ClockConfig+0x1bc>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f023 0203 	bic.w	r2, r3, #3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	4934      	ldr	r1, [pc, #208]	@ (800271c <HAL_RCC_ClockConfig+0x1bc>)
 800264c:	4313      	orrs	r3, r2
 800264e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002650:	f7fe fe6a 	bl	8001328 <HAL_GetTick>
 8002654:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002656:	e00a      	b.n	800266e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002658:	f7fe fe66 	bl	8001328 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002666:	4293      	cmp	r3, r2
 8002668:	d901      	bls.n	800266e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e04f      	b.n	800270e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800266e:	4b2b      	ldr	r3, [pc, #172]	@ (800271c <HAL_RCC_ClockConfig+0x1bc>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f003 020c 	and.w	r2, r3, #12
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	429a      	cmp	r2, r3
 800267e:	d1eb      	bne.n	8002658 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002680:	4b25      	ldr	r3, [pc, #148]	@ (8002718 <HAL_RCC_ClockConfig+0x1b8>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0307 	and.w	r3, r3, #7
 8002688:	683a      	ldr	r2, [r7, #0]
 800268a:	429a      	cmp	r2, r3
 800268c:	d20c      	bcs.n	80026a8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800268e:	4b22      	ldr	r3, [pc, #136]	@ (8002718 <HAL_RCC_ClockConfig+0x1b8>)
 8002690:	683a      	ldr	r2, [r7, #0]
 8002692:	b2d2      	uxtb	r2, r2
 8002694:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002696:	4b20      	ldr	r3, [pc, #128]	@ (8002718 <HAL_RCC_ClockConfig+0x1b8>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0307 	and.w	r3, r3, #7
 800269e:	683a      	ldr	r2, [r7, #0]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d001      	beq.n	80026a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e032      	b.n	800270e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0304 	and.w	r3, r3, #4
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d008      	beq.n	80026c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026b4:	4b19      	ldr	r3, [pc, #100]	@ (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	4916      	ldr	r1, [pc, #88]	@ (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0308 	and.w	r3, r3, #8
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d009      	beq.n	80026e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026d2:	4b12      	ldr	r3, [pc, #72]	@ (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	490e      	ldr	r1, [pc, #56]	@ (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026e6:	f000 f821 	bl	800272c <HAL_RCC_GetSysClockFreq>
 80026ea:	4602      	mov	r2, r0
 80026ec:	4b0b      	ldr	r3, [pc, #44]	@ (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	091b      	lsrs	r3, r3, #4
 80026f2:	f003 030f 	and.w	r3, r3, #15
 80026f6:	490a      	ldr	r1, [pc, #40]	@ (8002720 <HAL_RCC_ClockConfig+0x1c0>)
 80026f8:	5ccb      	ldrb	r3, [r1, r3]
 80026fa:	fa22 f303 	lsr.w	r3, r2, r3
 80026fe:	4a09      	ldr	r2, [pc, #36]	@ (8002724 <HAL_RCC_ClockConfig+0x1c4>)
 8002700:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002702:	4b09      	ldr	r3, [pc, #36]	@ (8002728 <HAL_RCC_ClockConfig+0x1c8>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4618      	mov	r0, r3
 8002708:	f7fe fdca 	bl	80012a0 <HAL_InitTick>

  return HAL_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3710      	adds	r7, #16
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	40023c00 	.word	0x40023c00
 800271c:	40023800 	.word	0x40023800
 8002720:	080043e0 	.word	0x080043e0
 8002724:	2000000c 	.word	0x2000000c
 8002728:	20000010 	.word	0x20000010

0800272c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800272c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002730:	b094      	sub	sp, #80	@ 0x50
 8002732:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002734:	2300      	movs	r3, #0
 8002736:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002738:	2300      	movs	r3, #0
 800273a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800273c:	2300      	movs	r3, #0
 800273e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002740:	2300      	movs	r3, #0
 8002742:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002744:	4b79      	ldr	r3, [pc, #484]	@ (800292c <HAL_RCC_GetSysClockFreq+0x200>)
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f003 030c 	and.w	r3, r3, #12
 800274c:	2b08      	cmp	r3, #8
 800274e:	d00d      	beq.n	800276c <HAL_RCC_GetSysClockFreq+0x40>
 8002750:	2b08      	cmp	r3, #8
 8002752:	f200 80e1 	bhi.w	8002918 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002756:	2b00      	cmp	r3, #0
 8002758:	d002      	beq.n	8002760 <HAL_RCC_GetSysClockFreq+0x34>
 800275a:	2b04      	cmp	r3, #4
 800275c:	d003      	beq.n	8002766 <HAL_RCC_GetSysClockFreq+0x3a>
 800275e:	e0db      	b.n	8002918 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002760:	4b73      	ldr	r3, [pc, #460]	@ (8002930 <HAL_RCC_GetSysClockFreq+0x204>)
 8002762:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002764:	e0db      	b.n	800291e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002766:	4b73      	ldr	r3, [pc, #460]	@ (8002934 <HAL_RCC_GetSysClockFreq+0x208>)
 8002768:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800276a:	e0d8      	b.n	800291e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800276c:	4b6f      	ldr	r3, [pc, #444]	@ (800292c <HAL_RCC_GetSysClockFreq+0x200>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002774:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002776:	4b6d      	ldr	r3, [pc, #436]	@ (800292c <HAL_RCC_GetSysClockFreq+0x200>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d063      	beq.n	800284a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002782:	4b6a      	ldr	r3, [pc, #424]	@ (800292c <HAL_RCC_GetSysClockFreq+0x200>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	099b      	lsrs	r3, r3, #6
 8002788:	2200      	movs	r2, #0
 800278a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800278c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800278e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002790:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002794:	633b      	str	r3, [r7, #48]	@ 0x30
 8002796:	2300      	movs	r3, #0
 8002798:	637b      	str	r3, [r7, #52]	@ 0x34
 800279a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800279e:	4622      	mov	r2, r4
 80027a0:	462b      	mov	r3, r5
 80027a2:	f04f 0000 	mov.w	r0, #0
 80027a6:	f04f 0100 	mov.w	r1, #0
 80027aa:	0159      	lsls	r1, r3, #5
 80027ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027b0:	0150      	lsls	r0, r2, #5
 80027b2:	4602      	mov	r2, r0
 80027b4:	460b      	mov	r3, r1
 80027b6:	4621      	mov	r1, r4
 80027b8:	1a51      	subs	r1, r2, r1
 80027ba:	6139      	str	r1, [r7, #16]
 80027bc:	4629      	mov	r1, r5
 80027be:	eb63 0301 	sbc.w	r3, r3, r1
 80027c2:	617b      	str	r3, [r7, #20]
 80027c4:	f04f 0200 	mov.w	r2, #0
 80027c8:	f04f 0300 	mov.w	r3, #0
 80027cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80027d0:	4659      	mov	r1, fp
 80027d2:	018b      	lsls	r3, r1, #6
 80027d4:	4651      	mov	r1, sl
 80027d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027da:	4651      	mov	r1, sl
 80027dc:	018a      	lsls	r2, r1, #6
 80027de:	4651      	mov	r1, sl
 80027e0:	ebb2 0801 	subs.w	r8, r2, r1
 80027e4:	4659      	mov	r1, fp
 80027e6:	eb63 0901 	sbc.w	r9, r3, r1
 80027ea:	f04f 0200 	mov.w	r2, #0
 80027ee:	f04f 0300 	mov.w	r3, #0
 80027f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027fe:	4690      	mov	r8, r2
 8002800:	4699      	mov	r9, r3
 8002802:	4623      	mov	r3, r4
 8002804:	eb18 0303 	adds.w	r3, r8, r3
 8002808:	60bb      	str	r3, [r7, #8]
 800280a:	462b      	mov	r3, r5
 800280c:	eb49 0303 	adc.w	r3, r9, r3
 8002810:	60fb      	str	r3, [r7, #12]
 8002812:	f04f 0200 	mov.w	r2, #0
 8002816:	f04f 0300 	mov.w	r3, #0
 800281a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800281e:	4629      	mov	r1, r5
 8002820:	024b      	lsls	r3, r1, #9
 8002822:	4621      	mov	r1, r4
 8002824:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002828:	4621      	mov	r1, r4
 800282a:	024a      	lsls	r2, r1, #9
 800282c:	4610      	mov	r0, r2
 800282e:	4619      	mov	r1, r3
 8002830:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002832:	2200      	movs	r2, #0
 8002834:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002836:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002838:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800283c:	f7fd fccc 	bl	80001d8 <__aeabi_uldivmod>
 8002840:	4602      	mov	r2, r0
 8002842:	460b      	mov	r3, r1
 8002844:	4613      	mov	r3, r2
 8002846:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002848:	e058      	b.n	80028fc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800284a:	4b38      	ldr	r3, [pc, #224]	@ (800292c <HAL_RCC_GetSysClockFreq+0x200>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	099b      	lsrs	r3, r3, #6
 8002850:	2200      	movs	r2, #0
 8002852:	4618      	mov	r0, r3
 8002854:	4611      	mov	r1, r2
 8002856:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800285a:	623b      	str	r3, [r7, #32]
 800285c:	2300      	movs	r3, #0
 800285e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002860:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002864:	4642      	mov	r2, r8
 8002866:	464b      	mov	r3, r9
 8002868:	f04f 0000 	mov.w	r0, #0
 800286c:	f04f 0100 	mov.w	r1, #0
 8002870:	0159      	lsls	r1, r3, #5
 8002872:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002876:	0150      	lsls	r0, r2, #5
 8002878:	4602      	mov	r2, r0
 800287a:	460b      	mov	r3, r1
 800287c:	4641      	mov	r1, r8
 800287e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002882:	4649      	mov	r1, r9
 8002884:	eb63 0b01 	sbc.w	fp, r3, r1
 8002888:	f04f 0200 	mov.w	r2, #0
 800288c:	f04f 0300 	mov.w	r3, #0
 8002890:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002894:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002898:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800289c:	ebb2 040a 	subs.w	r4, r2, sl
 80028a0:	eb63 050b 	sbc.w	r5, r3, fp
 80028a4:	f04f 0200 	mov.w	r2, #0
 80028a8:	f04f 0300 	mov.w	r3, #0
 80028ac:	00eb      	lsls	r3, r5, #3
 80028ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028b2:	00e2      	lsls	r2, r4, #3
 80028b4:	4614      	mov	r4, r2
 80028b6:	461d      	mov	r5, r3
 80028b8:	4643      	mov	r3, r8
 80028ba:	18e3      	adds	r3, r4, r3
 80028bc:	603b      	str	r3, [r7, #0]
 80028be:	464b      	mov	r3, r9
 80028c0:	eb45 0303 	adc.w	r3, r5, r3
 80028c4:	607b      	str	r3, [r7, #4]
 80028c6:	f04f 0200 	mov.w	r2, #0
 80028ca:	f04f 0300 	mov.w	r3, #0
 80028ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028d2:	4629      	mov	r1, r5
 80028d4:	028b      	lsls	r3, r1, #10
 80028d6:	4621      	mov	r1, r4
 80028d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028dc:	4621      	mov	r1, r4
 80028de:	028a      	lsls	r2, r1, #10
 80028e0:	4610      	mov	r0, r2
 80028e2:	4619      	mov	r1, r3
 80028e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028e6:	2200      	movs	r2, #0
 80028e8:	61bb      	str	r3, [r7, #24]
 80028ea:	61fa      	str	r2, [r7, #28]
 80028ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028f0:	f7fd fc72 	bl	80001d8 <__aeabi_uldivmod>
 80028f4:	4602      	mov	r2, r0
 80028f6:	460b      	mov	r3, r1
 80028f8:	4613      	mov	r3, r2
 80028fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80028fc:	4b0b      	ldr	r3, [pc, #44]	@ (800292c <HAL_RCC_GetSysClockFreq+0x200>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	0c1b      	lsrs	r3, r3, #16
 8002902:	f003 0303 	and.w	r3, r3, #3
 8002906:	3301      	adds	r3, #1
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800290c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800290e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002910:	fbb2 f3f3 	udiv	r3, r2, r3
 8002914:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002916:	e002      	b.n	800291e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002918:	4b05      	ldr	r3, [pc, #20]	@ (8002930 <HAL_RCC_GetSysClockFreq+0x204>)
 800291a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800291c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800291e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002920:	4618      	mov	r0, r3
 8002922:	3750      	adds	r7, #80	@ 0x50
 8002924:	46bd      	mov	sp, r7
 8002926:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800292a:	bf00      	nop
 800292c:	40023800 	.word	0x40023800
 8002930:	00f42400 	.word	0x00f42400
 8002934:	007a1200 	.word	0x007a1200

08002938 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800293c:	4b03      	ldr	r3, [pc, #12]	@ (800294c <HAL_RCC_GetHCLKFreq+0x14>)
 800293e:	681b      	ldr	r3, [r3, #0]
}
 8002940:	4618      	mov	r0, r3
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	2000000c 	.word	0x2000000c

08002950 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002954:	f7ff fff0 	bl	8002938 <HAL_RCC_GetHCLKFreq>
 8002958:	4602      	mov	r2, r0
 800295a:	4b05      	ldr	r3, [pc, #20]	@ (8002970 <HAL_RCC_GetPCLK1Freq+0x20>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	0a9b      	lsrs	r3, r3, #10
 8002960:	f003 0307 	and.w	r3, r3, #7
 8002964:	4903      	ldr	r1, [pc, #12]	@ (8002974 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002966:	5ccb      	ldrb	r3, [r1, r3]
 8002968:	fa22 f303 	lsr.w	r3, r2, r3
}
 800296c:	4618      	mov	r0, r3
 800296e:	bd80      	pop	{r7, pc}
 8002970:	40023800 	.word	0x40023800
 8002974:	080043f0 	.word	0x080043f0

08002978 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800297c:	f7ff ffdc 	bl	8002938 <HAL_RCC_GetHCLKFreq>
 8002980:	4602      	mov	r2, r0
 8002982:	4b05      	ldr	r3, [pc, #20]	@ (8002998 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	0b5b      	lsrs	r3, r3, #13
 8002988:	f003 0307 	and.w	r3, r3, #7
 800298c:	4903      	ldr	r1, [pc, #12]	@ (800299c <HAL_RCC_GetPCLK2Freq+0x24>)
 800298e:	5ccb      	ldrb	r3, [r1, r3]
 8002990:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002994:	4618      	mov	r0, r3
 8002996:	bd80      	pop	{r7, pc}
 8002998:	40023800 	.word	0x40023800
 800299c:	080043f0 	.word	0x080043f0

080029a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e041      	b.n	8002a36 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d106      	bne.n	80029cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f7fe fae8 	bl	8000f9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2202      	movs	r2, #2
 80029d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	3304      	adds	r3, #4
 80029dc:	4619      	mov	r1, r3
 80029de:	4610      	mov	r0, r2
 80029e0:	f000 f958 	bl	8002c94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
	...

08002a40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b085      	sub	sp, #20
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d001      	beq.n	8002a58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e044      	b.n	8002ae2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68da      	ldr	r2, [r3, #12]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f042 0201 	orr.w	r2, r2, #1
 8002a6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a1e      	ldr	r2, [pc, #120]	@ (8002af0 <HAL_TIM_Base_Start_IT+0xb0>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d018      	beq.n	8002aac <HAL_TIM_Base_Start_IT+0x6c>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a82:	d013      	beq.n	8002aac <HAL_TIM_Base_Start_IT+0x6c>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a1a      	ldr	r2, [pc, #104]	@ (8002af4 <HAL_TIM_Base_Start_IT+0xb4>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d00e      	beq.n	8002aac <HAL_TIM_Base_Start_IT+0x6c>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a19      	ldr	r2, [pc, #100]	@ (8002af8 <HAL_TIM_Base_Start_IT+0xb8>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d009      	beq.n	8002aac <HAL_TIM_Base_Start_IT+0x6c>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a17      	ldr	r2, [pc, #92]	@ (8002afc <HAL_TIM_Base_Start_IT+0xbc>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d004      	beq.n	8002aac <HAL_TIM_Base_Start_IT+0x6c>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a16      	ldr	r2, [pc, #88]	@ (8002b00 <HAL_TIM_Base_Start_IT+0xc0>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d111      	bne.n	8002ad0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f003 0307 	and.w	r3, r3, #7
 8002ab6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2b06      	cmp	r3, #6
 8002abc:	d010      	beq.n	8002ae0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f042 0201 	orr.w	r2, r2, #1
 8002acc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ace:	e007      	b.n	8002ae0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f042 0201 	orr.w	r2, r2, #1
 8002ade:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3714      	adds	r7, #20
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	40010000 	.word	0x40010000
 8002af4:	40000400 	.word	0x40000400
 8002af8:	40000800 	.word	0x40000800
 8002afc:	40000c00 	.word	0x40000c00
 8002b00:	40014000 	.word	0x40014000

08002b04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d101      	bne.n	8002b20 <HAL_TIM_ConfigClockSource+0x1c>
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	e0b4      	b.n	8002c8a <HAL_TIM_ConfigClockSource+0x186>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2202      	movs	r2, #2
 8002b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002b3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002b46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68ba      	ldr	r2, [r7, #8]
 8002b4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b58:	d03e      	beq.n	8002bd8 <HAL_TIM_ConfigClockSource+0xd4>
 8002b5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b5e:	f200 8087 	bhi.w	8002c70 <HAL_TIM_ConfigClockSource+0x16c>
 8002b62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b66:	f000 8086 	beq.w	8002c76 <HAL_TIM_ConfigClockSource+0x172>
 8002b6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b6e:	d87f      	bhi.n	8002c70 <HAL_TIM_ConfigClockSource+0x16c>
 8002b70:	2b70      	cmp	r3, #112	@ 0x70
 8002b72:	d01a      	beq.n	8002baa <HAL_TIM_ConfigClockSource+0xa6>
 8002b74:	2b70      	cmp	r3, #112	@ 0x70
 8002b76:	d87b      	bhi.n	8002c70 <HAL_TIM_ConfigClockSource+0x16c>
 8002b78:	2b60      	cmp	r3, #96	@ 0x60
 8002b7a:	d050      	beq.n	8002c1e <HAL_TIM_ConfigClockSource+0x11a>
 8002b7c:	2b60      	cmp	r3, #96	@ 0x60
 8002b7e:	d877      	bhi.n	8002c70 <HAL_TIM_ConfigClockSource+0x16c>
 8002b80:	2b50      	cmp	r3, #80	@ 0x50
 8002b82:	d03c      	beq.n	8002bfe <HAL_TIM_ConfigClockSource+0xfa>
 8002b84:	2b50      	cmp	r3, #80	@ 0x50
 8002b86:	d873      	bhi.n	8002c70 <HAL_TIM_ConfigClockSource+0x16c>
 8002b88:	2b40      	cmp	r3, #64	@ 0x40
 8002b8a:	d058      	beq.n	8002c3e <HAL_TIM_ConfigClockSource+0x13a>
 8002b8c:	2b40      	cmp	r3, #64	@ 0x40
 8002b8e:	d86f      	bhi.n	8002c70 <HAL_TIM_ConfigClockSource+0x16c>
 8002b90:	2b30      	cmp	r3, #48	@ 0x30
 8002b92:	d064      	beq.n	8002c5e <HAL_TIM_ConfigClockSource+0x15a>
 8002b94:	2b30      	cmp	r3, #48	@ 0x30
 8002b96:	d86b      	bhi.n	8002c70 <HAL_TIM_ConfigClockSource+0x16c>
 8002b98:	2b20      	cmp	r3, #32
 8002b9a:	d060      	beq.n	8002c5e <HAL_TIM_ConfigClockSource+0x15a>
 8002b9c:	2b20      	cmp	r3, #32
 8002b9e:	d867      	bhi.n	8002c70 <HAL_TIM_ConfigClockSource+0x16c>
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d05c      	beq.n	8002c5e <HAL_TIM_ConfigClockSource+0x15a>
 8002ba4:	2b10      	cmp	r3, #16
 8002ba6:	d05a      	beq.n	8002c5e <HAL_TIM_ConfigClockSource+0x15a>
 8002ba8:	e062      	b.n	8002c70 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002bba:	f000 f971 	bl	8002ea0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002bcc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68ba      	ldr	r2, [r7, #8]
 8002bd4:	609a      	str	r2, [r3, #8]
      break;
 8002bd6:	e04f      	b.n	8002c78 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002be8:	f000 f95a 	bl	8002ea0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	689a      	ldr	r2, [r3, #8]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002bfa:	609a      	str	r2, [r3, #8]
      break;
 8002bfc:	e03c      	b.n	8002c78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	f000 f8ce 	bl	8002dac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2150      	movs	r1, #80	@ 0x50
 8002c16:	4618      	mov	r0, r3
 8002c18:	f000 f927 	bl	8002e6a <TIM_ITRx_SetConfig>
      break;
 8002c1c:	e02c      	b.n	8002c78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	f000 f8ed 	bl	8002e0a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2160      	movs	r1, #96	@ 0x60
 8002c36:	4618      	mov	r0, r3
 8002c38:	f000 f917 	bl	8002e6a <TIM_ITRx_SetConfig>
      break;
 8002c3c:	e01c      	b.n	8002c78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	f000 f8ae 	bl	8002dac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2140      	movs	r1, #64	@ 0x40
 8002c56:	4618      	mov	r0, r3
 8002c58:	f000 f907 	bl	8002e6a <TIM_ITRx_SetConfig>
      break;
 8002c5c:	e00c      	b.n	8002c78 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4619      	mov	r1, r3
 8002c68:	4610      	mov	r0, r2
 8002c6a:	f000 f8fe 	bl	8002e6a <TIM_ITRx_SetConfig>
      break;
 8002c6e:	e003      	b.n	8002c78 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	73fb      	strb	r3, [r7, #15]
      break;
 8002c74:	e000      	b.n	8002c78 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002c76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3710      	adds	r7, #16
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
	...

08002c94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a3a      	ldr	r2, [pc, #232]	@ (8002d90 <TIM_Base_SetConfig+0xfc>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d00f      	beq.n	8002ccc <TIM_Base_SetConfig+0x38>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cb2:	d00b      	beq.n	8002ccc <TIM_Base_SetConfig+0x38>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4a37      	ldr	r2, [pc, #220]	@ (8002d94 <TIM_Base_SetConfig+0x100>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d007      	beq.n	8002ccc <TIM_Base_SetConfig+0x38>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4a36      	ldr	r2, [pc, #216]	@ (8002d98 <TIM_Base_SetConfig+0x104>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d003      	beq.n	8002ccc <TIM_Base_SetConfig+0x38>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a35      	ldr	r2, [pc, #212]	@ (8002d9c <TIM_Base_SetConfig+0x108>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d108      	bne.n	8002cde <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	68fa      	ldr	r2, [r7, #12]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a2b      	ldr	r2, [pc, #172]	@ (8002d90 <TIM_Base_SetConfig+0xfc>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d01b      	beq.n	8002d1e <TIM_Base_SetConfig+0x8a>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cec:	d017      	beq.n	8002d1e <TIM_Base_SetConfig+0x8a>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a28      	ldr	r2, [pc, #160]	@ (8002d94 <TIM_Base_SetConfig+0x100>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d013      	beq.n	8002d1e <TIM_Base_SetConfig+0x8a>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a27      	ldr	r2, [pc, #156]	@ (8002d98 <TIM_Base_SetConfig+0x104>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d00f      	beq.n	8002d1e <TIM_Base_SetConfig+0x8a>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a26      	ldr	r2, [pc, #152]	@ (8002d9c <TIM_Base_SetConfig+0x108>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d00b      	beq.n	8002d1e <TIM_Base_SetConfig+0x8a>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a25      	ldr	r2, [pc, #148]	@ (8002da0 <TIM_Base_SetConfig+0x10c>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d007      	beq.n	8002d1e <TIM_Base_SetConfig+0x8a>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a24      	ldr	r2, [pc, #144]	@ (8002da4 <TIM_Base_SetConfig+0x110>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d003      	beq.n	8002d1e <TIM_Base_SetConfig+0x8a>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a23      	ldr	r2, [pc, #140]	@ (8002da8 <TIM_Base_SetConfig+0x114>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d108      	bne.n	8002d30 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	68fa      	ldr	r2, [r7, #12]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68fa      	ldr	r2, [r7, #12]
 8002d42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	689a      	ldr	r2, [r3, #8]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4a0e      	ldr	r2, [pc, #56]	@ (8002d90 <TIM_Base_SetConfig+0xfc>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d103      	bne.n	8002d64 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	691a      	ldr	r2, [r3, #16]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d105      	bne.n	8002d82 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	f023 0201 	bic.w	r2, r3, #1
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	611a      	str	r2, [r3, #16]
  }
}
 8002d82:	bf00      	nop
 8002d84:	3714      	adds	r7, #20
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	40010000 	.word	0x40010000
 8002d94:	40000400 	.word	0x40000400
 8002d98:	40000800 	.word	0x40000800
 8002d9c:	40000c00 	.word	0x40000c00
 8002da0:	40014000 	.word	0x40014000
 8002da4:	40014400 	.word	0x40014400
 8002da8:	40014800 	.word	0x40014800

08002dac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b087      	sub	sp, #28
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
 8002dc2:	f023 0201 	bic.w	r2, r3, #1
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002dd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	011b      	lsls	r3, r3, #4
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	f023 030a 	bic.w	r3, r3, #10
 8002de8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002dea:	697a      	ldr	r2, [r7, #20]
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	697a      	ldr	r2, [r7, #20]
 8002dfc:	621a      	str	r2, [r3, #32]
}
 8002dfe:	bf00      	nop
 8002e00:	371c      	adds	r7, #28
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr

08002e0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	b087      	sub	sp, #28
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	60f8      	str	r0, [r7, #12]
 8002e12:	60b9      	str	r1, [r7, #8]
 8002e14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6a1b      	ldr	r3, [r3, #32]
 8002e1a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6a1b      	ldr	r3, [r3, #32]
 8002e20:	f023 0210 	bic.w	r2, r3, #16
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002e34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	031b      	lsls	r3, r3, #12
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002e46:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	011b      	lsls	r3, r3, #4
 8002e4c:	697a      	ldr	r2, [r7, #20]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	697a      	ldr	r2, [r7, #20]
 8002e5c:	621a      	str	r2, [r3, #32]
}
 8002e5e:	bf00      	nop
 8002e60:	371c      	adds	r7, #28
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr

08002e6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	b085      	sub	sp, #20
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
 8002e72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e82:	683a      	ldr	r2, [r7, #0]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	f043 0307 	orr.w	r3, r3, #7
 8002e8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	609a      	str	r2, [r3, #8]
}
 8002e94:	bf00      	nop
 8002e96:	3714      	adds	r7, #20
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b087      	sub	sp, #28
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
 8002eac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002eba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	021a      	lsls	r2, r3, #8
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	697a      	ldr	r2, [r7, #20]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	697a      	ldr	r2, [r7, #20]
 8002ed2:	609a      	str	r2, [r3, #8]
}
 8002ed4:	bf00      	nop
 8002ed6:	371c      	adds	r7, #28
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d101      	bne.n	8002ef8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	e050      	b.n	8002f9a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2202      	movs	r2, #2
 8002f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a1c      	ldr	r2, [pc, #112]	@ (8002fa8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d018      	beq.n	8002f6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f44:	d013      	beq.n	8002f6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a18      	ldr	r2, [pc, #96]	@ (8002fac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d00e      	beq.n	8002f6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a16      	ldr	r2, [pc, #88]	@ (8002fb0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d009      	beq.n	8002f6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a15      	ldr	r2, [pc, #84]	@ (8002fb4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d004      	beq.n	8002f6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a13      	ldr	r2, [pc, #76]	@ (8002fb8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d10c      	bne.n	8002f88 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	68ba      	ldr	r2, [r7, #8]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68ba      	ldr	r2, [r7, #8]
 8002f86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3714      	adds	r7, #20
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	40010000 	.word	0x40010000
 8002fac:	40000400 	.word	0x40000400
 8002fb0:	40000800 	.word	0x40000800
 8002fb4:	40000c00 	.word	0x40000c00
 8002fb8:	40014000 	.word	0x40014000

08002fbc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e042      	b.n	8003054 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d106      	bne.n	8002fe8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f7fd fffc 	bl	8000fe0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2224      	movs	r2, #36	@ 0x24
 8002fec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	68da      	ldr	r2, [r3, #12]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002ffe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f000 ff41 	bl	8003e88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	691a      	ldr	r2, [r3, #16]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003014:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	695a      	ldr	r2, [r3, #20]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003024:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68da      	ldr	r2, [r3, #12]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003034:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2220      	movs	r2, #32
 8003040:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2220      	movs	r2, #32
 8003048:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	3708      	adds	r7, #8
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b08c      	sub	sp, #48	@ 0x30
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	4613      	mov	r3, r2
 8003068:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003070:	b2db      	uxtb	r3, r3
 8003072:	2b20      	cmp	r3, #32
 8003074:	d156      	bne.n	8003124 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d002      	beq.n	8003082 <HAL_UART_Transmit_DMA+0x26>
 800307c:	88fb      	ldrh	r3, [r7, #6]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d101      	bne.n	8003086 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e04f      	b.n	8003126 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8003086:	68ba      	ldr	r2, [r7, #8]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	88fa      	ldrh	r2, [r7, #6]
 8003090:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	88fa      	ldrh	r2, [r7, #6]
 8003096:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2221      	movs	r2, #33	@ 0x21
 80030a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030aa:	4a21      	ldr	r2, [pc, #132]	@ (8003130 <HAL_UART_Transmit_DMA+0xd4>)
 80030ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030b2:	4a20      	ldr	r2, [pc, #128]	@ (8003134 <HAL_UART_Transmit_DMA+0xd8>)
 80030b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030ba:	4a1f      	ldr	r2, [pc, #124]	@ (8003138 <HAL_UART_Transmit_DMA+0xdc>)
 80030bc:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030c2:	2200      	movs	r2, #0
 80030c4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80030c6:	f107 0308 	add.w	r3, r7, #8
 80030ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80030d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030d2:	6819      	ldr	r1, [r3, #0]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	3304      	adds	r3, #4
 80030da:	461a      	mov	r2, r3
 80030dc:	88fb      	ldrh	r3, [r7, #6]
 80030de:	f7fe faef 	bl	80016c0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80030ea:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	3314      	adds	r3, #20
 80030f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	e853 3f00 	ldrex	r3, [r3]
 80030fa:	617b      	str	r3, [r7, #20]
   return(result);
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003102:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	3314      	adds	r3, #20
 800310a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800310c:	627a      	str	r2, [r7, #36]	@ 0x24
 800310e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003110:	6a39      	ldr	r1, [r7, #32]
 8003112:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003114:	e841 2300 	strex	r3, r2, [r1]
 8003118:	61fb      	str	r3, [r7, #28]
   return(result);
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1e5      	bne.n	80030ec <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8003120:	2300      	movs	r3, #0
 8003122:	e000      	b.n	8003126 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8003124:	2302      	movs	r3, #2
  }
}
 8003126:	4618      	mov	r0, r3
 8003128:	3730      	adds	r7, #48	@ 0x30
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	08003715 	.word	0x08003715
 8003134:	080037af 	.word	0x080037af
 8003138:	08003933 	.word	0x08003933

0800313c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	4613      	mov	r3, r2
 8003148:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003150:	b2db      	uxtb	r3, r3
 8003152:	2b20      	cmp	r3, #32
 8003154:	d112      	bne.n	800317c <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d002      	beq.n	8003162 <HAL_UART_Receive_DMA+0x26>
 800315c:	88fb      	ldrh	r3, [r7, #6]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e00b      	b.n	800317e <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800316c:	88fb      	ldrh	r3, [r7, #6]
 800316e:	461a      	mov	r2, r3
 8003170:	68b9      	ldr	r1, [r7, #8]
 8003172:	68f8      	ldr	r0, [r7, #12]
 8003174:	f000 fc28 	bl	80039c8 <UART_Start_Receive_DMA>
 8003178:	4603      	mov	r3, r0
 800317a:	e000      	b.n	800317e <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800317c:	2302      	movs	r3, #2
  }
}
 800317e:	4618      	mov	r0, r3
 8003180:	3710      	adds	r7, #16
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
	...

08003188 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b0ba      	sub	sp, #232	@ 0xe8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80031ae:	2300      	movs	r3, #0
 80031b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80031b4:	2300      	movs	r3, #0
 80031b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80031ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031be:	f003 030f 	and.w	r3, r3, #15
 80031c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80031c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d10f      	bne.n	80031ee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031d2:	f003 0320 	and.w	r3, r3, #32
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d009      	beq.n	80031ee <HAL_UART_IRQHandler+0x66>
 80031da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031de:	f003 0320 	and.w	r3, r3, #32
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d003      	beq.n	80031ee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 fd8f 	bl	8003d0a <UART_Receive_IT>
      return;
 80031ec:	e25b      	b.n	80036a6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80031ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	f000 80de 	beq.w	80033b4 <HAL_UART_IRQHandler+0x22c>
 80031f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031fc:	f003 0301 	and.w	r3, r3, #1
 8003200:	2b00      	cmp	r3, #0
 8003202:	d106      	bne.n	8003212 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003204:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003208:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800320c:	2b00      	cmp	r3, #0
 800320e:	f000 80d1 	beq.w	80033b4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00b      	beq.n	8003236 <HAL_UART_IRQHandler+0xae>
 800321e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003222:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003226:	2b00      	cmp	r3, #0
 8003228:	d005      	beq.n	8003236 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800322e:	f043 0201 	orr.w	r2, r3, #1
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003236:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800323a:	f003 0304 	and.w	r3, r3, #4
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00b      	beq.n	800325a <HAL_UART_IRQHandler+0xd2>
 8003242:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	2b00      	cmp	r3, #0
 800324c:	d005      	beq.n	800325a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003252:	f043 0202 	orr.w	r2, r3, #2
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800325a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00b      	beq.n	800327e <HAL_UART_IRQHandler+0xf6>
 8003266:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	2b00      	cmp	r3, #0
 8003270:	d005      	beq.n	800327e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003276:	f043 0204 	orr.w	r2, r3, #4
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800327e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003282:	f003 0308 	and.w	r3, r3, #8
 8003286:	2b00      	cmp	r3, #0
 8003288:	d011      	beq.n	80032ae <HAL_UART_IRQHandler+0x126>
 800328a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800328e:	f003 0320 	and.w	r3, r3, #32
 8003292:	2b00      	cmp	r3, #0
 8003294:	d105      	bne.n	80032a2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003296:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d005      	beq.n	80032ae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032a6:	f043 0208 	orr.w	r2, r3, #8
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	f000 81f2 	beq.w	800369c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032bc:	f003 0320 	and.w	r3, r3, #32
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d008      	beq.n	80032d6 <HAL_UART_IRQHandler+0x14e>
 80032c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032c8:	f003 0320 	and.w	r3, r3, #32
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d002      	beq.n	80032d6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f000 fd1a 	bl	8003d0a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	695b      	ldr	r3, [r3, #20]
 80032dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032e0:	2b40      	cmp	r3, #64	@ 0x40
 80032e2:	bf0c      	ite	eq
 80032e4:	2301      	moveq	r3, #1
 80032e6:	2300      	movne	r3, #0
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032f2:	f003 0308 	and.w	r3, r3, #8
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d103      	bne.n	8003302 <HAL_UART_IRQHandler+0x17a>
 80032fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d04f      	beq.n	80033a2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 fc22 	bl	8003b4c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003312:	2b40      	cmp	r3, #64	@ 0x40
 8003314:	d141      	bne.n	800339a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	3314      	adds	r3, #20
 800331c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003320:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003324:	e853 3f00 	ldrex	r3, [r3]
 8003328:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800332c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003330:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003334:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	3314      	adds	r3, #20
 800333e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003342:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003346:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800334a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800334e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003352:	e841 2300 	strex	r3, r2, [r1]
 8003356:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800335a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1d9      	bne.n	8003316 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003366:	2b00      	cmp	r3, #0
 8003368:	d013      	beq.n	8003392 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800336e:	4a7e      	ldr	r2, [pc, #504]	@ (8003568 <HAL_UART_IRQHandler+0x3e0>)
 8003370:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003376:	4618      	mov	r0, r3
 8003378:	f7fe fa6a 	bl	8001850 <HAL_DMA_Abort_IT>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d016      	beq.n	80033b0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003386:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800338c:	4610      	mov	r0, r2
 800338e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003390:	e00e      	b.n	80033b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 f9a8 	bl	80036e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003398:	e00a      	b.n	80033b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 f9a4 	bl	80036e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033a0:	e006      	b.n	80033b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 f9a0 	bl	80036e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80033ae:	e175      	b.n	800369c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033b0:	bf00      	nop
    return;
 80033b2:	e173      	b.n	800369c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	f040 814f 	bne.w	800365c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80033be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033c2:	f003 0310 	and.w	r3, r3, #16
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	f000 8148 	beq.w	800365c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80033cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033d0:	f003 0310 	and.w	r3, r3, #16
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f000 8141 	beq.w	800365c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80033da:	2300      	movs	r3, #0
 80033dc:	60bb      	str	r3, [r7, #8]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	60bb      	str	r3, [r7, #8]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	60bb      	str	r3, [r7, #8]
 80033ee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033fa:	2b40      	cmp	r3, #64	@ 0x40
 80033fc:	f040 80b6 	bne.w	800356c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800340c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003410:	2b00      	cmp	r3, #0
 8003412:	f000 8145 	beq.w	80036a0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800341a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800341e:	429a      	cmp	r2, r3
 8003420:	f080 813e 	bcs.w	80036a0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800342a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003430:	69db      	ldr	r3, [r3, #28]
 8003432:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003436:	f000 8088 	beq.w	800354a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	330c      	adds	r3, #12
 8003440:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003444:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003448:	e853 3f00 	ldrex	r3, [r3]
 800344c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003450:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003454:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003458:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	330c      	adds	r3, #12
 8003462:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003466:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800346a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800346e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003472:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003476:	e841 2300 	strex	r3, r2, [r1]
 800347a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800347e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1d9      	bne.n	800343a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	3314      	adds	r3, #20
 800348c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800348e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003490:	e853 3f00 	ldrex	r3, [r3]
 8003494:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003496:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003498:	f023 0301 	bic.w	r3, r3, #1
 800349c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	3314      	adds	r3, #20
 80034a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80034aa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80034ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034b0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80034b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80034b6:	e841 2300 	strex	r3, r2, [r1]
 80034ba:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80034bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1e1      	bne.n	8003486 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	3314      	adds	r3, #20
 80034c8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80034cc:	e853 3f00 	ldrex	r3, [r3]
 80034d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80034d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80034d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	3314      	adds	r3, #20
 80034e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80034e6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80034e8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ea:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80034ec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80034ee:	e841 2300 	strex	r3, r2, [r1]
 80034f2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80034f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1e3      	bne.n	80034c2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2220      	movs	r2, #32
 80034fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	330c      	adds	r3, #12
 800350e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003510:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003512:	e853 3f00 	ldrex	r3, [r3]
 8003516:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003518:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800351a:	f023 0310 	bic.w	r3, r3, #16
 800351e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	330c      	adds	r3, #12
 8003528:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800352c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800352e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003530:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003532:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003534:	e841 2300 	strex	r3, r2, [r1]
 8003538:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800353a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800353c:	2b00      	cmp	r3, #0
 800353e:	d1e3      	bne.n	8003508 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003544:	4618      	mov	r0, r3
 8003546:	f7fe f913 	bl	8001770 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2202      	movs	r2, #2
 800354e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003558:	b29b      	uxth	r3, r3
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	b29b      	uxth	r3, r3
 800355e:	4619      	mov	r1, r3
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f000 f8cb 	bl	80036fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003566:	e09b      	b.n	80036a0 <HAL_UART_IRQHandler+0x518>
 8003568:	08003c13 	.word	0x08003c13
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003574:	b29b      	uxth	r3, r3
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003580:	b29b      	uxth	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	f000 808e 	beq.w	80036a4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003588:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800358c:	2b00      	cmp	r3, #0
 800358e:	f000 8089 	beq.w	80036a4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	330c      	adds	r3, #12
 8003598:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800359a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800359c:	e853 3f00 	ldrex	r3, [r3]
 80035a0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80035a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80035a8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	330c      	adds	r3, #12
 80035b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80035b6:	647a      	str	r2, [r7, #68]	@ 0x44
 80035b8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80035bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80035be:	e841 2300 	strex	r3, r2, [r1]
 80035c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80035c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1e3      	bne.n	8003592 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	3314      	adds	r3, #20
 80035d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d4:	e853 3f00 	ldrex	r3, [r3]
 80035d8:	623b      	str	r3, [r7, #32]
   return(result);
 80035da:	6a3b      	ldr	r3, [r7, #32]
 80035dc:	f023 0301 	bic.w	r3, r3, #1
 80035e0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	3314      	adds	r3, #20
 80035ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80035ee:	633a      	str	r2, [r7, #48]	@ 0x30
 80035f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80035f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035f6:	e841 2300 	strex	r3, r2, [r1]
 80035fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80035fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1e3      	bne.n	80035ca <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2220      	movs	r2, #32
 8003606:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	330c      	adds	r3, #12
 8003616:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	e853 3f00 	ldrex	r3, [r3]
 800361e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f023 0310 	bic.w	r3, r3, #16
 8003626:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	330c      	adds	r3, #12
 8003630:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003634:	61fa      	str	r2, [r7, #28]
 8003636:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003638:	69b9      	ldr	r1, [r7, #24]
 800363a:	69fa      	ldr	r2, [r7, #28]
 800363c:	e841 2300 	strex	r3, r2, [r1]
 8003640:	617b      	str	r3, [r7, #20]
   return(result);
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d1e3      	bne.n	8003610 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2202      	movs	r2, #2
 800364c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800364e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003652:	4619      	mov	r1, r3
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 f851 	bl	80036fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800365a:	e023      	b.n	80036a4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800365c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003660:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003664:	2b00      	cmp	r3, #0
 8003666:	d009      	beq.n	800367c <HAL_UART_IRQHandler+0x4f4>
 8003668:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800366c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003670:	2b00      	cmp	r3, #0
 8003672:	d003      	beq.n	800367c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f000 fae0 	bl	8003c3a <UART_Transmit_IT>
    return;
 800367a:	e014      	b.n	80036a6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800367c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003680:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003684:	2b00      	cmp	r3, #0
 8003686:	d00e      	beq.n	80036a6 <HAL_UART_IRQHandler+0x51e>
 8003688:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800368c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003690:	2b00      	cmp	r3, #0
 8003692:	d008      	beq.n	80036a6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 fb20 	bl	8003cda <UART_EndTransmit_IT>
    return;
 800369a:	e004      	b.n	80036a6 <HAL_UART_IRQHandler+0x51e>
    return;
 800369c:	bf00      	nop
 800369e:	e002      	b.n	80036a6 <HAL_UART_IRQHandler+0x51e>
      return;
 80036a0:	bf00      	nop
 80036a2:	e000      	b.n	80036a6 <HAL_UART_IRQHandler+0x51e>
      return;
 80036a4:	bf00      	nop
  }
}
 80036a6:	37e8      	adds	r7, #232	@ 0xe8
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80036b4:	bf00      	nop
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80036c8:	bf00      	nop
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	460b      	mov	r3, r1
 8003706:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003708:	bf00      	nop
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b090      	sub	sp, #64	@ 0x40
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003720:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800372c:	2b00      	cmp	r3, #0
 800372e:	d137      	bne.n	80037a0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8003730:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003732:	2200      	movs	r2, #0
 8003734:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003736:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	3314      	adds	r3, #20
 800373c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800373e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003740:	e853 3f00 	ldrex	r3, [r3]
 8003744:	623b      	str	r3, [r7, #32]
   return(result);
 8003746:	6a3b      	ldr	r3, [r7, #32]
 8003748:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800374c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800374e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	3314      	adds	r3, #20
 8003754:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003756:	633a      	str	r2, [r7, #48]	@ 0x30
 8003758:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800375a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800375c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800375e:	e841 2300 	strex	r3, r2, [r1]
 8003762:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1e5      	bne.n	8003736 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800376a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	330c      	adds	r3, #12
 8003770:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	e853 3f00 	ldrex	r3, [r3]
 8003778:	60fb      	str	r3, [r7, #12]
   return(result);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003780:	637b      	str	r3, [r7, #52]	@ 0x34
 8003782:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	330c      	adds	r3, #12
 8003788:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800378a:	61fa      	str	r2, [r7, #28]
 800378c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800378e:	69b9      	ldr	r1, [r7, #24]
 8003790:	69fa      	ldr	r2, [r7, #28]
 8003792:	e841 2300 	strex	r3, r2, [r1]
 8003796:	617b      	str	r3, [r7, #20]
   return(result);
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d1e5      	bne.n	800376a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800379e:	e002      	b.n	80037a6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80037a0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80037a2:	f7ff ff83 	bl	80036ac <HAL_UART_TxCpltCallback>
}
 80037a6:	bf00      	nop
 80037a8:	3740      	adds	r7, #64	@ 0x40
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b084      	sub	sp, #16
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037ba:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80037bc:	68f8      	ldr	r0, [r7, #12]
 80037be:	f7ff ff7f 	bl	80036c0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037c2:	bf00      	nop
 80037c4:	3710      	adds	r7, #16
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b09c      	sub	sp, #112	@ 0x70
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037d6:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d172      	bne.n	80038cc <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80037e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037e8:	2200      	movs	r2, #0
 80037ea:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80037ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	330c      	adds	r3, #12
 80037f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037f6:	e853 3f00 	ldrex	r3, [r3]
 80037fa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80037fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037fe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003802:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003804:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	330c      	adds	r3, #12
 800380a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800380c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800380e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003810:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003812:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003814:	e841 2300 	strex	r3, r2, [r1]
 8003818:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800381a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800381c:	2b00      	cmp	r3, #0
 800381e:	d1e5      	bne.n	80037ec <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003820:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	3314      	adds	r3, #20
 8003826:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800382a:	e853 3f00 	ldrex	r3, [r3]
 800382e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003830:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003832:	f023 0301 	bic.w	r3, r3, #1
 8003836:	667b      	str	r3, [r7, #100]	@ 0x64
 8003838:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	3314      	adds	r3, #20
 800383e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003840:	647a      	str	r2, [r7, #68]	@ 0x44
 8003842:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003844:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003846:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003848:	e841 2300 	strex	r3, r2, [r1]
 800384c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800384e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003850:	2b00      	cmp	r3, #0
 8003852:	d1e5      	bne.n	8003820 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003854:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	3314      	adds	r3, #20
 800385a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800385c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800385e:	e853 3f00 	ldrex	r3, [r3]
 8003862:	623b      	str	r3, [r7, #32]
   return(result);
 8003864:	6a3b      	ldr	r3, [r7, #32]
 8003866:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800386a:	663b      	str	r3, [r7, #96]	@ 0x60
 800386c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	3314      	adds	r3, #20
 8003872:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003874:	633a      	str	r2, [r7, #48]	@ 0x30
 8003876:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003878:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800387a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800387c:	e841 2300 	strex	r3, r2, [r1]
 8003880:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003884:	2b00      	cmp	r3, #0
 8003886:	d1e5      	bne.n	8003854 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003888:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800388a:	2220      	movs	r2, #32
 800388c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003890:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003894:	2b01      	cmp	r3, #1
 8003896:	d119      	bne.n	80038cc <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003898:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	330c      	adds	r3, #12
 800389e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	e853 3f00 	ldrex	r3, [r3]
 80038a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f023 0310 	bic.w	r3, r3, #16
 80038ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80038b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	330c      	adds	r3, #12
 80038b6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80038b8:	61fa      	str	r2, [r7, #28]
 80038ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038bc:	69b9      	ldr	r1, [r7, #24]
 80038be:	69fa      	ldr	r2, [r7, #28]
 80038c0:	e841 2300 	strex	r3, r2, [r1]
 80038c4:	617b      	str	r3, [r7, #20]
   return(result);
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d1e5      	bne.n	8003898 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038ce:	2200      	movs	r2, #0
 80038d0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d106      	bne.n	80038e8 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80038da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038dc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80038de:	4619      	mov	r1, r3
 80038e0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80038e2:	f7ff ff0b 	bl	80036fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80038e6:	e002      	b.n	80038ee <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80038e8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80038ea:	f7fd fb0b 	bl	8000f04 <HAL_UART_RxCpltCallback>
}
 80038ee:	bf00      	nop
 80038f0:	3770      	adds	r7, #112	@ 0x70
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b084      	sub	sp, #16
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003902:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2201      	movs	r2, #1
 8003908:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800390e:	2b01      	cmp	r3, #1
 8003910:	d108      	bne.n	8003924 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003916:	085b      	lsrs	r3, r3, #1
 8003918:	b29b      	uxth	r3, r3
 800391a:	4619      	mov	r1, r3
 800391c:	68f8      	ldr	r0, [r7, #12]
 800391e:	f7ff feed 	bl	80036fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003922:	e002      	b.n	800392a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003924:	68f8      	ldr	r0, [r7, #12]
 8003926:	f7ff fed5 	bl	80036d4 <HAL_UART_RxHalfCpltCallback>
}
 800392a:	bf00      	nop
 800392c:	3710      	adds	r7, #16
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}

08003932 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003932:	b580      	push	{r7, lr}
 8003934:	b084      	sub	sp, #16
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800393a:	2300      	movs	r3, #0
 800393c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003942:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800394e:	2b80      	cmp	r3, #128	@ 0x80
 8003950:	bf0c      	ite	eq
 8003952:	2301      	moveq	r3, #1
 8003954:	2300      	movne	r3, #0
 8003956:	b2db      	uxtb	r3, r3
 8003958:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003960:	b2db      	uxtb	r3, r3
 8003962:	2b21      	cmp	r3, #33	@ 0x21
 8003964:	d108      	bne.n	8003978 <UART_DMAError+0x46>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d005      	beq.n	8003978 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	2200      	movs	r2, #0
 8003970:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8003972:	68b8      	ldr	r0, [r7, #8]
 8003974:	f000 f8c2 	bl	8003afc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003982:	2b40      	cmp	r3, #64	@ 0x40
 8003984:	bf0c      	ite	eq
 8003986:	2301      	moveq	r3, #1
 8003988:	2300      	movne	r3, #0
 800398a:	b2db      	uxtb	r3, r3
 800398c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b22      	cmp	r3, #34	@ 0x22
 8003998:	d108      	bne.n	80039ac <UART_DMAError+0x7a>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d005      	beq.n	80039ac <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	2200      	movs	r2, #0
 80039a4:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80039a6:	68b8      	ldr	r0, [r7, #8]
 80039a8:	f000 f8d0 	bl	8003b4c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039b0:	f043 0210 	orr.w	r2, r3, #16
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039b8:	68b8      	ldr	r0, [r7, #8]
 80039ba:	f7ff fe95 	bl	80036e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039be:	bf00      	nop
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
	...

080039c8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b098      	sub	sp, #96	@ 0x60
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	4613      	mov	r3, r2
 80039d4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80039d6:	68ba      	ldr	r2, [r7, #8]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	88fa      	ldrh	r2, [r7, #6]
 80039e0:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2222      	movs	r2, #34	@ 0x22
 80039ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039f4:	4a3e      	ldr	r2, [pc, #248]	@ (8003af0 <UART_Start_Receive_DMA+0x128>)
 80039f6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039fc:	4a3d      	ldr	r2, [pc, #244]	@ (8003af4 <UART_Start_Receive_DMA+0x12c>)
 80039fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a04:	4a3c      	ldr	r2, [pc, #240]	@ (8003af8 <UART_Start_Receive_DMA+0x130>)
 8003a06:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003a10:	f107 0308 	add.w	r3, r7, #8
 8003a14:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	3304      	adds	r3, #4
 8003a20:	4619      	mov	r1, r3
 8003a22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	88fb      	ldrh	r3, [r7, #6]
 8003a28:	f7fd fe4a 	bl	80016c0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	613b      	str	r3, [r7, #16]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	613b      	str	r3, [r7, #16]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	613b      	str	r3, [r7, #16]
 8003a40:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d019      	beq.n	8003a7e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	330c      	adds	r3, #12
 8003a50:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a54:	e853 3f00 	ldrex	r3, [r3]
 8003a58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a60:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	330c      	adds	r3, #12
 8003a68:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003a6a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003a6c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a6e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003a70:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a72:	e841 2300 	strex	r3, r2, [r1]
 8003a76:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003a78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1e5      	bne.n	8003a4a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	3314      	adds	r3, #20
 8003a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a88:	e853 3f00 	ldrex	r3, [r3]
 8003a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a90:	f043 0301 	orr.w	r3, r3, #1
 8003a94:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	3314      	adds	r3, #20
 8003a9c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003a9e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003aa0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003aa4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003aa6:	e841 2300 	strex	r3, r2, [r1]
 8003aaa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d1e5      	bne.n	8003a7e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	3314      	adds	r3, #20
 8003ab8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	e853 3f00 	ldrex	r3, [r3]
 8003ac0:	617b      	str	r3, [r7, #20]
   return(result);
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ac8:	653b      	str	r3, [r7, #80]	@ 0x50
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	3314      	adds	r3, #20
 8003ad0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003ad2:	627a      	str	r2, [r7, #36]	@ 0x24
 8003ad4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad6:	6a39      	ldr	r1, [r7, #32]
 8003ad8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ada:	e841 2300 	strex	r3, r2, [r1]
 8003ade:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1e5      	bne.n	8003ab2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8003ae6:	2300      	movs	r3, #0
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3760      	adds	r7, #96	@ 0x60
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	080037cb 	.word	0x080037cb
 8003af4:	080038f7 	.word	0x080038f7
 8003af8:	08003933 	.word	0x08003933

08003afc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b089      	sub	sp, #36	@ 0x24
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	330c      	adds	r3, #12
 8003b0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	e853 3f00 	ldrex	r3, [r3]
 8003b12:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003b1a:	61fb      	str	r3, [r7, #28]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	330c      	adds	r3, #12
 8003b22:	69fa      	ldr	r2, [r7, #28]
 8003b24:	61ba      	str	r2, [r7, #24]
 8003b26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b28:	6979      	ldr	r1, [r7, #20]
 8003b2a:	69ba      	ldr	r2, [r7, #24]
 8003b2c:	e841 2300 	strex	r3, r2, [r1]
 8003b30:	613b      	str	r3, [r7, #16]
   return(result);
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d1e5      	bne.n	8003b04 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8003b40:	bf00      	nop
 8003b42:	3724      	adds	r7, #36	@ 0x24
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b095      	sub	sp, #84	@ 0x54
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	330c      	adds	r3, #12
 8003b5a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b5e:	e853 3f00 	ldrex	r3, [r3]
 8003b62:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b66:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	330c      	adds	r3, #12
 8003b72:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003b74:	643a      	str	r2, [r7, #64]	@ 0x40
 8003b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b78:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003b7a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003b7c:	e841 2300 	strex	r3, r2, [r1]
 8003b80:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d1e5      	bne.n	8003b54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	3314      	adds	r3, #20
 8003b8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b90:	6a3b      	ldr	r3, [r7, #32]
 8003b92:	e853 3f00 	ldrex	r3, [r3]
 8003b96:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	f023 0301 	bic.w	r3, r3, #1
 8003b9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	3314      	adds	r3, #20
 8003ba6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ba8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003baa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003bae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003bb0:	e841 2300 	strex	r3, r2, [r1]
 8003bb4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d1e5      	bne.n	8003b88 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d119      	bne.n	8003bf8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	330c      	adds	r3, #12
 8003bca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	e853 3f00 	ldrex	r3, [r3]
 8003bd2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	f023 0310 	bic.w	r3, r3, #16
 8003bda:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	330c      	adds	r3, #12
 8003be2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003be4:	61ba      	str	r2, [r7, #24]
 8003be6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be8:	6979      	ldr	r1, [r7, #20]
 8003bea:	69ba      	ldr	r2, [r7, #24]
 8003bec:	e841 2300 	strex	r3, r2, [r1]
 8003bf0:	613b      	str	r3, [r7, #16]
   return(result);
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d1e5      	bne.n	8003bc4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2220      	movs	r2, #32
 8003bfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003c06:	bf00      	nop
 8003c08:	3754      	adds	r7, #84	@ 0x54
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr

08003c12 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c12:	b580      	push	{r7, lr}
 8003c14:	b084      	sub	sp, #16
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c1e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2200      	movs	r2, #0
 8003c24:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c2c:	68f8      	ldr	r0, [r7, #12]
 8003c2e:	f7ff fd5b 	bl	80036e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c32:	bf00      	nop
 8003c34:	3710      	adds	r7, #16
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	b085      	sub	sp, #20
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b21      	cmp	r3, #33	@ 0x21
 8003c4c:	d13e      	bne.n	8003ccc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c56:	d114      	bne.n	8003c82 <UART_Transmit_IT+0x48>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d110      	bne.n	8003c82 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a1b      	ldr	r3, [r3, #32]
 8003c64:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	881b      	ldrh	r3, [r3, #0]
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c74:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a1b      	ldr	r3, [r3, #32]
 8003c7a:	1c9a      	adds	r2, r3, #2
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	621a      	str	r2, [r3, #32]
 8003c80:	e008      	b.n	8003c94 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a1b      	ldr	r3, [r3, #32]
 8003c86:	1c59      	adds	r1, r3, #1
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	6211      	str	r1, [r2, #32]
 8003c8c:	781a      	ldrb	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d10f      	bne.n	8003cc8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68da      	ldr	r2, [r3, #12]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003cb6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68da      	ldr	r2, [r3, #12]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003cc6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	e000      	b.n	8003cce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003ccc:	2302      	movs	r3, #2
  }
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3714      	adds	r7, #20
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr

08003cda <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b082      	sub	sp, #8
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68da      	ldr	r2, [r3, #12]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003cf0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2220      	movs	r2, #32
 8003cf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f7ff fcd6 	bl	80036ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3708      	adds	r7, #8
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	b08c      	sub	sp, #48	@ 0x30
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2b22      	cmp	r3, #34	@ 0x22
 8003d1c:	f040 80ae 	bne.w	8003e7c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d28:	d117      	bne.n	8003d5a <UART_Receive_IT+0x50>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d113      	bne.n	8003d5a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003d32:	2300      	movs	r3, #0
 8003d34:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d48:	b29a      	uxth	r2, r3
 8003d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d4c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d52:	1c9a      	adds	r2, r3, #2
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	629a      	str	r2, [r3, #40]	@ 0x28
 8003d58:	e026      	b.n	8003da8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003d60:	2300      	movs	r3, #0
 8003d62:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d6c:	d007      	beq.n	8003d7e <UART_Receive_IT+0x74>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d10a      	bne.n	8003d8c <UART_Receive_IT+0x82>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d106      	bne.n	8003d8c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	b2da      	uxtb	r2, r3
 8003d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d88:	701a      	strb	r2, [r3, #0]
 8003d8a:	e008      	b.n	8003d9e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d98:	b2da      	uxtb	r2, r3
 8003d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d9c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003da2:	1c5a      	adds	r2, r3, #1
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	3b01      	subs	r3, #1
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	4619      	mov	r1, r3
 8003db6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d15d      	bne.n	8003e78 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68da      	ldr	r2, [r3, #12]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f022 0220 	bic.w	r2, r2, #32
 8003dca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68da      	ldr	r2, [r3, #12]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003dda:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	695a      	ldr	r2, [r3, #20]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f022 0201 	bic.w	r2, r2, #1
 8003dea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2220      	movs	r2, #32
 8003df0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d135      	bne.n	8003e6e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	330c      	adds	r3, #12
 8003e0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	e853 3f00 	ldrex	r3, [r3]
 8003e16:	613b      	str	r3, [r7, #16]
   return(result);
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	f023 0310 	bic.w	r3, r3, #16
 8003e1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	330c      	adds	r3, #12
 8003e26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e28:	623a      	str	r2, [r7, #32]
 8003e2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e2c:	69f9      	ldr	r1, [r7, #28]
 8003e2e:	6a3a      	ldr	r2, [r7, #32]
 8003e30:	e841 2300 	strex	r3, r2, [r1]
 8003e34:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d1e5      	bne.n	8003e08 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0310 	and.w	r3, r3, #16
 8003e46:	2b10      	cmp	r3, #16
 8003e48:	d10a      	bne.n	8003e60 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	60fb      	str	r3, [r7, #12]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	60fb      	str	r3, [r7, #12]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	60fb      	str	r3, [r7, #12]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003e64:	4619      	mov	r1, r3
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f7ff fc48 	bl	80036fc <HAL_UARTEx_RxEventCallback>
 8003e6c:	e002      	b.n	8003e74 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f7fd f848 	bl	8000f04 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003e74:	2300      	movs	r3, #0
 8003e76:	e002      	b.n	8003e7e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	e000      	b.n	8003e7e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003e7c:	2302      	movs	r3, #2
  }
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3730      	adds	r7, #48	@ 0x30
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
	...

08003e88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e8c:	b0c0      	sub	sp, #256	@ 0x100
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	691b      	ldr	r3, [r3, #16]
 8003e9c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ea4:	68d9      	ldr	r1, [r3, #12]
 8003ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	ea40 0301 	orr.w	r3, r0, r1
 8003eb0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eb6:	689a      	ldr	r2, [r3, #8]
 8003eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	431a      	orrs	r2, r3
 8003ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ecc:	69db      	ldr	r3, [r3, #28]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003ee0:	f021 010c 	bic.w	r1, r1, #12
 8003ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003eee:	430b      	orrs	r3, r1
 8003ef0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f02:	6999      	ldr	r1, [r3, #24]
 8003f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	ea40 0301 	orr.w	r3, r0, r1
 8003f0e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	4b8f      	ldr	r3, [pc, #572]	@ (8004154 <UART_SetConfig+0x2cc>)
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d005      	beq.n	8003f28 <UART_SetConfig+0xa0>
 8003f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	4b8d      	ldr	r3, [pc, #564]	@ (8004158 <UART_SetConfig+0x2d0>)
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d104      	bne.n	8003f32 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f28:	f7fe fd26 	bl	8002978 <HAL_RCC_GetPCLK2Freq>
 8003f2c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003f30:	e003      	b.n	8003f3a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f32:	f7fe fd0d 	bl	8002950 <HAL_RCC_GetPCLK1Freq>
 8003f36:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f3e:	69db      	ldr	r3, [r3, #28]
 8003f40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f44:	f040 810c 	bne.w	8004160 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003f52:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003f56:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003f5a:	4622      	mov	r2, r4
 8003f5c:	462b      	mov	r3, r5
 8003f5e:	1891      	adds	r1, r2, r2
 8003f60:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003f62:	415b      	adcs	r3, r3
 8003f64:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003f66:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003f6a:	4621      	mov	r1, r4
 8003f6c:	eb12 0801 	adds.w	r8, r2, r1
 8003f70:	4629      	mov	r1, r5
 8003f72:	eb43 0901 	adc.w	r9, r3, r1
 8003f76:	f04f 0200 	mov.w	r2, #0
 8003f7a:	f04f 0300 	mov.w	r3, #0
 8003f7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f8a:	4690      	mov	r8, r2
 8003f8c:	4699      	mov	r9, r3
 8003f8e:	4623      	mov	r3, r4
 8003f90:	eb18 0303 	adds.w	r3, r8, r3
 8003f94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003f98:	462b      	mov	r3, r5
 8003f9a:	eb49 0303 	adc.w	r3, r9, r3
 8003f9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003fae:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003fb2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003fb6:	460b      	mov	r3, r1
 8003fb8:	18db      	adds	r3, r3, r3
 8003fba:	653b      	str	r3, [r7, #80]	@ 0x50
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	eb42 0303 	adc.w	r3, r2, r3
 8003fc2:	657b      	str	r3, [r7, #84]	@ 0x54
 8003fc4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003fc8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003fcc:	f7fc f904 	bl	80001d8 <__aeabi_uldivmod>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	4b61      	ldr	r3, [pc, #388]	@ (800415c <UART_SetConfig+0x2d4>)
 8003fd6:	fba3 2302 	umull	r2, r3, r3, r2
 8003fda:	095b      	lsrs	r3, r3, #5
 8003fdc:	011c      	lsls	r4, r3, #4
 8003fde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003fe8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003fec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003ff0:	4642      	mov	r2, r8
 8003ff2:	464b      	mov	r3, r9
 8003ff4:	1891      	adds	r1, r2, r2
 8003ff6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003ff8:	415b      	adcs	r3, r3
 8003ffa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ffc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004000:	4641      	mov	r1, r8
 8004002:	eb12 0a01 	adds.w	sl, r2, r1
 8004006:	4649      	mov	r1, r9
 8004008:	eb43 0b01 	adc.w	fp, r3, r1
 800400c:	f04f 0200 	mov.w	r2, #0
 8004010:	f04f 0300 	mov.w	r3, #0
 8004014:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004018:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800401c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004020:	4692      	mov	sl, r2
 8004022:	469b      	mov	fp, r3
 8004024:	4643      	mov	r3, r8
 8004026:	eb1a 0303 	adds.w	r3, sl, r3
 800402a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800402e:	464b      	mov	r3, r9
 8004030:	eb4b 0303 	adc.w	r3, fp, r3
 8004034:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004044:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004048:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800404c:	460b      	mov	r3, r1
 800404e:	18db      	adds	r3, r3, r3
 8004050:	643b      	str	r3, [r7, #64]	@ 0x40
 8004052:	4613      	mov	r3, r2
 8004054:	eb42 0303 	adc.w	r3, r2, r3
 8004058:	647b      	str	r3, [r7, #68]	@ 0x44
 800405a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800405e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004062:	f7fc f8b9 	bl	80001d8 <__aeabi_uldivmod>
 8004066:	4602      	mov	r2, r0
 8004068:	460b      	mov	r3, r1
 800406a:	4611      	mov	r1, r2
 800406c:	4b3b      	ldr	r3, [pc, #236]	@ (800415c <UART_SetConfig+0x2d4>)
 800406e:	fba3 2301 	umull	r2, r3, r3, r1
 8004072:	095b      	lsrs	r3, r3, #5
 8004074:	2264      	movs	r2, #100	@ 0x64
 8004076:	fb02 f303 	mul.w	r3, r2, r3
 800407a:	1acb      	subs	r3, r1, r3
 800407c:	00db      	lsls	r3, r3, #3
 800407e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004082:	4b36      	ldr	r3, [pc, #216]	@ (800415c <UART_SetConfig+0x2d4>)
 8004084:	fba3 2302 	umull	r2, r3, r3, r2
 8004088:	095b      	lsrs	r3, r3, #5
 800408a:	005b      	lsls	r3, r3, #1
 800408c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004090:	441c      	add	r4, r3
 8004092:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004096:	2200      	movs	r2, #0
 8004098:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800409c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80040a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80040a4:	4642      	mov	r2, r8
 80040a6:	464b      	mov	r3, r9
 80040a8:	1891      	adds	r1, r2, r2
 80040aa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80040ac:	415b      	adcs	r3, r3
 80040ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80040b4:	4641      	mov	r1, r8
 80040b6:	1851      	adds	r1, r2, r1
 80040b8:	6339      	str	r1, [r7, #48]	@ 0x30
 80040ba:	4649      	mov	r1, r9
 80040bc:	414b      	adcs	r3, r1
 80040be:	637b      	str	r3, [r7, #52]	@ 0x34
 80040c0:	f04f 0200 	mov.w	r2, #0
 80040c4:	f04f 0300 	mov.w	r3, #0
 80040c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80040cc:	4659      	mov	r1, fp
 80040ce:	00cb      	lsls	r3, r1, #3
 80040d0:	4651      	mov	r1, sl
 80040d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040d6:	4651      	mov	r1, sl
 80040d8:	00ca      	lsls	r2, r1, #3
 80040da:	4610      	mov	r0, r2
 80040dc:	4619      	mov	r1, r3
 80040de:	4603      	mov	r3, r0
 80040e0:	4642      	mov	r2, r8
 80040e2:	189b      	adds	r3, r3, r2
 80040e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80040e8:	464b      	mov	r3, r9
 80040ea:	460a      	mov	r2, r1
 80040ec:	eb42 0303 	adc.w	r3, r2, r3
 80040f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80040f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004100:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004104:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004108:	460b      	mov	r3, r1
 800410a:	18db      	adds	r3, r3, r3
 800410c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800410e:	4613      	mov	r3, r2
 8004110:	eb42 0303 	adc.w	r3, r2, r3
 8004114:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004116:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800411a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800411e:	f7fc f85b 	bl	80001d8 <__aeabi_uldivmod>
 8004122:	4602      	mov	r2, r0
 8004124:	460b      	mov	r3, r1
 8004126:	4b0d      	ldr	r3, [pc, #52]	@ (800415c <UART_SetConfig+0x2d4>)
 8004128:	fba3 1302 	umull	r1, r3, r3, r2
 800412c:	095b      	lsrs	r3, r3, #5
 800412e:	2164      	movs	r1, #100	@ 0x64
 8004130:	fb01 f303 	mul.w	r3, r1, r3
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	00db      	lsls	r3, r3, #3
 8004138:	3332      	adds	r3, #50	@ 0x32
 800413a:	4a08      	ldr	r2, [pc, #32]	@ (800415c <UART_SetConfig+0x2d4>)
 800413c:	fba2 2303 	umull	r2, r3, r2, r3
 8004140:	095b      	lsrs	r3, r3, #5
 8004142:	f003 0207 	and.w	r2, r3, #7
 8004146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4422      	add	r2, r4
 800414e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004150:	e106      	b.n	8004360 <UART_SetConfig+0x4d8>
 8004152:	bf00      	nop
 8004154:	40011000 	.word	0x40011000
 8004158:	40011400 	.word	0x40011400
 800415c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004160:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004164:	2200      	movs	r2, #0
 8004166:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800416a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800416e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004172:	4642      	mov	r2, r8
 8004174:	464b      	mov	r3, r9
 8004176:	1891      	adds	r1, r2, r2
 8004178:	6239      	str	r1, [r7, #32]
 800417a:	415b      	adcs	r3, r3
 800417c:	627b      	str	r3, [r7, #36]	@ 0x24
 800417e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004182:	4641      	mov	r1, r8
 8004184:	1854      	adds	r4, r2, r1
 8004186:	4649      	mov	r1, r9
 8004188:	eb43 0501 	adc.w	r5, r3, r1
 800418c:	f04f 0200 	mov.w	r2, #0
 8004190:	f04f 0300 	mov.w	r3, #0
 8004194:	00eb      	lsls	r3, r5, #3
 8004196:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800419a:	00e2      	lsls	r2, r4, #3
 800419c:	4614      	mov	r4, r2
 800419e:	461d      	mov	r5, r3
 80041a0:	4643      	mov	r3, r8
 80041a2:	18e3      	adds	r3, r4, r3
 80041a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80041a8:	464b      	mov	r3, r9
 80041aa:	eb45 0303 	adc.w	r3, r5, r3
 80041ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80041b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80041be:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80041c2:	f04f 0200 	mov.w	r2, #0
 80041c6:	f04f 0300 	mov.w	r3, #0
 80041ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80041ce:	4629      	mov	r1, r5
 80041d0:	008b      	lsls	r3, r1, #2
 80041d2:	4621      	mov	r1, r4
 80041d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041d8:	4621      	mov	r1, r4
 80041da:	008a      	lsls	r2, r1, #2
 80041dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80041e0:	f7fb fffa 	bl	80001d8 <__aeabi_uldivmod>
 80041e4:	4602      	mov	r2, r0
 80041e6:	460b      	mov	r3, r1
 80041e8:	4b60      	ldr	r3, [pc, #384]	@ (800436c <UART_SetConfig+0x4e4>)
 80041ea:	fba3 2302 	umull	r2, r3, r3, r2
 80041ee:	095b      	lsrs	r3, r3, #5
 80041f0:	011c      	lsls	r4, r3, #4
 80041f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041f6:	2200      	movs	r2, #0
 80041f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80041fc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004200:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004204:	4642      	mov	r2, r8
 8004206:	464b      	mov	r3, r9
 8004208:	1891      	adds	r1, r2, r2
 800420a:	61b9      	str	r1, [r7, #24]
 800420c:	415b      	adcs	r3, r3
 800420e:	61fb      	str	r3, [r7, #28]
 8004210:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004214:	4641      	mov	r1, r8
 8004216:	1851      	adds	r1, r2, r1
 8004218:	6139      	str	r1, [r7, #16]
 800421a:	4649      	mov	r1, r9
 800421c:	414b      	adcs	r3, r1
 800421e:	617b      	str	r3, [r7, #20]
 8004220:	f04f 0200 	mov.w	r2, #0
 8004224:	f04f 0300 	mov.w	r3, #0
 8004228:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800422c:	4659      	mov	r1, fp
 800422e:	00cb      	lsls	r3, r1, #3
 8004230:	4651      	mov	r1, sl
 8004232:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004236:	4651      	mov	r1, sl
 8004238:	00ca      	lsls	r2, r1, #3
 800423a:	4610      	mov	r0, r2
 800423c:	4619      	mov	r1, r3
 800423e:	4603      	mov	r3, r0
 8004240:	4642      	mov	r2, r8
 8004242:	189b      	adds	r3, r3, r2
 8004244:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004248:	464b      	mov	r3, r9
 800424a:	460a      	mov	r2, r1
 800424c:	eb42 0303 	adc.w	r3, r2, r3
 8004250:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800425e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004260:	f04f 0200 	mov.w	r2, #0
 8004264:	f04f 0300 	mov.w	r3, #0
 8004268:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800426c:	4649      	mov	r1, r9
 800426e:	008b      	lsls	r3, r1, #2
 8004270:	4641      	mov	r1, r8
 8004272:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004276:	4641      	mov	r1, r8
 8004278:	008a      	lsls	r2, r1, #2
 800427a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800427e:	f7fb ffab 	bl	80001d8 <__aeabi_uldivmod>
 8004282:	4602      	mov	r2, r0
 8004284:	460b      	mov	r3, r1
 8004286:	4611      	mov	r1, r2
 8004288:	4b38      	ldr	r3, [pc, #224]	@ (800436c <UART_SetConfig+0x4e4>)
 800428a:	fba3 2301 	umull	r2, r3, r3, r1
 800428e:	095b      	lsrs	r3, r3, #5
 8004290:	2264      	movs	r2, #100	@ 0x64
 8004292:	fb02 f303 	mul.w	r3, r2, r3
 8004296:	1acb      	subs	r3, r1, r3
 8004298:	011b      	lsls	r3, r3, #4
 800429a:	3332      	adds	r3, #50	@ 0x32
 800429c:	4a33      	ldr	r2, [pc, #204]	@ (800436c <UART_SetConfig+0x4e4>)
 800429e:	fba2 2303 	umull	r2, r3, r2, r3
 80042a2:	095b      	lsrs	r3, r3, #5
 80042a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80042a8:	441c      	add	r4, r3
 80042aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042ae:	2200      	movs	r2, #0
 80042b0:	673b      	str	r3, [r7, #112]	@ 0x70
 80042b2:	677a      	str	r2, [r7, #116]	@ 0x74
 80042b4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80042b8:	4642      	mov	r2, r8
 80042ba:	464b      	mov	r3, r9
 80042bc:	1891      	adds	r1, r2, r2
 80042be:	60b9      	str	r1, [r7, #8]
 80042c0:	415b      	adcs	r3, r3
 80042c2:	60fb      	str	r3, [r7, #12]
 80042c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042c8:	4641      	mov	r1, r8
 80042ca:	1851      	adds	r1, r2, r1
 80042cc:	6039      	str	r1, [r7, #0]
 80042ce:	4649      	mov	r1, r9
 80042d0:	414b      	adcs	r3, r1
 80042d2:	607b      	str	r3, [r7, #4]
 80042d4:	f04f 0200 	mov.w	r2, #0
 80042d8:	f04f 0300 	mov.w	r3, #0
 80042dc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80042e0:	4659      	mov	r1, fp
 80042e2:	00cb      	lsls	r3, r1, #3
 80042e4:	4651      	mov	r1, sl
 80042e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042ea:	4651      	mov	r1, sl
 80042ec:	00ca      	lsls	r2, r1, #3
 80042ee:	4610      	mov	r0, r2
 80042f0:	4619      	mov	r1, r3
 80042f2:	4603      	mov	r3, r0
 80042f4:	4642      	mov	r2, r8
 80042f6:	189b      	adds	r3, r3, r2
 80042f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80042fa:	464b      	mov	r3, r9
 80042fc:	460a      	mov	r2, r1
 80042fe:	eb42 0303 	adc.w	r3, r2, r3
 8004302:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	663b      	str	r3, [r7, #96]	@ 0x60
 800430e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004310:	f04f 0200 	mov.w	r2, #0
 8004314:	f04f 0300 	mov.w	r3, #0
 8004318:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800431c:	4649      	mov	r1, r9
 800431e:	008b      	lsls	r3, r1, #2
 8004320:	4641      	mov	r1, r8
 8004322:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004326:	4641      	mov	r1, r8
 8004328:	008a      	lsls	r2, r1, #2
 800432a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800432e:	f7fb ff53 	bl	80001d8 <__aeabi_uldivmod>
 8004332:	4602      	mov	r2, r0
 8004334:	460b      	mov	r3, r1
 8004336:	4b0d      	ldr	r3, [pc, #52]	@ (800436c <UART_SetConfig+0x4e4>)
 8004338:	fba3 1302 	umull	r1, r3, r3, r2
 800433c:	095b      	lsrs	r3, r3, #5
 800433e:	2164      	movs	r1, #100	@ 0x64
 8004340:	fb01 f303 	mul.w	r3, r1, r3
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	011b      	lsls	r3, r3, #4
 8004348:	3332      	adds	r3, #50	@ 0x32
 800434a:	4a08      	ldr	r2, [pc, #32]	@ (800436c <UART_SetConfig+0x4e4>)
 800434c:	fba2 2303 	umull	r2, r3, r2, r3
 8004350:	095b      	lsrs	r3, r3, #5
 8004352:	f003 020f 	and.w	r2, r3, #15
 8004356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4422      	add	r2, r4
 800435e:	609a      	str	r2, [r3, #8]
}
 8004360:	bf00      	nop
 8004362:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004366:	46bd      	mov	sp, r7
 8004368:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800436c:	51eb851f 	.word	0x51eb851f

08004370 <memset>:
 8004370:	4402      	add	r2, r0
 8004372:	4603      	mov	r3, r0
 8004374:	4293      	cmp	r3, r2
 8004376:	d100      	bne.n	800437a <memset+0xa>
 8004378:	4770      	bx	lr
 800437a:	f803 1b01 	strb.w	r1, [r3], #1
 800437e:	e7f9      	b.n	8004374 <memset+0x4>

08004380 <__libc_init_array>:
 8004380:	b570      	push	{r4, r5, r6, lr}
 8004382:	4d0d      	ldr	r5, [pc, #52]	@ (80043b8 <__libc_init_array+0x38>)
 8004384:	4c0d      	ldr	r4, [pc, #52]	@ (80043bc <__libc_init_array+0x3c>)
 8004386:	1b64      	subs	r4, r4, r5
 8004388:	10a4      	asrs	r4, r4, #2
 800438a:	2600      	movs	r6, #0
 800438c:	42a6      	cmp	r6, r4
 800438e:	d109      	bne.n	80043a4 <__libc_init_array+0x24>
 8004390:	4d0b      	ldr	r5, [pc, #44]	@ (80043c0 <__libc_init_array+0x40>)
 8004392:	4c0c      	ldr	r4, [pc, #48]	@ (80043c4 <__libc_init_array+0x44>)
 8004394:	f000 f818 	bl	80043c8 <_init>
 8004398:	1b64      	subs	r4, r4, r5
 800439a:	10a4      	asrs	r4, r4, #2
 800439c:	2600      	movs	r6, #0
 800439e:	42a6      	cmp	r6, r4
 80043a0:	d105      	bne.n	80043ae <__libc_init_array+0x2e>
 80043a2:	bd70      	pop	{r4, r5, r6, pc}
 80043a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80043a8:	4798      	blx	r3
 80043aa:	3601      	adds	r6, #1
 80043ac:	e7ee      	b.n	800438c <__libc_init_array+0xc>
 80043ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80043b2:	4798      	blx	r3
 80043b4:	3601      	adds	r6, #1
 80043b6:	e7f2      	b.n	800439e <__libc_init_array+0x1e>
 80043b8:	08004408 	.word	0x08004408
 80043bc:	08004408 	.word	0x08004408
 80043c0:	08004408 	.word	0x08004408
 80043c4:	0800440c 	.word	0x0800440c

080043c8 <_init>:
 80043c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ca:	bf00      	nop
 80043cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ce:	bc08      	pop	{r3}
 80043d0:	469e      	mov	lr, r3
 80043d2:	4770      	bx	lr

080043d4 <_fini>:
 80043d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043d6:	bf00      	nop
 80043d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043da:	bc08      	pop	{r3}
 80043dc:	469e      	mov	lr, r3
 80043de:	4770      	bx	lr
