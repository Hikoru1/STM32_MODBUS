
002_Staj_Usart_Haberlesme.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035b8  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08003798  08003798  00004798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003818  08003818  0000507c  2**0
                  CONTENTS
  4 .ARM          00000008  08003818  08003818  00004818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003820  08003820  0000507c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003820  08003820  00004820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003824  08003824  00004824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08003828  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  2000007c  080038a4  0000507c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  080038a4  00005280  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000507c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bdbe  00000000  00000000  000050ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b51  00000000  00000000  00010e6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000980  00000000  00000000  000129c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000745  00000000  00000000  00013340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024a61  00000000  00000000  00013a85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c27b  00000000  00000000  000384e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8d50  00000000  00000000  00044761  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012d4b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b0c  00000000  00000000  0012d4f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  00130000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000007c 	.word	0x2000007c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08003780 	.word	0x08003780

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000080 	.word	0x20000080
 800021c:	08003780 	.word	0x08003780

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b96a 	b.w	80005bc <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	460c      	mov	r4, r1
 8000308:	2b00      	cmp	r3, #0
 800030a:	d14e      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030c:	4694      	mov	ip, r2
 800030e:	458c      	cmp	ip, r1
 8000310:	4686      	mov	lr, r0
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	d962      	bls.n	80003de <__udivmoddi4+0xde>
 8000318:	b14a      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031a:	f1c2 0320 	rsb	r3, r2, #32
 800031e:	4091      	lsls	r1, r2
 8000320:	fa20 f303 	lsr.w	r3, r0, r3
 8000324:	fa0c fc02 	lsl.w	ip, ip, r2
 8000328:	4319      	orrs	r1, r3
 800032a:	fa00 fe02 	lsl.w	lr, r0, r2
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f f68c 	uxth.w	r6, ip
 8000336:	fbb1 f4f7 	udiv	r4, r1, r7
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb07 1114 	mls	r1, r7, r4, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb04 f106 	mul.w	r1, r4, r6
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f104 30ff 	add.w	r0, r4, #4294967295
 8000356:	f080 8112 	bcs.w	800057e <__udivmoddi4+0x27e>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 810f 	bls.w	800057e <__udivmoddi4+0x27e>
 8000360:	3c02      	subs	r4, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb1 f0f7 	udiv	r0, r1, r7
 800036e:	fb07 1110 	mls	r1, r7, r0, r1
 8000372:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000376:	fb00 f606 	mul.w	r6, r0, r6
 800037a:	429e      	cmp	r6, r3
 800037c:	d90a      	bls.n	8000394 <__udivmoddi4+0x94>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 31ff 	add.w	r1, r0, #4294967295
 8000386:	f080 80fc 	bcs.w	8000582 <__udivmoddi4+0x282>
 800038a:	429e      	cmp	r6, r3
 800038c:	f240 80f9 	bls.w	8000582 <__udivmoddi4+0x282>
 8000390:	4463      	add	r3, ip
 8000392:	3802      	subs	r0, #2
 8000394:	1b9b      	subs	r3, r3, r6
 8000396:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800039a:	2100      	movs	r1, #0
 800039c:	b11d      	cbz	r5, 80003a6 <__udivmoddi4+0xa6>
 800039e:	40d3      	lsrs	r3, r2
 80003a0:	2200      	movs	r2, #0
 80003a2:	e9c5 3200 	strd	r3, r2, [r5]
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d905      	bls.n	80003ba <__udivmoddi4+0xba>
 80003ae:	b10d      	cbz	r5, 80003b4 <__udivmoddi4+0xb4>
 80003b0:	e9c5 0100 	strd	r0, r1, [r5]
 80003b4:	2100      	movs	r1, #0
 80003b6:	4608      	mov	r0, r1
 80003b8:	e7f5      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003ba:	fab3 f183 	clz	r1, r3
 80003be:	2900      	cmp	r1, #0
 80003c0:	d146      	bne.n	8000450 <__udivmoddi4+0x150>
 80003c2:	42a3      	cmp	r3, r4
 80003c4:	d302      	bcc.n	80003cc <__udivmoddi4+0xcc>
 80003c6:	4290      	cmp	r0, r2
 80003c8:	f0c0 80f0 	bcc.w	80005ac <__udivmoddi4+0x2ac>
 80003cc:	1a86      	subs	r6, r0, r2
 80003ce:	eb64 0303 	sbc.w	r3, r4, r3
 80003d2:	2001      	movs	r0, #1
 80003d4:	2d00      	cmp	r5, #0
 80003d6:	d0e6      	beq.n	80003a6 <__udivmoddi4+0xa6>
 80003d8:	e9c5 6300 	strd	r6, r3, [r5]
 80003dc:	e7e3      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003de:	2a00      	cmp	r2, #0
 80003e0:	f040 8090 	bne.w	8000504 <__udivmoddi4+0x204>
 80003e4:	eba1 040c 	sub.w	r4, r1, ip
 80003e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ec:	fa1f f78c 	uxth.w	r7, ip
 80003f0:	2101      	movs	r1, #1
 80003f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fa:	fb08 4416 	mls	r4, r8, r6, r4
 80003fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000402:	fb07 f006 	mul.w	r0, r7, r6
 8000406:	4298      	cmp	r0, r3
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x11c>
 800040a:	eb1c 0303 	adds.w	r3, ip, r3
 800040e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x11a>
 8000414:	4298      	cmp	r0, r3
 8000416:	f200 80cd 	bhi.w	80005b4 <__udivmoddi4+0x2b4>
 800041a:	4626      	mov	r6, r4
 800041c:	1a1c      	subs	r4, r3, r0
 800041e:	fa1f f38e 	uxth.w	r3, lr
 8000422:	fbb4 f0f8 	udiv	r0, r4, r8
 8000426:	fb08 4410 	mls	r4, r8, r0, r4
 800042a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800042e:	fb00 f707 	mul.w	r7, r0, r7
 8000432:	429f      	cmp	r7, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x148>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 34ff 	add.w	r4, r0, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x146>
 8000440:	429f      	cmp	r7, r3
 8000442:	f200 80b0 	bhi.w	80005a6 <__udivmoddi4+0x2a6>
 8000446:	4620      	mov	r0, r4
 8000448:	1bdb      	subs	r3, r3, r7
 800044a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800044e:	e7a5      	b.n	800039c <__udivmoddi4+0x9c>
 8000450:	f1c1 0620 	rsb	r6, r1, #32
 8000454:	408b      	lsls	r3, r1
 8000456:	fa22 f706 	lsr.w	r7, r2, r6
 800045a:	431f      	orrs	r7, r3
 800045c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000460:	fa04 f301 	lsl.w	r3, r4, r1
 8000464:	ea43 030c 	orr.w	r3, r3, ip
 8000468:	40f4      	lsrs	r4, r6
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	0c38      	lsrs	r0, r7, #16
 8000470:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000474:	fbb4 fef0 	udiv	lr, r4, r0
 8000478:	fa1f fc87 	uxth.w	ip, r7
 800047c:	fb00 441e 	mls	r4, r0, lr, r4
 8000480:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000484:	fb0e f90c 	mul.w	r9, lr, ip
 8000488:	45a1      	cmp	r9, r4
 800048a:	fa02 f201 	lsl.w	r2, r2, r1
 800048e:	d90a      	bls.n	80004a6 <__udivmoddi4+0x1a6>
 8000490:	193c      	adds	r4, r7, r4
 8000492:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000496:	f080 8084 	bcs.w	80005a2 <__udivmoddi4+0x2a2>
 800049a:	45a1      	cmp	r9, r4
 800049c:	f240 8081 	bls.w	80005a2 <__udivmoddi4+0x2a2>
 80004a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004a4:	443c      	add	r4, r7
 80004a6:	eba4 0409 	sub.w	r4, r4, r9
 80004aa:	fa1f f983 	uxth.w	r9, r3
 80004ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80004b2:	fb00 4413 	mls	r4, r0, r3, r4
 80004b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80004be:	45a4      	cmp	ip, r4
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x1d2>
 80004c2:	193c      	adds	r4, r7, r4
 80004c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004c8:	d267      	bcs.n	800059a <__udivmoddi4+0x29a>
 80004ca:	45a4      	cmp	ip, r4
 80004cc:	d965      	bls.n	800059a <__udivmoddi4+0x29a>
 80004ce:	3b02      	subs	r3, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004d6:	fba0 9302 	umull	r9, r3, r0, r2
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	429c      	cmp	r4, r3
 80004e0:	46ce      	mov	lr, r9
 80004e2:	469c      	mov	ip, r3
 80004e4:	d351      	bcc.n	800058a <__udivmoddi4+0x28a>
 80004e6:	d04e      	beq.n	8000586 <__udivmoddi4+0x286>
 80004e8:	b155      	cbz	r5, 8000500 <__udivmoddi4+0x200>
 80004ea:	ebb8 030e 	subs.w	r3, r8, lr
 80004ee:	eb64 040c 	sbc.w	r4, r4, ip
 80004f2:	fa04 f606 	lsl.w	r6, r4, r6
 80004f6:	40cb      	lsrs	r3, r1
 80004f8:	431e      	orrs	r6, r3
 80004fa:	40cc      	lsrs	r4, r1
 80004fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000500:	2100      	movs	r1, #0
 8000502:	e750      	b.n	80003a6 <__udivmoddi4+0xa6>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f103 	lsr.w	r1, r0, r3
 800050c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000510:	fa24 f303 	lsr.w	r3, r4, r3
 8000514:	4094      	lsls	r4, r2
 8000516:	430c      	orrs	r4, r1
 8000518:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800051c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000520:	fa1f f78c 	uxth.w	r7, ip
 8000524:	fbb3 f0f8 	udiv	r0, r3, r8
 8000528:	fb08 3110 	mls	r1, r8, r0, r3
 800052c:	0c23      	lsrs	r3, r4, #16
 800052e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000532:	fb00 f107 	mul.w	r1, r0, r7
 8000536:	4299      	cmp	r1, r3
 8000538:	d908      	bls.n	800054c <__udivmoddi4+0x24c>
 800053a:	eb1c 0303 	adds.w	r3, ip, r3
 800053e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000542:	d22c      	bcs.n	800059e <__udivmoddi4+0x29e>
 8000544:	4299      	cmp	r1, r3
 8000546:	d92a      	bls.n	800059e <__udivmoddi4+0x29e>
 8000548:	3802      	subs	r0, #2
 800054a:	4463      	add	r3, ip
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b2a4      	uxth	r4, r4
 8000550:	fbb3 f1f8 	udiv	r1, r3, r8
 8000554:	fb08 3311 	mls	r3, r8, r1, r3
 8000558:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800055c:	fb01 f307 	mul.w	r3, r1, r7
 8000560:	42a3      	cmp	r3, r4
 8000562:	d908      	bls.n	8000576 <__udivmoddi4+0x276>
 8000564:	eb1c 0404 	adds.w	r4, ip, r4
 8000568:	f101 36ff 	add.w	r6, r1, #4294967295
 800056c:	d213      	bcs.n	8000596 <__udivmoddi4+0x296>
 800056e:	42a3      	cmp	r3, r4
 8000570:	d911      	bls.n	8000596 <__udivmoddi4+0x296>
 8000572:	3902      	subs	r1, #2
 8000574:	4464      	add	r4, ip
 8000576:	1ae4      	subs	r4, r4, r3
 8000578:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800057c:	e739      	b.n	80003f2 <__udivmoddi4+0xf2>
 800057e:	4604      	mov	r4, r0
 8000580:	e6f0      	b.n	8000364 <__udivmoddi4+0x64>
 8000582:	4608      	mov	r0, r1
 8000584:	e706      	b.n	8000394 <__udivmoddi4+0x94>
 8000586:	45c8      	cmp	r8, r9
 8000588:	d2ae      	bcs.n	80004e8 <__udivmoddi4+0x1e8>
 800058a:	ebb9 0e02 	subs.w	lr, r9, r2
 800058e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000592:	3801      	subs	r0, #1
 8000594:	e7a8      	b.n	80004e8 <__udivmoddi4+0x1e8>
 8000596:	4631      	mov	r1, r6
 8000598:	e7ed      	b.n	8000576 <__udivmoddi4+0x276>
 800059a:	4603      	mov	r3, r0
 800059c:	e799      	b.n	80004d2 <__udivmoddi4+0x1d2>
 800059e:	4630      	mov	r0, r6
 80005a0:	e7d4      	b.n	800054c <__udivmoddi4+0x24c>
 80005a2:	46d6      	mov	lr, sl
 80005a4:	e77f      	b.n	80004a6 <__udivmoddi4+0x1a6>
 80005a6:	4463      	add	r3, ip
 80005a8:	3802      	subs	r0, #2
 80005aa:	e74d      	b.n	8000448 <__udivmoddi4+0x148>
 80005ac:	4606      	mov	r6, r0
 80005ae:	4623      	mov	r3, r4
 80005b0:	4608      	mov	r0, r1
 80005b2:	e70f      	b.n	80003d4 <__udivmoddi4+0xd4>
 80005b4:	3e02      	subs	r6, #2
 80005b6:	4463      	add	r3, ip
 80005b8:	e730      	b.n	800041c <__udivmoddi4+0x11c>
 80005ba:	bf00      	nop

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c4:	f000 fa17 	bl	80009f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c8:	f000 f82a 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005cc:	f000 f8c0 	bl	8000750 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005d0:	f000 f872 	bl	80006b8 <MX_USART2_UART_Init>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  num++;
 80005d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000610 <main+0x50>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	3301      	adds	r3, #1
 80005da:	b2da      	uxtb	r2, r3
 80005dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000610 <main+0x50>)
 80005de:	701a      	strb	r2, [r3, #0]
	  sprintf(data,"\f %d \n \r",num);
 80005e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000610 <main+0x50>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	461a      	mov	r2, r3
 80005e6:	490b      	ldr	r1, [pc, #44]	@ (8000614 <main+0x54>)
 80005e8:	480b      	ldr	r0, [pc, #44]	@ (8000618 <main+0x58>)
 80005ea:	f002 fc29 	bl	8002e40 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t *)data, strlen(data), 200);
 80005ee:	480a      	ldr	r0, [pc, #40]	@ (8000618 <main+0x58>)
 80005f0:	f7ff fe16 	bl	8000220 <strlen>
 80005f4:	4603      	mov	r3, r0
 80005f6:	b29a      	uxth	r2, r3
 80005f8:	23c8      	movs	r3, #200	@ 0xc8
 80005fa:	4907      	ldr	r1, [pc, #28]	@ (8000618 <main+0x58>)
 80005fc:	4807      	ldr	r0, [pc, #28]	@ (800061c <main+0x5c>)
 80005fe:	f001 fd73 	bl	80020e8 <HAL_UART_Transmit>
	  HAL_Delay(500);
 8000602:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000606:	f000 fa67 	bl	8000ad8 <HAL_Delay>
  {
 800060a:	bf00      	nop
 800060c:	e7e2      	b.n	80005d4 <main+0x14>
 800060e:	bf00      	nop
 8000610:	20000098 	.word	0x20000098
 8000614:	08003798 	.word	0x08003798
 8000618:	20000000 	.word	0x20000000
 800061c:	2000009c 	.word	0x2000009c

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b094      	sub	sp, #80	@ 0x50
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 0318 	add.w	r3, r7, #24
 800062a:	2238      	movs	r2, #56	@ 0x38
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f002 fc26 	bl	8002e80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	1d3b      	adds	r3, r7, #4
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]
 8000640:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000642:	2000      	movs	r0, #0
 8000644:	f000 fcd0 	bl	8000fe8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000648:	2302      	movs	r3, #2
 800064a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800064c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000650:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000652:	2340      	movs	r3, #64	@ 0x40
 8000654:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000656:	2302      	movs	r3, #2
 8000658:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800065a:	2302      	movs	r3, #2
 800065c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800065e:	2304      	movs	r3, #4
 8000660:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000662:	2355      	movs	r3, #85	@ 0x55
 8000664:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000666:	2302      	movs	r3, #2
 8000668:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800066a:	2302      	movs	r3, #2
 800066c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800066e:	2302      	movs	r3, #2
 8000670:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000672:	f107 0318 	add.w	r3, r7, #24
 8000676:	4618      	mov	r0, r3
 8000678:	f000 fd6a 	bl	8001150 <HAL_RCC_OscConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000682:	f000 f895 	bl	80007b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000686:	230f      	movs	r3, #15
 8000688:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068a:	2303      	movs	r3, #3
 800068c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000696:	2300      	movs	r3, #0
 8000698:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	2104      	movs	r1, #4
 800069e:	4618      	mov	r0, r3
 80006a0:	f001 f868 	bl	8001774 <HAL_RCC_ClockConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80006aa:	f000 f881 	bl	80007b0 <Error_Handler>
  }
}
 80006ae:	bf00      	nop
 80006b0:	3750      	adds	r7, #80	@ 0x50
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
	...

080006b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006bc:	4b22      	ldr	r3, [pc, #136]	@ (8000748 <MX_USART2_UART_Init+0x90>)
 80006be:	4a23      	ldr	r2, [pc, #140]	@ (800074c <MX_USART2_UART_Init+0x94>)
 80006c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80006c2:	4b21      	ldr	r3, [pc, #132]	@ (8000748 <MX_USART2_UART_Init+0x90>)
 80006c4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80006c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ca:	4b1f      	ldr	r3, [pc, #124]	@ (8000748 <MX_USART2_UART_Init+0x90>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006d0:	4b1d      	ldr	r3, [pc, #116]	@ (8000748 <MX_USART2_UART_Init+0x90>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000748 <MX_USART2_UART_Init+0x90>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006dc:	4b1a      	ldr	r3, [pc, #104]	@ (8000748 <MX_USART2_UART_Init+0x90>)
 80006de:	220c      	movs	r2, #12
 80006e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e2:	4b19      	ldr	r3, [pc, #100]	@ (8000748 <MX_USART2_UART_Init+0x90>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e8:	4b17      	ldr	r3, [pc, #92]	@ (8000748 <MX_USART2_UART_Init+0x90>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ee:	4b16      	ldr	r3, [pc, #88]	@ (8000748 <MX_USART2_UART_Init+0x90>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006f4:	4b14      	ldr	r3, [pc, #80]	@ (8000748 <MX_USART2_UART_Init+0x90>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006fa:	4b13      	ldr	r3, [pc, #76]	@ (8000748 <MX_USART2_UART_Init+0x90>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000700:	4811      	ldr	r0, [pc, #68]	@ (8000748 <MX_USART2_UART_Init+0x90>)
 8000702:	f001 fca1 	bl	8002048 <HAL_UART_Init>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800070c:	f000 f850 	bl	80007b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000710:	2100      	movs	r1, #0
 8000712:	480d      	ldr	r0, [pc, #52]	@ (8000748 <MX_USART2_UART_Init+0x90>)
 8000714:	f002 faca 	bl	8002cac <HAL_UARTEx_SetTxFifoThreshold>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800071e:	f000 f847 	bl	80007b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000722:	2100      	movs	r1, #0
 8000724:	4808      	ldr	r0, [pc, #32]	@ (8000748 <MX_USART2_UART_Init+0x90>)
 8000726:	f002 faff 	bl	8002d28 <HAL_UARTEx_SetRxFifoThreshold>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000730:	f000 f83e 	bl	80007b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000734:	4804      	ldr	r0, [pc, #16]	@ (8000748 <MX_USART2_UART_Init+0x90>)
 8000736:	f002 fa80 	bl	8002c3a <HAL_UARTEx_DisableFifoMode>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000740:	f000 f836 	bl	80007b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}
 8000748:	2000009c 	.word	0x2000009c
 800074c:	40004400 	.word	0x40004400

08000750 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000750:	b480      	push	{r7}
 8000752:	b085      	sub	sp, #20
 8000754:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000756:	4b15      	ldr	r3, [pc, #84]	@ (80007ac <MX_GPIO_Init+0x5c>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800075a:	4a14      	ldr	r2, [pc, #80]	@ (80007ac <MX_GPIO_Init+0x5c>)
 800075c:	f043 0304 	orr.w	r3, r3, #4
 8000760:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000762:	4b12      	ldr	r3, [pc, #72]	@ (80007ac <MX_GPIO_Init+0x5c>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000766:	f003 0304 	and.w	r3, r3, #4
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800076e:	4b0f      	ldr	r3, [pc, #60]	@ (80007ac <MX_GPIO_Init+0x5c>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000772:	4a0e      	ldr	r2, [pc, #56]	@ (80007ac <MX_GPIO_Init+0x5c>)
 8000774:	f043 0320 	orr.w	r3, r3, #32
 8000778:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800077a:	4b0c      	ldr	r3, [pc, #48]	@ (80007ac <MX_GPIO_Init+0x5c>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800077e:	f003 0320 	and.w	r3, r3, #32
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000786:	4b09      	ldr	r3, [pc, #36]	@ (80007ac <MX_GPIO_Init+0x5c>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800078a:	4a08      	ldr	r2, [pc, #32]	@ (80007ac <MX_GPIO_Init+0x5c>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000792:	4b06      	ldr	r3, [pc, #24]	@ (80007ac <MX_GPIO_Init+0x5c>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800079e:	bf00      	nop
 80007a0:	3714      	adds	r7, #20
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	40021000 	.word	0x40021000

080007b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b4:	b672      	cpsid	i
}
 80007b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b8:	bf00      	nop
 80007ba:	e7fd      	b.n	80007b8 <Error_Handler+0x8>

080007bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000800 <HAL_MspInit+0x44>)
 80007c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007c6:	4a0e      	ldr	r2, [pc, #56]	@ (8000800 <HAL_MspInit+0x44>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80007ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000800 <HAL_MspInit+0x44>)
 80007d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007da:	4b09      	ldr	r3, [pc, #36]	@ (8000800 <HAL_MspInit+0x44>)
 80007dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007de:	4a08      	ldr	r2, [pc, #32]	@ (8000800 <HAL_MspInit+0x44>)
 80007e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80007e6:	4b06      	ldr	r3, [pc, #24]	@ (8000800 <HAL_MspInit+0x44>)
 80007e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007ee:	603b      	str	r3, [r7, #0]
 80007f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80007f2:	f000 fc9d 	bl	8001130 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40021000 	.word	0x40021000

08000804 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b09e      	sub	sp, #120	@ 0x78
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]
 800081a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800081c:	f107 0310 	add.w	r3, r7, #16
 8000820:	2254      	movs	r2, #84	@ 0x54
 8000822:	2100      	movs	r1, #0
 8000824:	4618      	mov	r0, r3
 8000826:	f002 fb2b 	bl	8002e80 <memset>
  if(huart->Instance==USART2)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4a1f      	ldr	r2, [pc, #124]	@ (80008ac <HAL_UART_MspInit+0xa8>)
 8000830:	4293      	cmp	r3, r2
 8000832:	d136      	bne.n	80008a2 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000834:	2302      	movs	r3, #2
 8000836:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000838:	2300      	movs	r3, #0
 800083a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800083c:	f107 0310 	add.w	r3, r7, #16
 8000840:	4618      	mov	r0, r3
 8000842:	f001 f9b3 	bl	8001bac <HAL_RCCEx_PeriphCLKConfig>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800084c:	f7ff ffb0 	bl	80007b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000850:	4b17      	ldr	r3, [pc, #92]	@ (80008b0 <HAL_UART_MspInit+0xac>)
 8000852:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000854:	4a16      	ldr	r2, [pc, #88]	@ (80008b0 <HAL_UART_MspInit+0xac>)
 8000856:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800085a:	6593      	str	r3, [r2, #88]	@ 0x58
 800085c:	4b14      	ldr	r3, [pc, #80]	@ (80008b0 <HAL_UART_MspInit+0xac>)
 800085e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000860:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000864:	60fb      	str	r3, [r7, #12]
 8000866:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000868:	4b11      	ldr	r3, [pc, #68]	@ (80008b0 <HAL_UART_MspInit+0xac>)
 800086a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800086c:	4a10      	ldr	r2, [pc, #64]	@ (80008b0 <HAL_UART_MspInit+0xac>)
 800086e:	f043 0301 	orr.w	r3, r3, #1
 8000872:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000874:	4b0e      	ldr	r3, [pc, #56]	@ (80008b0 <HAL_UART_MspInit+0xac>)
 8000876:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000878:	f003 0301 	and.w	r3, r3, #1
 800087c:	60bb      	str	r3, [r7, #8]
 800087e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000880:	230c      	movs	r3, #12
 8000882:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000884:	2302      	movs	r3, #2
 8000886:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088c:	2300      	movs	r3, #0
 800088e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000890:	2307      	movs	r3, #7
 8000892:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000894:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000898:	4619      	mov	r1, r3
 800089a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800089e:	f000 fa21 	bl	8000ce4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80008a2:	bf00      	nop
 80008a4:	3778      	adds	r7, #120	@ 0x78
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40004400 	.word	0x40004400
 80008b0:	40021000 	.word	0x40021000

080008b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008b8:	bf00      	nop
 80008ba:	e7fd      	b.n	80008b8 <NMI_Handler+0x4>

080008bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c0:	bf00      	nop
 80008c2:	e7fd      	b.n	80008c0 <HardFault_Handler+0x4>

080008c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008c8:	bf00      	nop
 80008ca:	e7fd      	b.n	80008c8 <MemManage_Handler+0x4>

080008cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008d0:	bf00      	nop
 80008d2:	e7fd      	b.n	80008d0 <BusFault_Handler+0x4>

080008d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008d8:	bf00      	nop
 80008da:	e7fd      	b.n	80008d8 <UsageFault_Handler+0x4>

080008dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr

080008ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ee:	bf00      	nop
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr

080008f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr

08000906 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000906:	b580      	push	{r7, lr}
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800090a:	f000 f8c7 	bl	8000a9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
	...

08000914 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b086      	sub	sp, #24
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800091c:	4a14      	ldr	r2, [pc, #80]	@ (8000970 <_sbrk+0x5c>)
 800091e:	4b15      	ldr	r3, [pc, #84]	@ (8000974 <_sbrk+0x60>)
 8000920:	1ad3      	subs	r3, r2, r3
 8000922:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000928:	4b13      	ldr	r3, [pc, #76]	@ (8000978 <_sbrk+0x64>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d102      	bne.n	8000936 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000930:	4b11      	ldr	r3, [pc, #68]	@ (8000978 <_sbrk+0x64>)
 8000932:	4a12      	ldr	r2, [pc, #72]	@ (800097c <_sbrk+0x68>)
 8000934:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000936:	4b10      	ldr	r3, [pc, #64]	@ (8000978 <_sbrk+0x64>)
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4413      	add	r3, r2
 800093e:	693a      	ldr	r2, [r7, #16]
 8000940:	429a      	cmp	r2, r3
 8000942:	d207      	bcs.n	8000954 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000944:	f002 faa4 	bl	8002e90 <__errno>
 8000948:	4603      	mov	r3, r0
 800094a:	220c      	movs	r2, #12
 800094c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800094e:	f04f 33ff 	mov.w	r3, #4294967295
 8000952:	e009      	b.n	8000968 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000954:	4b08      	ldr	r3, [pc, #32]	@ (8000978 <_sbrk+0x64>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800095a:	4b07      	ldr	r3, [pc, #28]	@ (8000978 <_sbrk+0x64>)
 800095c:	681a      	ldr	r2, [r3, #0]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4413      	add	r3, r2
 8000962:	4a05      	ldr	r2, [pc, #20]	@ (8000978 <_sbrk+0x64>)
 8000964:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000966:	68fb      	ldr	r3, [r7, #12]
}
 8000968:	4618      	mov	r0, r3
 800096a:	3718      	adds	r7, #24
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20020000 	.word	0x20020000
 8000974:	00000400 	.word	0x00000400
 8000978:	20000130 	.word	0x20000130
 800097c:	20000280 	.word	0x20000280

08000980 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000984:	4b06      	ldr	r3, [pc, #24]	@ (80009a0 <SystemInit+0x20>)
 8000986:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800098a:	4a05      	ldr	r2, [pc, #20]	@ (80009a0 <SystemInit+0x20>)
 800098c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000990:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	e000ed00 	.word	0xe000ed00

080009a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009a4:	480d      	ldr	r0, [pc, #52]	@ (80009dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009a6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009a8:	f7ff ffea 	bl	8000980 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009ac:	480c      	ldr	r0, [pc, #48]	@ (80009e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80009ae:	490d      	ldr	r1, [pc, #52]	@ (80009e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009b0:	4a0d      	ldr	r2, [pc, #52]	@ (80009e8 <LoopForever+0xe>)
  movs r3, #0
 80009b2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80009b4:	e002      	b.n	80009bc <LoopCopyDataInit>

080009b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ba:	3304      	adds	r3, #4

080009bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009c0:	d3f9      	bcc.n	80009b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009c2:	4a0a      	ldr	r2, [pc, #40]	@ (80009ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80009c4:	4c0a      	ldr	r4, [pc, #40]	@ (80009f0 <LoopForever+0x16>)
  movs r3, #0
 80009c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009c8:	e001      	b.n	80009ce <LoopFillZerobss>

080009ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009cc:	3204      	adds	r2, #4

080009ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009d0:	d3fb      	bcc.n	80009ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009d2:	f002 fa63 	bl	8002e9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009d6:	f7ff fdf3 	bl	80005c0 <main>

080009da <LoopForever>:

LoopForever:
    b LoopForever
 80009da:	e7fe      	b.n	80009da <LoopForever>
  ldr   r0, =_estack
 80009dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009e4:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80009e8:	08003828 	.word	0x08003828
  ldr r2, =_sbss
 80009ec:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80009f0:	20000280 	.word	0x20000280

080009f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009f4:	e7fe      	b.n	80009f4 <ADC1_2_IRQHandler>

080009f6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009f6:	b580      	push	{r7, lr}
 80009f8:	b082      	sub	sp, #8
 80009fa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009fc:	2300      	movs	r3, #0
 80009fe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a00:	2003      	movs	r0, #3
 8000a02:	f000 f93d 	bl	8000c80 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a06:	2000      	movs	r0, #0
 8000a08:	f000 f80e 	bl	8000a28 <HAL_InitTick>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d002      	beq.n	8000a18 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a12:	2301      	movs	r3, #1
 8000a14:	71fb      	strb	r3, [r7, #7]
 8000a16:	e001      	b.n	8000a1c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a18:	f7ff fed0 	bl	80007bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a1c:	79fb      	ldrb	r3, [r7, #7]

}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
	...

08000a28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a30:	2300      	movs	r3, #0
 8000a32:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000a34:	4b16      	ldr	r3, [pc, #88]	@ (8000a90 <HAL_InitTick+0x68>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d022      	beq.n	8000a82 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000a3c:	4b15      	ldr	r3, [pc, #84]	@ (8000a94 <HAL_InitTick+0x6c>)
 8000a3e:	681a      	ldr	r2, [r3, #0]
 8000a40:	4b13      	ldr	r3, [pc, #76]	@ (8000a90 <HAL_InitTick+0x68>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000a48:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a50:	4618      	mov	r0, r3
 8000a52:	f000 f93a 	bl	8000cca <HAL_SYSTICK_Config>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d10f      	bne.n	8000a7c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2b0f      	cmp	r3, #15
 8000a60:	d809      	bhi.n	8000a76 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a62:	2200      	movs	r2, #0
 8000a64:	6879      	ldr	r1, [r7, #4]
 8000a66:	f04f 30ff 	mov.w	r0, #4294967295
 8000a6a:	f000 f914 	bl	8000c96 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a98 <HAL_InitTick+0x70>)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	6013      	str	r3, [r2, #0]
 8000a74:	e007      	b.n	8000a86 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000a76:	2301      	movs	r3, #1
 8000a78:	73fb      	strb	r3, [r7, #15]
 8000a7a:	e004      	b.n	8000a86 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	73fb      	strb	r3, [r7, #15]
 8000a80:	e001      	b.n	8000a86 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a82:	2301      	movs	r3, #1
 8000a84:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	3710      	adds	r7, #16
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20000028 	.word	0x20000028
 8000a94:	20000020 	.word	0x20000020
 8000a98:	20000024 	.word	0x20000024

08000a9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aa0:	4b05      	ldr	r3, [pc, #20]	@ (8000ab8 <HAL_IncTick+0x1c>)
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	4b05      	ldr	r3, [pc, #20]	@ (8000abc <HAL_IncTick+0x20>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	4a03      	ldr	r2, [pc, #12]	@ (8000ab8 <HAL_IncTick+0x1c>)
 8000aac:	6013      	str	r3, [r2, #0]
}
 8000aae:	bf00      	nop
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	20000134 	.word	0x20000134
 8000abc:	20000028 	.word	0x20000028

08000ac0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ac4:	4b03      	ldr	r3, [pc, #12]	@ (8000ad4 <HAL_GetTick+0x14>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	20000134 	.word	0x20000134

08000ad8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ae0:	f7ff ffee 	bl	8000ac0 <HAL_GetTick>
 8000ae4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000af0:	d004      	beq.n	8000afc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000af2:	4b09      	ldr	r3, [pc, #36]	@ (8000b18 <HAL_Delay+0x40>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	68fa      	ldr	r2, [r7, #12]
 8000af8:	4413      	add	r3, r2
 8000afa:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000afc:	bf00      	nop
 8000afe:	f7ff ffdf 	bl	8000ac0 <HAL_GetTick>
 8000b02:	4602      	mov	r2, r0
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	1ad3      	subs	r3, r2, r3
 8000b08:	68fa      	ldr	r2, [r7, #12]
 8000b0a:	429a      	cmp	r2, r3
 8000b0c:	d8f7      	bhi.n	8000afe <HAL_Delay+0x26>
  {
  }
}
 8000b0e:	bf00      	nop
 8000b10:	bf00      	nop
 8000b12:	3710      	adds	r7, #16
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20000028 	.word	0x20000028

08000b1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	f003 0307 	and.w	r3, r3, #7
 8000b2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b60 <__NVIC_SetPriorityGrouping+0x44>)
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b32:	68ba      	ldr	r2, [r7, #8]
 8000b34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b38:	4013      	ands	r3, r2
 8000b3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b4e:	4a04      	ldr	r2, [pc, #16]	@ (8000b60 <__NVIC_SetPriorityGrouping+0x44>)
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	60d3      	str	r3, [r2, #12]
}
 8000b54:	bf00      	nop
 8000b56:	3714      	adds	r7, #20
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b68:	4b04      	ldr	r3, [pc, #16]	@ (8000b7c <__NVIC_GetPriorityGrouping+0x18>)
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	0a1b      	lsrs	r3, r3, #8
 8000b6e:	f003 0307 	and.w	r3, r3, #7
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	6039      	str	r1, [r7, #0]
 8000b8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	db0a      	blt.n	8000baa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	b2da      	uxtb	r2, r3
 8000b98:	490c      	ldr	r1, [pc, #48]	@ (8000bcc <__NVIC_SetPriority+0x4c>)
 8000b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9e:	0112      	lsls	r2, r2, #4
 8000ba0:	b2d2      	uxtb	r2, r2
 8000ba2:	440b      	add	r3, r1
 8000ba4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ba8:	e00a      	b.n	8000bc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	b2da      	uxtb	r2, r3
 8000bae:	4908      	ldr	r1, [pc, #32]	@ (8000bd0 <__NVIC_SetPriority+0x50>)
 8000bb0:	79fb      	ldrb	r3, [r7, #7]
 8000bb2:	f003 030f 	and.w	r3, r3, #15
 8000bb6:	3b04      	subs	r3, #4
 8000bb8:	0112      	lsls	r2, r2, #4
 8000bba:	b2d2      	uxtb	r2, r2
 8000bbc:	440b      	add	r3, r1
 8000bbe:	761a      	strb	r2, [r3, #24]
}
 8000bc0:	bf00      	nop
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	e000e100 	.word	0xe000e100
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b089      	sub	sp, #36	@ 0x24
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	60f8      	str	r0, [r7, #12]
 8000bdc:	60b9      	str	r1, [r7, #8]
 8000bde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	f003 0307 	and.w	r3, r3, #7
 8000be6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000be8:	69fb      	ldr	r3, [r7, #28]
 8000bea:	f1c3 0307 	rsb	r3, r3, #7
 8000bee:	2b04      	cmp	r3, #4
 8000bf0:	bf28      	it	cs
 8000bf2:	2304      	movcs	r3, #4
 8000bf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	3304      	adds	r3, #4
 8000bfa:	2b06      	cmp	r3, #6
 8000bfc:	d902      	bls.n	8000c04 <NVIC_EncodePriority+0x30>
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	3b03      	subs	r3, #3
 8000c02:	e000      	b.n	8000c06 <NVIC_EncodePriority+0x32>
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c08:	f04f 32ff 	mov.w	r2, #4294967295
 8000c0c:	69bb      	ldr	r3, [r7, #24]
 8000c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c12:	43da      	mvns	r2, r3
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	401a      	ands	r2, r3
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	fa01 f303 	lsl.w	r3, r1, r3
 8000c26:	43d9      	mvns	r1, r3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c2c:	4313      	orrs	r3, r2
         );
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3724      	adds	r7, #36	@ 0x24
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
	...

08000c3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	3b01      	subs	r3, #1
 8000c48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c4c:	d301      	bcc.n	8000c52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e00f      	b.n	8000c72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c52:	4a0a      	ldr	r2, [pc, #40]	@ (8000c7c <SysTick_Config+0x40>)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	3b01      	subs	r3, #1
 8000c58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c5a:	210f      	movs	r1, #15
 8000c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c60:	f7ff ff8e 	bl	8000b80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c64:	4b05      	ldr	r3, [pc, #20]	@ (8000c7c <SysTick_Config+0x40>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c6a:	4b04      	ldr	r3, [pc, #16]	@ (8000c7c <SysTick_Config+0x40>)
 8000c6c:	2207      	movs	r2, #7
 8000c6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c70:	2300      	movs	r3, #0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	e000e010 	.word	0xe000e010

08000c80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c88:	6878      	ldr	r0, [r7, #4]
 8000c8a:	f7ff ff47 	bl	8000b1c <__NVIC_SetPriorityGrouping>
}
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b086      	sub	sp, #24
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	60b9      	str	r1, [r7, #8]
 8000ca0:	607a      	str	r2, [r7, #4]
 8000ca2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ca4:	f7ff ff5e 	bl	8000b64 <__NVIC_GetPriorityGrouping>
 8000ca8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000caa:	687a      	ldr	r2, [r7, #4]
 8000cac:	68b9      	ldr	r1, [r7, #8]
 8000cae:	6978      	ldr	r0, [r7, #20]
 8000cb0:	f7ff ff90 	bl	8000bd4 <NVIC_EncodePriority>
 8000cb4:	4602      	mov	r2, r0
 8000cb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cba:	4611      	mov	r1, r2
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff ff5f 	bl	8000b80 <__NVIC_SetPriority>
}
 8000cc2:	bf00      	nop
 8000cc4:	3718      	adds	r7, #24
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b082      	sub	sp, #8
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f7ff ffb2 	bl	8000c3c <SysTick_Config>
 8000cd8:	4603      	mov	r3, r0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
	...

08000ce4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b087      	sub	sp, #28
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000cf2:	e15a      	b.n	8000faa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8000d00:	4013      	ands	r3, r2
 8000d02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	f000 814c 	beq.w	8000fa4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f003 0303 	and.w	r3, r3, #3
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d005      	beq.n	8000d24 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d20:	2b02      	cmp	r3, #2
 8000d22:	d130      	bne.n	8000d86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	689b      	ldr	r3, [r3, #8]
 8000d28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	2203      	movs	r2, #3
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	43db      	mvns	r3, r3
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	4013      	ands	r3, r2
 8000d3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	68da      	ldr	r2, [r3, #12]
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43db      	mvns	r3, r3
 8000d64:	693a      	ldr	r2, [r7, #16]
 8000d66:	4013      	ands	r3, r2
 8000d68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	091b      	lsrs	r3, r3, #4
 8000d70:	f003 0201 	and.w	r2, r3, #1
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	f003 0303 	and.w	r3, r3, #3
 8000d8e:	2b03      	cmp	r3, #3
 8000d90:	d017      	beq.n	8000dc2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	68db      	ldr	r3, [r3, #12]
 8000d96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	2203      	movs	r2, #3
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	43db      	mvns	r3, r3
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	4013      	ands	r3, r2
 8000da8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	689a      	ldr	r2, [r3, #8]
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f003 0303 	and.w	r3, r3, #3
 8000dca:	2b02      	cmp	r3, #2
 8000dcc:	d123      	bne.n	8000e16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	08da      	lsrs	r2, r3, #3
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	3208      	adds	r2, #8
 8000dd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dda:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	f003 0307 	and.w	r3, r3, #7
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	220f      	movs	r2, #15
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	43db      	mvns	r3, r3
 8000dec:	693a      	ldr	r2, [r7, #16]
 8000dee:	4013      	ands	r3, r2
 8000df0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	691a      	ldr	r2, [r3, #16]
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	f003 0307 	and.w	r3, r3, #7
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	08da      	lsrs	r2, r3, #3
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	3208      	adds	r2, #8
 8000e10:	6939      	ldr	r1, [r7, #16]
 8000e12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	2203      	movs	r2, #3
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	43db      	mvns	r3, r3
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f003 0203 	and.w	r2, r3, #3
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	f000 80a6 	beq.w	8000fa4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e58:	4b5b      	ldr	r3, [pc, #364]	@ (8000fc8 <HAL_GPIO_Init+0x2e4>)
 8000e5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e5c:	4a5a      	ldr	r2, [pc, #360]	@ (8000fc8 <HAL_GPIO_Init+0x2e4>)
 8000e5e:	f043 0301 	orr.w	r3, r3, #1
 8000e62:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e64:	4b58      	ldr	r3, [pc, #352]	@ (8000fc8 <HAL_GPIO_Init+0x2e4>)
 8000e66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e68:	f003 0301 	and.w	r3, r3, #1
 8000e6c:	60bb      	str	r3, [r7, #8]
 8000e6e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e70:	4a56      	ldr	r2, [pc, #344]	@ (8000fcc <HAL_GPIO_Init+0x2e8>)
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	089b      	lsrs	r3, r3, #2
 8000e76:	3302      	adds	r3, #2
 8000e78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	f003 0303 	and.w	r3, r3, #3
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	220f      	movs	r2, #15
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	4013      	ands	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000e9a:	d01f      	beq.n	8000edc <HAL_GPIO_Init+0x1f8>
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	4a4c      	ldr	r2, [pc, #304]	@ (8000fd0 <HAL_GPIO_Init+0x2ec>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d019      	beq.n	8000ed8 <HAL_GPIO_Init+0x1f4>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4a4b      	ldr	r2, [pc, #300]	@ (8000fd4 <HAL_GPIO_Init+0x2f0>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d013      	beq.n	8000ed4 <HAL_GPIO_Init+0x1f0>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4a4a      	ldr	r2, [pc, #296]	@ (8000fd8 <HAL_GPIO_Init+0x2f4>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d00d      	beq.n	8000ed0 <HAL_GPIO_Init+0x1ec>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4a49      	ldr	r2, [pc, #292]	@ (8000fdc <HAL_GPIO_Init+0x2f8>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d007      	beq.n	8000ecc <HAL_GPIO_Init+0x1e8>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	4a48      	ldr	r2, [pc, #288]	@ (8000fe0 <HAL_GPIO_Init+0x2fc>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d101      	bne.n	8000ec8 <HAL_GPIO_Init+0x1e4>
 8000ec4:	2305      	movs	r3, #5
 8000ec6:	e00a      	b.n	8000ede <HAL_GPIO_Init+0x1fa>
 8000ec8:	2306      	movs	r3, #6
 8000eca:	e008      	b.n	8000ede <HAL_GPIO_Init+0x1fa>
 8000ecc:	2304      	movs	r3, #4
 8000ece:	e006      	b.n	8000ede <HAL_GPIO_Init+0x1fa>
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	e004      	b.n	8000ede <HAL_GPIO_Init+0x1fa>
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	e002      	b.n	8000ede <HAL_GPIO_Init+0x1fa>
 8000ed8:	2301      	movs	r3, #1
 8000eda:	e000      	b.n	8000ede <HAL_GPIO_Init+0x1fa>
 8000edc:	2300      	movs	r3, #0
 8000ede:	697a      	ldr	r2, [r7, #20]
 8000ee0:	f002 0203 	and.w	r2, r2, #3
 8000ee4:	0092      	lsls	r2, r2, #2
 8000ee6:	4093      	lsls	r3, r2
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000eee:	4937      	ldr	r1, [pc, #220]	@ (8000fcc <HAL_GPIO_Init+0x2e8>)
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	089b      	lsrs	r3, r3, #2
 8000ef4:	3302      	adds	r3, #2
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000efc:	4b39      	ldr	r3, [pc, #228]	@ (8000fe4 <HAL_GPIO_Init+0x300>)
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	43db      	mvns	r3, r3
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d003      	beq.n	8000f20 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f20:	4a30      	ldr	r2, [pc, #192]	@ (8000fe4 <HAL_GPIO_Init+0x300>)
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f26:	4b2f      	ldr	r3, [pc, #188]	@ (8000fe4 <HAL_GPIO_Init+0x300>)
 8000f28:	68db      	ldr	r3, [r3, #12]
 8000f2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	4013      	ands	r3, r2
 8000f34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d003      	beq.n	8000f4a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f4a:	4a26      	ldr	r2, [pc, #152]	@ (8000fe4 <HAL_GPIO_Init+0x300>)
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000f50:	4b24      	ldr	r3, [pc, #144]	@ (8000fe4 <HAL_GPIO_Init+0x300>)
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d003      	beq.n	8000f74 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f74:	4a1b      	ldr	r2, [pc, #108]	@ (8000fe4 <HAL_GPIO_Init+0x300>)
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000f7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000fe4 <HAL_GPIO_Init+0x300>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	43db      	mvns	r3, r3
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	4013      	ands	r3, r2
 8000f88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d003      	beq.n	8000f9e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f9e:	4a11      	ldr	r2, [pc, #68]	@ (8000fe4 <HAL_GPIO_Init+0x300>)
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	f47f ae9d 	bne.w	8000cf4 <HAL_GPIO_Init+0x10>
  }
}
 8000fba:	bf00      	nop
 8000fbc:	bf00      	nop
 8000fbe:	371c      	adds	r7, #28
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	40010000 	.word	0x40010000
 8000fd0:	48000400 	.word	0x48000400
 8000fd4:	48000800 	.word	0x48000800
 8000fd8:	48000c00 	.word	0x48000c00
 8000fdc:	48001000 	.word	0x48001000
 8000fe0:	48001400 	.word	0x48001400
 8000fe4:	40010400 	.word	0x40010400

08000fe8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d141      	bne.n	800107a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000ff6:	4b4b      	ldr	r3, [pc, #300]	@ (8001124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000ffe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001002:	d131      	bne.n	8001068 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001004:	4b47      	ldr	r3, [pc, #284]	@ (8001124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001006:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800100a:	4a46      	ldr	r2, [pc, #280]	@ (8001124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800100c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001010:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001014:	4b43      	ldr	r3, [pc, #268]	@ (8001124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800101c:	4a41      	ldr	r2, [pc, #260]	@ (8001124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800101e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001022:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001024:	4b40      	ldr	r3, [pc, #256]	@ (8001128 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2232      	movs	r2, #50	@ 0x32
 800102a:	fb02 f303 	mul.w	r3, r2, r3
 800102e:	4a3f      	ldr	r2, [pc, #252]	@ (800112c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001030:	fba2 2303 	umull	r2, r3, r2, r3
 8001034:	0c9b      	lsrs	r3, r3, #18
 8001036:	3301      	adds	r3, #1
 8001038:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800103a:	e002      	b.n	8001042 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	3b01      	subs	r3, #1
 8001040:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001042:	4b38      	ldr	r3, [pc, #224]	@ (8001124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001044:	695b      	ldr	r3, [r3, #20]
 8001046:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800104a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800104e:	d102      	bne.n	8001056 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d1f2      	bne.n	800103c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001056:	4b33      	ldr	r3, [pc, #204]	@ (8001124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001058:	695b      	ldr	r3, [r3, #20]
 800105a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800105e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001062:	d158      	bne.n	8001116 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001064:	2303      	movs	r3, #3
 8001066:	e057      	b.n	8001118 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001068:	4b2e      	ldr	r3, [pc, #184]	@ (8001124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800106a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800106e:	4a2d      	ldr	r2, [pc, #180]	@ (8001124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001070:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001074:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001078:	e04d      	b.n	8001116 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001080:	d141      	bne.n	8001106 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001082:	4b28      	ldr	r3, [pc, #160]	@ (8001124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800108a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800108e:	d131      	bne.n	80010f4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001090:	4b24      	ldr	r3, [pc, #144]	@ (8001124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001092:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001096:	4a23      	ldr	r2, [pc, #140]	@ (8001124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001098:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800109c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80010a0:	4b20      	ldr	r3, [pc, #128]	@ (8001124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80010a8:	4a1e      	ldr	r2, [pc, #120]	@ (8001124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010ae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80010b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001128 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2232      	movs	r2, #50	@ 0x32
 80010b6:	fb02 f303 	mul.w	r3, r2, r3
 80010ba:	4a1c      	ldr	r2, [pc, #112]	@ (800112c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80010bc:	fba2 2303 	umull	r2, r3, r2, r3
 80010c0:	0c9b      	lsrs	r3, r3, #18
 80010c2:	3301      	adds	r3, #1
 80010c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010c6:	e002      	b.n	80010ce <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	3b01      	subs	r3, #1
 80010cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010ce:	4b15      	ldr	r3, [pc, #84]	@ (8001124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010da:	d102      	bne.n	80010e2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d1f2      	bne.n	80010c8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010e2:	4b10      	ldr	r3, [pc, #64]	@ (8001124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010e4:	695b      	ldr	r3, [r3, #20]
 80010e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010ee:	d112      	bne.n	8001116 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80010f0:	2303      	movs	r3, #3
 80010f2:	e011      	b.n	8001118 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80010f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001100:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001104:	e007      	b.n	8001116 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001106:	4b07      	ldr	r3, [pc, #28]	@ (8001124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800110e:	4a05      	ldr	r2, [pc, #20]	@ (8001124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001110:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001114:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001116:	2300      	movs	r3, #0
}
 8001118:	4618      	mov	r0, r3
 800111a:	3714      	adds	r7, #20
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	40007000 	.word	0x40007000
 8001128:	20000020 	.word	0x20000020
 800112c:	431bde83 	.word	0x431bde83

08001130 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001134:	4b05      	ldr	r3, [pc, #20]	@ (800114c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	4a04      	ldr	r2, [pc, #16]	@ (800114c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800113a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800113e:	6093      	str	r3, [r2, #8]
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	40007000 	.word	0x40007000

08001150 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b088      	sub	sp, #32
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d101      	bne.n	8001162 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e2fe      	b.n	8001760 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	2b00      	cmp	r3, #0
 800116c:	d075      	beq.n	800125a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800116e:	4b97      	ldr	r3, [pc, #604]	@ (80013cc <HAL_RCC_OscConfig+0x27c>)
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	f003 030c 	and.w	r3, r3, #12
 8001176:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001178:	4b94      	ldr	r3, [pc, #592]	@ (80013cc <HAL_RCC_OscConfig+0x27c>)
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	f003 0303 	and.w	r3, r3, #3
 8001180:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	2b0c      	cmp	r3, #12
 8001186:	d102      	bne.n	800118e <HAL_RCC_OscConfig+0x3e>
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	2b03      	cmp	r3, #3
 800118c:	d002      	beq.n	8001194 <HAL_RCC_OscConfig+0x44>
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	2b08      	cmp	r3, #8
 8001192:	d10b      	bne.n	80011ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001194:	4b8d      	ldr	r3, [pc, #564]	@ (80013cc <HAL_RCC_OscConfig+0x27c>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d05b      	beq.n	8001258 <HAL_RCC_OscConfig+0x108>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d157      	bne.n	8001258 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	e2d9      	b.n	8001760 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011b4:	d106      	bne.n	80011c4 <HAL_RCC_OscConfig+0x74>
 80011b6:	4b85      	ldr	r3, [pc, #532]	@ (80013cc <HAL_RCC_OscConfig+0x27c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a84      	ldr	r2, [pc, #528]	@ (80013cc <HAL_RCC_OscConfig+0x27c>)
 80011bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011c0:	6013      	str	r3, [r2, #0]
 80011c2:	e01d      	b.n	8001200 <HAL_RCC_OscConfig+0xb0>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80011cc:	d10c      	bne.n	80011e8 <HAL_RCC_OscConfig+0x98>
 80011ce:	4b7f      	ldr	r3, [pc, #508]	@ (80013cc <HAL_RCC_OscConfig+0x27c>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a7e      	ldr	r2, [pc, #504]	@ (80013cc <HAL_RCC_OscConfig+0x27c>)
 80011d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011d8:	6013      	str	r3, [r2, #0]
 80011da:	4b7c      	ldr	r3, [pc, #496]	@ (80013cc <HAL_RCC_OscConfig+0x27c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a7b      	ldr	r2, [pc, #492]	@ (80013cc <HAL_RCC_OscConfig+0x27c>)
 80011e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011e4:	6013      	str	r3, [r2, #0]
 80011e6:	e00b      	b.n	8001200 <HAL_RCC_OscConfig+0xb0>
 80011e8:	4b78      	ldr	r3, [pc, #480]	@ (80013cc <HAL_RCC_OscConfig+0x27c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a77      	ldr	r2, [pc, #476]	@ (80013cc <HAL_RCC_OscConfig+0x27c>)
 80011ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011f2:	6013      	str	r3, [r2, #0]
 80011f4:	4b75      	ldr	r3, [pc, #468]	@ (80013cc <HAL_RCC_OscConfig+0x27c>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a74      	ldr	r2, [pc, #464]	@ (80013cc <HAL_RCC_OscConfig+0x27c>)
 80011fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d013      	beq.n	8001230 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001208:	f7ff fc5a 	bl	8000ac0 <HAL_GetTick>
 800120c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800120e:	e008      	b.n	8001222 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001210:	f7ff fc56 	bl	8000ac0 <HAL_GetTick>
 8001214:	4602      	mov	r2, r0
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	2b64      	cmp	r3, #100	@ 0x64
 800121c:	d901      	bls.n	8001222 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800121e:	2303      	movs	r3, #3
 8001220:	e29e      	b.n	8001760 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001222:	4b6a      	ldr	r3, [pc, #424]	@ (80013cc <HAL_RCC_OscConfig+0x27c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d0f0      	beq.n	8001210 <HAL_RCC_OscConfig+0xc0>
 800122e:	e014      	b.n	800125a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001230:	f7ff fc46 	bl	8000ac0 <HAL_GetTick>
 8001234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001236:	e008      	b.n	800124a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001238:	f7ff fc42 	bl	8000ac0 <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	2b64      	cmp	r3, #100	@ 0x64
 8001244:	d901      	bls.n	800124a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001246:	2303      	movs	r3, #3
 8001248:	e28a      	b.n	8001760 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800124a:	4b60      	ldr	r3, [pc, #384]	@ (80013cc <HAL_RCC_OscConfig+0x27c>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d1f0      	bne.n	8001238 <HAL_RCC_OscConfig+0xe8>
 8001256:	e000      	b.n	800125a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001258:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	2b00      	cmp	r3, #0
 8001264:	d075      	beq.n	8001352 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001266:	4b59      	ldr	r3, [pc, #356]	@ (80013cc <HAL_RCC_OscConfig+0x27c>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	f003 030c 	and.w	r3, r3, #12
 800126e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001270:	4b56      	ldr	r3, [pc, #344]	@ (80013cc <HAL_RCC_OscConfig+0x27c>)
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	f003 0303 	and.w	r3, r3, #3
 8001278:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	2b0c      	cmp	r3, #12
 800127e:	d102      	bne.n	8001286 <HAL_RCC_OscConfig+0x136>
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	2b02      	cmp	r3, #2
 8001284:	d002      	beq.n	800128c <HAL_RCC_OscConfig+0x13c>
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	2b04      	cmp	r3, #4
 800128a:	d11f      	bne.n	80012cc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800128c:	4b4f      	ldr	r3, [pc, #316]	@ (80013cc <HAL_RCC_OscConfig+0x27c>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001294:	2b00      	cmp	r3, #0
 8001296:	d005      	beq.n	80012a4 <HAL_RCC_OscConfig+0x154>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d101      	bne.n	80012a4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e25d      	b.n	8001760 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012a4:	4b49      	ldr	r3, [pc, #292]	@ (80013cc <HAL_RCC_OscConfig+0x27c>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	691b      	ldr	r3, [r3, #16]
 80012b0:	061b      	lsls	r3, r3, #24
 80012b2:	4946      	ldr	r1, [pc, #280]	@ (80013cc <HAL_RCC_OscConfig+0x27c>)
 80012b4:	4313      	orrs	r3, r2
 80012b6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80012b8:	4b45      	ldr	r3, [pc, #276]	@ (80013d0 <HAL_RCC_OscConfig+0x280>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff fbb3 	bl	8000a28 <HAL_InitTick>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d043      	beq.n	8001350 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	e249      	b.n	8001760 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d023      	beq.n	800131c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012d4:	4b3d      	ldr	r3, [pc, #244]	@ (80013cc <HAL_RCC_OscConfig+0x27c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a3c      	ldr	r2, [pc, #240]	@ (80013cc <HAL_RCC_OscConfig+0x27c>)
 80012da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e0:	f7ff fbee 	bl	8000ac0 <HAL_GetTick>
 80012e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012e6:	e008      	b.n	80012fa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012e8:	f7ff fbea 	bl	8000ac0 <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d901      	bls.n	80012fa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e232      	b.n	8001760 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012fa:	4b34      	ldr	r3, [pc, #208]	@ (80013cc <HAL_RCC_OscConfig+0x27c>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001302:	2b00      	cmp	r3, #0
 8001304:	d0f0      	beq.n	80012e8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001306:	4b31      	ldr	r3, [pc, #196]	@ (80013cc <HAL_RCC_OscConfig+0x27c>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	691b      	ldr	r3, [r3, #16]
 8001312:	061b      	lsls	r3, r3, #24
 8001314:	492d      	ldr	r1, [pc, #180]	@ (80013cc <HAL_RCC_OscConfig+0x27c>)
 8001316:	4313      	orrs	r3, r2
 8001318:	604b      	str	r3, [r1, #4]
 800131a:	e01a      	b.n	8001352 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800131c:	4b2b      	ldr	r3, [pc, #172]	@ (80013cc <HAL_RCC_OscConfig+0x27c>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a2a      	ldr	r2, [pc, #168]	@ (80013cc <HAL_RCC_OscConfig+0x27c>)
 8001322:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001326:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001328:	f7ff fbca 	bl	8000ac0 <HAL_GetTick>
 800132c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800132e:	e008      	b.n	8001342 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001330:	f7ff fbc6 	bl	8000ac0 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	2b02      	cmp	r3, #2
 800133c:	d901      	bls.n	8001342 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e20e      	b.n	8001760 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001342:	4b22      	ldr	r3, [pc, #136]	@ (80013cc <HAL_RCC_OscConfig+0x27c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800134a:	2b00      	cmp	r3, #0
 800134c:	d1f0      	bne.n	8001330 <HAL_RCC_OscConfig+0x1e0>
 800134e:	e000      	b.n	8001352 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001350:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0308 	and.w	r3, r3, #8
 800135a:	2b00      	cmp	r3, #0
 800135c:	d041      	beq.n	80013e2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	695b      	ldr	r3, [r3, #20]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d01c      	beq.n	80013a0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001366:	4b19      	ldr	r3, [pc, #100]	@ (80013cc <HAL_RCC_OscConfig+0x27c>)
 8001368:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800136c:	4a17      	ldr	r2, [pc, #92]	@ (80013cc <HAL_RCC_OscConfig+0x27c>)
 800136e:	f043 0301 	orr.w	r3, r3, #1
 8001372:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001376:	f7ff fba3 	bl	8000ac0 <HAL_GetTick>
 800137a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800137c:	e008      	b.n	8001390 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800137e:	f7ff fb9f 	bl	8000ac0 <HAL_GetTick>
 8001382:	4602      	mov	r2, r0
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	2b02      	cmp	r3, #2
 800138a:	d901      	bls.n	8001390 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800138c:	2303      	movs	r3, #3
 800138e:	e1e7      	b.n	8001760 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001390:	4b0e      	ldr	r3, [pc, #56]	@ (80013cc <HAL_RCC_OscConfig+0x27c>)
 8001392:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	2b00      	cmp	r3, #0
 800139c:	d0ef      	beq.n	800137e <HAL_RCC_OscConfig+0x22e>
 800139e:	e020      	b.n	80013e2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013a0:	4b0a      	ldr	r3, [pc, #40]	@ (80013cc <HAL_RCC_OscConfig+0x27c>)
 80013a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013a6:	4a09      	ldr	r2, [pc, #36]	@ (80013cc <HAL_RCC_OscConfig+0x27c>)
 80013a8:	f023 0301 	bic.w	r3, r3, #1
 80013ac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013b0:	f7ff fb86 	bl	8000ac0 <HAL_GetTick>
 80013b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013b6:	e00d      	b.n	80013d4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013b8:	f7ff fb82 	bl	8000ac0 <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d906      	bls.n	80013d4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e1ca      	b.n	8001760 <HAL_RCC_OscConfig+0x610>
 80013ca:	bf00      	nop
 80013cc:	40021000 	.word	0x40021000
 80013d0:	20000024 	.word	0x20000024
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013d4:	4b8c      	ldr	r3, [pc, #560]	@ (8001608 <HAL_RCC_OscConfig+0x4b8>)
 80013d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d1ea      	bne.n	80013b8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0304 	and.w	r3, r3, #4
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	f000 80a6 	beq.w	800153c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013f0:	2300      	movs	r3, #0
 80013f2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80013f4:	4b84      	ldr	r3, [pc, #528]	@ (8001608 <HAL_RCC_OscConfig+0x4b8>)
 80013f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d101      	bne.n	8001404 <HAL_RCC_OscConfig+0x2b4>
 8001400:	2301      	movs	r3, #1
 8001402:	e000      	b.n	8001406 <HAL_RCC_OscConfig+0x2b6>
 8001404:	2300      	movs	r3, #0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d00d      	beq.n	8001426 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800140a:	4b7f      	ldr	r3, [pc, #508]	@ (8001608 <HAL_RCC_OscConfig+0x4b8>)
 800140c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800140e:	4a7e      	ldr	r2, [pc, #504]	@ (8001608 <HAL_RCC_OscConfig+0x4b8>)
 8001410:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001414:	6593      	str	r3, [r2, #88]	@ 0x58
 8001416:	4b7c      	ldr	r3, [pc, #496]	@ (8001608 <HAL_RCC_OscConfig+0x4b8>)
 8001418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800141a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001422:	2301      	movs	r3, #1
 8001424:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001426:	4b79      	ldr	r3, [pc, #484]	@ (800160c <HAL_RCC_OscConfig+0x4bc>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800142e:	2b00      	cmp	r3, #0
 8001430:	d118      	bne.n	8001464 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001432:	4b76      	ldr	r3, [pc, #472]	@ (800160c <HAL_RCC_OscConfig+0x4bc>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a75      	ldr	r2, [pc, #468]	@ (800160c <HAL_RCC_OscConfig+0x4bc>)
 8001438:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800143c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800143e:	f7ff fb3f 	bl	8000ac0 <HAL_GetTick>
 8001442:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001444:	e008      	b.n	8001458 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001446:	f7ff fb3b 	bl	8000ac0 <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d901      	bls.n	8001458 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	e183      	b.n	8001760 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001458:	4b6c      	ldr	r3, [pc, #432]	@ (800160c <HAL_RCC_OscConfig+0x4bc>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001460:	2b00      	cmp	r3, #0
 8001462:	d0f0      	beq.n	8001446 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	2b01      	cmp	r3, #1
 800146a:	d108      	bne.n	800147e <HAL_RCC_OscConfig+0x32e>
 800146c:	4b66      	ldr	r3, [pc, #408]	@ (8001608 <HAL_RCC_OscConfig+0x4b8>)
 800146e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001472:	4a65      	ldr	r2, [pc, #404]	@ (8001608 <HAL_RCC_OscConfig+0x4b8>)
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800147c:	e024      	b.n	80014c8 <HAL_RCC_OscConfig+0x378>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	2b05      	cmp	r3, #5
 8001484:	d110      	bne.n	80014a8 <HAL_RCC_OscConfig+0x358>
 8001486:	4b60      	ldr	r3, [pc, #384]	@ (8001608 <HAL_RCC_OscConfig+0x4b8>)
 8001488:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800148c:	4a5e      	ldr	r2, [pc, #376]	@ (8001608 <HAL_RCC_OscConfig+0x4b8>)
 800148e:	f043 0304 	orr.w	r3, r3, #4
 8001492:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001496:	4b5c      	ldr	r3, [pc, #368]	@ (8001608 <HAL_RCC_OscConfig+0x4b8>)
 8001498:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800149c:	4a5a      	ldr	r2, [pc, #360]	@ (8001608 <HAL_RCC_OscConfig+0x4b8>)
 800149e:	f043 0301 	orr.w	r3, r3, #1
 80014a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80014a6:	e00f      	b.n	80014c8 <HAL_RCC_OscConfig+0x378>
 80014a8:	4b57      	ldr	r3, [pc, #348]	@ (8001608 <HAL_RCC_OscConfig+0x4b8>)
 80014aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014ae:	4a56      	ldr	r2, [pc, #344]	@ (8001608 <HAL_RCC_OscConfig+0x4b8>)
 80014b0:	f023 0301 	bic.w	r3, r3, #1
 80014b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80014b8:	4b53      	ldr	r3, [pc, #332]	@ (8001608 <HAL_RCC_OscConfig+0x4b8>)
 80014ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014be:	4a52      	ldr	r2, [pc, #328]	@ (8001608 <HAL_RCC_OscConfig+0x4b8>)
 80014c0:	f023 0304 	bic.w	r3, r3, #4
 80014c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d016      	beq.n	80014fe <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014d0:	f7ff faf6 	bl	8000ac0 <HAL_GetTick>
 80014d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014d6:	e00a      	b.n	80014ee <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014d8:	f7ff faf2 	bl	8000ac0 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e138      	b.n	8001760 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014ee:	4b46      	ldr	r3, [pc, #280]	@ (8001608 <HAL_RCC_OscConfig+0x4b8>)
 80014f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014f4:	f003 0302 	and.w	r3, r3, #2
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d0ed      	beq.n	80014d8 <HAL_RCC_OscConfig+0x388>
 80014fc:	e015      	b.n	800152a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014fe:	f7ff fadf 	bl	8000ac0 <HAL_GetTick>
 8001502:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001504:	e00a      	b.n	800151c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001506:	f7ff fadb 	bl	8000ac0 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001514:	4293      	cmp	r3, r2
 8001516:	d901      	bls.n	800151c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e121      	b.n	8001760 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800151c:	4b3a      	ldr	r3, [pc, #232]	@ (8001608 <HAL_RCC_OscConfig+0x4b8>)
 800151e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	2b00      	cmp	r3, #0
 8001528:	d1ed      	bne.n	8001506 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800152a:	7ffb      	ldrb	r3, [r7, #31]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d105      	bne.n	800153c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001530:	4b35      	ldr	r3, [pc, #212]	@ (8001608 <HAL_RCC_OscConfig+0x4b8>)
 8001532:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001534:	4a34      	ldr	r2, [pc, #208]	@ (8001608 <HAL_RCC_OscConfig+0x4b8>)
 8001536:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800153a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0320 	and.w	r3, r3, #32
 8001544:	2b00      	cmp	r3, #0
 8001546:	d03c      	beq.n	80015c2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d01c      	beq.n	800158a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001550:	4b2d      	ldr	r3, [pc, #180]	@ (8001608 <HAL_RCC_OscConfig+0x4b8>)
 8001552:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001556:	4a2c      	ldr	r2, [pc, #176]	@ (8001608 <HAL_RCC_OscConfig+0x4b8>)
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001560:	f7ff faae 	bl	8000ac0 <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001566:	e008      	b.n	800157a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001568:	f7ff faaa 	bl	8000ac0 <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e0f2      	b.n	8001760 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800157a:	4b23      	ldr	r3, [pc, #140]	@ (8001608 <HAL_RCC_OscConfig+0x4b8>)
 800157c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001580:	f003 0302 	and.w	r3, r3, #2
 8001584:	2b00      	cmp	r3, #0
 8001586:	d0ef      	beq.n	8001568 <HAL_RCC_OscConfig+0x418>
 8001588:	e01b      	b.n	80015c2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800158a:	4b1f      	ldr	r3, [pc, #124]	@ (8001608 <HAL_RCC_OscConfig+0x4b8>)
 800158c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001590:	4a1d      	ldr	r2, [pc, #116]	@ (8001608 <HAL_RCC_OscConfig+0x4b8>)
 8001592:	f023 0301 	bic.w	r3, r3, #1
 8001596:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800159a:	f7ff fa91 	bl	8000ac0 <HAL_GetTick>
 800159e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80015a0:	e008      	b.n	80015b4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015a2:	f7ff fa8d 	bl	8000ac0 <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d901      	bls.n	80015b4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e0d5      	b.n	8001760 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80015b4:	4b14      	ldr	r3, [pc, #80]	@ (8001608 <HAL_RCC_OscConfig+0x4b8>)
 80015b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d1ef      	bne.n	80015a2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	69db      	ldr	r3, [r3, #28]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	f000 80c9 	beq.w	800175e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001608 <HAL_RCC_OscConfig+0x4b8>)
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	f003 030c 	and.w	r3, r3, #12
 80015d4:	2b0c      	cmp	r3, #12
 80015d6:	f000 8083 	beq.w	80016e0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	69db      	ldr	r3, [r3, #28]
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d15e      	bne.n	80016a0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015e2:	4b09      	ldr	r3, [pc, #36]	@ (8001608 <HAL_RCC_OscConfig+0x4b8>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a08      	ldr	r2, [pc, #32]	@ (8001608 <HAL_RCC_OscConfig+0x4b8>)
 80015e8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80015ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ee:	f7ff fa67 	bl	8000ac0 <HAL_GetTick>
 80015f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015f4:	e00c      	b.n	8001610 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015f6:	f7ff fa63 	bl	8000ac0 <HAL_GetTick>
 80015fa:	4602      	mov	r2, r0
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d905      	bls.n	8001610 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e0ab      	b.n	8001760 <HAL_RCC_OscConfig+0x610>
 8001608:	40021000 	.word	0x40021000
 800160c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001610:	4b55      	ldr	r3, [pc, #340]	@ (8001768 <HAL_RCC_OscConfig+0x618>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d1ec      	bne.n	80015f6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800161c:	4b52      	ldr	r3, [pc, #328]	@ (8001768 <HAL_RCC_OscConfig+0x618>)
 800161e:	68da      	ldr	r2, [r3, #12]
 8001620:	4b52      	ldr	r3, [pc, #328]	@ (800176c <HAL_RCC_OscConfig+0x61c>)
 8001622:	4013      	ands	r3, r2
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	6a11      	ldr	r1, [r2, #32]
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800162c:	3a01      	subs	r2, #1
 800162e:	0112      	lsls	r2, r2, #4
 8001630:	4311      	orrs	r1, r2
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001636:	0212      	lsls	r2, r2, #8
 8001638:	4311      	orrs	r1, r2
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800163e:	0852      	lsrs	r2, r2, #1
 8001640:	3a01      	subs	r2, #1
 8001642:	0552      	lsls	r2, r2, #21
 8001644:	4311      	orrs	r1, r2
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800164a:	0852      	lsrs	r2, r2, #1
 800164c:	3a01      	subs	r2, #1
 800164e:	0652      	lsls	r2, r2, #25
 8001650:	4311      	orrs	r1, r2
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001656:	06d2      	lsls	r2, r2, #27
 8001658:	430a      	orrs	r2, r1
 800165a:	4943      	ldr	r1, [pc, #268]	@ (8001768 <HAL_RCC_OscConfig+0x618>)
 800165c:	4313      	orrs	r3, r2
 800165e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001660:	4b41      	ldr	r3, [pc, #260]	@ (8001768 <HAL_RCC_OscConfig+0x618>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a40      	ldr	r2, [pc, #256]	@ (8001768 <HAL_RCC_OscConfig+0x618>)
 8001666:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800166a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800166c:	4b3e      	ldr	r3, [pc, #248]	@ (8001768 <HAL_RCC_OscConfig+0x618>)
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	4a3d      	ldr	r2, [pc, #244]	@ (8001768 <HAL_RCC_OscConfig+0x618>)
 8001672:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001676:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001678:	f7ff fa22 	bl	8000ac0 <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001680:	f7ff fa1e 	bl	8000ac0 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e066      	b.n	8001760 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001692:	4b35      	ldr	r3, [pc, #212]	@ (8001768 <HAL_RCC_OscConfig+0x618>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d0f0      	beq.n	8001680 <HAL_RCC_OscConfig+0x530>
 800169e:	e05e      	b.n	800175e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016a0:	4b31      	ldr	r3, [pc, #196]	@ (8001768 <HAL_RCC_OscConfig+0x618>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a30      	ldr	r2, [pc, #192]	@ (8001768 <HAL_RCC_OscConfig+0x618>)
 80016a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80016aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ac:	f7ff fa08 	bl	8000ac0 <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016b4:	f7ff fa04 	bl	8000ac0 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e04c      	b.n	8001760 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016c6:	4b28      	ldr	r3, [pc, #160]	@ (8001768 <HAL_RCC_OscConfig+0x618>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d1f0      	bne.n	80016b4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80016d2:	4b25      	ldr	r3, [pc, #148]	@ (8001768 <HAL_RCC_OscConfig+0x618>)
 80016d4:	68da      	ldr	r2, [r3, #12]
 80016d6:	4924      	ldr	r1, [pc, #144]	@ (8001768 <HAL_RCC_OscConfig+0x618>)
 80016d8:	4b25      	ldr	r3, [pc, #148]	@ (8001770 <HAL_RCC_OscConfig+0x620>)
 80016da:	4013      	ands	r3, r2
 80016dc:	60cb      	str	r3, [r1, #12]
 80016de:	e03e      	b.n	800175e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	69db      	ldr	r3, [r3, #28]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d101      	bne.n	80016ec <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e039      	b.n	8001760 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80016ec:	4b1e      	ldr	r3, [pc, #120]	@ (8001768 <HAL_RCC_OscConfig+0x618>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	f003 0203 	and.w	r2, r3, #3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a1b      	ldr	r3, [r3, #32]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d12c      	bne.n	800175a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800170a:	3b01      	subs	r3, #1
 800170c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800170e:	429a      	cmp	r2, r3
 8001710:	d123      	bne.n	800175a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800171c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800171e:	429a      	cmp	r2, r3
 8001720:	d11b      	bne.n	800175a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800172c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800172e:	429a      	cmp	r2, r3
 8001730:	d113      	bne.n	800175a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173c:	085b      	lsrs	r3, r3, #1
 800173e:	3b01      	subs	r3, #1
 8001740:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001742:	429a      	cmp	r2, r3
 8001744:	d109      	bne.n	800175a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001750:	085b      	lsrs	r3, r3, #1
 8001752:	3b01      	subs	r3, #1
 8001754:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001756:	429a      	cmp	r2, r3
 8001758:	d001      	beq.n	800175e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e000      	b.n	8001760 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800175e:	2300      	movs	r3, #0
}
 8001760:	4618      	mov	r0, r3
 8001762:	3720      	adds	r7, #32
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	40021000 	.word	0x40021000
 800176c:	019f800c 	.word	0x019f800c
 8001770:	feeefffc 	.word	0xfeeefffc

08001774 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800177e:	2300      	movs	r3, #0
 8001780:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d101      	bne.n	800178c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e11e      	b.n	80019ca <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800178c:	4b91      	ldr	r3, [pc, #580]	@ (80019d4 <HAL_RCC_ClockConfig+0x260>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 030f 	and.w	r3, r3, #15
 8001794:	683a      	ldr	r2, [r7, #0]
 8001796:	429a      	cmp	r2, r3
 8001798:	d910      	bls.n	80017bc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800179a:	4b8e      	ldr	r3, [pc, #568]	@ (80019d4 <HAL_RCC_ClockConfig+0x260>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f023 020f 	bic.w	r2, r3, #15
 80017a2:	498c      	ldr	r1, [pc, #560]	@ (80019d4 <HAL_RCC_ClockConfig+0x260>)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017aa:	4b8a      	ldr	r3, [pc, #552]	@ (80019d4 <HAL_RCC_ClockConfig+0x260>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 030f 	and.w	r3, r3, #15
 80017b2:	683a      	ldr	r2, [r7, #0]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d001      	beq.n	80017bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e106      	b.n	80019ca <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0301 	and.w	r3, r3, #1
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d073      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	2b03      	cmp	r3, #3
 80017ce:	d129      	bne.n	8001824 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017d0:	4b81      	ldr	r3, [pc, #516]	@ (80019d8 <HAL_RCC_ClockConfig+0x264>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d101      	bne.n	80017e0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e0f4      	b.n	80019ca <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80017e0:	f000 f99e 	bl	8001b20 <RCC_GetSysClockFreqFromPLLSource>
 80017e4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	4a7c      	ldr	r2, [pc, #496]	@ (80019dc <HAL_RCC_ClockConfig+0x268>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d93f      	bls.n	800186e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80017ee:	4b7a      	ldr	r3, [pc, #488]	@ (80019d8 <HAL_RCC_ClockConfig+0x264>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d009      	beq.n	800180e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001802:	2b00      	cmp	r3, #0
 8001804:	d033      	beq.n	800186e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800180a:	2b00      	cmp	r3, #0
 800180c:	d12f      	bne.n	800186e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800180e:	4b72      	ldr	r3, [pc, #456]	@ (80019d8 <HAL_RCC_ClockConfig+0x264>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001816:	4a70      	ldr	r2, [pc, #448]	@ (80019d8 <HAL_RCC_ClockConfig+0x264>)
 8001818:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800181c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800181e:	2380      	movs	r3, #128	@ 0x80
 8001820:	617b      	str	r3, [r7, #20]
 8001822:	e024      	b.n	800186e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	2b02      	cmp	r3, #2
 800182a:	d107      	bne.n	800183c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800182c:	4b6a      	ldr	r3, [pc, #424]	@ (80019d8 <HAL_RCC_ClockConfig+0x264>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d109      	bne.n	800184c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e0c6      	b.n	80019ca <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800183c:	4b66      	ldr	r3, [pc, #408]	@ (80019d8 <HAL_RCC_ClockConfig+0x264>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001844:	2b00      	cmp	r3, #0
 8001846:	d101      	bne.n	800184c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e0be      	b.n	80019ca <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800184c:	f000 f8ce 	bl	80019ec <HAL_RCC_GetSysClockFreq>
 8001850:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	4a61      	ldr	r2, [pc, #388]	@ (80019dc <HAL_RCC_ClockConfig+0x268>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d909      	bls.n	800186e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800185a:	4b5f      	ldr	r3, [pc, #380]	@ (80019d8 <HAL_RCC_ClockConfig+0x264>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001862:	4a5d      	ldr	r2, [pc, #372]	@ (80019d8 <HAL_RCC_ClockConfig+0x264>)
 8001864:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001868:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800186a:	2380      	movs	r3, #128	@ 0x80
 800186c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800186e:	4b5a      	ldr	r3, [pc, #360]	@ (80019d8 <HAL_RCC_ClockConfig+0x264>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f023 0203 	bic.w	r2, r3, #3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	4957      	ldr	r1, [pc, #348]	@ (80019d8 <HAL_RCC_ClockConfig+0x264>)
 800187c:	4313      	orrs	r3, r2
 800187e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001880:	f7ff f91e 	bl	8000ac0 <HAL_GetTick>
 8001884:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001886:	e00a      	b.n	800189e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001888:	f7ff f91a 	bl	8000ac0 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001896:	4293      	cmp	r3, r2
 8001898:	d901      	bls.n	800189e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e095      	b.n	80019ca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800189e:	4b4e      	ldr	r3, [pc, #312]	@ (80019d8 <HAL_RCC_ClockConfig+0x264>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f003 020c 	and.w	r2, r3, #12
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d1eb      	bne.n	8001888 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0302 	and.w	r3, r3, #2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d023      	beq.n	8001904 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0304 	and.w	r3, r3, #4
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d005      	beq.n	80018d4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018c8:	4b43      	ldr	r3, [pc, #268]	@ (80019d8 <HAL_RCC_ClockConfig+0x264>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	4a42      	ldr	r2, [pc, #264]	@ (80019d8 <HAL_RCC_ClockConfig+0x264>)
 80018ce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80018d2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0308 	and.w	r3, r3, #8
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d007      	beq.n	80018f0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80018e0:	4b3d      	ldr	r3, [pc, #244]	@ (80019d8 <HAL_RCC_ClockConfig+0x264>)
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80018e8:	4a3b      	ldr	r2, [pc, #236]	@ (80019d8 <HAL_RCC_ClockConfig+0x264>)
 80018ea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80018ee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018f0:	4b39      	ldr	r3, [pc, #228]	@ (80019d8 <HAL_RCC_ClockConfig+0x264>)
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	4936      	ldr	r1, [pc, #216]	@ (80019d8 <HAL_RCC_ClockConfig+0x264>)
 80018fe:	4313      	orrs	r3, r2
 8001900:	608b      	str	r3, [r1, #8]
 8001902:	e008      	b.n	8001916 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	2b80      	cmp	r3, #128	@ 0x80
 8001908:	d105      	bne.n	8001916 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800190a:	4b33      	ldr	r3, [pc, #204]	@ (80019d8 <HAL_RCC_ClockConfig+0x264>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	4a32      	ldr	r2, [pc, #200]	@ (80019d8 <HAL_RCC_ClockConfig+0x264>)
 8001910:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001914:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001916:	4b2f      	ldr	r3, [pc, #188]	@ (80019d4 <HAL_RCC_ClockConfig+0x260>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 030f 	and.w	r3, r3, #15
 800191e:	683a      	ldr	r2, [r7, #0]
 8001920:	429a      	cmp	r2, r3
 8001922:	d21d      	bcs.n	8001960 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001924:	4b2b      	ldr	r3, [pc, #172]	@ (80019d4 <HAL_RCC_ClockConfig+0x260>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f023 020f 	bic.w	r2, r3, #15
 800192c:	4929      	ldr	r1, [pc, #164]	@ (80019d4 <HAL_RCC_ClockConfig+0x260>)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	4313      	orrs	r3, r2
 8001932:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001934:	f7ff f8c4 	bl	8000ac0 <HAL_GetTick>
 8001938:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800193a:	e00a      	b.n	8001952 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800193c:	f7ff f8c0 	bl	8000ac0 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	f241 3288 	movw	r2, #5000	@ 0x1388
 800194a:	4293      	cmp	r3, r2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e03b      	b.n	80019ca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001952:	4b20      	ldr	r3, [pc, #128]	@ (80019d4 <HAL_RCC_ClockConfig+0x260>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 030f 	and.w	r3, r3, #15
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	429a      	cmp	r2, r3
 800195e:	d1ed      	bne.n	800193c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0304 	and.w	r3, r3, #4
 8001968:	2b00      	cmp	r3, #0
 800196a:	d008      	beq.n	800197e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800196c:	4b1a      	ldr	r3, [pc, #104]	@ (80019d8 <HAL_RCC_ClockConfig+0x264>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	4917      	ldr	r1, [pc, #92]	@ (80019d8 <HAL_RCC_ClockConfig+0x264>)
 800197a:	4313      	orrs	r3, r2
 800197c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0308 	and.w	r3, r3, #8
 8001986:	2b00      	cmp	r3, #0
 8001988:	d009      	beq.n	800199e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800198a:	4b13      	ldr	r3, [pc, #76]	@ (80019d8 <HAL_RCC_ClockConfig+0x264>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	00db      	lsls	r3, r3, #3
 8001998:	490f      	ldr	r1, [pc, #60]	@ (80019d8 <HAL_RCC_ClockConfig+0x264>)
 800199a:	4313      	orrs	r3, r2
 800199c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800199e:	f000 f825 	bl	80019ec <HAL_RCC_GetSysClockFreq>
 80019a2:	4602      	mov	r2, r0
 80019a4:	4b0c      	ldr	r3, [pc, #48]	@ (80019d8 <HAL_RCC_ClockConfig+0x264>)
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	091b      	lsrs	r3, r3, #4
 80019aa:	f003 030f 	and.w	r3, r3, #15
 80019ae:	490c      	ldr	r1, [pc, #48]	@ (80019e0 <HAL_RCC_ClockConfig+0x26c>)
 80019b0:	5ccb      	ldrb	r3, [r1, r3]
 80019b2:	f003 031f 	and.w	r3, r3, #31
 80019b6:	fa22 f303 	lsr.w	r3, r2, r3
 80019ba:	4a0a      	ldr	r2, [pc, #40]	@ (80019e4 <HAL_RCC_ClockConfig+0x270>)
 80019bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80019be:	4b0a      	ldr	r3, [pc, #40]	@ (80019e8 <HAL_RCC_ClockConfig+0x274>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff f830 	bl	8000a28 <HAL_InitTick>
 80019c8:	4603      	mov	r3, r0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3718      	adds	r7, #24
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40022000 	.word	0x40022000
 80019d8:	40021000 	.word	0x40021000
 80019dc:	04c4b400 	.word	0x04c4b400
 80019e0:	080037a4 	.word	0x080037a4
 80019e4:	20000020 	.word	0x20000020
 80019e8:	20000024 	.word	0x20000024

080019ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b087      	sub	sp, #28
 80019f0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80019f2:	4b2c      	ldr	r3, [pc, #176]	@ (8001aa4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	f003 030c 	and.w	r3, r3, #12
 80019fa:	2b04      	cmp	r3, #4
 80019fc:	d102      	bne.n	8001a04 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80019fe:	4b2a      	ldr	r3, [pc, #168]	@ (8001aa8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a00:	613b      	str	r3, [r7, #16]
 8001a02:	e047      	b.n	8001a94 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001a04:	4b27      	ldr	r3, [pc, #156]	@ (8001aa4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f003 030c 	and.w	r3, r3, #12
 8001a0c:	2b08      	cmp	r3, #8
 8001a0e:	d102      	bne.n	8001a16 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a10:	4b26      	ldr	r3, [pc, #152]	@ (8001aac <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a12:	613b      	str	r3, [r7, #16]
 8001a14:	e03e      	b.n	8001a94 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001a16:	4b23      	ldr	r3, [pc, #140]	@ (8001aa4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f003 030c 	and.w	r3, r3, #12
 8001a1e:	2b0c      	cmp	r3, #12
 8001a20:	d136      	bne.n	8001a90 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a22:	4b20      	ldr	r3, [pc, #128]	@ (8001aa4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	f003 0303 	and.w	r3, r3, #3
 8001a2a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a2c:	4b1d      	ldr	r3, [pc, #116]	@ (8001aa4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	091b      	lsrs	r3, r3, #4
 8001a32:	f003 030f 	and.w	r3, r3, #15
 8001a36:	3301      	adds	r3, #1
 8001a38:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2b03      	cmp	r3, #3
 8001a3e:	d10c      	bne.n	8001a5a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a40:	4a1a      	ldr	r2, [pc, #104]	@ (8001aac <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a48:	4a16      	ldr	r2, [pc, #88]	@ (8001aa4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a4a:	68d2      	ldr	r2, [r2, #12]
 8001a4c:	0a12      	lsrs	r2, r2, #8
 8001a4e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001a52:	fb02 f303 	mul.w	r3, r2, r3
 8001a56:	617b      	str	r3, [r7, #20]
      break;
 8001a58:	e00c      	b.n	8001a74 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a5a:	4a13      	ldr	r2, [pc, #76]	@ (8001aa8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a62:	4a10      	ldr	r2, [pc, #64]	@ (8001aa4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a64:	68d2      	ldr	r2, [r2, #12]
 8001a66:	0a12      	lsrs	r2, r2, #8
 8001a68:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001a6c:	fb02 f303 	mul.w	r3, r2, r3
 8001a70:	617b      	str	r3, [r7, #20]
      break;
 8001a72:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a74:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	0e5b      	lsrs	r3, r3, #25
 8001a7a:	f003 0303 	and.w	r3, r3, #3
 8001a7e:	3301      	adds	r3, #1
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001a84:	697a      	ldr	r2, [r7, #20]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a8c:	613b      	str	r3, [r7, #16]
 8001a8e:	e001      	b.n	8001a94 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001a90:	2300      	movs	r3, #0
 8001a92:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001a94:	693b      	ldr	r3, [r7, #16]
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	371c      	adds	r7, #28
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	00f42400 	.word	0x00f42400
 8001aac:	016e3600 	.word	0x016e3600

08001ab0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ab4:	4b03      	ldr	r3, [pc, #12]	@ (8001ac4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	20000020 	.word	0x20000020

08001ac8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001acc:	f7ff fff0 	bl	8001ab0 <HAL_RCC_GetHCLKFreq>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	4b06      	ldr	r3, [pc, #24]	@ (8001aec <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	0a1b      	lsrs	r3, r3, #8
 8001ad8:	f003 0307 	and.w	r3, r3, #7
 8001adc:	4904      	ldr	r1, [pc, #16]	@ (8001af0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ade:	5ccb      	ldrb	r3, [r1, r3]
 8001ae0:	f003 031f 	and.w	r3, r3, #31
 8001ae4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40021000 	.word	0x40021000
 8001af0:	080037b4 	.word	0x080037b4

08001af4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001af8:	f7ff ffda 	bl	8001ab0 <HAL_RCC_GetHCLKFreq>
 8001afc:	4602      	mov	r2, r0
 8001afe:	4b06      	ldr	r3, [pc, #24]	@ (8001b18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	0adb      	lsrs	r3, r3, #11
 8001b04:	f003 0307 	and.w	r3, r3, #7
 8001b08:	4904      	ldr	r1, [pc, #16]	@ (8001b1c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001b0a:	5ccb      	ldrb	r3, [r1, r3]
 8001b0c:	f003 031f 	and.w	r3, r3, #31
 8001b10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40021000 	.word	0x40021000
 8001b1c:	080037b4 	.word	0x080037b4

08001b20 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b087      	sub	sp, #28
 8001b24:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b26:	4b1e      	ldr	r3, [pc, #120]	@ (8001ba0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	f003 0303 	and.w	r3, r3, #3
 8001b2e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b30:	4b1b      	ldr	r3, [pc, #108]	@ (8001ba0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	091b      	lsrs	r3, r3, #4
 8001b36:	f003 030f 	and.w	r3, r3, #15
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	2b03      	cmp	r3, #3
 8001b42:	d10c      	bne.n	8001b5e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b44:	4a17      	ldr	r2, [pc, #92]	@ (8001ba4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b4c:	4a14      	ldr	r2, [pc, #80]	@ (8001ba0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001b4e:	68d2      	ldr	r2, [r2, #12]
 8001b50:	0a12      	lsrs	r2, r2, #8
 8001b52:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001b56:	fb02 f303 	mul.w	r3, r2, r3
 8001b5a:	617b      	str	r3, [r7, #20]
    break;
 8001b5c:	e00c      	b.n	8001b78 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b5e:	4a12      	ldr	r2, [pc, #72]	@ (8001ba8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b66:	4a0e      	ldr	r2, [pc, #56]	@ (8001ba0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001b68:	68d2      	ldr	r2, [r2, #12]
 8001b6a:	0a12      	lsrs	r2, r2, #8
 8001b6c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001b70:	fb02 f303 	mul.w	r3, r2, r3
 8001b74:	617b      	str	r3, [r7, #20]
    break;
 8001b76:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b78:	4b09      	ldr	r3, [pc, #36]	@ (8001ba0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	0e5b      	lsrs	r3, r3, #25
 8001b7e:	f003 0303 	and.w	r3, r3, #3
 8001b82:	3301      	adds	r3, #1
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001b88:	697a      	ldr	r2, [r7, #20]
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b90:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001b92:	687b      	ldr	r3, [r7, #4]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	371c      	adds	r7, #28
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	016e3600 	.word	0x016e3600
 8001ba8:	00f42400 	.word	0x00f42400

08001bac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001bb8:	2300      	movs	r3, #0
 8001bba:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	f000 8098 	beq.w	8001cfa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bce:	4b43      	ldr	r3, [pc, #268]	@ (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001bd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d10d      	bne.n	8001bf6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bda:	4b40      	ldr	r3, [pc, #256]	@ (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001bdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bde:	4a3f      	ldr	r2, [pc, #252]	@ (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001be0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001be4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001be6:	4b3d      	ldr	r3, [pc, #244]	@ (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001be8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bee:	60bb      	str	r3, [r7, #8]
 8001bf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bf6:	4b3a      	ldr	r3, [pc, #232]	@ (8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a39      	ldr	r2, [pc, #228]	@ (8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001bfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c00:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001c02:	f7fe ff5d 	bl	8000ac0 <HAL_GetTick>
 8001c06:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c08:	e009      	b.n	8001c1e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c0a:	f7fe ff59 	bl	8000ac0 <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d902      	bls.n	8001c1e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	74fb      	strb	r3, [r7, #19]
        break;
 8001c1c:	e005      	b.n	8001c2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c1e:	4b30      	ldr	r3, [pc, #192]	@ (8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d0ef      	beq.n	8001c0a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001c2a:	7cfb      	ldrb	r3, [r7, #19]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d159      	bne.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001c30:	4b2a      	ldr	r3, [pc, #168]	@ (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c3a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d01e      	beq.n	8001c80 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c46:	697a      	ldr	r2, [r7, #20]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d019      	beq.n	8001c80 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001c4c:	4b23      	ldr	r3, [pc, #140]	@ (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001c56:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001c58:	4b20      	ldr	r3, [pc, #128]	@ (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c5e:	4a1f      	ldr	r2, [pc, #124]	@ (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001c68:	4b1c      	ldr	r3, [pc, #112]	@ (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c6e:	4a1b      	ldr	r2, [pc, #108]	@ (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001c78:	4a18      	ldr	r2, [pc, #96]	@ (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d016      	beq.n	8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c8a:	f7fe ff19 	bl	8000ac0 <HAL_GetTick>
 8001c8e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c90:	e00b      	b.n	8001caa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c92:	f7fe ff15 	bl	8000ac0 <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d902      	bls.n	8001caa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	74fb      	strb	r3, [r7, #19]
            break;
 8001ca8:	e006      	b.n	8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001caa:	4b0c      	ldr	r3, [pc, #48]	@ (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cb0:	f003 0302 	and.w	r3, r3, #2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d0ec      	beq.n	8001c92 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001cb8:	7cfb      	ldrb	r3, [r7, #19]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d10b      	bne.n	8001cd6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001cbe:	4b07      	ldr	r3, [pc, #28]	@ (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cc4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ccc:	4903      	ldr	r1, [pc, #12]	@ (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001cd4:	e008      	b.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001cd6:	7cfb      	ldrb	r3, [r7, #19]
 8001cd8:	74bb      	strb	r3, [r7, #18]
 8001cda:	e005      	b.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ce4:	7cfb      	ldrb	r3, [r7, #19]
 8001ce6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ce8:	7c7b      	ldrb	r3, [r7, #17]
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d105      	bne.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cee:	4ba7      	ldr	r3, [pc, #668]	@ (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001cf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cf2:	4aa6      	ldr	r2, [pc, #664]	@ (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001cf4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001cf8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d00a      	beq.n	8001d1c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d06:	4ba1      	ldr	r3, [pc, #644]	@ (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d0c:	f023 0203 	bic.w	r2, r3, #3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	499d      	ldr	r1, [pc, #628]	@ (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d00a      	beq.n	8001d3e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001d28:	4b98      	ldr	r3, [pc, #608]	@ (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d2e:	f023 020c 	bic.w	r2, r3, #12
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	4995      	ldr	r1, [pc, #596]	@ (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0304 	and.w	r3, r3, #4
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d00a      	beq.n	8001d60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001d4a:	4b90      	ldr	r3, [pc, #576]	@ (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d50:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	498c      	ldr	r1, [pc, #560]	@ (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0308 	and.w	r3, r3, #8
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d00a      	beq.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001d6c:	4b87      	ldr	r3, [pc, #540]	@ (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d72:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	4984      	ldr	r1, [pc, #528]	@ (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0310 	and.w	r3, r3, #16
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d00a      	beq.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001d8e:	4b7f      	ldr	r3, [pc, #508]	@ (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d94:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	695b      	ldr	r3, [r3, #20]
 8001d9c:	497b      	ldr	r1, [pc, #492]	@ (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0320 	and.w	r3, r3, #32
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d00a      	beq.n	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001db0:	4b76      	ldr	r3, [pc, #472]	@ (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001db6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	699b      	ldr	r3, [r3, #24]
 8001dbe:	4973      	ldr	r1, [pc, #460]	@ (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d00a      	beq.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001dd2:	4b6e      	ldr	r3, [pc, #440]	@ (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dd8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	69db      	ldr	r3, [r3, #28]
 8001de0:	496a      	ldr	r1, [pc, #424]	@ (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001de2:	4313      	orrs	r3, r2
 8001de4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d00a      	beq.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001df4:	4b65      	ldr	r3, [pc, #404]	@ (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dfa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a1b      	ldr	r3, [r3, #32]
 8001e02:	4962      	ldr	r1, [pc, #392]	@ (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e04:	4313      	orrs	r3, r2
 8001e06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d00a      	beq.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001e16:	4b5d      	ldr	r3, [pc, #372]	@ (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e1c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e24:	4959      	ldr	r1, [pc, #356]	@ (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e26:	4313      	orrs	r3, r2
 8001e28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d00a      	beq.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001e38:	4b54      	ldr	r3, [pc, #336]	@ (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001e3e:	f023 0203 	bic.w	r2, r3, #3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e46:	4951      	ldr	r1, [pc, #324]	@ (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d00a      	beq.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001e5a:	4b4c      	ldr	r3, [pc, #304]	@ (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e60:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e68:	4948      	ldr	r1, [pc, #288]	@ (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d015      	beq.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e7c:	4b43      	ldr	r3, [pc, #268]	@ (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e82:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8a:	4940      	ldr	r1, [pc, #256]	@ (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001e9a:	d105      	bne.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001e9c:	4b3b      	ldr	r3, [pc, #236]	@ (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	4a3a      	ldr	r2, [pc, #232]	@ (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ea2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001ea6:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d015      	beq.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001eb4:	4b35      	ldr	r3, [pc, #212]	@ (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001eba:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ec2:	4932      	ldr	r1, [pc, #200]	@ (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ece:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ed2:	d105      	bne.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001ed4:	4b2d      	ldr	r3, [pc, #180]	@ (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	4a2c      	ldr	r2, [pc, #176]	@ (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001eda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001ede:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d015      	beq.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001eec:	4b27      	ldr	r3, [pc, #156]	@ (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ef2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001efa:	4924      	ldr	r1, [pc, #144]	@ (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001efc:	4313      	orrs	r3, r2
 8001efe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f06:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f0a:	d105      	bne.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f0c:	4b1f      	ldr	r3, [pc, #124]	@ (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	4a1e      	ldr	r2, [pc, #120]	@ (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001f16:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d015      	beq.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f24:	4b19      	ldr	r3, [pc, #100]	@ (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f2a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f32:	4916      	ldr	r1, [pc, #88]	@ (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f34:	4313      	orrs	r3, r2
 8001f36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001f42:	d105      	bne.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f44:	4b11      	ldr	r3, [pc, #68]	@ (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	4a10      	ldr	r2, [pc, #64]	@ (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001f4e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d019      	beq.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001f5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f62:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f6a:	4908      	ldr	r1, [pc, #32]	@ (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f76:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001f7a:	d109      	bne.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f7c:	4b03      	ldr	r3, [pc, #12]	@ (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	4a02      	ldr	r2, [pc, #8]	@ (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001f86:	60d3      	str	r3, [r2, #12]
 8001f88:	e002      	b.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8001f8a:	bf00      	nop
 8001f8c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d015      	beq.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001f9c:	4b29      	ldr	r3, [pc, #164]	@ (8002044 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8001f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fa2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001faa:	4926      	ldr	r1, [pc, #152]	@ (8002044 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8001fac:	4313      	orrs	r3, r2
 8001fae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fb6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001fba:	d105      	bne.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8001fbc:	4b21      	ldr	r3, [pc, #132]	@ (8002044 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	4a20      	ldr	r2, [pc, #128]	@ (8002044 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8001fc2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fc6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d015      	beq.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8001fd4:	4b1b      	ldr	r3, [pc, #108]	@ (8002044 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8001fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fda:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fe2:	4918      	ldr	r1, [pc, #96]	@ (8002044 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ff2:	d105      	bne.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8001ff4:	4b13      	ldr	r3, [pc, #76]	@ (8002044 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	4a12      	ldr	r2, [pc, #72]	@ (8002044 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8001ffa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ffe:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d015      	beq.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800200c:	4b0d      	ldr	r3, [pc, #52]	@ (8002044 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800200e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002012:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800201a:	490a      	ldr	r1, [pc, #40]	@ (8002044 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800201c:	4313      	orrs	r3, r2
 800201e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002026:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800202a:	d105      	bne.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800202c:	4b05      	ldr	r3, [pc, #20]	@ (8002044 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	4a04      	ldr	r2, [pc, #16]	@ (8002044 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002032:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002036:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002038:	7cbb      	ldrb	r3, [r7, #18]
}
 800203a:	4618      	mov	r0, r3
 800203c:	3718      	adds	r7, #24
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	40021000 	.word	0x40021000

08002048 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e042      	b.n	80020e0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002060:	2b00      	cmp	r3, #0
 8002062:	d106      	bne.n	8002072 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f7fe fbc9 	bl	8000804 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2224      	movs	r2, #36	@ 0x24
 8002076:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f022 0201 	bic.w	r2, r2, #1
 8002088:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800208e:	2b00      	cmp	r3, #0
 8002090:	d002      	beq.n	8002098 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 fbb2 	bl	80027fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f000 f8b3 	bl	8002204 <UART_SetConfig>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d101      	bne.n	80020a8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e01b      	b.n	80020e0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	685a      	ldr	r2, [r3, #4]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80020b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	689a      	ldr	r2, [r3, #8]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80020c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f042 0201 	orr.w	r2, r2, #1
 80020d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f000 fc31 	bl	8002940 <UART_CheckIdleState>
 80020de:	4603      	mov	r3, r0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b08a      	sub	sp, #40	@ 0x28
 80020ec:	af02      	add	r7, sp, #8
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	603b      	str	r3, [r7, #0]
 80020f4:	4613      	mov	r3, r2
 80020f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020fe:	2b20      	cmp	r3, #32
 8002100:	d17b      	bne.n	80021fa <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d002      	beq.n	800210e <HAL_UART_Transmit+0x26>
 8002108:	88fb      	ldrh	r3, [r7, #6]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e074      	b.n	80021fc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2200      	movs	r2, #0
 8002116:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2221      	movs	r2, #33	@ 0x21
 800211e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002122:	f7fe fccd 	bl	8000ac0 <HAL_GetTick>
 8002126:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	88fa      	ldrh	r2, [r7, #6]
 800212c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	88fa      	ldrh	r2, [r7, #6]
 8002134:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002140:	d108      	bne.n	8002154 <HAL_UART_Transmit+0x6c>
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d104      	bne.n	8002154 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800214a:	2300      	movs	r3, #0
 800214c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	61bb      	str	r3, [r7, #24]
 8002152:	e003      	b.n	800215c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002158:	2300      	movs	r3, #0
 800215a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800215c:	e030      	b.n	80021c0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	9300      	str	r3, [sp, #0]
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	2200      	movs	r2, #0
 8002166:	2180      	movs	r1, #128	@ 0x80
 8002168:	68f8      	ldr	r0, [r7, #12]
 800216a:	f000 fc93 	bl	8002a94 <UART_WaitOnFlagUntilTimeout>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d005      	beq.n	8002180 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2220      	movs	r2, #32
 8002178:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e03d      	b.n	80021fc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d10b      	bne.n	800219e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	881b      	ldrh	r3, [r3, #0]
 800218a:	461a      	mov	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002194:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	3302      	adds	r3, #2
 800219a:	61bb      	str	r3, [r7, #24]
 800219c:	e007      	b.n	80021ae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	781a      	ldrb	r2, [r3, #0]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	3301      	adds	r3, #1
 80021ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	3b01      	subs	r3, #1
 80021b8:	b29a      	uxth	r2, r3
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1c8      	bne.n	800215e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	9300      	str	r3, [sp, #0]
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	2200      	movs	r2, #0
 80021d4:	2140      	movs	r1, #64	@ 0x40
 80021d6:	68f8      	ldr	r0, [r7, #12]
 80021d8:	f000 fc5c 	bl	8002a94 <UART_WaitOnFlagUntilTimeout>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d005      	beq.n	80021ee <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2220      	movs	r2, #32
 80021e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e006      	b.n	80021fc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2220      	movs	r2, #32
 80021f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80021f6:	2300      	movs	r3, #0
 80021f8:	e000      	b.n	80021fc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80021fa:	2302      	movs	r3, #2
  }
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3720      	adds	r7, #32
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002204:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002208:	b08c      	sub	sp, #48	@ 0x30
 800220a:	af00      	add	r7, sp, #0
 800220c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800220e:	2300      	movs	r3, #0
 8002210:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	431a      	orrs	r2, r3
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	695b      	ldr	r3, [r3, #20]
 8002222:	431a      	orrs	r2, r3
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	69db      	ldr	r3, [r3, #28]
 8002228:	4313      	orrs	r3, r2
 800222a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	4baa      	ldr	r3, [pc, #680]	@ (80024dc <UART_SetConfig+0x2d8>)
 8002234:	4013      	ands	r3, r2
 8002236:	697a      	ldr	r2, [r7, #20]
 8002238:	6812      	ldr	r2, [r2, #0]
 800223a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800223c:	430b      	orrs	r3, r1
 800223e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	68da      	ldr	r2, [r3, #12]
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	430a      	orrs	r2, r1
 8002254:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a9f      	ldr	r2, [pc, #636]	@ (80024e0 <UART_SetConfig+0x2dc>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d004      	beq.n	8002270 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	6a1b      	ldr	r3, [r3, #32]
 800226a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800226c:	4313      	orrs	r3, r2
 800226e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800227a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800227e:	697a      	ldr	r2, [r7, #20]
 8002280:	6812      	ldr	r2, [r2, #0]
 8002282:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002284:	430b      	orrs	r3, r1
 8002286:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800228e:	f023 010f 	bic.w	r1, r3, #15
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	430a      	orrs	r2, r1
 800229c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a90      	ldr	r2, [pc, #576]	@ (80024e4 <UART_SetConfig+0x2e0>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d125      	bne.n	80022f4 <UART_SetConfig+0xf0>
 80022a8:	4b8f      	ldr	r3, [pc, #572]	@ (80024e8 <UART_SetConfig+0x2e4>)
 80022aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022ae:	f003 0303 	and.w	r3, r3, #3
 80022b2:	2b03      	cmp	r3, #3
 80022b4:	d81a      	bhi.n	80022ec <UART_SetConfig+0xe8>
 80022b6:	a201      	add	r2, pc, #4	@ (adr r2, 80022bc <UART_SetConfig+0xb8>)
 80022b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022bc:	080022cd 	.word	0x080022cd
 80022c0:	080022dd 	.word	0x080022dd
 80022c4:	080022d5 	.word	0x080022d5
 80022c8:	080022e5 	.word	0x080022e5
 80022cc:	2301      	movs	r3, #1
 80022ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80022d2:	e116      	b.n	8002502 <UART_SetConfig+0x2fe>
 80022d4:	2302      	movs	r3, #2
 80022d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80022da:	e112      	b.n	8002502 <UART_SetConfig+0x2fe>
 80022dc:	2304      	movs	r3, #4
 80022de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80022e2:	e10e      	b.n	8002502 <UART_SetConfig+0x2fe>
 80022e4:	2308      	movs	r3, #8
 80022e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80022ea:	e10a      	b.n	8002502 <UART_SetConfig+0x2fe>
 80022ec:	2310      	movs	r3, #16
 80022ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80022f2:	e106      	b.n	8002502 <UART_SetConfig+0x2fe>
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a7c      	ldr	r2, [pc, #496]	@ (80024ec <UART_SetConfig+0x2e8>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d138      	bne.n	8002370 <UART_SetConfig+0x16c>
 80022fe:	4b7a      	ldr	r3, [pc, #488]	@ (80024e8 <UART_SetConfig+0x2e4>)
 8002300:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002304:	f003 030c 	and.w	r3, r3, #12
 8002308:	2b0c      	cmp	r3, #12
 800230a:	d82d      	bhi.n	8002368 <UART_SetConfig+0x164>
 800230c:	a201      	add	r2, pc, #4	@ (adr r2, 8002314 <UART_SetConfig+0x110>)
 800230e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002312:	bf00      	nop
 8002314:	08002349 	.word	0x08002349
 8002318:	08002369 	.word	0x08002369
 800231c:	08002369 	.word	0x08002369
 8002320:	08002369 	.word	0x08002369
 8002324:	08002359 	.word	0x08002359
 8002328:	08002369 	.word	0x08002369
 800232c:	08002369 	.word	0x08002369
 8002330:	08002369 	.word	0x08002369
 8002334:	08002351 	.word	0x08002351
 8002338:	08002369 	.word	0x08002369
 800233c:	08002369 	.word	0x08002369
 8002340:	08002369 	.word	0x08002369
 8002344:	08002361 	.word	0x08002361
 8002348:	2300      	movs	r3, #0
 800234a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800234e:	e0d8      	b.n	8002502 <UART_SetConfig+0x2fe>
 8002350:	2302      	movs	r3, #2
 8002352:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002356:	e0d4      	b.n	8002502 <UART_SetConfig+0x2fe>
 8002358:	2304      	movs	r3, #4
 800235a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800235e:	e0d0      	b.n	8002502 <UART_SetConfig+0x2fe>
 8002360:	2308      	movs	r3, #8
 8002362:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002366:	e0cc      	b.n	8002502 <UART_SetConfig+0x2fe>
 8002368:	2310      	movs	r3, #16
 800236a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800236e:	e0c8      	b.n	8002502 <UART_SetConfig+0x2fe>
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a5e      	ldr	r2, [pc, #376]	@ (80024f0 <UART_SetConfig+0x2ec>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d125      	bne.n	80023c6 <UART_SetConfig+0x1c2>
 800237a:	4b5b      	ldr	r3, [pc, #364]	@ (80024e8 <UART_SetConfig+0x2e4>)
 800237c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002380:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002384:	2b30      	cmp	r3, #48	@ 0x30
 8002386:	d016      	beq.n	80023b6 <UART_SetConfig+0x1b2>
 8002388:	2b30      	cmp	r3, #48	@ 0x30
 800238a:	d818      	bhi.n	80023be <UART_SetConfig+0x1ba>
 800238c:	2b20      	cmp	r3, #32
 800238e:	d00a      	beq.n	80023a6 <UART_SetConfig+0x1a2>
 8002390:	2b20      	cmp	r3, #32
 8002392:	d814      	bhi.n	80023be <UART_SetConfig+0x1ba>
 8002394:	2b00      	cmp	r3, #0
 8002396:	d002      	beq.n	800239e <UART_SetConfig+0x19a>
 8002398:	2b10      	cmp	r3, #16
 800239a:	d008      	beq.n	80023ae <UART_SetConfig+0x1aa>
 800239c:	e00f      	b.n	80023be <UART_SetConfig+0x1ba>
 800239e:	2300      	movs	r3, #0
 80023a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80023a4:	e0ad      	b.n	8002502 <UART_SetConfig+0x2fe>
 80023a6:	2302      	movs	r3, #2
 80023a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80023ac:	e0a9      	b.n	8002502 <UART_SetConfig+0x2fe>
 80023ae:	2304      	movs	r3, #4
 80023b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80023b4:	e0a5      	b.n	8002502 <UART_SetConfig+0x2fe>
 80023b6:	2308      	movs	r3, #8
 80023b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80023bc:	e0a1      	b.n	8002502 <UART_SetConfig+0x2fe>
 80023be:	2310      	movs	r3, #16
 80023c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80023c4:	e09d      	b.n	8002502 <UART_SetConfig+0x2fe>
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a4a      	ldr	r2, [pc, #296]	@ (80024f4 <UART_SetConfig+0x2f0>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d125      	bne.n	800241c <UART_SetConfig+0x218>
 80023d0:	4b45      	ldr	r3, [pc, #276]	@ (80024e8 <UART_SetConfig+0x2e4>)
 80023d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023d6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80023da:	2bc0      	cmp	r3, #192	@ 0xc0
 80023dc:	d016      	beq.n	800240c <UART_SetConfig+0x208>
 80023de:	2bc0      	cmp	r3, #192	@ 0xc0
 80023e0:	d818      	bhi.n	8002414 <UART_SetConfig+0x210>
 80023e2:	2b80      	cmp	r3, #128	@ 0x80
 80023e4:	d00a      	beq.n	80023fc <UART_SetConfig+0x1f8>
 80023e6:	2b80      	cmp	r3, #128	@ 0x80
 80023e8:	d814      	bhi.n	8002414 <UART_SetConfig+0x210>
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d002      	beq.n	80023f4 <UART_SetConfig+0x1f0>
 80023ee:	2b40      	cmp	r3, #64	@ 0x40
 80023f0:	d008      	beq.n	8002404 <UART_SetConfig+0x200>
 80023f2:	e00f      	b.n	8002414 <UART_SetConfig+0x210>
 80023f4:	2300      	movs	r3, #0
 80023f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80023fa:	e082      	b.n	8002502 <UART_SetConfig+0x2fe>
 80023fc:	2302      	movs	r3, #2
 80023fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002402:	e07e      	b.n	8002502 <UART_SetConfig+0x2fe>
 8002404:	2304      	movs	r3, #4
 8002406:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800240a:	e07a      	b.n	8002502 <UART_SetConfig+0x2fe>
 800240c:	2308      	movs	r3, #8
 800240e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002412:	e076      	b.n	8002502 <UART_SetConfig+0x2fe>
 8002414:	2310      	movs	r3, #16
 8002416:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800241a:	e072      	b.n	8002502 <UART_SetConfig+0x2fe>
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a35      	ldr	r2, [pc, #212]	@ (80024f8 <UART_SetConfig+0x2f4>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d12a      	bne.n	800247c <UART_SetConfig+0x278>
 8002426:	4b30      	ldr	r3, [pc, #192]	@ (80024e8 <UART_SetConfig+0x2e4>)
 8002428:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800242c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002430:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002434:	d01a      	beq.n	800246c <UART_SetConfig+0x268>
 8002436:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800243a:	d81b      	bhi.n	8002474 <UART_SetConfig+0x270>
 800243c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002440:	d00c      	beq.n	800245c <UART_SetConfig+0x258>
 8002442:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002446:	d815      	bhi.n	8002474 <UART_SetConfig+0x270>
 8002448:	2b00      	cmp	r3, #0
 800244a:	d003      	beq.n	8002454 <UART_SetConfig+0x250>
 800244c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002450:	d008      	beq.n	8002464 <UART_SetConfig+0x260>
 8002452:	e00f      	b.n	8002474 <UART_SetConfig+0x270>
 8002454:	2300      	movs	r3, #0
 8002456:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800245a:	e052      	b.n	8002502 <UART_SetConfig+0x2fe>
 800245c:	2302      	movs	r3, #2
 800245e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002462:	e04e      	b.n	8002502 <UART_SetConfig+0x2fe>
 8002464:	2304      	movs	r3, #4
 8002466:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800246a:	e04a      	b.n	8002502 <UART_SetConfig+0x2fe>
 800246c:	2308      	movs	r3, #8
 800246e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002472:	e046      	b.n	8002502 <UART_SetConfig+0x2fe>
 8002474:	2310      	movs	r3, #16
 8002476:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800247a:	e042      	b.n	8002502 <UART_SetConfig+0x2fe>
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a17      	ldr	r2, [pc, #92]	@ (80024e0 <UART_SetConfig+0x2dc>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d13a      	bne.n	80024fc <UART_SetConfig+0x2f8>
 8002486:	4b18      	ldr	r3, [pc, #96]	@ (80024e8 <UART_SetConfig+0x2e4>)
 8002488:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800248c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002490:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002494:	d01a      	beq.n	80024cc <UART_SetConfig+0x2c8>
 8002496:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800249a:	d81b      	bhi.n	80024d4 <UART_SetConfig+0x2d0>
 800249c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80024a0:	d00c      	beq.n	80024bc <UART_SetConfig+0x2b8>
 80024a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80024a6:	d815      	bhi.n	80024d4 <UART_SetConfig+0x2d0>
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d003      	beq.n	80024b4 <UART_SetConfig+0x2b0>
 80024ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024b0:	d008      	beq.n	80024c4 <UART_SetConfig+0x2c0>
 80024b2:	e00f      	b.n	80024d4 <UART_SetConfig+0x2d0>
 80024b4:	2300      	movs	r3, #0
 80024b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80024ba:	e022      	b.n	8002502 <UART_SetConfig+0x2fe>
 80024bc:	2302      	movs	r3, #2
 80024be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80024c2:	e01e      	b.n	8002502 <UART_SetConfig+0x2fe>
 80024c4:	2304      	movs	r3, #4
 80024c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80024ca:	e01a      	b.n	8002502 <UART_SetConfig+0x2fe>
 80024cc:	2308      	movs	r3, #8
 80024ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80024d2:	e016      	b.n	8002502 <UART_SetConfig+0x2fe>
 80024d4:	2310      	movs	r3, #16
 80024d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80024da:	e012      	b.n	8002502 <UART_SetConfig+0x2fe>
 80024dc:	cfff69f3 	.word	0xcfff69f3
 80024e0:	40008000 	.word	0x40008000
 80024e4:	40013800 	.word	0x40013800
 80024e8:	40021000 	.word	0x40021000
 80024ec:	40004400 	.word	0x40004400
 80024f0:	40004800 	.word	0x40004800
 80024f4:	40004c00 	.word	0x40004c00
 80024f8:	40005000 	.word	0x40005000
 80024fc:	2310      	movs	r3, #16
 80024fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4aae      	ldr	r2, [pc, #696]	@ (80027c0 <UART_SetConfig+0x5bc>)
 8002508:	4293      	cmp	r3, r2
 800250a:	f040 8097 	bne.w	800263c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800250e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002512:	2b08      	cmp	r3, #8
 8002514:	d823      	bhi.n	800255e <UART_SetConfig+0x35a>
 8002516:	a201      	add	r2, pc, #4	@ (adr r2, 800251c <UART_SetConfig+0x318>)
 8002518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800251c:	08002541 	.word	0x08002541
 8002520:	0800255f 	.word	0x0800255f
 8002524:	08002549 	.word	0x08002549
 8002528:	0800255f 	.word	0x0800255f
 800252c:	0800254f 	.word	0x0800254f
 8002530:	0800255f 	.word	0x0800255f
 8002534:	0800255f 	.word	0x0800255f
 8002538:	0800255f 	.word	0x0800255f
 800253c:	08002557 	.word	0x08002557
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002540:	f7ff fac2 	bl	8001ac8 <HAL_RCC_GetPCLK1Freq>
 8002544:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002546:	e010      	b.n	800256a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002548:	4b9e      	ldr	r3, [pc, #632]	@ (80027c4 <UART_SetConfig+0x5c0>)
 800254a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800254c:	e00d      	b.n	800256a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800254e:	f7ff fa4d 	bl	80019ec <HAL_RCC_GetSysClockFreq>
 8002552:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002554:	e009      	b.n	800256a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002556:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800255a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800255c:	e005      	b.n	800256a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800255e:	2300      	movs	r3, #0
 8002560:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002568:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800256a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800256c:	2b00      	cmp	r3, #0
 800256e:	f000 8130 	beq.w	80027d2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002576:	4a94      	ldr	r2, [pc, #592]	@ (80027c8 <UART_SetConfig+0x5c4>)
 8002578:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800257c:	461a      	mov	r2, r3
 800257e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002580:	fbb3 f3f2 	udiv	r3, r3, r2
 8002584:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	685a      	ldr	r2, [r3, #4]
 800258a:	4613      	mov	r3, r2
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	4413      	add	r3, r2
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	429a      	cmp	r2, r3
 8002594:	d305      	bcc.n	80025a2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d903      	bls.n	80025aa <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80025a8:	e113      	b.n	80027d2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80025aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ac:	2200      	movs	r2, #0
 80025ae:	60bb      	str	r3, [r7, #8]
 80025b0:	60fa      	str	r2, [r7, #12]
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b6:	4a84      	ldr	r2, [pc, #528]	@ (80027c8 <UART_SetConfig+0x5c4>)
 80025b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025bc:	b29b      	uxth	r3, r3
 80025be:	2200      	movs	r2, #0
 80025c0:	603b      	str	r3, [r7, #0]
 80025c2:	607a      	str	r2, [r7, #4]
 80025c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80025c8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80025cc:	f7fd fe80 	bl	80002d0 <__aeabi_uldivmod>
 80025d0:	4602      	mov	r2, r0
 80025d2:	460b      	mov	r3, r1
 80025d4:	4610      	mov	r0, r2
 80025d6:	4619      	mov	r1, r3
 80025d8:	f04f 0200 	mov.w	r2, #0
 80025dc:	f04f 0300 	mov.w	r3, #0
 80025e0:	020b      	lsls	r3, r1, #8
 80025e2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80025e6:	0202      	lsls	r2, r0, #8
 80025e8:	6979      	ldr	r1, [r7, #20]
 80025ea:	6849      	ldr	r1, [r1, #4]
 80025ec:	0849      	lsrs	r1, r1, #1
 80025ee:	2000      	movs	r0, #0
 80025f0:	460c      	mov	r4, r1
 80025f2:	4605      	mov	r5, r0
 80025f4:	eb12 0804 	adds.w	r8, r2, r4
 80025f8:	eb43 0905 	adc.w	r9, r3, r5
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	469a      	mov	sl, r3
 8002604:	4693      	mov	fp, r2
 8002606:	4652      	mov	r2, sl
 8002608:	465b      	mov	r3, fp
 800260a:	4640      	mov	r0, r8
 800260c:	4649      	mov	r1, r9
 800260e:	f7fd fe5f 	bl	80002d0 <__aeabi_uldivmod>
 8002612:	4602      	mov	r2, r0
 8002614:	460b      	mov	r3, r1
 8002616:	4613      	mov	r3, r2
 8002618:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800261a:	6a3b      	ldr	r3, [r7, #32]
 800261c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002620:	d308      	bcc.n	8002634 <UART_SetConfig+0x430>
 8002622:	6a3b      	ldr	r3, [r7, #32]
 8002624:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002628:	d204      	bcs.n	8002634 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6a3a      	ldr	r2, [r7, #32]
 8002630:	60da      	str	r2, [r3, #12]
 8002632:	e0ce      	b.n	80027d2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800263a:	e0ca      	b.n	80027d2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	69db      	ldr	r3, [r3, #28]
 8002640:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002644:	d166      	bne.n	8002714 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8002646:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800264a:	2b08      	cmp	r3, #8
 800264c:	d827      	bhi.n	800269e <UART_SetConfig+0x49a>
 800264e:	a201      	add	r2, pc, #4	@ (adr r2, 8002654 <UART_SetConfig+0x450>)
 8002650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002654:	08002679 	.word	0x08002679
 8002658:	08002681 	.word	0x08002681
 800265c:	08002689 	.word	0x08002689
 8002660:	0800269f 	.word	0x0800269f
 8002664:	0800268f 	.word	0x0800268f
 8002668:	0800269f 	.word	0x0800269f
 800266c:	0800269f 	.word	0x0800269f
 8002670:	0800269f 	.word	0x0800269f
 8002674:	08002697 	.word	0x08002697
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002678:	f7ff fa26 	bl	8001ac8 <HAL_RCC_GetPCLK1Freq>
 800267c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800267e:	e014      	b.n	80026aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002680:	f7ff fa38 	bl	8001af4 <HAL_RCC_GetPCLK2Freq>
 8002684:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002686:	e010      	b.n	80026aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002688:	4b4e      	ldr	r3, [pc, #312]	@ (80027c4 <UART_SetConfig+0x5c0>)
 800268a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800268c:	e00d      	b.n	80026aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800268e:	f7ff f9ad 	bl	80019ec <HAL_RCC_GetSysClockFreq>
 8002692:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002694:	e009      	b.n	80026aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002696:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800269a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800269c:	e005      	b.n	80026aa <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800269e:	2300      	movs	r3, #0
 80026a0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80026a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80026aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f000 8090 	beq.w	80027d2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b6:	4a44      	ldr	r2, [pc, #272]	@ (80027c8 <UART_SetConfig+0x5c4>)
 80026b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80026bc:	461a      	mov	r2, r3
 80026be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80026c4:	005a      	lsls	r2, r3, #1
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	085b      	lsrs	r3, r3, #1
 80026cc:	441a      	add	r2, r3
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80026d8:	6a3b      	ldr	r3, [r7, #32]
 80026da:	2b0f      	cmp	r3, #15
 80026dc:	d916      	bls.n	800270c <UART_SetConfig+0x508>
 80026de:	6a3b      	ldr	r3, [r7, #32]
 80026e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026e4:	d212      	bcs.n	800270c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80026e6:	6a3b      	ldr	r3, [r7, #32]
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	f023 030f 	bic.w	r3, r3, #15
 80026ee:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80026f0:	6a3b      	ldr	r3, [r7, #32]
 80026f2:	085b      	lsrs	r3, r3, #1
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	f003 0307 	and.w	r3, r3, #7
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	8bfb      	ldrh	r3, [r7, #30]
 80026fe:	4313      	orrs	r3, r2
 8002700:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	8bfa      	ldrh	r2, [r7, #30]
 8002708:	60da      	str	r2, [r3, #12]
 800270a:	e062      	b.n	80027d2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002712:	e05e      	b.n	80027d2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002714:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002718:	2b08      	cmp	r3, #8
 800271a:	d828      	bhi.n	800276e <UART_SetConfig+0x56a>
 800271c:	a201      	add	r2, pc, #4	@ (adr r2, 8002724 <UART_SetConfig+0x520>)
 800271e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002722:	bf00      	nop
 8002724:	08002749 	.word	0x08002749
 8002728:	08002751 	.word	0x08002751
 800272c:	08002759 	.word	0x08002759
 8002730:	0800276f 	.word	0x0800276f
 8002734:	0800275f 	.word	0x0800275f
 8002738:	0800276f 	.word	0x0800276f
 800273c:	0800276f 	.word	0x0800276f
 8002740:	0800276f 	.word	0x0800276f
 8002744:	08002767 	.word	0x08002767
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002748:	f7ff f9be 	bl	8001ac8 <HAL_RCC_GetPCLK1Freq>
 800274c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800274e:	e014      	b.n	800277a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002750:	f7ff f9d0 	bl	8001af4 <HAL_RCC_GetPCLK2Freq>
 8002754:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002756:	e010      	b.n	800277a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002758:	4b1a      	ldr	r3, [pc, #104]	@ (80027c4 <UART_SetConfig+0x5c0>)
 800275a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800275c:	e00d      	b.n	800277a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800275e:	f7ff f945 	bl	80019ec <HAL_RCC_GetSysClockFreq>
 8002762:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002764:	e009      	b.n	800277a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002766:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800276a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800276c:	e005      	b.n	800277a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800276e:	2300      	movs	r3, #0
 8002770:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002778:	bf00      	nop
    }

    if (pclk != 0U)
 800277a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800277c:	2b00      	cmp	r3, #0
 800277e:	d028      	beq.n	80027d2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002784:	4a10      	ldr	r2, [pc, #64]	@ (80027c8 <UART_SetConfig+0x5c4>)
 8002786:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800278a:	461a      	mov	r2, r3
 800278c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800278e:	fbb3 f2f2 	udiv	r2, r3, r2
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	085b      	lsrs	r3, r3, #1
 8002798:	441a      	add	r2, r3
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80027a4:	6a3b      	ldr	r3, [r7, #32]
 80027a6:	2b0f      	cmp	r3, #15
 80027a8:	d910      	bls.n	80027cc <UART_SetConfig+0x5c8>
 80027aa:	6a3b      	ldr	r3, [r7, #32]
 80027ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027b0:	d20c      	bcs.n	80027cc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80027b2:	6a3b      	ldr	r3, [r7, #32]
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	60da      	str	r2, [r3, #12]
 80027bc:	e009      	b.n	80027d2 <UART_SetConfig+0x5ce>
 80027be:	bf00      	nop
 80027c0:	40008000 	.word	0x40008000
 80027c4:	00f42400 	.word	0x00f42400
 80027c8:	080037bc 	.word	0x080037bc
      }
      else
      {
        ret = HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	2201      	movs	r2, #1
 80027d6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	2201      	movs	r2, #1
 80027de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	2200      	movs	r2, #0
 80027e6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	2200      	movs	r2, #0
 80027ec:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80027ee:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3730      	adds	r7, #48	@ 0x30
 80027f6:	46bd      	mov	sp, r7
 80027f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080027fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002808:	f003 0308 	and.w	r3, r3, #8
 800280c:	2b00      	cmp	r3, #0
 800280e:	d00a      	beq.n	8002826 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	430a      	orrs	r2, r1
 8002824:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00a      	beq.n	8002848 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	430a      	orrs	r2, r1
 8002846:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800284c:	f003 0302 	and.w	r3, r3, #2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d00a      	beq.n	800286a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	430a      	orrs	r2, r1
 8002868:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800286e:	f003 0304 	and.w	r3, r3, #4
 8002872:	2b00      	cmp	r3, #0
 8002874:	d00a      	beq.n	800288c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	430a      	orrs	r2, r1
 800288a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002890:	f003 0310 	and.w	r3, r3, #16
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00a      	beq.n	80028ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	430a      	orrs	r2, r1
 80028ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028b2:	f003 0320 	and.w	r3, r3, #32
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00a      	beq.n	80028d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	430a      	orrs	r2, r1
 80028ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d01a      	beq.n	8002912 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	430a      	orrs	r2, r1
 80028f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80028fa:	d10a      	bne.n	8002912 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	430a      	orrs	r2, r1
 8002910:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002916:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800291a:	2b00      	cmp	r3, #0
 800291c:	d00a      	beq.n	8002934 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	430a      	orrs	r2, r1
 8002932:	605a      	str	r2, [r3, #4]
  }
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b098      	sub	sp, #96	@ 0x60
 8002944:	af02      	add	r7, sp, #8
 8002946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002950:	f7fe f8b6 	bl	8000ac0 <HAL_GetTick>
 8002954:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0308 	and.w	r3, r3, #8
 8002960:	2b08      	cmp	r3, #8
 8002962:	d12f      	bne.n	80029c4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002964:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002968:	9300      	str	r3, [sp, #0]
 800296a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800296c:	2200      	movs	r2, #0
 800296e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 f88e 	bl	8002a94 <UART_WaitOnFlagUntilTimeout>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d022      	beq.n	80029c4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002986:	e853 3f00 	ldrex	r3, [r3]
 800298a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800298c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800298e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002992:	653b      	str	r3, [r7, #80]	@ 0x50
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	461a      	mov	r2, r3
 800299a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800299c:	647b      	str	r3, [r7, #68]	@ 0x44
 800299e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80029a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80029a4:	e841 2300 	strex	r3, r2, [r1]
 80029a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80029aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d1e6      	bne.n	800297e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2220      	movs	r2, #32
 80029b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e063      	b.n	8002a8c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0304 	and.w	r3, r3, #4
 80029ce:	2b04      	cmp	r3, #4
 80029d0:	d149      	bne.n	8002a66 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029d2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80029d6:	9300      	str	r3, [sp, #0]
 80029d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029da:	2200      	movs	r2, #0
 80029dc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f000 f857 	bl	8002a94 <UART_WaitOnFlagUntilTimeout>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d03c      	beq.n	8002a66 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f4:	e853 3f00 	ldrex	r3, [r3]
 80029f8:	623b      	str	r3, [r7, #32]
   return(result);
 80029fa:	6a3b      	ldr	r3, [r7, #32]
 80029fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002a00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	461a      	mov	r2, r3
 8002a08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a0a:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a0c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002a10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a12:	e841 2300 	strex	r3, r2, [r1]
 8002a16:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d1e6      	bne.n	80029ec <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	3308      	adds	r3, #8
 8002a24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	e853 3f00 	ldrex	r3, [r3]
 8002a2c:	60fb      	str	r3, [r7, #12]
   return(result);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f023 0301 	bic.w	r3, r3, #1
 8002a34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	3308      	adds	r3, #8
 8002a3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002a3e:	61fa      	str	r2, [r7, #28]
 8002a40:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a42:	69b9      	ldr	r1, [r7, #24]
 8002a44:	69fa      	ldr	r2, [r7, #28]
 8002a46:	e841 2300 	strex	r3, r2, [r1]
 8002a4a:	617b      	str	r3, [r7, #20]
   return(result);
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1e5      	bne.n	8002a1e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2220      	movs	r2, #32
 8002a56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e012      	b.n	8002a8c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2220      	movs	r2, #32
 8002a6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2220      	movs	r2, #32
 8002a72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3758      	adds	r7, #88	@ 0x58
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	603b      	str	r3, [r7, #0]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002aa4:	e04f      	b.n	8002b46 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aac:	d04b      	beq.n	8002b46 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aae:	f7fe f807 	bl	8000ac0 <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d302      	bcc.n	8002ac4 <UART_WaitOnFlagUntilTimeout+0x30>
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d101      	bne.n	8002ac8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e04e      	b.n	8002b66 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0304 	and.w	r3, r3, #4
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d037      	beq.n	8002b46 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	2b80      	cmp	r3, #128	@ 0x80
 8002ada:	d034      	beq.n	8002b46 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	2b40      	cmp	r3, #64	@ 0x40
 8002ae0:	d031      	beq.n	8002b46 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	69db      	ldr	r3, [r3, #28]
 8002ae8:	f003 0308 	and.w	r3, r3, #8
 8002aec:	2b08      	cmp	r3, #8
 8002aee:	d110      	bne.n	8002b12 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2208      	movs	r2, #8
 8002af6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f000 f838 	bl	8002b6e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2208      	movs	r2, #8
 8002b02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e029      	b.n	8002b66 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	69db      	ldr	r3, [r3, #28]
 8002b18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b20:	d111      	bne.n	8002b46 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002b2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	f000 f81e 	bl	8002b6e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2220      	movs	r2, #32
 8002b36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e00f      	b.n	8002b66 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	69da      	ldr	r2, [r3, #28]
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	4013      	ands	r3, r2
 8002b50:	68ba      	ldr	r2, [r7, #8]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	bf0c      	ite	eq
 8002b56:	2301      	moveq	r3, #1
 8002b58:	2300      	movne	r3, #0
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	79fb      	ldrb	r3, [r7, #7]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d0a0      	beq.n	8002aa6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b095      	sub	sp, #84	@ 0x54
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b7e:	e853 3f00 	ldrex	r3, [r3]
 8002b82:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b86:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002b8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	461a      	mov	r2, r3
 8002b92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b94:	643b      	str	r3, [r7, #64]	@ 0x40
 8002b96:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b98:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002b9a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002b9c:	e841 2300 	strex	r3, r2, [r1]
 8002ba0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002ba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d1e6      	bne.n	8002b76 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	3308      	adds	r3, #8
 8002bae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bb0:	6a3b      	ldr	r3, [r7, #32]
 8002bb2:	e853 3f00 	ldrex	r3, [r3]
 8002bb6:	61fb      	str	r3, [r7, #28]
   return(result);
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bbe:	f023 0301 	bic.w	r3, r3, #1
 8002bc2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	3308      	adds	r3, #8
 8002bca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002bcc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002bce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bd0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002bd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002bd4:	e841 2300 	strex	r3, r2, [r1]
 8002bd8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d1e3      	bne.n	8002ba8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d118      	bne.n	8002c1a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	e853 3f00 	ldrex	r3, [r3]
 8002bf4:	60bb      	str	r3, [r7, #8]
   return(result);
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	f023 0310 	bic.w	r3, r3, #16
 8002bfc:	647b      	str	r3, [r7, #68]	@ 0x44
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	461a      	mov	r2, r3
 8002c04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c06:	61bb      	str	r3, [r7, #24]
 8002c08:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c0a:	6979      	ldr	r1, [r7, #20]
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	e841 2300 	strex	r3, r2, [r1]
 8002c12:	613b      	str	r3, [r7, #16]
   return(result);
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1e6      	bne.n	8002be8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2220      	movs	r2, #32
 8002c1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8002c2e:	bf00      	nop
 8002c30:	3754      	adds	r7, #84	@ 0x54
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr

08002c3a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	b085      	sub	sp, #20
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d101      	bne.n	8002c50 <HAL_UARTEx_DisableFifoMode+0x16>
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	e027      	b.n	8002ca0 <HAL_UARTEx_DisableFifoMode+0x66>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2224      	movs	r2, #36	@ 0x24
 8002c5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f022 0201 	bic.w	r2, r2, #1
 8002c76:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8002c7e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2220      	movs	r2, #32
 8002c92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3714      	adds	r7, #20
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d101      	bne.n	8002cc4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	e02d      	b.n	8002d20 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2224      	movs	r2, #36	@ 0x24
 8002cd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f022 0201 	bic.w	r2, r2, #1
 8002cea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	683a      	ldr	r2, [r7, #0]
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f000 f84f 	bl	8002da4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2220      	movs	r2, #32
 8002d12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3710      	adds	r7, #16
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d101      	bne.n	8002d40 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	e02d      	b.n	8002d9c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2224      	movs	r2, #36	@ 0x24
 8002d4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f022 0201 	bic.w	r2, r2, #1
 8002d66:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	683a      	ldr	r2, [r7, #0]
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f000 f811 	bl	8002da4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2220      	movs	r2, #32
 8002d8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3710      	adds	r7, #16
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d108      	bne.n	8002dc6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002dc4:	e031      	b.n	8002e2a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002dc6:	2308      	movs	r3, #8
 8002dc8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002dca:	2308      	movs	r3, #8
 8002dcc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	0e5b      	lsrs	r3, r3, #25
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	f003 0307 	and.w	r3, r3, #7
 8002ddc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	0f5b      	lsrs	r3, r3, #29
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	f003 0307 	and.w	r3, r3, #7
 8002dec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002dee:	7bbb      	ldrb	r3, [r7, #14]
 8002df0:	7b3a      	ldrb	r2, [r7, #12]
 8002df2:	4911      	ldr	r1, [pc, #68]	@ (8002e38 <UARTEx_SetNbDataToProcess+0x94>)
 8002df4:	5c8a      	ldrb	r2, [r1, r2]
 8002df6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8002dfa:	7b3a      	ldrb	r2, [r7, #12]
 8002dfc:	490f      	ldr	r1, [pc, #60]	@ (8002e3c <UARTEx_SetNbDataToProcess+0x98>)
 8002dfe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002e00:	fb93 f3f2 	sdiv	r3, r3, r2
 8002e04:	b29a      	uxth	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002e0c:	7bfb      	ldrb	r3, [r7, #15]
 8002e0e:	7b7a      	ldrb	r2, [r7, #13]
 8002e10:	4909      	ldr	r1, [pc, #36]	@ (8002e38 <UARTEx_SetNbDataToProcess+0x94>)
 8002e12:	5c8a      	ldrb	r2, [r1, r2]
 8002e14:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8002e18:	7b7a      	ldrb	r2, [r7, #13]
 8002e1a:	4908      	ldr	r1, [pc, #32]	@ (8002e3c <UARTEx_SetNbDataToProcess+0x98>)
 8002e1c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002e1e:	fb93 f3f2 	sdiv	r3, r3, r2
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8002e2a:	bf00      	nop
 8002e2c:	3714      	adds	r7, #20
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	080037d4 	.word	0x080037d4
 8002e3c:	080037dc 	.word	0x080037dc

08002e40 <siprintf>:
 8002e40:	b40e      	push	{r1, r2, r3}
 8002e42:	b500      	push	{lr}
 8002e44:	b09c      	sub	sp, #112	@ 0x70
 8002e46:	ab1d      	add	r3, sp, #116	@ 0x74
 8002e48:	9002      	str	r0, [sp, #8]
 8002e4a:	9006      	str	r0, [sp, #24]
 8002e4c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002e50:	4809      	ldr	r0, [pc, #36]	@ (8002e78 <siprintf+0x38>)
 8002e52:	9107      	str	r1, [sp, #28]
 8002e54:	9104      	str	r1, [sp, #16]
 8002e56:	4909      	ldr	r1, [pc, #36]	@ (8002e7c <siprintf+0x3c>)
 8002e58:	f853 2b04 	ldr.w	r2, [r3], #4
 8002e5c:	9105      	str	r1, [sp, #20]
 8002e5e:	6800      	ldr	r0, [r0, #0]
 8002e60:	9301      	str	r3, [sp, #4]
 8002e62:	a902      	add	r1, sp, #8
 8002e64:	f000 f994 	bl	8003190 <_svfiprintf_r>
 8002e68:	9b02      	ldr	r3, [sp, #8]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	701a      	strb	r2, [r3, #0]
 8002e6e:	b01c      	add	sp, #112	@ 0x70
 8002e70:	f85d eb04 	ldr.w	lr, [sp], #4
 8002e74:	b003      	add	sp, #12
 8002e76:	4770      	bx	lr
 8002e78:	2000002c 	.word	0x2000002c
 8002e7c:	ffff0208 	.word	0xffff0208

08002e80 <memset>:
 8002e80:	4402      	add	r2, r0
 8002e82:	4603      	mov	r3, r0
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d100      	bne.n	8002e8a <memset+0xa>
 8002e88:	4770      	bx	lr
 8002e8a:	f803 1b01 	strb.w	r1, [r3], #1
 8002e8e:	e7f9      	b.n	8002e84 <memset+0x4>

08002e90 <__errno>:
 8002e90:	4b01      	ldr	r3, [pc, #4]	@ (8002e98 <__errno+0x8>)
 8002e92:	6818      	ldr	r0, [r3, #0]
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	2000002c 	.word	0x2000002c

08002e9c <__libc_init_array>:
 8002e9c:	b570      	push	{r4, r5, r6, lr}
 8002e9e:	4d0d      	ldr	r5, [pc, #52]	@ (8002ed4 <__libc_init_array+0x38>)
 8002ea0:	4c0d      	ldr	r4, [pc, #52]	@ (8002ed8 <__libc_init_array+0x3c>)
 8002ea2:	1b64      	subs	r4, r4, r5
 8002ea4:	10a4      	asrs	r4, r4, #2
 8002ea6:	2600      	movs	r6, #0
 8002ea8:	42a6      	cmp	r6, r4
 8002eaa:	d109      	bne.n	8002ec0 <__libc_init_array+0x24>
 8002eac:	4d0b      	ldr	r5, [pc, #44]	@ (8002edc <__libc_init_array+0x40>)
 8002eae:	4c0c      	ldr	r4, [pc, #48]	@ (8002ee0 <__libc_init_array+0x44>)
 8002eb0:	f000 fc66 	bl	8003780 <_init>
 8002eb4:	1b64      	subs	r4, r4, r5
 8002eb6:	10a4      	asrs	r4, r4, #2
 8002eb8:	2600      	movs	r6, #0
 8002eba:	42a6      	cmp	r6, r4
 8002ebc:	d105      	bne.n	8002eca <__libc_init_array+0x2e>
 8002ebe:	bd70      	pop	{r4, r5, r6, pc}
 8002ec0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ec4:	4798      	blx	r3
 8002ec6:	3601      	adds	r6, #1
 8002ec8:	e7ee      	b.n	8002ea8 <__libc_init_array+0xc>
 8002eca:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ece:	4798      	blx	r3
 8002ed0:	3601      	adds	r6, #1
 8002ed2:	e7f2      	b.n	8002eba <__libc_init_array+0x1e>
 8002ed4:	08003820 	.word	0x08003820
 8002ed8:	08003820 	.word	0x08003820
 8002edc:	08003820 	.word	0x08003820
 8002ee0:	08003824 	.word	0x08003824

08002ee4 <__retarget_lock_acquire_recursive>:
 8002ee4:	4770      	bx	lr

08002ee6 <__retarget_lock_release_recursive>:
 8002ee6:	4770      	bx	lr

08002ee8 <_free_r>:
 8002ee8:	b538      	push	{r3, r4, r5, lr}
 8002eea:	4605      	mov	r5, r0
 8002eec:	2900      	cmp	r1, #0
 8002eee:	d041      	beq.n	8002f74 <_free_r+0x8c>
 8002ef0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ef4:	1f0c      	subs	r4, r1, #4
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	bfb8      	it	lt
 8002efa:	18e4      	addlt	r4, r4, r3
 8002efc:	f000 f8e0 	bl	80030c0 <__malloc_lock>
 8002f00:	4a1d      	ldr	r2, [pc, #116]	@ (8002f78 <_free_r+0x90>)
 8002f02:	6813      	ldr	r3, [r2, #0]
 8002f04:	b933      	cbnz	r3, 8002f14 <_free_r+0x2c>
 8002f06:	6063      	str	r3, [r4, #4]
 8002f08:	6014      	str	r4, [r2, #0]
 8002f0a:	4628      	mov	r0, r5
 8002f0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002f10:	f000 b8dc 	b.w	80030cc <__malloc_unlock>
 8002f14:	42a3      	cmp	r3, r4
 8002f16:	d908      	bls.n	8002f2a <_free_r+0x42>
 8002f18:	6820      	ldr	r0, [r4, #0]
 8002f1a:	1821      	adds	r1, r4, r0
 8002f1c:	428b      	cmp	r3, r1
 8002f1e:	bf01      	itttt	eq
 8002f20:	6819      	ldreq	r1, [r3, #0]
 8002f22:	685b      	ldreq	r3, [r3, #4]
 8002f24:	1809      	addeq	r1, r1, r0
 8002f26:	6021      	streq	r1, [r4, #0]
 8002f28:	e7ed      	b.n	8002f06 <_free_r+0x1e>
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	b10b      	cbz	r3, 8002f34 <_free_r+0x4c>
 8002f30:	42a3      	cmp	r3, r4
 8002f32:	d9fa      	bls.n	8002f2a <_free_r+0x42>
 8002f34:	6811      	ldr	r1, [r2, #0]
 8002f36:	1850      	adds	r0, r2, r1
 8002f38:	42a0      	cmp	r0, r4
 8002f3a:	d10b      	bne.n	8002f54 <_free_r+0x6c>
 8002f3c:	6820      	ldr	r0, [r4, #0]
 8002f3e:	4401      	add	r1, r0
 8002f40:	1850      	adds	r0, r2, r1
 8002f42:	4283      	cmp	r3, r0
 8002f44:	6011      	str	r1, [r2, #0]
 8002f46:	d1e0      	bne.n	8002f0a <_free_r+0x22>
 8002f48:	6818      	ldr	r0, [r3, #0]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	6053      	str	r3, [r2, #4]
 8002f4e:	4408      	add	r0, r1
 8002f50:	6010      	str	r0, [r2, #0]
 8002f52:	e7da      	b.n	8002f0a <_free_r+0x22>
 8002f54:	d902      	bls.n	8002f5c <_free_r+0x74>
 8002f56:	230c      	movs	r3, #12
 8002f58:	602b      	str	r3, [r5, #0]
 8002f5a:	e7d6      	b.n	8002f0a <_free_r+0x22>
 8002f5c:	6820      	ldr	r0, [r4, #0]
 8002f5e:	1821      	adds	r1, r4, r0
 8002f60:	428b      	cmp	r3, r1
 8002f62:	bf04      	itt	eq
 8002f64:	6819      	ldreq	r1, [r3, #0]
 8002f66:	685b      	ldreq	r3, [r3, #4]
 8002f68:	6063      	str	r3, [r4, #4]
 8002f6a:	bf04      	itt	eq
 8002f6c:	1809      	addeq	r1, r1, r0
 8002f6e:	6021      	streq	r1, [r4, #0]
 8002f70:	6054      	str	r4, [r2, #4]
 8002f72:	e7ca      	b.n	8002f0a <_free_r+0x22>
 8002f74:	bd38      	pop	{r3, r4, r5, pc}
 8002f76:	bf00      	nop
 8002f78:	2000027c 	.word	0x2000027c

08002f7c <sbrk_aligned>:
 8002f7c:	b570      	push	{r4, r5, r6, lr}
 8002f7e:	4e0f      	ldr	r6, [pc, #60]	@ (8002fbc <sbrk_aligned+0x40>)
 8002f80:	460c      	mov	r4, r1
 8002f82:	6831      	ldr	r1, [r6, #0]
 8002f84:	4605      	mov	r5, r0
 8002f86:	b911      	cbnz	r1, 8002f8e <sbrk_aligned+0x12>
 8002f88:	f000 fba6 	bl	80036d8 <_sbrk_r>
 8002f8c:	6030      	str	r0, [r6, #0]
 8002f8e:	4621      	mov	r1, r4
 8002f90:	4628      	mov	r0, r5
 8002f92:	f000 fba1 	bl	80036d8 <_sbrk_r>
 8002f96:	1c43      	adds	r3, r0, #1
 8002f98:	d103      	bne.n	8002fa2 <sbrk_aligned+0x26>
 8002f9a:	f04f 34ff 	mov.w	r4, #4294967295
 8002f9e:	4620      	mov	r0, r4
 8002fa0:	bd70      	pop	{r4, r5, r6, pc}
 8002fa2:	1cc4      	adds	r4, r0, #3
 8002fa4:	f024 0403 	bic.w	r4, r4, #3
 8002fa8:	42a0      	cmp	r0, r4
 8002faa:	d0f8      	beq.n	8002f9e <sbrk_aligned+0x22>
 8002fac:	1a21      	subs	r1, r4, r0
 8002fae:	4628      	mov	r0, r5
 8002fb0:	f000 fb92 	bl	80036d8 <_sbrk_r>
 8002fb4:	3001      	adds	r0, #1
 8002fb6:	d1f2      	bne.n	8002f9e <sbrk_aligned+0x22>
 8002fb8:	e7ef      	b.n	8002f9a <sbrk_aligned+0x1e>
 8002fba:	bf00      	nop
 8002fbc:	20000278 	.word	0x20000278

08002fc0 <_malloc_r>:
 8002fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002fc4:	1ccd      	adds	r5, r1, #3
 8002fc6:	f025 0503 	bic.w	r5, r5, #3
 8002fca:	3508      	adds	r5, #8
 8002fcc:	2d0c      	cmp	r5, #12
 8002fce:	bf38      	it	cc
 8002fd0:	250c      	movcc	r5, #12
 8002fd2:	2d00      	cmp	r5, #0
 8002fd4:	4606      	mov	r6, r0
 8002fd6:	db01      	blt.n	8002fdc <_malloc_r+0x1c>
 8002fd8:	42a9      	cmp	r1, r5
 8002fda:	d904      	bls.n	8002fe6 <_malloc_r+0x26>
 8002fdc:	230c      	movs	r3, #12
 8002fde:	6033      	str	r3, [r6, #0]
 8002fe0:	2000      	movs	r0, #0
 8002fe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002fe6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80030bc <_malloc_r+0xfc>
 8002fea:	f000 f869 	bl	80030c0 <__malloc_lock>
 8002fee:	f8d8 3000 	ldr.w	r3, [r8]
 8002ff2:	461c      	mov	r4, r3
 8002ff4:	bb44      	cbnz	r4, 8003048 <_malloc_r+0x88>
 8002ff6:	4629      	mov	r1, r5
 8002ff8:	4630      	mov	r0, r6
 8002ffa:	f7ff ffbf 	bl	8002f7c <sbrk_aligned>
 8002ffe:	1c43      	adds	r3, r0, #1
 8003000:	4604      	mov	r4, r0
 8003002:	d158      	bne.n	80030b6 <_malloc_r+0xf6>
 8003004:	f8d8 4000 	ldr.w	r4, [r8]
 8003008:	4627      	mov	r7, r4
 800300a:	2f00      	cmp	r7, #0
 800300c:	d143      	bne.n	8003096 <_malloc_r+0xd6>
 800300e:	2c00      	cmp	r4, #0
 8003010:	d04b      	beq.n	80030aa <_malloc_r+0xea>
 8003012:	6823      	ldr	r3, [r4, #0]
 8003014:	4639      	mov	r1, r7
 8003016:	4630      	mov	r0, r6
 8003018:	eb04 0903 	add.w	r9, r4, r3
 800301c:	f000 fb5c 	bl	80036d8 <_sbrk_r>
 8003020:	4581      	cmp	r9, r0
 8003022:	d142      	bne.n	80030aa <_malloc_r+0xea>
 8003024:	6821      	ldr	r1, [r4, #0]
 8003026:	1a6d      	subs	r5, r5, r1
 8003028:	4629      	mov	r1, r5
 800302a:	4630      	mov	r0, r6
 800302c:	f7ff ffa6 	bl	8002f7c <sbrk_aligned>
 8003030:	3001      	adds	r0, #1
 8003032:	d03a      	beq.n	80030aa <_malloc_r+0xea>
 8003034:	6823      	ldr	r3, [r4, #0]
 8003036:	442b      	add	r3, r5
 8003038:	6023      	str	r3, [r4, #0]
 800303a:	f8d8 3000 	ldr.w	r3, [r8]
 800303e:	685a      	ldr	r2, [r3, #4]
 8003040:	bb62      	cbnz	r2, 800309c <_malloc_r+0xdc>
 8003042:	f8c8 7000 	str.w	r7, [r8]
 8003046:	e00f      	b.n	8003068 <_malloc_r+0xa8>
 8003048:	6822      	ldr	r2, [r4, #0]
 800304a:	1b52      	subs	r2, r2, r5
 800304c:	d420      	bmi.n	8003090 <_malloc_r+0xd0>
 800304e:	2a0b      	cmp	r2, #11
 8003050:	d917      	bls.n	8003082 <_malloc_r+0xc2>
 8003052:	1961      	adds	r1, r4, r5
 8003054:	42a3      	cmp	r3, r4
 8003056:	6025      	str	r5, [r4, #0]
 8003058:	bf18      	it	ne
 800305a:	6059      	strne	r1, [r3, #4]
 800305c:	6863      	ldr	r3, [r4, #4]
 800305e:	bf08      	it	eq
 8003060:	f8c8 1000 	streq.w	r1, [r8]
 8003064:	5162      	str	r2, [r4, r5]
 8003066:	604b      	str	r3, [r1, #4]
 8003068:	4630      	mov	r0, r6
 800306a:	f000 f82f 	bl	80030cc <__malloc_unlock>
 800306e:	f104 000b 	add.w	r0, r4, #11
 8003072:	1d23      	adds	r3, r4, #4
 8003074:	f020 0007 	bic.w	r0, r0, #7
 8003078:	1ac2      	subs	r2, r0, r3
 800307a:	bf1c      	itt	ne
 800307c:	1a1b      	subne	r3, r3, r0
 800307e:	50a3      	strne	r3, [r4, r2]
 8003080:	e7af      	b.n	8002fe2 <_malloc_r+0x22>
 8003082:	6862      	ldr	r2, [r4, #4]
 8003084:	42a3      	cmp	r3, r4
 8003086:	bf0c      	ite	eq
 8003088:	f8c8 2000 	streq.w	r2, [r8]
 800308c:	605a      	strne	r2, [r3, #4]
 800308e:	e7eb      	b.n	8003068 <_malloc_r+0xa8>
 8003090:	4623      	mov	r3, r4
 8003092:	6864      	ldr	r4, [r4, #4]
 8003094:	e7ae      	b.n	8002ff4 <_malloc_r+0x34>
 8003096:	463c      	mov	r4, r7
 8003098:	687f      	ldr	r7, [r7, #4]
 800309a:	e7b6      	b.n	800300a <_malloc_r+0x4a>
 800309c:	461a      	mov	r2, r3
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	42a3      	cmp	r3, r4
 80030a2:	d1fb      	bne.n	800309c <_malloc_r+0xdc>
 80030a4:	2300      	movs	r3, #0
 80030a6:	6053      	str	r3, [r2, #4]
 80030a8:	e7de      	b.n	8003068 <_malloc_r+0xa8>
 80030aa:	230c      	movs	r3, #12
 80030ac:	6033      	str	r3, [r6, #0]
 80030ae:	4630      	mov	r0, r6
 80030b0:	f000 f80c 	bl	80030cc <__malloc_unlock>
 80030b4:	e794      	b.n	8002fe0 <_malloc_r+0x20>
 80030b6:	6005      	str	r5, [r0, #0]
 80030b8:	e7d6      	b.n	8003068 <_malloc_r+0xa8>
 80030ba:	bf00      	nop
 80030bc:	2000027c 	.word	0x2000027c

080030c0 <__malloc_lock>:
 80030c0:	4801      	ldr	r0, [pc, #4]	@ (80030c8 <__malloc_lock+0x8>)
 80030c2:	f7ff bf0f 	b.w	8002ee4 <__retarget_lock_acquire_recursive>
 80030c6:	bf00      	nop
 80030c8:	20000274 	.word	0x20000274

080030cc <__malloc_unlock>:
 80030cc:	4801      	ldr	r0, [pc, #4]	@ (80030d4 <__malloc_unlock+0x8>)
 80030ce:	f7ff bf0a 	b.w	8002ee6 <__retarget_lock_release_recursive>
 80030d2:	bf00      	nop
 80030d4:	20000274 	.word	0x20000274

080030d8 <__ssputs_r>:
 80030d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030dc:	688e      	ldr	r6, [r1, #8]
 80030de:	461f      	mov	r7, r3
 80030e0:	42be      	cmp	r6, r7
 80030e2:	680b      	ldr	r3, [r1, #0]
 80030e4:	4682      	mov	sl, r0
 80030e6:	460c      	mov	r4, r1
 80030e8:	4690      	mov	r8, r2
 80030ea:	d82d      	bhi.n	8003148 <__ssputs_r+0x70>
 80030ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80030f0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80030f4:	d026      	beq.n	8003144 <__ssputs_r+0x6c>
 80030f6:	6965      	ldr	r5, [r4, #20]
 80030f8:	6909      	ldr	r1, [r1, #16]
 80030fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80030fe:	eba3 0901 	sub.w	r9, r3, r1
 8003102:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003106:	1c7b      	adds	r3, r7, #1
 8003108:	444b      	add	r3, r9
 800310a:	106d      	asrs	r5, r5, #1
 800310c:	429d      	cmp	r5, r3
 800310e:	bf38      	it	cc
 8003110:	461d      	movcc	r5, r3
 8003112:	0553      	lsls	r3, r2, #21
 8003114:	d527      	bpl.n	8003166 <__ssputs_r+0x8e>
 8003116:	4629      	mov	r1, r5
 8003118:	f7ff ff52 	bl	8002fc0 <_malloc_r>
 800311c:	4606      	mov	r6, r0
 800311e:	b360      	cbz	r0, 800317a <__ssputs_r+0xa2>
 8003120:	6921      	ldr	r1, [r4, #16]
 8003122:	464a      	mov	r2, r9
 8003124:	f000 fae8 	bl	80036f8 <memcpy>
 8003128:	89a3      	ldrh	r3, [r4, #12]
 800312a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800312e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003132:	81a3      	strh	r3, [r4, #12]
 8003134:	6126      	str	r6, [r4, #16]
 8003136:	6165      	str	r5, [r4, #20]
 8003138:	444e      	add	r6, r9
 800313a:	eba5 0509 	sub.w	r5, r5, r9
 800313e:	6026      	str	r6, [r4, #0]
 8003140:	60a5      	str	r5, [r4, #8]
 8003142:	463e      	mov	r6, r7
 8003144:	42be      	cmp	r6, r7
 8003146:	d900      	bls.n	800314a <__ssputs_r+0x72>
 8003148:	463e      	mov	r6, r7
 800314a:	6820      	ldr	r0, [r4, #0]
 800314c:	4632      	mov	r2, r6
 800314e:	4641      	mov	r1, r8
 8003150:	f000 faa8 	bl	80036a4 <memmove>
 8003154:	68a3      	ldr	r3, [r4, #8]
 8003156:	1b9b      	subs	r3, r3, r6
 8003158:	60a3      	str	r3, [r4, #8]
 800315a:	6823      	ldr	r3, [r4, #0]
 800315c:	4433      	add	r3, r6
 800315e:	6023      	str	r3, [r4, #0]
 8003160:	2000      	movs	r0, #0
 8003162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003166:	462a      	mov	r2, r5
 8003168:	f000 fad4 	bl	8003714 <_realloc_r>
 800316c:	4606      	mov	r6, r0
 800316e:	2800      	cmp	r0, #0
 8003170:	d1e0      	bne.n	8003134 <__ssputs_r+0x5c>
 8003172:	6921      	ldr	r1, [r4, #16]
 8003174:	4650      	mov	r0, sl
 8003176:	f7ff feb7 	bl	8002ee8 <_free_r>
 800317a:	230c      	movs	r3, #12
 800317c:	f8ca 3000 	str.w	r3, [sl]
 8003180:	89a3      	ldrh	r3, [r4, #12]
 8003182:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003186:	81a3      	strh	r3, [r4, #12]
 8003188:	f04f 30ff 	mov.w	r0, #4294967295
 800318c:	e7e9      	b.n	8003162 <__ssputs_r+0x8a>
	...

08003190 <_svfiprintf_r>:
 8003190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003194:	4698      	mov	r8, r3
 8003196:	898b      	ldrh	r3, [r1, #12]
 8003198:	061b      	lsls	r3, r3, #24
 800319a:	b09d      	sub	sp, #116	@ 0x74
 800319c:	4607      	mov	r7, r0
 800319e:	460d      	mov	r5, r1
 80031a0:	4614      	mov	r4, r2
 80031a2:	d510      	bpl.n	80031c6 <_svfiprintf_r+0x36>
 80031a4:	690b      	ldr	r3, [r1, #16]
 80031a6:	b973      	cbnz	r3, 80031c6 <_svfiprintf_r+0x36>
 80031a8:	2140      	movs	r1, #64	@ 0x40
 80031aa:	f7ff ff09 	bl	8002fc0 <_malloc_r>
 80031ae:	6028      	str	r0, [r5, #0]
 80031b0:	6128      	str	r0, [r5, #16]
 80031b2:	b930      	cbnz	r0, 80031c2 <_svfiprintf_r+0x32>
 80031b4:	230c      	movs	r3, #12
 80031b6:	603b      	str	r3, [r7, #0]
 80031b8:	f04f 30ff 	mov.w	r0, #4294967295
 80031bc:	b01d      	add	sp, #116	@ 0x74
 80031be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031c2:	2340      	movs	r3, #64	@ 0x40
 80031c4:	616b      	str	r3, [r5, #20]
 80031c6:	2300      	movs	r3, #0
 80031c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80031ca:	2320      	movs	r3, #32
 80031cc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80031d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80031d4:	2330      	movs	r3, #48	@ 0x30
 80031d6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003374 <_svfiprintf_r+0x1e4>
 80031da:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80031de:	f04f 0901 	mov.w	r9, #1
 80031e2:	4623      	mov	r3, r4
 80031e4:	469a      	mov	sl, r3
 80031e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80031ea:	b10a      	cbz	r2, 80031f0 <_svfiprintf_r+0x60>
 80031ec:	2a25      	cmp	r2, #37	@ 0x25
 80031ee:	d1f9      	bne.n	80031e4 <_svfiprintf_r+0x54>
 80031f0:	ebba 0b04 	subs.w	fp, sl, r4
 80031f4:	d00b      	beq.n	800320e <_svfiprintf_r+0x7e>
 80031f6:	465b      	mov	r3, fp
 80031f8:	4622      	mov	r2, r4
 80031fa:	4629      	mov	r1, r5
 80031fc:	4638      	mov	r0, r7
 80031fe:	f7ff ff6b 	bl	80030d8 <__ssputs_r>
 8003202:	3001      	adds	r0, #1
 8003204:	f000 80a7 	beq.w	8003356 <_svfiprintf_r+0x1c6>
 8003208:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800320a:	445a      	add	r2, fp
 800320c:	9209      	str	r2, [sp, #36]	@ 0x24
 800320e:	f89a 3000 	ldrb.w	r3, [sl]
 8003212:	2b00      	cmp	r3, #0
 8003214:	f000 809f 	beq.w	8003356 <_svfiprintf_r+0x1c6>
 8003218:	2300      	movs	r3, #0
 800321a:	f04f 32ff 	mov.w	r2, #4294967295
 800321e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003222:	f10a 0a01 	add.w	sl, sl, #1
 8003226:	9304      	str	r3, [sp, #16]
 8003228:	9307      	str	r3, [sp, #28]
 800322a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800322e:	931a      	str	r3, [sp, #104]	@ 0x68
 8003230:	4654      	mov	r4, sl
 8003232:	2205      	movs	r2, #5
 8003234:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003238:	484e      	ldr	r0, [pc, #312]	@ (8003374 <_svfiprintf_r+0x1e4>)
 800323a:	f7fc fff9 	bl	8000230 <memchr>
 800323e:	9a04      	ldr	r2, [sp, #16]
 8003240:	b9d8      	cbnz	r0, 800327a <_svfiprintf_r+0xea>
 8003242:	06d0      	lsls	r0, r2, #27
 8003244:	bf44      	itt	mi
 8003246:	2320      	movmi	r3, #32
 8003248:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800324c:	0711      	lsls	r1, r2, #28
 800324e:	bf44      	itt	mi
 8003250:	232b      	movmi	r3, #43	@ 0x2b
 8003252:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003256:	f89a 3000 	ldrb.w	r3, [sl]
 800325a:	2b2a      	cmp	r3, #42	@ 0x2a
 800325c:	d015      	beq.n	800328a <_svfiprintf_r+0xfa>
 800325e:	9a07      	ldr	r2, [sp, #28]
 8003260:	4654      	mov	r4, sl
 8003262:	2000      	movs	r0, #0
 8003264:	f04f 0c0a 	mov.w	ip, #10
 8003268:	4621      	mov	r1, r4
 800326a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800326e:	3b30      	subs	r3, #48	@ 0x30
 8003270:	2b09      	cmp	r3, #9
 8003272:	d94b      	bls.n	800330c <_svfiprintf_r+0x17c>
 8003274:	b1b0      	cbz	r0, 80032a4 <_svfiprintf_r+0x114>
 8003276:	9207      	str	r2, [sp, #28]
 8003278:	e014      	b.n	80032a4 <_svfiprintf_r+0x114>
 800327a:	eba0 0308 	sub.w	r3, r0, r8
 800327e:	fa09 f303 	lsl.w	r3, r9, r3
 8003282:	4313      	orrs	r3, r2
 8003284:	9304      	str	r3, [sp, #16]
 8003286:	46a2      	mov	sl, r4
 8003288:	e7d2      	b.n	8003230 <_svfiprintf_r+0xa0>
 800328a:	9b03      	ldr	r3, [sp, #12]
 800328c:	1d19      	adds	r1, r3, #4
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	9103      	str	r1, [sp, #12]
 8003292:	2b00      	cmp	r3, #0
 8003294:	bfbb      	ittet	lt
 8003296:	425b      	neglt	r3, r3
 8003298:	f042 0202 	orrlt.w	r2, r2, #2
 800329c:	9307      	strge	r3, [sp, #28]
 800329e:	9307      	strlt	r3, [sp, #28]
 80032a0:	bfb8      	it	lt
 80032a2:	9204      	strlt	r2, [sp, #16]
 80032a4:	7823      	ldrb	r3, [r4, #0]
 80032a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80032a8:	d10a      	bne.n	80032c0 <_svfiprintf_r+0x130>
 80032aa:	7863      	ldrb	r3, [r4, #1]
 80032ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80032ae:	d132      	bne.n	8003316 <_svfiprintf_r+0x186>
 80032b0:	9b03      	ldr	r3, [sp, #12]
 80032b2:	1d1a      	adds	r2, r3, #4
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	9203      	str	r2, [sp, #12]
 80032b8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80032bc:	3402      	adds	r4, #2
 80032be:	9305      	str	r3, [sp, #20]
 80032c0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003384 <_svfiprintf_r+0x1f4>
 80032c4:	7821      	ldrb	r1, [r4, #0]
 80032c6:	2203      	movs	r2, #3
 80032c8:	4650      	mov	r0, sl
 80032ca:	f7fc ffb1 	bl	8000230 <memchr>
 80032ce:	b138      	cbz	r0, 80032e0 <_svfiprintf_r+0x150>
 80032d0:	9b04      	ldr	r3, [sp, #16]
 80032d2:	eba0 000a 	sub.w	r0, r0, sl
 80032d6:	2240      	movs	r2, #64	@ 0x40
 80032d8:	4082      	lsls	r2, r0
 80032da:	4313      	orrs	r3, r2
 80032dc:	3401      	adds	r4, #1
 80032de:	9304      	str	r3, [sp, #16]
 80032e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032e4:	4824      	ldr	r0, [pc, #144]	@ (8003378 <_svfiprintf_r+0x1e8>)
 80032e6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80032ea:	2206      	movs	r2, #6
 80032ec:	f7fc ffa0 	bl	8000230 <memchr>
 80032f0:	2800      	cmp	r0, #0
 80032f2:	d036      	beq.n	8003362 <_svfiprintf_r+0x1d2>
 80032f4:	4b21      	ldr	r3, [pc, #132]	@ (800337c <_svfiprintf_r+0x1ec>)
 80032f6:	bb1b      	cbnz	r3, 8003340 <_svfiprintf_r+0x1b0>
 80032f8:	9b03      	ldr	r3, [sp, #12]
 80032fa:	3307      	adds	r3, #7
 80032fc:	f023 0307 	bic.w	r3, r3, #7
 8003300:	3308      	adds	r3, #8
 8003302:	9303      	str	r3, [sp, #12]
 8003304:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003306:	4433      	add	r3, r6
 8003308:	9309      	str	r3, [sp, #36]	@ 0x24
 800330a:	e76a      	b.n	80031e2 <_svfiprintf_r+0x52>
 800330c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003310:	460c      	mov	r4, r1
 8003312:	2001      	movs	r0, #1
 8003314:	e7a8      	b.n	8003268 <_svfiprintf_r+0xd8>
 8003316:	2300      	movs	r3, #0
 8003318:	3401      	adds	r4, #1
 800331a:	9305      	str	r3, [sp, #20]
 800331c:	4619      	mov	r1, r3
 800331e:	f04f 0c0a 	mov.w	ip, #10
 8003322:	4620      	mov	r0, r4
 8003324:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003328:	3a30      	subs	r2, #48	@ 0x30
 800332a:	2a09      	cmp	r2, #9
 800332c:	d903      	bls.n	8003336 <_svfiprintf_r+0x1a6>
 800332e:	2b00      	cmp	r3, #0
 8003330:	d0c6      	beq.n	80032c0 <_svfiprintf_r+0x130>
 8003332:	9105      	str	r1, [sp, #20]
 8003334:	e7c4      	b.n	80032c0 <_svfiprintf_r+0x130>
 8003336:	fb0c 2101 	mla	r1, ip, r1, r2
 800333a:	4604      	mov	r4, r0
 800333c:	2301      	movs	r3, #1
 800333e:	e7f0      	b.n	8003322 <_svfiprintf_r+0x192>
 8003340:	ab03      	add	r3, sp, #12
 8003342:	9300      	str	r3, [sp, #0]
 8003344:	462a      	mov	r2, r5
 8003346:	4b0e      	ldr	r3, [pc, #56]	@ (8003380 <_svfiprintf_r+0x1f0>)
 8003348:	a904      	add	r1, sp, #16
 800334a:	4638      	mov	r0, r7
 800334c:	f3af 8000 	nop.w
 8003350:	1c42      	adds	r2, r0, #1
 8003352:	4606      	mov	r6, r0
 8003354:	d1d6      	bne.n	8003304 <_svfiprintf_r+0x174>
 8003356:	89ab      	ldrh	r3, [r5, #12]
 8003358:	065b      	lsls	r3, r3, #25
 800335a:	f53f af2d 	bmi.w	80031b8 <_svfiprintf_r+0x28>
 800335e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003360:	e72c      	b.n	80031bc <_svfiprintf_r+0x2c>
 8003362:	ab03      	add	r3, sp, #12
 8003364:	9300      	str	r3, [sp, #0]
 8003366:	462a      	mov	r2, r5
 8003368:	4b05      	ldr	r3, [pc, #20]	@ (8003380 <_svfiprintf_r+0x1f0>)
 800336a:	a904      	add	r1, sp, #16
 800336c:	4638      	mov	r0, r7
 800336e:	f000 f879 	bl	8003464 <_printf_i>
 8003372:	e7ed      	b.n	8003350 <_svfiprintf_r+0x1c0>
 8003374:	080037e4 	.word	0x080037e4
 8003378:	080037ee 	.word	0x080037ee
 800337c:	00000000 	.word	0x00000000
 8003380:	080030d9 	.word	0x080030d9
 8003384:	080037ea 	.word	0x080037ea

08003388 <_printf_common>:
 8003388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800338c:	4616      	mov	r6, r2
 800338e:	4698      	mov	r8, r3
 8003390:	688a      	ldr	r2, [r1, #8]
 8003392:	690b      	ldr	r3, [r1, #16]
 8003394:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003398:	4293      	cmp	r3, r2
 800339a:	bfb8      	it	lt
 800339c:	4613      	movlt	r3, r2
 800339e:	6033      	str	r3, [r6, #0]
 80033a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80033a4:	4607      	mov	r7, r0
 80033a6:	460c      	mov	r4, r1
 80033a8:	b10a      	cbz	r2, 80033ae <_printf_common+0x26>
 80033aa:	3301      	adds	r3, #1
 80033ac:	6033      	str	r3, [r6, #0]
 80033ae:	6823      	ldr	r3, [r4, #0]
 80033b0:	0699      	lsls	r1, r3, #26
 80033b2:	bf42      	ittt	mi
 80033b4:	6833      	ldrmi	r3, [r6, #0]
 80033b6:	3302      	addmi	r3, #2
 80033b8:	6033      	strmi	r3, [r6, #0]
 80033ba:	6825      	ldr	r5, [r4, #0]
 80033bc:	f015 0506 	ands.w	r5, r5, #6
 80033c0:	d106      	bne.n	80033d0 <_printf_common+0x48>
 80033c2:	f104 0a19 	add.w	sl, r4, #25
 80033c6:	68e3      	ldr	r3, [r4, #12]
 80033c8:	6832      	ldr	r2, [r6, #0]
 80033ca:	1a9b      	subs	r3, r3, r2
 80033cc:	42ab      	cmp	r3, r5
 80033ce:	dc26      	bgt.n	800341e <_printf_common+0x96>
 80033d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80033d4:	6822      	ldr	r2, [r4, #0]
 80033d6:	3b00      	subs	r3, #0
 80033d8:	bf18      	it	ne
 80033da:	2301      	movne	r3, #1
 80033dc:	0692      	lsls	r2, r2, #26
 80033de:	d42b      	bmi.n	8003438 <_printf_common+0xb0>
 80033e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80033e4:	4641      	mov	r1, r8
 80033e6:	4638      	mov	r0, r7
 80033e8:	47c8      	blx	r9
 80033ea:	3001      	adds	r0, #1
 80033ec:	d01e      	beq.n	800342c <_printf_common+0xa4>
 80033ee:	6823      	ldr	r3, [r4, #0]
 80033f0:	6922      	ldr	r2, [r4, #16]
 80033f2:	f003 0306 	and.w	r3, r3, #6
 80033f6:	2b04      	cmp	r3, #4
 80033f8:	bf02      	ittt	eq
 80033fa:	68e5      	ldreq	r5, [r4, #12]
 80033fc:	6833      	ldreq	r3, [r6, #0]
 80033fe:	1aed      	subeq	r5, r5, r3
 8003400:	68a3      	ldr	r3, [r4, #8]
 8003402:	bf0c      	ite	eq
 8003404:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003408:	2500      	movne	r5, #0
 800340a:	4293      	cmp	r3, r2
 800340c:	bfc4      	itt	gt
 800340e:	1a9b      	subgt	r3, r3, r2
 8003410:	18ed      	addgt	r5, r5, r3
 8003412:	2600      	movs	r6, #0
 8003414:	341a      	adds	r4, #26
 8003416:	42b5      	cmp	r5, r6
 8003418:	d11a      	bne.n	8003450 <_printf_common+0xc8>
 800341a:	2000      	movs	r0, #0
 800341c:	e008      	b.n	8003430 <_printf_common+0xa8>
 800341e:	2301      	movs	r3, #1
 8003420:	4652      	mov	r2, sl
 8003422:	4641      	mov	r1, r8
 8003424:	4638      	mov	r0, r7
 8003426:	47c8      	blx	r9
 8003428:	3001      	adds	r0, #1
 800342a:	d103      	bne.n	8003434 <_printf_common+0xac>
 800342c:	f04f 30ff 	mov.w	r0, #4294967295
 8003430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003434:	3501      	adds	r5, #1
 8003436:	e7c6      	b.n	80033c6 <_printf_common+0x3e>
 8003438:	18e1      	adds	r1, r4, r3
 800343a:	1c5a      	adds	r2, r3, #1
 800343c:	2030      	movs	r0, #48	@ 0x30
 800343e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003442:	4422      	add	r2, r4
 8003444:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003448:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800344c:	3302      	adds	r3, #2
 800344e:	e7c7      	b.n	80033e0 <_printf_common+0x58>
 8003450:	2301      	movs	r3, #1
 8003452:	4622      	mov	r2, r4
 8003454:	4641      	mov	r1, r8
 8003456:	4638      	mov	r0, r7
 8003458:	47c8      	blx	r9
 800345a:	3001      	adds	r0, #1
 800345c:	d0e6      	beq.n	800342c <_printf_common+0xa4>
 800345e:	3601      	adds	r6, #1
 8003460:	e7d9      	b.n	8003416 <_printf_common+0x8e>
	...

08003464 <_printf_i>:
 8003464:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003468:	7e0f      	ldrb	r7, [r1, #24]
 800346a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800346c:	2f78      	cmp	r7, #120	@ 0x78
 800346e:	4691      	mov	r9, r2
 8003470:	4680      	mov	r8, r0
 8003472:	460c      	mov	r4, r1
 8003474:	469a      	mov	sl, r3
 8003476:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800347a:	d807      	bhi.n	800348c <_printf_i+0x28>
 800347c:	2f62      	cmp	r7, #98	@ 0x62
 800347e:	d80a      	bhi.n	8003496 <_printf_i+0x32>
 8003480:	2f00      	cmp	r7, #0
 8003482:	f000 80d2 	beq.w	800362a <_printf_i+0x1c6>
 8003486:	2f58      	cmp	r7, #88	@ 0x58
 8003488:	f000 80b9 	beq.w	80035fe <_printf_i+0x19a>
 800348c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003490:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003494:	e03a      	b.n	800350c <_printf_i+0xa8>
 8003496:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800349a:	2b15      	cmp	r3, #21
 800349c:	d8f6      	bhi.n	800348c <_printf_i+0x28>
 800349e:	a101      	add	r1, pc, #4	@ (adr r1, 80034a4 <_printf_i+0x40>)
 80034a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80034a4:	080034fd 	.word	0x080034fd
 80034a8:	08003511 	.word	0x08003511
 80034ac:	0800348d 	.word	0x0800348d
 80034b0:	0800348d 	.word	0x0800348d
 80034b4:	0800348d 	.word	0x0800348d
 80034b8:	0800348d 	.word	0x0800348d
 80034bc:	08003511 	.word	0x08003511
 80034c0:	0800348d 	.word	0x0800348d
 80034c4:	0800348d 	.word	0x0800348d
 80034c8:	0800348d 	.word	0x0800348d
 80034cc:	0800348d 	.word	0x0800348d
 80034d0:	08003611 	.word	0x08003611
 80034d4:	0800353b 	.word	0x0800353b
 80034d8:	080035cb 	.word	0x080035cb
 80034dc:	0800348d 	.word	0x0800348d
 80034e0:	0800348d 	.word	0x0800348d
 80034e4:	08003633 	.word	0x08003633
 80034e8:	0800348d 	.word	0x0800348d
 80034ec:	0800353b 	.word	0x0800353b
 80034f0:	0800348d 	.word	0x0800348d
 80034f4:	0800348d 	.word	0x0800348d
 80034f8:	080035d3 	.word	0x080035d3
 80034fc:	6833      	ldr	r3, [r6, #0]
 80034fe:	1d1a      	adds	r2, r3, #4
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	6032      	str	r2, [r6, #0]
 8003504:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003508:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800350c:	2301      	movs	r3, #1
 800350e:	e09d      	b.n	800364c <_printf_i+0x1e8>
 8003510:	6833      	ldr	r3, [r6, #0]
 8003512:	6820      	ldr	r0, [r4, #0]
 8003514:	1d19      	adds	r1, r3, #4
 8003516:	6031      	str	r1, [r6, #0]
 8003518:	0606      	lsls	r6, r0, #24
 800351a:	d501      	bpl.n	8003520 <_printf_i+0xbc>
 800351c:	681d      	ldr	r5, [r3, #0]
 800351e:	e003      	b.n	8003528 <_printf_i+0xc4>
 8003520:	0645      	lsls	r5, r0, #25
 8003522:	d5fb      	bpl.n	800351c <_printf_i+0xb8>
 8003524:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003528:	2d00      	cmp	r5, #0
 800352a:	da03      	bge.n	8003534 <_printf_i+0xd0>
 800352c:	232d      	movs	r3, #45	@ 0x2d
 800352e:	426d      	negs	r5, r5
 8003530:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003534:	4859      	ldr	r0, [pc, #356]	@ (800369c <_printf_i+0x238>)
 8003536:	230a      	movs	r3, #10
 8003538:	e011      	b.n	800355e <_printf_i+0xfa>
 800353a:	6821      	ldr	r1, [r4, #0]
 800353c:	6833      	ldr	r3, [r6, #0]
 800353e:	0608      	lsls	r0, r1, #24
 8003540:	f853 5b04 	ldr.w	r5, [r3], #4
 8003544:	d402      	bmi.n	800354c <_printf_i+0xe8>
 8003546:	0649      	lsls	r1, r1, #25
 8003548:	bf48      	it	mi
 800354a:	b2ad      	uxthmi	r5, r5
 800354c:	2f6f      	cmp	r7, #111	@ 0x6f
 800354e:	4853      	ldr	r0, [pc, #332]	@ (800369c <_printf_i+0x238>)
 8003550:	6033      	str	r3, [r6, #0]
 8003552:	bf14      	ite	ne
 8003554:	230a      	movne	r3, #10
 8003556:	2308      	moveq	r3, #8
 8003558:	2100      	movs	r1, #0
 800355a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800355e:	6866      	ldr	r6, [r4, #4]
 8003560:	60a6      	str	r6, [r4, #8]
 8003562:	2e00      	cmp	r6, #0
 8003564:	bfa2      	ittt	ge
 8003566:	6821      	ldrge	r1, [r4, #0]
 8003568:	f021 0104 	bicge.w	r1, r1, #4
 800356c:	6021      	strge	r1, [r4, #0]
 800356e:	b90d      	cbnz	r5, 8003574 <_printf_i+0x110>
 8003570:	2e00      	cmp	r6, #0
 8003572:	d04b      	beq.n	800360c <_printf_i+0x1a8>
 8003574:	4616      	mov	r6, r2
 8003576:	fbb5 f1f3 	udiv	r1, r5, r3
 800357a:	fb03 5711 	mls	r7, r3, r1, r5
 800357e:	5dc7      	ldrb	r7, [r0, r7]
 8003580:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003584:	462f      	mov	r7, r5
 8003586:	42bb      	cmp	r3, r7
 8003588:	460d      	mov	r5, r1
 800358a:	d9f4      	bls.n	8003576 <_printf_i+0x112>
 800358c:	2b08      	cmp	r3, #8
 800358e:	d10b      	bne.n	80035a8 <_printf_i+0x144>
 8003590:	6823      	ldr	r3, [r4, #0]
 8003592:	07df      	lsls	r7, r3, #31
 8003594:	d508      	bpl.n	80035a8 <_printf_i+0x144>
 8003596:	6923      	ldr	r3, [r4, #16]
 8003598:	6861      	ldr	r1, [r4, #4]
 800359a:	4299      	cmp	r1, r3
 800359c:	bfde      	ittt	le
 800359e:	2330      	movle	r3, #48	@ 0x30
 80035a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80035a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80035a8:	1b92      	subs	r2, r2, r6
 80035aa:	6122      	str	r2, [r4, #16]
 80035ac:	f8cd a000 	str.w	sl, [sp]
 80035b0:	464b      	mov	r3, r9
 80035b2:	aa03      	add	r2, sp, #12
 80035b4:	4621      	mov	r1, r4
 80035b6:	4640      	mov	r0, r8
 80035b8:	f7ff fee6 	bl	8003388 <_printf_common>
 80035bc:	3001      	adds	r0, #1
 80035be:	d14a      	bne.n	8003656 <_printf_i+0x1f2>
 80035c0:	f04f 30ff 	mov.w	r0, #4294967295
 80035c4:	b004      	add	sp, #16
 80035c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035ca:	6823      	ldr	r3, [r4, #0]
 80035cc:	f043 0320 	orr.w	r3, r3, #32
 80035d0:	6023      	str	r3, [r4, #0]
 80035d2:	4833      	ldr	r0, [pc, #204]	@ (80036a0 <_printf_i+0x23c>)
 80035d4:	2778      	movs	r7, #120	@ 0x78
 80035d6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80035da:	6823      	ldr	r3, [r4, #0]
 80035dc:	6831      	ldr	r1, [r6, #0]
 80035de:	061f      	lsls	r7, r3, #24
 80035e0:	f851 5b04 	ldr.w	r5, [r1], #4
 80035e4:	d402      	bmi.n	80035ec <_printf_i+0x188>
 80035e6:	065f      	lsls	r7, r3, #25
 80035e8:	bf48      	it	mi
 80035ea:	b2ad      	uxthmi	r5, r5
 80035ec:	6031      	str	r1, [r6, #0]
 80035ee:	07d9      	lsls	r1, r3, #31
 80035f0:	bf44      	itt	mi
 80035f2:	f043 0320 	orrmi.w	r3, r3, #32
 80035f6:	6023      	strmi	r3, [r4, #0]
 80035f8:	b11d      	cbz	r5, 8003602 <_printf_i+0x19e>
 80035fa:	2310      	movs	r3, #16
 80035fc:	e7ac      	b.n	8003558 <_printf_i+0xf4>
 80035fe:	4827      	ldr	r0, [pc, #156]	@ (800369c <_printf_i+0x238>)
 8003600:	e7e9      	b.n	80035d6 <_printf_i+0x172>
 8003602:	6823      	ldr	r3, [r4, #0]
 8003604:	f023 0320 	bic.w	r3, r3, #32
 8003608:	6023      	str	r3, [r4, #0]
 800360a:	e7f6      	b.n	80035fa <_printf_i+0x196>
 800360c:	4616      	mov	r6, r2
 800360e:	e7bd      	b.n	800358c <_printf_i+0x128>
 8003610:	6833      	ldr	r3, [r6, #0]
 8003612:	6825      	ldr	r5, [r4, #0]
 8003614:	6961      	ldr	r1, [r4, #20]
 8003616:	1d18      	adds	r0, r3, #4
 8003618:	6030      	str	r0, [r6, #0]
 800361a:	062e      	lsls	r6, r5, #24
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	d501      	bpl.n	8003624 <_printf_i+0x1c0>
 8003620:	6019      	str	r1, [r3, #0]
 8003622:	e002      	b.n	800362a <_printf_i+0x1c6>
 8003624:	0668      	lsls	r0, r5, #25
 8003626:	d5fb      	bpl.n	8003620 <_printf_i+0x1bc>
 8003628:	8019      	strh	r1, [r3, #0]
 800362a:	2300      	movs	r3, #0
 800362c:	6123      	str	r3, [r4, #16]
 800362e:	4616      	mov	r6, r2
 8003630:	e7bc      	b.n	80035ac <_printf_i+0x148>
 8003632:	6833      	ldr	r3, [r6, #0]
 8003634:	1d1a      	adds	r2, r3, #4
 8003636:	6032      	str	r2, [r6, #0]
 8003638:	681e      	ldr	r6, [r3, #0]
 800363a:	6862      	ldr	r2, [r4, #4]
 800363c:	2100      	movs	r1, #0
 800363e:	4630      	mov	r0, r6
 8003640:	f7fc fdf6 	bl	8000230 <memchr>
 8003644:	b108      	cbz	r0, 800364a <_printf_i+0x1e6>
 8003646:	1b80      	subs	r0, r0, r6
 8003648:	6060      	str	r0, [r4, #4]
 800364a:	6863      	ldr	r3, [r4, #4]
 800364c:	6123      	str	r3, [r4, #16]
 800364e:	2300      	movs	r3, #0
 8003650:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003654:	e7aa      	b.n	80035ac <_printf_i+0x148>
 8003656:	6923      	ldr	r3, [r4, #16]
 8003658:	4632      	mov	r2, r6
 800365a:	4649      	mov	r1, r9
 800365c:	4640      	mov	r0, r8
 800365e:	47d0      	blx	sl
 8003660:	3001      	adds	r0, #1
 8003662:	d0ad      	beq.n	80035c0 <_printf_i+0x15c>
 8003664:	6823      	ldr	r3, [r4, #0]
 8003666:	079b      	lsls	r3, r3, #30
 8003668:	d413      	bmi.n	8003692 <_printf_i+0x22e>
 800366a:	68e0      	ldr	r0, [r4, #12]
 800366c:	9b03      	ldr	r3, [sp, #12]
 800366e:	4298      	cmp	r0, r3
 8003670:	bfb8      	it	lt
 8003672:	4618      	movlt	r0, r3
 8003674:	e7a6      	b.n	80035c4 <_printf_i+0x160>
 8003676:	2301      	movs	r3, #1
 8003678:	4632      	mov	r2, r6
 800367a:	4649      	mov	r1, r9
 800367c:	4640      	mov	r0, r8
 800367e:	47d0      	blx	sl
 8003680:	3001      	adds	r0, #1
 8003682:	d09d      	beq.n	80035c0 <_printf_i+0x15c>
 8003684:	3501      	adds	r5, #1
 8003686:	68e3      	ldr	r3, [r4, #12]
 8003688:	9903      	ldr	r1, [sp, #12]
 800368a:	1a5b      	subs	r3, r3, r1
 800368c:	42ab      	cmp	r3, r5
 800368e:	dcf2      	bgt.n	8003676 <_printf_i+0x212>
 8003690:	e7eb      	b.n	800366a <_printf_i+0x206>
 8003692:	2500      	movs	r5, #0
 8003694:	f104 0619 	add.w	r6, r4, #25
 8003698:	e7f5      	b.n	8003686 <_printf_i+0x222>
 800369a:	bf00      	nop
 800369c:	080037f5 	.word	0x080037f5
 80036a0:	08003806 	.word	0x08003806

080036a4 <memmove>:
 80036a4:	4288      	cmp	r0, r1
 80036a6:	b510      	push	{r4, lr}
 80036a8:	eb01 0402 	add.w	r4, r1, r2
 80036ac:	d902      	bls.n	80036b4 <memmove+0x10>
 80036ae:	4284      	cmp	r4, r0
 80036b0:	4623      	mov	r3, r4
 80036b2:	d807      	bhi.n	80036c4 <memmove+0x20>
 80036b4:	1e43      	subs	r3, r0, #1
 80036b6:	42a1      	cmp	r1, r4
 80036b8:	d008      	beq.n	80036cc <memmove+0x28>
 80036ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80036be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80036c2:	e7f8      	b.n	80036b6 <memmove+0x12>
 80036c4:	4402      	add	r2, r0
 80036c6:	4601      	mov	r1, r0
 80036c8:	428a      	cmp	r2, r1
 80036ca:	d100      	bne.n	80036ce <memmove+0x2a>
 80036cc:	bd10      	pop	{r4, pc}
 80036ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80036d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80036d6:	e7f7      	b.n	80036c8 <memmove+0x24>

080036d8 <_sbrk_r>:
 80036d8:	b538      	push	{r3, r4, r5, lr}
 80036da:	4d06      	ldr	r5, [pc, #24]	@ (80036f4 <_sbrk_r+0x1c>)
 80036dc:	2300      	movs	r3, #0
 80036de:	4604      	mov	r4, r0
 80036e0:	4608      	mov	r0, r1
 80036e2:	602b      	str	r3, [r5, #0]
 80036e4:	f7fd f916 	bl	8000914 <_sbrk>
 80036e8:	1c43      	adds	r3, r0, #1
 80036ea:	d102      	bne.n	80036f2 <_sbrk_r+0x1a>
 80036ec:	682b      	ldr	r3, [r5, #0]
 80036ee:	b103      	cbz	r3, 80036f2 <_sbrk_r+0x1a>
 80036f0:	6023      	str	r3, [r4, #0]
 80036f2:	bd38      	pop	{r3, r4, r5, pc}
 80036f4:	20000270 	.word	0x20000270

080036f8 <memcpy>:
 80036f8:	440a      	add	r2, r1
 80036fa:	4291      	cmp	r1, r2
 80036fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8003700:	d100      	bne.n	8003704 <memcpy+0xc>
 8003702:	4770      	bx	lr
 8003704:	b510      	push	{r4, lr}
 8003706:	f811 4b01 	ldrb.w	r4, [r1], #1
 800370a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800370e:	4291      	cmp	r1, r2
 8003710:	d1f9      	bne.n	8003706 <memcpy+0xe>
 8003712:	bd10      	pop	{r4, pc}

08003714 <_realloc_r>:
 8003714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003718:	4680      	mov	r8, r0
 800371a:	4615      	mov	r5, r2
 800371c:	460c      	mov	r4, r1
 800371e:	b921      	cbnz	r1, 800372a <_realloc_r+0x16>
 8003720:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003724:	4611      	mov	r1, r2
 8003726:	f7ff bc4b 	b.w	8002fc0 <_malloc_r>
 800372a:	b92a      	cbnz	r2, 8003738 <_realloc_r+0x24>
 800372c:	f7ff fbdc 	bl	8002ee8 <_free_r>
 8003730:	2400      	movs	r4, #0
 8003732:	4620      	mov	r0, r4
 8003734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003738:	f000 f81a 	bl	8003770 <_malloc_usable_size_r>
 800373c:	4285      	cmp	r5, r0
 800373e:	4606      	mov	r6, r0
 8003740:	d802      	bhi.n	8003748 <_realloc_r+0x34>
 8003742:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003746:	d8f4      	bhi.n	8003732 <_realloc_r+0x1e>
 8003748:	4629      	mov	r1, r5
 800374a:	4640      	mov	r0, r8
 800374c:	f7ff fc38 	bl	8002fc0 <_malloc_r>
 8003750:	4607      	mov	r7, r0
 8003752:	2800      	cmp	r0, #0
 8003754:	d0ec      	beq.n	8003730 <_realloc_r+0x1c>
 8003756:	42b5      	cmp	r5, r6
 8003758:	462a      	mov	r2, r5
 800375a:	4621      	mov	r1, r4
 800375c:	bf28      	it	cs
 800375e:	4632      	movcs	r2, r6
 8003760:	f7ff ffca 	bl	80036f8 <memcpy>
 8003764:	4621      	mov	r1, r4
 8003766:	4640      	mov	r0, r8
 8003768:	f7ff fbbe 	bl	8002ee8 <_free_r>
 800376c:	463c      	mov	r4, r7
 800376e:	e7e0      	b.n	8003732 <_realloc_r+0x1e>

08003770 <_malloc_usable_size_r>:
 8003770:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003774:	1f18      	subs	r0, r3, #4
 8003776:	2b00      	cmp	r3, #0
 8003778:	bfbc      	itt	lt
 800377a:	580b      	ldrlt	r3, [r1, r0]
 800377c:	18c0      	addlt	r0, r0, r3
 800377e:	4770      	bx	lr

08003780 <_init>:
 8003780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003782:	bf00      	nop
 8003784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003786:	bc08      	pop	{r3}
 8003788:	469e      	mov	lr, r3
 800378a:	4770      	bx	lr

0800378c <_fini>:
 800378c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800378e:	bf00      	nop
 8003790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003792:	bc08      	pop	{r3}
 8003794:	469e      	mov	lr, r3
 8003796:	4770      	bx	lr
