
019_F411_EXTRA_FEATURES.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d7c  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002f14  08002f14  00003f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f2c  08002f2c  00004020  2**0
                  CONTENTS
  4 .ARM          00000008  08002f2c  08002f2c  00003f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002f34  08002f34  00004020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f34  08002f34  00003f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002f38  08002f38  00003f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  08002f3c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  20000020  08002f5c  00004020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  08002f5c  00004198  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c19e  00000000  00000000  00004050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019a9  00000000  00000000  000101ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b88  00000000  00000000  00011b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000912  00000000  00000000  00012720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000155c0  00000000  00000000  00013032  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cdf5  00000000  00000000  000285f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a477  00000000  00000000  000353e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bf85e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030ec  00000000  00000000  000bf8a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000c2990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000020 	.word	0x20000020
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002efc 	.word	0x08002efc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000024 	.word	0x20000024
 80001d4:	08002efc 	.word	0x08002efc

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <Modbus_CRC16>:
uint8_t txbuffer[100];

uint16_t registers[10]={1,255,0,4,3,0,5,2500,3524,55};

uint16_t Modbus_CRC16(uint8_t *data, uint16_t length)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b087      	sub	sp, #28
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	460b      	mov	r3, r1
 80004d2:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0xFFFF;
 80004d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80004d8:	82fb      	strh	r3, [r7, #22]
    for (int pos = 0; pos < length; pos++)
 80004da:	2300      	movs	r3, #0
 80004dc:	613b      	str	r3, [r7, #16]
 80004de:	e026      	b.n	800052e <Modbus_CRC16+0x66>
    {
        crc ^= (uint16_t)data[pos];
 80004e0:	693b      	ldr	r3, [r7, #16]
 80004e2:	687a      	ldr	r2, [r7, #4]
 80004e4:	4413      	add	r3, r2
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	461a      	mov	r2, r3
 80004ea:	8afb      	ldrh	r3, [r7, #22]
 80004ec:	4053      	eors	r3, r2
 80004ee:	82fb      	strh	r3, [r7, #22]
        for (int i = 8; i != 0; i--)
 80004f0:	2308      	movs	r3, #8
 80004f2:	60fb      	str	r3, [r7, #12]
 80004f4:	e015      	b.n	8000522 <Modbus_CRC16+0x5a>
        {
            if ((crc & 0x0001) != 0)
 80004f6:	8afb      	ldrh	r3, [r7, #22]
 80004f8:	f003 0301 	and.w	r3, r3, #1
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d00a      	beq.n	8000516 <Modbus_CRC16+0x4e>
            {
                crc >>= 1;
 8000500:	8afb      	ldrh	r3, [r7, #22]
 8000502:	085b      	lsrs	r3, r3, #1
 8000504:	82fb      	strh	r3, [r7, #22]
                crc ^= 0xA001;
 8000506:	8afb      	ldrh	r3, [r7, #22]
 8000508:	f483 43bf 	eor.w	r3, r3, #24448	@ 0x5f80
 800050c:	f083 037e 	eor.w	r3, r3, #126	@ 0x7e
 8000510:	43db      	mvns	r3, r3
 8000512:	82fb      	strh	r3, [r7, #22]
 8000514:	e002      	b.n	800051c <Modbus_CRC16+0x54>
            }
            else
                crc >>= 1;
 8000516:	8afb      	ldrh	r3, [r7, #22]
 8000518:	085b      	lsrs	r3, r3, #1
 800051a:	82fb      	strh	r3, [r7, #22]
        for (int i = 8; i != 0; i--)
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	3b01      	subs	r3, #1
 8000520:	60fb      	str	r3, [r7, #12]
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d1e6      	bne.n	80004f6 <Modbus_CRC16+0x2e>
    for (int pos = 0; pos < length; pos++)
 8000528:	693b      	ldr	r3, [r7, #16]
 800052a:	3301      	adds	r3, #1
 800052c:	613b      	str	r3, [r7, #16]
 800052e:	887b      	ldrh	r3, [r7, #2]
 8000530:	693a      	ldr	r2, [r7, #16]
 8000532:	429a      	cmp	r2, r3
 8000534:	dbd4      	blt.n	80004e0 <Modbus_CRC16+0x18>
        }
    }
    return crc;
 8000536:	8afb      	ldrh	r3, [r7, #22]
}
 8000538:	4618      	mov	r0, r3
 800053a:	371c      	adds	r7, #28
 800053c:	46bd      	mov	sp, r7
 800053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000542:	4770      	bx	lr

08000544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000548:	b097      	sub	sp, #92	@ 0x5c
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054c:	f000 fc6e 	bl	8000e2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000550:	f000 fa26 	bl	80009a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000554:	f000 fb06 	bl	8000b64 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000558:	f000 fada 	bl	8000b10 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800055c:	f000 fa8a 	bl	8000a74 <MX_TIM3_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 HAL_UART_Receive(&huart2, rxbuffer, sizeof(rxbuffer), 100);
 8000560:	2364      	movs	r3, #100	@ 0x64
 8000562:	2264      	movs	r2, #100	@ 0x64
 8000564:	499f      	ldr	r1, [pc, #636]	@ (80007e4 <main+0x2a0>)
 8000566:	48a0      	ldr	r0, [pc, #640]	@ (80007e8 <main+0x2a4>)
 8000568:	f002 f8d5 	bl	8002716 <HAL_UART_Receive>
	 if(rxbuffer[0]==1 && rxbuffer[1]== 0x03){
 800056c:	4b9d      	ldr	r3, [pc, #628]	@ (80007e4 <main+0x2a0>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	2b01      	cmp	r3, #1
 8000572:	f040 80a6 	bne.w	80006c2 <main+0x17e>
 8000576:	4b9b      	ldr	r3, [pc, #620]	@ (80007e4 <main+0x2a0>)
 8000578:	785b      	ldrb	r3, [r3, #1]
 800057a:	2b03      	cmp	r3, #3
 800057c:	f040 80a1 	bne.w	80006c2 <main+0x17e>
 8000580:	466b      	mov	r3, sp
 8000582:	461e      	mov	r6, r3
		 uint16_t start_Reg = rxbuffer[2]<<8 | rxbuffer[3];
 8000584:	4b97      	ldr	r3, [pc, #604]	@ (80007e4 <main+0x2a0>)
 8000586:	789b      	ldrb	r3, [r3, #2]
 8000588:	021b      	lsls	r3, r3, #8
 800058a:	b21a      	sxth	r2, r3
 800058c:	4b95      	ldr	r3, [pc, #596]	@ (80007e4 <main+0x2a0>)
 800058e:	78db      	ldrb	r3, [r3, #3]
 8000590:	b21b      	sxth	r3, r3
 8000592:	4313      	orrs	r3, r2
 8000594:	b21b      	sxth	r3, r3
 8000596:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
		 uint16_t num_Reg = rxbuffer[4]<<8 | rxbuffer[5];
 800059a:	4b92      	ldr	r3, [pc, #584]	@ (80007e4 <main+0x2a0>)
 800059c:	791b      	ldrb	r3, [r3, #4]
 800059e:	021b      	lsls	r3, r3, #8
 80005a0:	b21a      	sxth	r2, r3
 80005a2:	4b90      	ldr	r3, [pc, #576]	@ (80007e4 <main+0x2a0>)
 80005a4:	795b      	ldrb	r3, [r3, #5]
 80005a6:	b21b      	sxth	r3, r3
 80005a8:	4313      	orrs	r3, r2
 80005aa:	b21b      	sxth	r3, r3
 80005ac:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

		 uint8_t response [5+2*num_Reg+2];
 80005b0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80005b4:	005b      	lsls	r3, r3, #1
 80005b6:	1dd9      	adds	r1, r3, #7
 80005b8:	1e4b      	subs	r3, r1, #1
 80005ba:	643b      	str	r3, [r7, #64]	@ 0x40
 80005bc:	460a      	mov	r2, r1
 80005be:	2300      	movs	r3, #0
 80005c0:	4614      	mov	r4, r2
 80005c2:	461d      	mov	r5, r3
 80005c4:	f04f 0200 	mov.w	r2, #0
 80005c8:	f04f 0300 	mov.w	r3, #0
 80005cc:	00eb      	lsls	r3, r5, #3
 80005ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80005d2:	00e2      	lsls	r2, r4, #3
 80005d4:	460a      	mov	r2, r1
 80005d6:	2300      	movs	r3, #0
 80005d8:	4690      	mov	r8, r2
 80005da:	4699      	mov	r9, r3
 80005dc:	f04f 0200 	mov.w	r2, #0
 80005e0:	f04f 0300 	mov.w	r3, #0
 80005e4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80005e8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80005ec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80005f0:	460b      	mov	r3, r1
 80005f2:	3307      	adds	r3, #7
 80005f4:	08db      	lsrs	r3, r3, #3
 80005f6:	00db      	lsls	r3, r3, #3
 80005f8:	ebad 0d03 	sub.w	sp, sp, r3
 80005fc:	466b      	mov	r3, sp
 80005fe:	3300      	adds	r3, #0
 8000600:	63fb      	str	r3, [r7, #60]	@ 0x3c
		 response[0] = SLAVEID;
 8000602:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000604:	2201      	movs	r2, #1
 8000606:	701a      	strb	r2, [r3, #0]
		 response[1] = 0x03;
 8000608:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800060a:	2203      	movs	r2, #3
 800060c:	705a      	strb	r2, [r3, #1]
		 response[2] = 2*num_Reg;
 800060e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000612:	b2db      	uxtb	r3, r3
 8000614:	005b      	lsls	r3, r3, #1
 8000616:	b2da      	uxtb	r2, r3
 8000618:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800061a:	709a      	strb	r2, [r3, #2]
		 for(int i=0; i<num_Reg;i++){
 800061c:	2300      	movs	r3, #0
 800061e:	657b      	str	r3, [r7, #84]	@ 0x54
 8000620:	e01e      	b.n	8000660 <main+0x11c>
			 response[3+i*2] = (registers[start_Reg+i]>>8) & 0xFF ;
 8000622:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8000626:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000628:	4413      	add	r3, r2
 800062a:	4a70      	ldr	r2, [pc, #448]	@ (80007ec <main+0x2a8>)
 800062c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000630:	0a1b      	lsrs	r3, r3, #8
 8000632:	b29a      	uxth	r2, r3
 8000634:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000636:	005b      	lsls	r3, r3, #1
 8000638:	3303      	adds	r3, #3
 800063a:	b2d1      	uxtb	r1, r2
 800063c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800063e:	54d1      	strb	r1, [r2, r3]
			 response[4+i*2] =	registers[start_Reg+i] & 0xFF ;
 8000640:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8000644:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000646:	4413      	add	r3, r2
 8000648:	4a68      	ldr	r2, [pc, #416]	@ (80007ec <main+0x2a8>)
 800064a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800064e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000650:	3302      	adds	r3, #2
 8000652:	005b      	lsls	r3, r3, #1
 8000654:	b2d1      	uxtb	r1, r2
 8000656:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000658:	54d1      	strb	r1, [r2, r3]
		 for(int i=0; i<num_Reg;i++){
 800065a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800065c:	3301      	adds	r3, #1
 800065e:	657b      	str	r3, [r7, #84]	@ 0x54
 8000660:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000664:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000666:	429a      	cmp	r2, r3
 8000668:	dbdb      	blt.n	8000622 <main+0xde>
		 }

		 uint16_t CRC2 = Modbus_CRC16(response, 3+2*num_Reg);
 800066a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800066e:	005b      	lsls	r3, r3, #1
 8000670:	b29b      	uxth	r3, r3
 8000672:	3303      	adds	r3, #3
 8000674:	b29b      	uxth	r3, r3
 8000676:	4619      	mov	r1, r3
 8000678:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800067a:	f7ff ff25 	bl	80004c8 <Modbus_CRC16>
 800067e:	4603      	mov	r3, r0
 8000680:	877b      	strh	r3, [r7, #58]	@ 0x3a
		 response[3 + 2*num_Reg] = CRC2 & 0xFF;
 8000682:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000686:	005b      	lsls	r3, r3, #1
 8000688:	3303      	adds	r3, #3
 800068a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800068c:	b2d1      	uxtb	r1, r2
 800068e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000690:	54d1      	strb	r1, [r2, r3]
		 response[4 + 2*num_Reg] = (CRC2>>8) & 0xFF;
 8000692:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8000694:	0a1b      	lsrs	r3, r3, #8
 8000696:	b29a      	uxth	r2, r3
 8000698:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800069c:	3302      	adds	r3, #2
 800069e:	005b      	lsls	r3, r3, #1
 80006a0:	b2d1      	uxtb	r1, r2
 80006a2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80006a4:	54d1      	strb	r1, [r2, r3]


		 int response_size = (3+2*num_Reg+2);
 80006a6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80006aa:	005b      	lsls	r3, r3, #1
 80006ac:	3305      	adds	r3, #5
 80006ae:	637b      	str	r3, [r7, #52]	@ 0x34
		 HAL_UART_Transmit(&huart2, response, response_size, 100);
 80006b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80006b2:	b29a      	uxth	r2, r3
 80006b4:	2364      	movs	r3, #100	@ 0x64
 80006b6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80006b8:	484b      	ldr	r0, [pc, #300]	@ (80007e8 <main+0x2a4>)
 80006ba:	f001 ffa1 	bl	8002600 <HAL_UART_Transmit>
 80006be:	46b5      	mov	sp, r6
	 if(rxbuffer[0]==1 && rxbuffer[1]== 0x03){
 80006c0:	e167      	b.n	8000992 <main+0x44e>

	 }
	 else if(rxbuffer[0]==1 && rxbuffer[1]==0x10){
 80006c2:	4b48      	ldr	r3, [pc, #288]	@ (80007e4 <main+0x2a0>)
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	2b01      	cmp	r3, #1
 80006c8:	d168      	bne.n	800079c <main+0x258>
 80006ca:	4b46      	ldr	r3, [pc, #280]	@ (80007e4 <main+0x2a0>)
 80006cc:	785b      	ldrb	r3, [r3, #1]
 80006ce:	2b10      	cmp	r3, #16
 80006d0:	d164      	bne.n	800079c <main+0x258>
		 uint16_t start_Reg =(rxbuffer[2]<<8) | rxbuffer[3];
 80006d2:	4b44      	ldr	r3, [pc, #272]	@ (80007e4 <main+0x2a0>)
 80006d4:	789b      	ldrb	r3, [r3, #2]
 80006d6:	021b      	lsls	r3, r3, #8
 80006d8:	b21a      	sxth	r2, r3
 80006da:	4b42      	ldr	r3, [pc, #264]	@ (80007e4 <main+0x2a0>)
 80006dc:	78db      	ldrb	r3, [r3, #3]
 80006de:	b21b      	sxth	r3, r3
 80006e0:	4313      	orrs	r3, r2
 80006e2:	b21b      	sxth	r3, r3
 80006e4:	867b      	strh	r3, [r7, #50]	@ 0x32
		 uint16_t num_Reg = (rxbuffer[4]<<8) | rxbuffer[5];
 80006e6:	4b3f      	ldr	r3, [pc, #252]	@ (80007e4 <main+0x2a0>)
 80006e8:	791b      	ldrb	r3, [r3, #4]
 80006ea:	021b      	lsls	r3, r3, #8
 80006ec:	b21a      	sxth	r2, r3
 80006ee:	4b3d      	ldr	r3, [pc, #244]	@ (80007e4 <main+0x2a0>)
 80006f0:	795b      	ldrb	r3, [r3, #5]
 80006f2:	b21b      	sxth	r3, r3
 80006f4:	4313      	orrs	r3, r2
 80006f6:	b21b      	sxth	r3, r3
 80006f8:	863b      	strh	r3, [r7, #48]	@ 0x30
		 uint8_t num_of_databytes = rxbuffer[6];
 80006fa:	4b3a      	ldr	r3, [pc, #232]	@ (80007e4 <main+0x2a0>)
 80006fc:	799b      	ldrb	r3, [r3, #6]
 80006fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

		 for(int i=0;i<num_Reg;i++){
 8000702:	2300      	movs	r3, #0
 8000704:	653b      	str	r3, [r7, #80]	@ 0x50
 8000706:	e018      	b.n	800073a <main+0x1f6>
			 registers[start_Reg+i] = (rxbuffer[7+2*i])<<8 | rxbuffer[8+2*i];
 8000708:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800070a:	005b      	lsls	r3, r3, #1
 800070c:	3307      	adds	r3, #7
 800070e:	4a35      	ldr	r2, [pc, #212]	@ (80007e4 <main+0x2a0>)
 8000710:	5cd3      	ldrb	r3, [r2, r3]
 8000712:	021b      	lsls	r3, r3, #8
 8000714:	b21a      	sxth	r2, r3
 8000716:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000718:	3304      	adds	r3, #4
 800071a:	005b      	lsls	r3, r3, #1
 800071c:	4931      	ldr	r1, [pc, #196]	@ (80007e4 <main+0x2a0>)
 800071e:	5ccb      	ldrb	r3, [r1, r3]
 8000720:	b21b      	sxth	r3, r3
 8000722:	4313      	orrs	r3, r2
 8000724:	b219      	sxth	r1, r3
 8000726:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8000728:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800072a:	4413      	add	r3, r2
 800072c:	b289      	uxth	r1, r1
 800072e:	4a2f      	ldr	r2, [pc, #188]	@ (80007ec <main+0x2a8>)
 8000730:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		 for(int i=0;i<num_Reg;i++){
 8000734:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000736:	3301      	adds	r3, #1
 8000738:	653b      	str	r3, [r7, #80]	@ 0x50
 800073a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800073c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800073e:	429a      	cmp	r2, r3
 8000740:	dbe2      	blt.n	8000708 <main+0x1c4>
		 }

		 //Preapering response
		 txbuffer[0]=SLAVEID;
 8000742:	4b2b      	ldr	r3, [pc, #172]	@ (80007f0 <main+0x2ac>)
 8000744:	2201      	movs	r2, #1
 8000746:	701a      	strb	r2, [r3, #0]
		 txbuffer[1]=0x10;
 8000748:	4b29      	ldr	r3, [pc, #164]	@ (80007f0 <main+0x2ac>)
 800074a:	2210      	movs	r2, #16
 800074c:	705a      	strb	r2, [r3, #1]
		 txbuffer[2]=rxbuffer[2];
 800074e:	4b25      	ldr	r3, [pc, #148]	@ (80007e4 <main+0x2a0>)
 8000750:	789a      	ldrb	r2, [r3, #2]
 8000752:	4b27      	ldr	r3, [pc, #156]	@ (80007f0 <main+0x2ac>)
 8000754:	709a      	strb	r2, [r3, #2]
		 txbuffer[3]=rxbuffer[3];
 8000756:	4b23      	ldr	r3, [pc, #140]	@ (80007e4 <main+0x2a0>)
 8000758:	78da      	ldrb	r2, [r3, #3]
 800075a:	4b25      	ldr	r3, [pc, #148]	@ (80007f0 <main+0x2ac>)
 800075c:	70da      	strb	r2, [r3, #3]
		 txbuffer[4]=rxbuffer[4];
 800075e:	4b21      	ldr	r3, [pc, #132]	@ (80007e4 <main+0x2a0>)
 8000760:	791a      	ldrb	r2, [r3, #4]
 8000762:	4b23      	ldr	r3, [pc, #140]	@ (80007f0 <main+0x2ac>)
 8000764:	711a      	strb	r2, [r3, #4]
		 txbuffer[5]=rxbuffer[5];
 8000766:	4b1f      	ldr	r3, [pc, #124]	@ (80007e4 <main+0x2a0>)
 8000768:	795a      	ldrb	r2, [r3, #5]
 800076a:	4b21      	ldr	r3, [pc, #132]	@ (80007f0 <main+0x2ac>)
 800076c:	715a      	strb	r2, [r3, #5]

		 uint16_t CRC2 = Modbus_CRC16(txbuffer, 6);
 800076e:	2106      	movs	r1, #6
 8000770:	481f      	ldr	r0, [pc, #124]	@ (80007f0 <main+0x2ac>)
 8000772:	f7ff fea9 	bl	80004c8 <Modbus_CRC16>
 8000776:	4603      	mov	r3, r0
 8000778:	85bb      	strh	r3, [r7, #44]	@ 0x2c
		 txbuffer[6] = CRC2 & 0xFF;
 800077a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800077c:	b2da      	uxtb	r2, r3
 800077e:	4b1c      	ldr	r3, [pc, #112]	@ (80007f0 <main+0x2ac>)
 8000780:	719a      	strb	r2, [r3, #6]
		 txbuffer[7] = (CRC2>>8) & 0xFF;
 8000782:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000784:	0a1b      	lsrs	r3, r3, #8
 8000786:	b29b      	uxth	r3, r3
 8000788:	b2da      	uxtb	r2, r3
 800078a:	4b19      	ldr	r3, [pc, #100]	@ (80007f0 <main+0x2ac>)
 800078c:	71da      	strb	r2, [r3, #7]

		 HAL_UART_Transmit(&huart2, txbuffer, 8, 100);
 800078e:	2364      	movs	r3, #100	@ 0x64
 8000790:	2208      	movs	r2, #8
 8000792:	4917      	ldr	r1, [pc, #92]	@ (80007f0 <main+0x2ac>)
 8000794:	4814      	ldr	r0, [pc, #80]	@ (80007e8 <main+0x2a4>)
 8000796:	f001 ff33 	bl	8002600 <HAL_UART_Transmit>
	 else if(rxbuffer[0]==1 && rxbuffer[1]==0x10){
 800079a:	e0fa      	b.n	8000992 <main+0x44e>
	 }
	  else if ((rxbuffer[0]==SLAVEID) && (rxbuffer[1]==0x06)){  	// EĞER SLAVE ADRESİ VE FONKSİYON 0x06 İSE
 800079c:	4b11      	ldr	r3, [pc, #68]	@ (80007e4 <main+0x2a0>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	2b01      	cmp	r3, #1
 80007a2:	d150      	bne.n	8000846 <main+0x302>
 80007a4:	4b0f      	ldr	r3, [pc, #60]	@ (80007e4 <main+0x2a0>)
 80007a6:	785b      	ldrb	r3, [r3, #1]
 80007a8:	2b06      	cmp	r3, #6
 80007aa:	d14c      	bne.n	8000846 <main+0x302>
	 	  	  		{

	 	  	  		uint16_t address = (rxbuffer[2]<<8) | rxbuffer[3];
 80007ac:	4b0d      	ldr	r3, [pc, #52]	@ (80007e4 <main+0x2a0>)
 80007ae:	789b      	ldrb	r3, [r3, #2]
 80007b0:	021b      	lsls	r3, r3, #8
 80007b2:	b21a      	sxth	r2, r3
 80007b4:	4b0b      	ldr	r3, [pc, #44]	@ (80007e4 <main+0x2a0>)
 80007b6:	78db      	ldrb	r3, [r3, #3]
 80007b8:	b21b      	sxth	r3, r3
 80007ba:	4313      	orrs	r3, r2
 80007bc:	b21b      	sxth	r3, r3
 80007be:	857b      	strh	r3, [r7, #42]	@ 0x2a
	 	  	  		uint16_t value = ((rxbuffer[4]<<8) | rxbuffer[5]);
 80007c0:	4b08      	ldr	r3, [pc, #32]	@ (80007e4 <main+0x2a0>)
 80007c2:	791b      	ldrb	r3, [r3, #4]
 80007c4:	021b      	lsls	r3, r3, #8
 80007c6:	b21a      	sxth	r2, r3
 80007c8:	4b06      	ldr	r3, [pc, #24]	@ (80007e4 <main+0x2a0>)
 80007ca:	795b      	ldrb	r3, [r3, #5]
 80007cc:	b21b      	sxth	r3, r3
 80007ce:	4313      	orrs	r3, r2
 80007d0:	b21b      	sxth	r3, r3
 80007d2:	853b      	strh	r3, [r7, #40]	@ 0x28


	 	  	  		registers[address] = value;										// Register'a yazma
 80007d4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80007d6:	4905      	ldr	r1, [pc, #20]	@ (80007ec <main+0x2a8>)
 80007d8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80007da:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]


	 	  	  		 uint8_t response[8];
	 	  	  		for (int i = 0; i < 6; i++) {								// Cevabı hazırlama
 80007de:	2300      	movs	r3, #0
 80007e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80007e2:	e014      	b.n	800080e <main+0x2ca>
 80007e4:	200000cc 	.word	0x200000cc
 80007e8:	20000084 	.word	0x20000084
 80007ec:	20000000 	.word	0x20000000
 80007f0:	20000130 	.word	0x20000130
	 	  	  		response[i] = rxbuffer[i];
 80007f4:	4a67      	ldr	r2, [pc, #412]	@ (8000994 <main+0x450>)
 80007f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80007f8:	4413      	add	r3, r2
 80007fa:	7819      	ldrb	r1, [r3, #0]
 80007fc:	f107 020c 	add.w	r2, r7, #12
 8000800:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000802:	4413      	add	r3, r2
 8000804:	460a      	mov	r2, r1
 8000806:	701a      	strb	r2, [r3, #0]
	 	  	  		for (int i = 0; i < 6; i++) {								// Cevabı hazırlama
 8000808:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800080a:	3301      	adds	r3, #1
 800080c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800080e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000810:	2b05      	cmp	r3, #5
 8000812:	ddef      	ble.n	80007f4 <main+0x2b0>
	 	  	  		}


	 	  	  		uint16_t crc = Modbus_CRC16(response, 6);					// CRC hesaplama
 8000814:	f107 030c 	add.w	r3, r7, #12
 8000818:	2106      	movs	r1, #6
 800081a:	4618      	mov	r0, r3
 800081c:	f7ff fe54 	bl	80004c8 <Modbus_CRC16>
 8000820:	4603      	mov	r3, r0
 8000822:	84fb      	strh	r3, [r7, #38]	@ 0x26
	 	  	  		response[6] = crc & 0xFF;
 8000824:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000826:	b2db      	uxtb	r3, r3
 8000828:	74bb      	strb	r3, [r7, #18]
	 	  	  		response[7] = (crc >> 8) & 0xFF;
 800082a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800082c:	0a1b      	lsrs	r3, r3, #8
 800082e:	b29b      	uxth	r3, r3
 8000830:	b2db      	uxtb	r3, r3
 8000832:	74fb      	strb	r3, [r7, #19]

	 	  	  		 // Cevabı gönder
	 	  	  		HAL_UART_Transmit(&huart2, response, 8, 1000);
 8000834:	f107 010c 	add.w	r1, r7, #12
 8000838:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800083c:	2208      	movs	r2, #8
 800083e:	4856      	ldr	r0, [pc, #344]	@ (8000998 <main+0x454>)
 8000840:	f001 fede 	bl	8002600 <HAL_UART_Transmit>
	 	  	  		{
 8000844:	e0a5      	b.n	8000992 <main+0x44e>
	 	  	  			  }

	 	  	  	  }
	  else if (rxbuffer[0] == 1 && rxbuffer[1] == 0x04) {
 8000846:	4b53      	ldr	r3, [pc, #332]	@ (8000994 <main+0x450>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	2b01      	cmp	r3, #1
 800084c:	f47f ae88 	bne.w	8000560 <main+0x1c>
 8000850:	4b50      	ldr	r3, [pc, #320]	@ (8000994 <main+0x450>)
 8000852:	785b      	ldrb	r3, [r3, #1]
 8000854:	2b04      	cmp	r3, #4
 8000856:	f47f ae83 	bne.w	8000560 <main+0x1c>
 800085a:	466b      	mov	r3, sp
 800085c:	461e      	mov	r6, r3
	      uint16_t first_Reg = (rxbuffer[2] << 8) | rxbuffer[3];    // İlk register adresi
 800085e:	4b4d      	ldr	r3, [pc, #308]	@ (8000994 <main+0x450>)
 8000860:	789b      	ldrb	r3, [r3, #2]
 8000862:	021b      	lsls	r3, r3, #8
 8000864:	b21a      	sxth	r2, r3
 8000866:	4b4b      	ldr	r3, [pc, #300]	@ (8000994 <main+0x450>)
 8000868:	78db      	ldrb	r3, [r3, #3]
 800086a:	b21b      	sxth	r3, r3
 800086c:	4313      	orrs	r3, r2
 800086e:	b21b      	sxth	r3, r3
 8000870:	84bb      	strh	r3, [r7, #36]	@ 0x24
	      uint16_t num_of_Reg = (rxbuffer[4] << 8) | rxbuffer[5];   // Okunacak register sayısı
 8000872:	4b48      	ldr	r3, [pc, #288]	@ (8000994 <main+0x450>)
 8000874:	791b      	ldrb	r3, [r3, #4]
 8000876:	021b      	lsls	r3, r3, #8
 8000878:	b21a      	sxth	r2, r3
 800087a:	4b46      	ldr	r3, [pc, #280]	@ (8000994 <main+0x450>)
 800087c:	795b      	ldrb	r3, [r3, #5]
 800087e:	b21b      	sxth	r3, r3
 8000880:	4313      	orrs	r3, r2
 8000882:	b21b      	sxth	r3, r3
 8000884:	847b      	strh	r3, [r7, #34]	@ 0x22

	      uint8_t response[5 + 2 * num_of_Reg + 2];  // 5 sabit byte + 2 * register sayısı + 2 CRC
 8000886:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000888:	005b      	lsls	r3, r3, #1
 800088a:	1dd9      	adds	r1, r3, #7
 800088c:	1e4b      	subs	r3, r1, #1
 800088e:	61fb      	str	r3, [r7, #28]
 8000890:	460a      	mov	r2, r1
 8000892:	2300      	movs	r3, #0
 8000894:	4692      	mov	sl, r2
 8000896:	469b      	mov	fp, r3
 8000898:	f04f 0200 	mov.w	r2, #0
 800089c:	f04f 0300 	mov.w	r3, #0
 80008a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80008a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80008a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80008ac:	460a      	mov	r2, r1
 80008ae:	2300      	movs	r3, #0
 80008b0:	603a      	str	r2, [r7, #0]
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	f04f 0200 	mov.w	r2, #0
 80008b8:	f04f 0300 	mov.w	r3, #0
 80008bc:	6878      	ldr	r0, [r7, #4]
 80008be:	00c3      	lsls	r3, r0, #3
 80008c0:	6838      	ldr	r0, [r7, #0]
 80008c2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80008c6:	6838      	ldr	r0, [r7, #0]
 80008c8:	00c2      	lsls	r2, r0, #3
 80008ca:	460b      	mov	r3, r1
 80008cc:	3307      	adds	r3, #7
 80008ce:	08db      	lsrs	r3, r3, #3
 80008d0:	00db      	lsls	r3, r3, #3
 80008d2:	ebad 0d03 	sub.w	sp, sp, r3
 80008d6:	466b      	mov	r3, sp
 80008d8:	3300      	adds	r3, #0
 80008da:	61bb      	str	r3, [r7, #24]

	      response[0] = SLAVEID;      // Slave ID
 80008dc:	69bb      	ldr	r3, [r7, #24]
 80008de:	2201      	movs	r2, #1
 80008e0:	701a      	strb	r2, [r3, #0]
	      response[1] = 0x04;         // Function code (Read Input Registers)
 80008e2:	69bb      	ldr	r3, [r7, #24]
 80008e4:	2204      	movs	r2, #4
 80008e6:	705a      	strb	r2, [r3, #1]
	      response[2] = num_of_Reg * 2; // Byte sayısı (her register 2 byte)
 80008e8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	005b      	lsls	r3, r3, #1
 80008ee:	b2da      	uxtb	r2, r3
 80008f0:	69bb      	ldr	r3, [r7, #24]
 80008f2:	709a      	strb	r2, [r3, #2]

	      // Register değerlerini cevaba ekleyelim
	      for (uint16_t i = 0; i < num_of_Reg; i++) {
 80008f4:	2300      	movs	r3, #0
 80008f6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80008fa:	e01e      	b.n	800093a <main+0x3f6>
	          uint16_t value = registers[first_Reg + i];  // İlgili register değeri
 80008fc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80008fe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8000902:	4413      	add	r3, r2
 8000904:	4a25      	ldr	r2, [pc, #148]	@ (800099c <main+0x458>)
 8000906:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800090a:	82bb      	strh	r3, [r7, #20]
	          response[3 + i * 2] = (value >> 8) & 0xFF;  // Üst byte
 800090c:	8abb      	ldrh	r3, [r7, #20]
 800090e:	0a1b      	lsrs	r3, r3, #8
 8000910:	b29a      	uxth	r2, r3
 8000912:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8000916:	005b      	lsls	r3, r3, #1
 8000918:	3303      	adds	r3, #3
 800091a:	b2d1      	uxtb	r1, r2
 800091c:	69ba      	ldr	r2, [r7, #24]
 800091e:	54d1      	strb	r1, [r2, r3]
	          response[4 + i * 2] = value & 0xFF;         // Alt byte
 8000920:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8000924:	3302      	adds	r3, #2
 8000926:	005b      	lsls	r3, r3, #1
 8000928:	8aba      	ldrh	r2, [r7, #20]
 800092a:	b2d1      	uxtb	r1, r2
 800092c:	69ba      	ldr	r2, [r7, #24]
 800092e:	54d1      	strb	r1, [r2, r3]
	      for (uint16_t i = 0; i < num_of_Reg; i++) {
 8000930:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8000934:	3301      	adds	r3, #1
 8000936:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800093a:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 800093e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000940:	429a      	cmp	r2, r3
 8000942:	d3db      	bcc.n	80008fc <main+0x3b8>
	      }

	      // CRC hesaplama
	      uint16_t crc = Modbus_CRC16(response, 3 + 2 * num_of_Reg);
 8000944:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000946:	005b      	lsls	r3, r3, #1
 8000948:	b29b      	uxth	r3, r3
 800094a:	3303      	adds	r3, #3
 800094c:	b29b      	uxth	r3, r3
 800094e:	4619      	mov	r1, r3
 8000950:	69b8      	ldr	r0, [r7, #24]
 8000952:	f7ff fdb9 	bl	80004c8 <Modbus_CRC16>
 8000956:	4603      	mov	r3, r0
 8000958:	82fb      	strh	r3, [r7, #22]
	      response[3 + 2 * num_of_Reg] = crc & 0xFF;        // CRC düşük byte
 800095a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800095c:	005b      	lsls	r3, r3, #1
 800095e:	3303      	adds	r3, #3
 8000960:	8afa      	ldrh	r2, [r7, #22]
 8000962:	b2d1      	uxtb	r1, r2
 8000964:	69ba      	ldr	r2, [r7, #24]
 8000966:	54d1      	strb	r1, [r2, r3]
	      response[4 + 2 * num_of_Reg] = (crc >> 8) & 0xFF; // CRC yüksek byte
 8000968:	8afb      	ldrh	r3, [r7, #22]
 800096a:	0a1b      	lsrs	r3, r3, #8
 800096c:	b29a      	uxth	r2, r3
 800096e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000970:	3302      	adds	r3, #2
 8000972:	005b      	lsls	r3, r3, #1
 8000974:	b2d1      	uxtb	r1, r2
 8000976:	69ba      	ldr	r2, [r7, #24]
 8000978:	54d1      	strb	r1, [r2, r3]

	      // Cevap mesajını gönderme
	      HAL_UART_Transmit(&huart2, response, 5 + 2 * num_of_Reg + 2, 500);
 800097a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	b29b      	uxth	r3, r3
 8000980:	3307      	adds	r3, #7
 8000982:	b29a      	uxth	r2, r3
 8000984:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000988:	69b9      	ldr	r1, [r7, #24]
 800098a:	4803      	ldr	r0, [pc, #12]	@ (8000998 <main+0x454>)
 800098c:	f001 fe38 	bl	8002600 <HAL_UART_Transmit>
 8000990:	46b5      	mov	sp, r6
	 HAL_UART_Receive(&huart2, rxbuffer, sizeof(rxbuffer), 100);
 8000992:	e5e5      	b.n	8000560 <main+0x1c>
 8000994:	200000cc 	.word	0x200000cc
 8000998:	20000084 	.word	0x20000084
 800099c:	20000000 	.word	0x20000000

080009a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b094      	sub	sp, #80	@ 0x50
 80009a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009a6:	f107 0320 	add.w	r3, r7, #32
 80009aa:	2230      	movs	r2, #48	@ 0x30
 80009ac:	2100      	movs	r1, #0
 80009ae:	4618      	mov	r0, r3
 80009b0:	f002 fa78 	bl	8002ea4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b4:	f107 030c 	add.w	r3, r7, #12
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
 80009c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c4:	2300      	movs	r3, #0
 80009c6:	60bb      	str	r3, [r7, #8]
 80009c8:	4b28      	ldr	r3, [pc, #160]	@ (8000a6c <SystemClock_Config+0xcc>)
 80009ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009cc:	4a27      	ldr	r2, [pc, #156]	@ (8000a6c <SystemClock_Config+0xcc>)
 80009ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80009d4:	4b25      	ldr	r3, [pc, #148]	@ (8000a6c <SystemClock_Config+0xcc>)
 80009d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009dc:	60bb      	str	r3, [r7, #8]
 80009de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009e0:	2300      	movs	r3, #0
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	4b22      	ldr	r3, [pc, #136]	@ (8000a70 <SystemClock_Config+0xd0>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a21      	ldr	r2, [pc, #132]	@ (8000a70 <SystemClock_Config+0xd0>)
 80009ea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80009ee:	6013      	str	r3, [r2, #0]
 80009f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000a70 <SystemClock_Config+0xd0>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009f8:	607b      	str	r3, [r7, #4]
 80009fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009fc:	2302      	movs	r3, #2
 80009fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a00:	2301      	movs	r3, #1
 8000a02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a04:	2310      	movs	r3, #16
 8000a06:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a10:	2310      	movs	r3, #16
 8000a12:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a14:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000a18:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a1a:	2304      	movs	r3, #4
 8000a1c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a1e:	2304      	movs	r3, #4
 8000a20:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a22:	f107 0320 	add.w	r3, r7, #32
 8000a26:	4618      	mov	r0, r3
 8000a28:	f000 fd22 	bl	8001470 <HAL_RCC_OscConfig>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000a32:	f000 f8e7 	bl	8000c04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a36:	230f      	movs	r3, #15
 8000a38:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a46:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a4c:	f107 030c 	add.w	r3, r7, #12
 8000a50:	2102      	movs	r1, #2
 8000a52:	4618      	mov	r0, r3
 8000a54:	f000 ff84 	bl	8001960 <HAL_RCC_ClockConfig>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a5e:	f000 f8d1 	bl	8000c04 <Error_Handler>
  }
}
 8000a62:	bf00      	nop
 8000a64:	3750      	adds	r7, #80	@ 0x50
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	40007000 	.word	0x40007000

08000a74 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b086      	sub	sp, #24
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a7a:	f107 0308 	add.w	r3, r7, #8
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	605a      	str	r2, [r3, #4]
 8000a84:	609a      	str	r2, [r3, #8]
 8000a86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a88:	463b      	mov	r3, r7
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a90:	4b1d      	ldr	r3, [pc, #116]	@ (8000b08 <MX_TIM3_Init+0x94>)
 8000a92:	4a1e      	ldr	r2, [pc, #120]	@ (8000b0c <MX_TIM3_Init+0x98>)
 8000a94:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400;
 8000a96:	4b1c      	ldr	r3, [pc, #112]	@ (8000b08 <MX_TIM3_Init+0x94>)
 8000a98:	f242 02d0 	movw	r2, #8400	@ 0x20d0
 8000a9c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a9e:	4b1a      	ldr	r3, [pc, #104]	@ (8000b08 <MX_TIM3_Init+0x94>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8000aa4:	4b18      	ldr	r3, [pc, #96]	@ (8000b08 <MX_TIM3_Init+0x94>)
 8000aa6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000aaa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aac:	4b16      	ldr	r3, [pc, #88]	@ (8000b08 <MX_TIM3_Init+0x94>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ab2:	4b15      	ldr	r3, [pc, #84]	@ (8000b08 <MX_TIM3_Init+0x94>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ab8:	4813      	ldr	r0, [pc, #76]	@ (8000b08 <MX_TIM3_Init+0x94>)
 8000aba:	f001 f971 	bl	8001da0 <HAL_TIM_Base_Init>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000ac4:	f000 f89e 	bl	8000c04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ac8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000acc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ace:	f107 0308 	add.w	r3, r7, #8
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	480c      	ldr	r0, [pc, #48]	@ (8000b08 <MX_TIM3_Init+0x94>)
 8000ad6:	f001 faa2 	bl	800201e <HAL_TIM_ConfigClockSource>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000ae0:	f000 f890 	bl	8000c04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000aec:	463b      	mov	r3, r7
 8000aee:	4619      	mov	r1, r3
 8000af0:	4805      	ldr	r0, [pc, #20]	@ (8000b08 <MX_TIM3_Init+0x94>)
 8000af2:	f001 fcb3 	bl	800245c <HAL_TIMEx_MasterConfigSynchronization>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000afc:	f000 f882 	bl	8000c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b00:	bf00      	nop
 8000b02:	3718      	adds	r7, #24
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	2000003c 	.word	0x2000003c
 8000b0c:	40000400 	.word	0x40000400

08000b10 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b14:	4b11      	ldr	r3, [pc, #68]	@ (8000b5c <MX_USART2_UART_Init+0x4c>)
 8000b16:	4a12      	ldr	r2, [pc, #72]	@ (8000b60 <MX_USART2_UART_Init+0x50>)
 8000b18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b1a:	4b10      	ldr	r3, [pc, #64]	@ (8000b5c <MX_USART2_UART_Init+0x4c>)
 8000b1c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b22:	4b0e      	ldr	r3, [pc, #56]	@ (8000b5c <MX_USART2_UART_Init+0x4c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b28:	4b0c      	ldr	r3, [pc, #48]	@ (8000b5c <MX_USART2_UART_Init+0x4c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b5c <MX_USART2_UART_Init+0x4c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b34:	4b09      	ldr	r3, [pc, #36]	@ (8000b5c <MX_USART2_UART_Init+0x4c>)
 8000b36:	220c      	movs	r2, #12
 8000b38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b3a:	4b08      	ldr	r3, [pc, #32]	@ (8000b5c <MX_USART2_UART_Init+0x4c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b40:	4b06      	ldr	r3, [pc, #24]	@ (8000b5c <MX_USART2_UART_Init+0x4c>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b46:	4805      	ldr	r0, [pc, #20]	@ (8000b5c <MX_USART2_UART_Init+0x4c>)
 8000b48:	f001 fd0a 	bl	8002560 <HAL_UART_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b52:	f000 f857 	bl	8000c04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000084 	.word	0x20000084
 8000b60:	40004400 	.word	0x40004400

08000b64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b088      	sub	sp, #32
 8000b68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6a:	f107 030c 	add.w	r3, r7, #12
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]
 8000b74:	609a      	str	r2, [r3, #8]
 8000b76:	60da      	str	r2, [r3, #12]
 8000b78:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	4b1f      	ldr	r3, [pc, #124]	@ (8000bfc <MX_GPIO_Init+0x98>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b82:	4a1e      	ldr	r2, [pc, #120]	@ (8000bfc <MX_GPIO_Init+0x98>)
 8000b84:	f043 0304 	orr.w	r3, r3, #4
 8000b88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bfc <MX_GPIO_Init+0x98>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8e:	f003 0304 	and.w	r3, r3, #4
 8000b92:	60bb      	str	r3, [r7, #8]
 8000b94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	607b      	str	r3, [r7, #4]
 8000b9a:	4b18      	ldr	r3, [pc, #96]	@ (8000bfc <MX_GPIO_Init+0x98>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9e:	4a17      	ldr	r2, [pc, #92]	@ (8000bfc <MX_GPIO_Init+0x98>)
 8000ba0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ba4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba6:	4b15      	ldr	r3, [pc, #84]	@ (8000bfc <MX_GPIO_Init+0x98>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000baa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	603b      	str	r3, [r7, #0]
 8000bb6:	4b11      	ldr	r3, [pc, #68]	@ (8000bfc <MX_GPIO_Init+0x98>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bba:	4a10      	ldr	r2, [pc, #64]	@ (8000bfc <MX_GPIO_Init+0x98>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000bfc <MX_GPIO_Init+0x98>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	603b      	str	r3, [r7, #0]
 8000bcc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2120      	movs	r1, #32
 8000bd2:	480b      	ldr	r0, [pc, #44]	@ (8000c00 <MX_GPIO_Init+0x9c>)
 8000bd4:	f000 fc32 	bl	800143c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000bd8:	2320      	movs	r3, #32
 8000bda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be4:	2300      	movs	r3, #0
 8000be6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be8:	f107 030c 	add.w	r3, r7, #12
 8000bec:	4619      	mov	r1, r3
 8000bee:	4804      	ldr	r0, [pc, #16]	@ (8000c00 <MX_GPIO_Init+0x9c>)
 8000bf0:	f000 faa0 	bl	8001134 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bf4:	bf00      	nop
 8000bf6:	3720      	adds	r7, #32
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	40020000 	.word	0x40020000

08000c04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c08:	b672      	cpsid	i
}
 8000c0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c0c:	bf00      	nop
 8000c0e:	e7fd      	b.n	8000c0c <Error_Handler+0x8>

08000c10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	607b      	str	r3, [r7, #4]
 8000c1a:	4b10      	ldr	r3, [pc, #64]	@ (8000c5c <HAL_MspInit+0x4c>)
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c1e:	4a0f      	ldr	r2, [pc, #60]	@ (8000c5c <HAL_MspInit+0x4c>)
 8000c20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c24:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c26:	4b0d      	ldr	r3, [pc, #52]	@ (8000c5c <HAL_MspInit+0x4c>)
 8000c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c2e:	607b      	str	r3, [r7, #4]
 8000c30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	603b      	str	r3, [r7, #0]
 8000c36:	4b09      	ldr	r3, [pc, #36]	@ (8000c5c <HAL_MspInit+0x4c>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c3a:	4a08      	ldr	r2, [pc, #32]	@ (8000c5c <HAL_MspInit+0x4c>)
 8000c3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c40:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c42:	4b06      	ldr	r3, [pc, #24]	@ (8000c5c <HAL_MspInit+0x4c>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c4a:	603b      	str	r3, [r7, #0]
 8000c4c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c4e:	2007      	movs	r0, #7
 8000c50:	f000 fa2e 	bl	80010b0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c54:	bf00      	nop
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40023800 	.word	0x40023800

08000c60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a0e      	ldr	r2, [pc, #56]	@ (8000ca8 <HAL_TIM_Base_MspInit+0x48>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d115      	bne.n	8000c9e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	4b0d      	ldr	r3, [pc, #52]	@ (8000cac <HAL_TIM_Base_MspInit+0x4c>)
 8000c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c7a:	4a0c      	ldr	r2, [pc, #48]	@ (8000cac <HAL_TIM_Base_MspInit+0x4c>)
 8000c7c:	f043 0302 	orr.w	r3, r3, #2
 8000c80:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c82:	4b0a      	ldr	r3, [pc, #40]	@ (8000cac <HAL_TIM_Base_MspInit+0x4c>)
 8000c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c86:	f003 0302 	and.w	r3, r3, #2
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2100      	movs	r1, #0
 8000c92:	201d      	movs	r0, #29
 8000c94:	f000 fa17 	bl	80010c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c98:	201d      	movs	r0, #29
 8000c9a:	f000 fa30 	bl	80010fe <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000c9e:	bf00      	nop
 8000ca0:	3710      	adds	r7, #16
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40000400 	.word	0x40000400
 8000cac:	40023800 	.word	0x40023800

08000cb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08a      	sub	sp, #40	@ 0x28
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a19      	ldr	r2, [pc, #100]	@ (8000d34 <HAL_UART_MspInit+0x84>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d12b      	bne.n	8000d2a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	613b      	str	r3, [r7, #16]
 8000cd6:	4b18      	ldr	r3, [pc, #96]	@ (8000d38 <HAL_UART_MspInit+0x88>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cda:	4a17      	ldr	r2, [pc, #92]	@ (8000d38 <HAL_UART_MspInit+0x88>)
 8000cdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ce0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ce2:	4b15      	ldr	r3, [pc, #84]	@ (8000d38 <HAL_UART_MspInit+0x88>)
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cea:	613b      	str	r3, [r7, #16]
 8000cec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	4b11      	ldr	r3, [pc, #68]	@ (8000d38 <HAL_UART_MspInit+0x88>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf6:	4a10      	ldr	r2, [pc, #64]	@ (8000d38 <HAL_UART_MspInit+0x88>)
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cfe:	4b0e      	ldr	r3, [pc, #56]	@ (8000d38 <HAL_UART_MspInit+0x88>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d0a:	230c      	movs	r3, #12
 8000d0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d16:	2303      	movs	r3, #3
 8000d18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d1a:	2307      	movs	r3, #7
 8000d1c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1e:	f107 0314 	add.w	r3, r7, #20
 8000d22:	4619      	mov	r1, r3
 8000d24:	4805      	ldr	r0, [pc, #20]	@ (8000d3c <HAL_UART_MspInit+0x8c>)
 8000d26:	f000 fa05 	bl	8001134 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000d2a:	bf00      	nop
 8000d2c:	3728      	adds	r7, #40	@ 0x28
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40004400 	.word	0x40004400
 8000d38:	40023800 	.word	0x40023800
 8000d3c:	40020000 	.word	0x40020000

08000d40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d44:	bf00      	nop
 8000d46:	e7fd      	b.n	8000d44 <NMI_Handler+0x4>

08000d48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d4c:	bf00      	nop
 8000d4e:	e7fd      	b.n	8000d4c <HardFault_Handler+0x4>

08000d50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d54:	bf00      	nop
 8000d56:	e7fd      	b.n	8000d54 <MemManage_Handler+0x4>

08000d58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d5c:	bf00      	nop
 8000d5e:	e7fd      	b.n	8000d5c <BusFault_Handler+0x4>

08000d60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d64:	bf00      	nop
 8000d66:	e7fd      	b.n	8000d64 <UsageFault_Handler+0x4>

08000d68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr

08000d76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d76:	b480      	push	{r7}
 8000d78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr

08000d92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d96:	f000 f89b 	bl	8000ed0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
	...

08000da0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000da4:	4802      	ldr	r0, [pc, #8]	@ (8000db0 <TIM3_IRQHandler+0x10>)
 8000da6:	f001 f84a 	bl	8001e3e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	2000003c 	.word	0x2000003c

08000db4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000db8:	4b06      	ldr	r3, [pc, #24]	@ (8000dd4 <SystemInit+0x20>)
 8000dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dbe:	4a05      	ldr	r2, [pc, #20]	@ (8000dd4 <SystemInit+0x20>)
 8000dc0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dc4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000dd8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e10 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ddc:	f7ff ffea 	bl	8000db4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000de0:	480c      	ldr	r0, [pc, #48]	@ (8000e14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000de2:	490d      	ldr	r1, [pc, #52]	@ (8000e18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000de4:	4a0d      	ldr	r2, [pc, #52]	@ (8000e1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000de6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000de8:	e002      	b.n	8000df0 <LoopCopyDataInit>

08000dea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dee:	3304      	adds	r3, #4

08000df0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000df2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df4:	d3f9      	bcc.n	8000dea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000df6:	4a0a      	ldr	r2, [pc, #40]	@ (8000e20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000df8:	4c0a      	ldr	r4, [pc, #40]	@ (8000e24 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dfc:	e001      	b.n	8000e02 <LoopFillZerobss>

08000dfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e00:	3204      	adds	r2, #4

08000e02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e04:	d3fb      	bcc.n	8000dfe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e06:	f002 f855 	bl	8002eb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e0a:	f7ff fb9b 	bl	8000544 <main>
  bx  lr    
 8000e0e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e18:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000e1c:	08002f3c 	.word	0x08002f3c
  ldr r2, =_sbss
 8000e20:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000e24:	20000198 	.word	0x20000198

08000e28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e28:	e7fe      	b.n	8000e28 <ADC_IRQHandler>
	...

08000e2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e30:	4b0e      	ldr	r3, [pc, #56]	@ (8000e6c <HAL_Init+0x40>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a0d      	ldr	r2, [pc, #52]	@ (8000e6c <HAL_Init+0x40>)
 8000e36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e6c <HAL_Init+0x40>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a0a      	ldr	r2, [pc, #40]	@ (8000e6c <HAL_Init+0x40>)
 8000e42:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e48:	4b08      	ldr	r3, [pc, #32]	@ (8000e6c <HAL_Init+0x40>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a07      	ldr	r2, [pc, #28]	@ (8000e6c <HAL_Init+0x40>)
 8000e4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e54:	2003      	movs	r0, #3
 8000e56:	f000 f92b 	bl	80010b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e5a:	2000      	movs	r0, #0
 8000e5c:	f000 f808 	bl	8000e70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e60:	f7ff fed6 	bl	8000c10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e64:	2300      	movs	r3, #0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40023c00 	.word	0x40023c00

08000e70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e78:	4b12      	ldr	r3, [pc, #72]	@ (8000ec4 <HAL_InitTick+0x54>)
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	4b12      	ldr	r3, [pc, #72]	@ (8000ec8 <HAL_InitTick+0x58>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	4619      	mov	r1, r3
 8000e82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f000 f943 	bl	800111a <HAL_SYSTICK_Config>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e00e      	b.n	8000ebc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2b0f      	cmp	r3, #15
 8000ea2:	d80a      	bhi.n	8000eba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	6879      	ldr	r1, [r7, #4]
 8000ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8000eac:	f000 f90b 	bl	80010c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eb0:	4a06      	ldr	r2, [pc, #24]	@ (8000ecc <HAL_InitTick+0x5c>)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	e000      	b.n	8000ebc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	20000014 	.word	0x20000014
 8000ec8:	2000001c 	.word	0x2000001c
 8000ecc:	20000018 	.word	0x20000018

08000ed0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ed4:	4b06      	ldr	r3, [pc, #24]	@ (8000ef0 <HAL_IncTick+0x20>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4b06      	ldr	r3, [pc, #24]	@ (8000ef4 <HAL_IncTick+0x24>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4413      	add	r3, r2
 8000ee0:	4a04      	ldr	r2, [pc, #16]	@ (8000ef4 <HAL_IncTick+0x24>)
 8000ee2:	6013      	str	r3, [r2, #0]
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	2000001c 	.word	0x2000001c
 8000ef4:	20000194 	.word	0x20000194

08000ef8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  return uwTick;
 8000efc:	4b03      	ldr	r3, [pc, #12]	@ (8000f0c <HAL_GetTick+0x14>)
 8000efe:	681b      	ldr	r3, [r3, #0]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	20000194 	.word	0x20000194

08000f10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f003 0307 	and.w	r3, r3, #7
 8000f1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f20:	4b0c      	ldr	r3, [pc, #48]	@ (8000f54 <__NVIC_SetPriorityGrouping+0x44>)
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f26:	68ba      	ldr	r2, [r7, #8]
 8000f28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f42:	4a04      	ldr	r2, [pc, #16]	@ (8000f54 <__NVIC_SetPriorityGrouping+0x44>)
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	60d3      	str	r3, [r2, #12]
}
 8000f48:	bf00      	nop
 8000f4a:	3714      	adds	r7, #20
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f5c:	4b04      	ldr	r3, [pc, #16]	@ (8000f70 <__NVIC_GetPriorityGrouping+0x18>)
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	0a1b      	lsrs	r3, r3, #8
 8000f62:	f003 0307 	and.w	r3, r3, #7
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	db0b      	blt.n	8000f9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	f003 021f 	and.w	r2, r3, #31
 8000f8c:	4907      	ldr	r1, [pc, #28]	@ (8000fac <__NVIC_EnableIRQ+0x38>)
 8000f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f92:	095b      	lsrs	r3, r3, #5
 8000f94:	2001      	movs	r0, #1
 8000f96:	fa00 f202 	lsl.w	r2, r0, r2
 8000f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f9e:	bf00      	nop
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	e000e100 	.word	0xe000e100

08000fb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	6039      	str	r1, [r7, #0]
 8000fba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	db0a      	blt.n	8000fda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	b2da      	uxtb	r2, r3
 8000fc8:	490c      	ldr	r1, [pc, #48]	@ (8000ffc <__NVIC_SetPriority+0x4c>)
 8000fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fce:	0112      	lsls	r2, r2, #4
 8000fd0:	b2d2      	uxtb	r2, r2
 8000fd2:	440b      	add	r3, r1
 8000fd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fd8:	e00a      	b.n	8000ff0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	b2da      	uxtb	r2, r3
 8000fde:	4908      	ldr	r1, [pc, #32]	@ (8001000 <__NVIC_SetPriority+0x50>)
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	f003 030f 	and.w	r3, r3, #15
 8000fe6:	3b04      	subs	r3, #4
 8000fe8:	0112      	lsls	r2, r2, #4
 8000fea:	b2d2      	uxtb	r2, r2
 8000fec:	440b      	add	r3, r1
 8000fee:	761a      	strb	r2, [r3, #24]
}
 8000ff0:	bf00      	nop
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	e000e100 	.word	0xe000e100
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001004:	b480      	push	{r7}
 8001006:	b089      	sub	sp, #36	@ 0x24
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	f003 0307 	and.w	r3, r3, #7
 8001016:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	f1c3 0307 	rsb	r3, r3, #7
 800101e:	2b04      	cmp	r3, #4
 8001020:	bf28      	it	cs
 8001022:	2304      	movcs	r3, #4
 8001024:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	3304      	adds	r3, #4
 800102a:	2b06      	cmp	r3, #6
 800102c:	d902      	bls.n	8001034 <NVIC_EncodePriority+0x30>
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	3b03      	subs	r3, #3
 8001032:	e000      	b.n	8001036 <NVIC_EncodePriority+0x32>
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001038:	f04f 32ff 	mov.w	r2, #4294967295
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	43da      	mvns	r2, r3
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	401a      	ands	r2, r3
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800104c:	f04f 31ff 	mov.w	r1, #4294967295
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	fa01 f303 	lsl.w	r3, r1, r3
 8001056:	43d9      	mvns	r1, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800105c:	4313      	orrs	r3, r2
         );
}
 800105e:	4618      	mov	r0, r3
 8001060:	3724      	adds	r7, #36	@ 0x24
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
	...

0800106c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	3b01      	subs	r3, #1
 8001078:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800107c:	d301      	bcc.n	8001082 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800107e:	2301      	movs	r3, #1
 8001080:	e00f      	b.n	80010a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001082:	4a0a      	ldr	r2, [pc, #40]	@ (80010ac <SysTick_Config+0x40>)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3b01      	subs	r3, #1
 8001088:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800108a:	210f      	movs	r1, #15
 800108c:	f04f 30ff 	mov.w	r0, #4294967295
 8001090:	f7ff ff8e 	bl	8000fb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001094:	4b05      	ldr	r3, [pc, #20]	@ (80010ac <SysTick_Config+0x40>)
 8001096:	2200      	movs	r2, #0
 8001098:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800109a:	4b04      	ldr	r3, [pc, #16]	@ (80010ac <SysTick_Config+0x40>)
 800109c:	2207      	movs	r2, #7
 800109e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010a0:	2300      	movs	r3, #0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	e000e010 	.word	0xe000e010

080010b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f7ff ff29 	bl	8000f10 <__NVIC_SetPriorityGrouping>
}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b086      	sub	sp, #24
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	4603      	mov	r3, r0
 80010ce:	60b9      	str	r1, [r7, #8]
 80010d0:	607a      	str	r2, [r7, #4]
 80010d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010d4:	2300      	movs	r3, #0
 80010d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010d8:	f7ff ff3e 	bl	8000f58 <__NVIC_GetPriorityGrouping>
 80010dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	68b9      	ldr	r1, [r7, #8]
 80010e2:	6978      	ldr	r0, [r7, #20]
 80010e4:	f7ff ff8e 	bl	8001004 <NVIC_EncodePriority>
 80010e8:	4602      	mov	r2, r0
 80010ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ee:	4611      	mov	r1, r2
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff ff5d 	bl	8000fb0 <__NVIC_SetPriority>
}
 80010f6:	bf00      	nop
 80010f8:	3718      	adds	r7, #24
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	b082      	sub	sp, #8
 8001102:	af00      	add	r7, sp, #0
 8001104:	4603      	mov	r3, r0
 8001106:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff ff31 	bl	8000f74 <__NVIC_EnableIRQ>
}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	b082      	sub	sp, #8
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f7ff ffa2 	bl	800106c <SysTick_Config>
 8001128:	4603      	mov	r3, r0
}
 800112a:	4618      	mov	r0, r3
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
	...

08001134 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001134:	b480      	push	{r7}
 8001136:	b089      	sub	sp, #36	@ 0x24
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800113e:	2300      	movs	r3, #0
 8001140:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001142:	2300      	movs	r3, #0
 8001144:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001146:	2300      	movs	r3, #0
 8001148:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800114a:	2300      	movs	r3, #0
 800114c:	61fb      	str	r3, [r7, #28]
 800114e:	e159      	b.n	8001404 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001150:	2201      	movs	r2, #1
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	697a      	ldr	r2, [r7, #20]
 8001160:	4013      	ands	r3, r2
 8001162:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	429a      	cmp	r2, r3
 800116a:	f040 8148 	bne.w	80013fe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f003 0303 	and.w	r3, r3, #3
 8001176:	2b01      	cmp	r3, #1
 8001178:	d005      	beq.n	8001186 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001182:	2b02      	cmp	r3, #2
 8001184:	d130      	bne.n	80011e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	2203      	movs	r2, #3
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	43db      	mvns	r3, r3
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	4013      	ands	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	68da      	ldr	r2, [r3, #12]
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011bc:	2201      	movs	r2, #1
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	43db      	mvns	r3, r3
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4013      	ands	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	091b      	lsrs	r3, r3, #4
 80011d2:	f003 0201 	and.w	r2, r3, #1
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	4313      	orrs	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f003 0303 	and.w	r3, r3, #3
 80011f0:	2b03      	cmp	r3, #3
 80011f2:	d017      	beq.n	8001224 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	2203      	movs	r2, #3
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	43db      	mvns	r3, r3
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4013      	ands	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	689a      	ldr	r2, [r3, #8]
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4313      	orrs	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f003 0303 	and.w	r3, r3, #3
 800122c:	2b02      	cmp	r3, #2
 800122e:	d123      	bne.n	8001278 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	08da      	lsrs	r2, r3, #3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3208      	adds	r2, #8
 8001238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800123c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	f003 0307 	and.w	r3, r3, #7
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	220f      	movs	r2, #15
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	43db      	mvns	r3, r3
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	4013      	ands	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	691a      	ldr	r2, [r3, #16]
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	f003 0307 	and.w	r3, r3, #7
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4313      	orrs	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	08da      	lsrs	r2, r3, #3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	3208      	adds	r2, #8
 8001272:	69b9      	ldr	r1, [r7, #24]
 8001274:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	2203      	movs	r2, #3
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	43db      	mvns	r3, r3
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	4013      	ands	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f003 0203 	and.w	r2, r3, #3
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	f000 80a2 	beq.w	80013fe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	4b57      	ldr	r3, [pc, #348]	@ (800141c <HAL_GPIO_Init+0x2e8>)
 80012c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012c2:	4a56      	ldr	r2, [pc, #344]	@ (800141c <HAL_GPIO_Init+0x2e8>)
 80012c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80012ca:	4b54      	ldr	r3, [pc, #336]	@ (800141c <HAL_GPIO_Init+0x2e8>)
 80012cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012d6:	4a52      	ldr	r2, [pc, #328]	@ (8001420 <HAL_GPIO_Init+0x2ec>)
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	089b      	lsrs	r3, r3, #2
 80012dc:	3302      	adds	r3, #2
 80012de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	f003 0303 	and.w	r3, r3, #3
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	220f      	movs	r2, #15
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	43db      	mvns	r3, r3
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	4013      	ands	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a49      	ldr	r2, [pc, #292]	@ (8001424 <HAL_GPIO_Init+0x2f0>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d019      	beq.n	8001336 <HAL_GPIO_Init+0x202>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a48      	ldr	r2, [pc, #288]	@ (8001428 <HAL_GPIO_Init+0x2f4>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d013      	beq.n	8001332 <HAL_GPIO_Init+0x1fe>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a47      	ldr	r2, [pc, #284]	@ (800142c <HAL_GPIO_Init+0x2f8>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d00d      	beq.n	800132e <HAL_GPIO_Init+0x1fa>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a46      	ldr	r2, [pc, #280]	@ (8001430 <HAL_GPIO_Init+0x2fc>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d007      	beq.n	800132a <HAL_GPIO_Init+0x1f6>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a45      	ldr	r2, [pc, #276]	@ (8001434 <HAL_GPIO_Init+0x300>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d101      	bne.n	8001326 <HAL_GPIO_Init+0x1f2>
 8001322:	2304      	movs	r3, #4
 8001324:	e008      	b.n	8001338 <HAL_GPIO_Init+0x204>
 8001326:	2307      	movs	r3, #7
 8001328:	e006      	b.n	8001338 <HAL_GPIO_Init+0x204>
 800132a:	2303      	movs	r3, #3
 800132c:	e004      	b.n	8001338 <HAL_GPIO_Init+0x204>
 800132e:	2302      	movs	r3, #2
 8001330:	e002      	b.n	8001338 <HAL_GPIO_Init+0x204>
 8001332:	2301      	movs	r3, #1
 8001334:	e000      	b.n	8001338 <HAL_GPIO_Init+0x204>
 8001336:	2300      	movs	r3, #0
 8001338:	69fa      	ldr	r2, [r7, #28]
 800133a:	f002 0203 	and.w	r2, r2, #3
 800133e:	0092      	lsls	r2, r2, #2
 8001340:	4093      	lsls	r3, r2
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	4313      	orrs	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001348:	4935      	ldr	r1, [pc, #212]	@ (8001420 <HAL_GPIO_Init+0x2ec>)
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	089b      	lsrs	r3, r3, #2
 800134e:	3302      	adds	r3, #2
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001356:	4b38      	ldr	r3, [pc, #224]	@ (8001438 <HAL_GPIO_Init+0x304>)
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	43db      	mvns	r3, r3
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	4013      	ands	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d003      	beq.n	800137a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	4313      	orrs	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800137a:	4a2f      	ldr	r2, [pc, #188]	@ (8001438 <HAL_GPIO_Init+0x304>)
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001380:	4b2d      	ldr	r3, [pc, #180]	@ (8001438 <HAL_GPIO_Init+0x304>)
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	43db      	mvns	r3, r3
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	4013      	ands	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d003      	beq.n	80013a4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013a4:	4a24      	ldr	r2, [pc, #144]	@ (8001438 <HAL_GPIO_Init+0x304>)
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013aa:	4b23      	ldr	r3, [pc, #140]	@ (8001438 <HAL_GPIO_Init+0x304>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	43db      	mvns	r3, r3
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	4013      	ands	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d003      	beq.n	80013ce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013ce:	4a1a      	ldr	r2, [pc, #104]	@ (8001438 <HAL_GPIO_Init+0x304>)
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013d4:	4b18      	ldr	r3, [pc, #96]	@ (8001438 <HAL_GPIO_Init+0x304>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	43db      	mvns	r3, r3
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	4013      	ands	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d003      	beq.n	80013f8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013f8:	4a0f      	ldr	r2, [pc, #60]	@ (8001438 <HAL_GPIO_Init+0x304>)
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	3301      	adds	r3, #1
 8001402:	61fb      	str	r3, [r7, #28]
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	2b0f      	cmp	r3, #15
 8001408:	f67f aea2 	bls.w	8001150 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800140c:	bf00      	nop
 800140e:	bf00      	nop
 8001410:	3724      	adds	r7, #36	@ 0x24
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	40023800 	.word	0x40023800
 8001420:	40013800 	.word	0x40013800
 8001424:	40020000 	.word	0x40020000
 8001428:	40020400 	.word	0x40020400
 800142c:	40020800 	.word	0x40020800
 8001430:	40020c00 	.word	0x40020c00
 8001434:	40021000 	.word	0x40021000
 8001438:	40013c00 	.word	0x40013c00

0800143c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	460b      	mov	r3, r1
 8001446:	807b      	strh	r3, [r7, #2]
 8001448:	4613      	mov	r3, r2
 800144a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800144c:	787b      	ldrb	r3, [r7, #1]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d003      	beq.n	800145a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001452:	887a      	ldrh	r2, [r7, #2]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001458:	e003      	b.n	8001462 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800145a:	887b      	ldrh	r3, [r7, #2]
 800145c:	041a      	lsls	r2, r3, #16
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	619a      	str	r2, [r3, #24]
}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
	...

08001470 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d101      	bne.n	8001482 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e267      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	2b00      	cmp	r3, #0
 800148c:	d075      	beq.n	800157a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800148e:	4b88      	ldr	r3, [pc, #544]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	f003 030c 	and.w	r3, r3, #12
 8001496:	2b04      	cmp	r3, #4
 8001498:	d00c      	beq.n	80014b4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800149a:	4b85      	ldr	r3, [pc, #532]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80014a2:	2b08      	cmp	r3, #8
 80014a4:	d112      	bne.n	80014cc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014a6:	4b82      	ldr	r3, [pc, #520]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80014b2:	d10b      	bne.n	80014cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b4:	4b7e      	ldr	r3, [pc, #504]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d05b      	beq.n	8001578 <HAL_RCC_OscConfig+0x108>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d157      	bne.n	8001578 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e242      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014d4:	d106      	bne.n	80014e4 <HAL_RCC_OscConfig+0x74>
 80014d6:	4b76      	ldr	r3, [pc, #472]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a75      	ldr	r2, [pc, #468]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 80014dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014e0:	6013      	str	r3, [r2, #0]
 80014e2:	e01d      	b.n	8001520 <HAL_RCC_OscConfig+0xb0>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014ec:	d10c      	bne.n	8001508 <HAL_RCC_OscConfig+0x98>
 80014ee:	4b70      	ldr	r3, [pc, #448]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a6f      	ldr	r2, [pc, #444]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 80014f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014f8:	6013      	str	r3, [r2, #0]
 80014fa:	4b6d      	ldr	r3, [pc, #436]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a6c      	ldr	r2, [pc, #432]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 8001500:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001504:	6013      	str	r3, [r2, #0]
 8001506:	e00b      	b.n	8001520 <HAL_RCC_OscConfig+0xb0>
 8001508:	4b69      	ldr	r3, [pc, #420]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a68      	ldr	r2, [pc, #416]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 800150e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001512:	6013      	str	r3, [r2, #0]
 8001514:	4b66      	ldr	r3, [pc, #408]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a65      	ldr	r2, [pc, #404]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 800151a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800151e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d013      	beq.n	8001550 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001528:	f7ff fce6 	bl	8000ef8 <HAL_GetTick>
 800152c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800152e:	e008      	b.n	8001542 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001530:	f7ff fce2 	bl	8000ef8 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b64      	cmp	r3, #100	@ 0x64
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e207      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001542:	4b5b      	ldr	r3, [pc, #364]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d0f0      	beq.n	8001530 <HAL_RCC_OscConfig+0xc0>
 800154e:	e014      	b.n	800157a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001550:	f7ff fcd2 	bl	8000ef8 <HAL_GetTick>
 8001554:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001556:	e008      	b.n	800156a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001558:	f7ff fcce 	bl	8000ef8 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b64      	cmp	r3, #100	@ 0x64
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e1f3      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800156a:	4b51      	ldr	r3, [pc, #324]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1f0      	bne.n	8001558 <HAL_RCC_OscConfig+0xe8>
 8001576:	e000      	b.n	800157a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001578:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	2b00      	cmp	r3, #0
 8001584:	d063      	beq.n	800164e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001586:	4b4a      	ldr	r3, [pc, #296]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	f003 030c 	and.w	r3, r3, #12
 800158e:	2b00      	cmp	r3, #0
 8001590:	d00b      	beq.n	80015aa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001592:	4b47      	ldr	r3, [pc, #284]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800159a:	2b08      	cmp	r3, #8
 800159c:	d11c      	bne.n	80015d8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800159e:	4b44      	ldr	r3, [pc, #272]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d116      	bne.n	80015d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015aa:	4b41      	ldr	r3, [pc, #260]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d005      	beq.n	80015c2 <HAL_RCC_OscConfig+0x152>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	68db      	ldr	r3, [r3, #12]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d001      	beq.n	80015c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e1c7      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c2:	4b3b      	ldr	r3, [pc, #236]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	691b      	ldr	r3, [r3, #16]
 80015ce:	00db      	lsls	r3, r3, #3
 80015d0:	4937      	ldr	r1, [pc, #220]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 80015d2:	4313      	orrs	r3, r2
 80015d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015d6:	e03a      	b.n	800164e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d020      	beq.n	8001622 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015e0:	4b34      	ldr	r3, [pc, #208]	@ (80016b4 <HAL_RCC_OscConfig+0x244>)
 80015e2:	2201      	movs	r2, #1
 80015e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e6:	f7ff fc87 	bl	8000ef8 <HAL_GetTick>
 80015ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ec:	e008      	b.n	8001600 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015ee:	f7ff fc83 	bl	8000ef8 <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d901      	bls.n	8001600 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e1a8      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001600:	4b2b      	ldr	r3, [pc, #172]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0302 	and.w	r3, r3, #2
 8001608:	2b00      	cmp	r3, #0
 800160a:	d0f0      	beq.n	80015ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800160c:	4b28      	ldr	r3, [pc, #160]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	691b      	ldr	r3, [r3, #16]
 8001618:	00db      	lsls	r3, r3, #3
 800161a:	4925      	ldr	r1, [pc, #148]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 800161c:	4313      	orrs	r3, r2
 800161e:	600b      	str	r3, [r1, #0]
 8001620:	e015      	b.n	800164e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001622:	4b24      	ldr	r3, [pc, #144]	@ (80016b4 <HAL_RCC_OscConfig+0x244>)
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001628:	f7ff fc66 	bl	8000ef8 <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001630:	f7ff fc62 	bl	8000ef8 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b02      	cmp	r3, #2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e187      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001642:	4b1b      	ldr	r3, [pc, #108]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d1f0      	bne.n	8001630 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0308 	and.w	r3, r3, #8
 8001656:	2b00      	cmp	r3, #0
 8001658:	d036      	beq.n	80016c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	695b      	ldr	r3, [r3, #20]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d016      	beq.n	8001690 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001662:	4b15      	ldr	r3, [pc, #84]	@ (80016b8 <HAL_RCC_OscConfig+0x248>)
 8001664:	2201      	movs	r2, #1
 8001666:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001668:	f7ff fc46 	bl	8000ef8 <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001670:	f7ff fc42 	bl	8000ef8 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e167      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001682:	4b0b      	ldr	r3, [pc, #44]	@ (80016b0 <HAL_RCC_OscConfig+0x240>)
 8001684:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d0f0      	beq.n	8001670 <HAL_RCC_OscConfig+0x200>
 800168e:	e01b      	b.n	80016c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001690:	4b09      	ldr	r3, [pc, #36]	@ (80016b8 <HAL_RCC_OscConfig+0x248>)
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001696:	f7ff fc2f 	bl	8000ef8 <HAL_GetTick>
 800169a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800169c:	e00e      	b.n	80016bc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800169e:	f7ff fc2b 	bl	8000ef8 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d907      	bls.n	80016bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e150      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
 80016b0:	40023800 	.word	0x40023800
 80016b4:	42470000 	.word	0x42470000
 80016b8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016bc:	4b88      	ldr	r3, [pc, #544]	@ (80018e0 <HAL_RCC_OscConfig+0x470>)
 80016be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d1ea      	bne.n	800169e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0304 	and.w	r3, r3, #4
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f000 8097 	beq.w	8001804 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016d6:	2300      	movs	r3, #0
 80016d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016da:	4b81      	ldr	r3, [pc, #516]	@ (80018e0 <HAL_RCC_OscConfig+0x470>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d10f      	bne.n	8001706 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	60bb      	str	r3, [r7, #8]
 80016ea:	4b7d      	ldr	r3, [pc, #500]	@ (80018e0 <HAL_RCC_OscConfig+0x470>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ee:	4a7c      	ldr	r2, [pc, #496]	@ (80018e0 <HAL_RCC_OscConfig+0x470>)
 80016f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80016f6:	4b7a      	ldr	r3, [pc, #488]	@ (80018e0 <HAL_RCC_OscConfig+0x470>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016fe:	60bb      	str	r3, [r7, #8]
 8001700:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001702:	2301      	movs	r3, #1
 8001704:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001706:	4b77      	ldr	r3, [pc, #476]	@ (80018e4 <HAL_RCC_OscConfig+0x474>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800170e:	2b00      	cmp	r3, #0
 8001710:	d118      	bne.n	8001744 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001712:	4b74      	ldr	r3, [pc, #464]	@ (80018e4 <HAL_RCC_OscConfig+0x474>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a73      	ldr	r2, [pc, #460]	@ (80018e4 <HAL_RCC_OscConfig+0x474>)
 8001718:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800171c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800171e:	f7ff fbeb 	bl	8000ef8 <HAL_GetTick>
 8001722:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001724:	e008      	b.n	8001738 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001726:	f7ff fbe7 	bl	8000ef8 <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d901      	bls.n	8001738 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e10c      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001738:	4b6a      	ldr	r3, [pc, #424]	@ (80018e4 <HAL_RCC_OscConfig+0x474>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001740:	2b00      	cmp	r3, #0
 8001742:	d0f0      	beq.n	8001726 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d106      	bne.n	800175a <HAL_RCC_OscConfig+0x2ea>
 800174c:	4b64      	ldr	r3, [pc, #400]	@ (80018e0 <HAL_RCC_OscConfig+0x470>)
 800174e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001750:	4a63      	ldr	r2, [pc, #396]	@ (80018e0 <HAL_RCC_OscConfig+0x470>)
 8001752:	f043 0301 	orr.w	r3, r3, #1
 8001756:	6713      	str	r3, [r2, #112]	@ 0x70
 8001758:	e01c      	b.n	8001794 <HAL_RCC_OscConfig+0x324>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	2b05      	cmp	r3, #5
 8001760:	d10c      	bne.n	800177c <HAL_RCC_OscConfig+0x30c>
 8001762:	4b5f      	ldr	r3, [pc, #380]	@ (80018e0 <HAL_RCC_OscConfig+0x470>)
 8001764:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001766:	4a5e      	ldr	r2, [pc, #376]	@ (80018e0 <HAL_RCC_OscConfig+0x470>)
 8001768:	f043 0304 	orr.w	r3, r3, #4
 800176c:	6713      	str	r3, [r2, #112]	@ 0x70
 800176e:	4b5c      	ldr	r3, [pc, #368]	@ (80018e0 <HAL_RCC_OscConfig+0x470>)
 8001770:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001772:	4a5b      	ldr	r2, [pc, #364]	@ (80018e0 <HAL_RCC_OscConfig+0x470>)
 8001774:	f043 0301 	orr.w	r3, r3, #1
 8001778:	6713      	str	r3, [r2, #112]	@ 0x70
 800177a:	e00b      	b.n	8001794 <HAL_RCC_OscConfig+0x324>
 800177c:	4b58      	ldr	r3, [pc, #352]	@ (80018e0 <HAL_RCC_OscConfig+0x470>)
 800177e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001780:	4a57      	ldr	r2, [pc, #348]	@ (80018e0 <HAL_RCC_OscConfig+0x470>)
 8001782:	f023 0301 	bic.w	r3, r3, #1
 8001786:	6713      	str	r3, [r2, #112]	@ 0x70
 8001788:	4b55      	ldr	r3, [pc, #340]	@ (80018e0 <HAL_RCC_OscConfig+0x470>)
 800178a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800178c:	4a54      	ldr	r2, [pc, #336]	@ (80018e0 <HAL_RCC_OscConfig+0x470>)
 800178e:	f023 0304 	bic.w	r3, r3, #4
 8001792:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d015      	beq.n	80017c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800179c:	f7ff fbac 	bl	8000ef8 <HAL_GetTick>
 80017a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017a2:	e00a      	b.n	80017ba <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017a4:	f7ff fba8 	bl	8000ef8 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e0cb      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ba:	4b49      	ldr	r3, [pc, #292]	@ (80018e0 <HAL_RCC_OscConfig+0x470>)
 80017bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d0ee      	beq.n	80017a4 <HAL_RCC_OscConfig+0x334>
 80017c6:	e014      	b.n	80017f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017c8:	f7ff fb96 	bl	8000ef8 <HAL_GetTick>
 80017cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017ce:	e00a      	b.n	80017e6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017d0:	f7ff fb92 	bl	8000ef8 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017de:	4293      	cmp	r3, r2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e0b5      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017e6:	4b3e      	ldr	r3, [pc, #248]	@ (80018e0 <HAL_RCC_OscConfig+0x470>)
 80017e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1ee      	bne.n	80017d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80017f2:	7dfb      	ldrb	r3, [r7, #23]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d105      	bne.n	8001804 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017f8:	4b39      	ldr	r3, [pc, #228]	@ (80018e0 <HAL_RCC_OscConfig+0x470>)
 80017fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017fc:	4a38      	ldr	r2, [pc, #224]	@ (80018e0 <HAL_RCC_OscConfig+0x470>)
 80017fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001802:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	2b00      	cmp	r3, #0
 800180a:	f000 80a1 	beq.w	8001950 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800180e:	4b34      	ldr	r3, [pc, #208]	@ (80018e0 <HAL_RCC_OscConfig+0x470>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	f003 030c 	and.w	r3, r3, #12
 8001816:	2b08      	cmp	r3, #8
 8001818:	d05c      	beq.n	80018d4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	2b02      	cmp	r3, #2
 8001820:	d141      	bne.n	80018a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001822:	4b31      	ldr	r3, [pc, #196]	@ (80018e8 <HAL_RCC_OscConfig+0x478>)
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001828:	f7ff fb66 	bl	8000ef8 <HAL_GetTick>
 800182c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800182e:	e008      	b.n	8001842 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001830:	f7ff fb62 	bl	8000ef8 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b02      	cmp	r3, #2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e087      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001842:	4b27      	ldr	r3, [pc, #156]	@ (80018e0 <HAL_RCC_OscConfig+0x470>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1f0      	bne.n	8001830 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	69da      	ldr	r2, [r3, #28]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a1b      	ldr	r3, [r3, #32]
 8001856:	431a      	orrs	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800185c:	019b      	lsls	r3, r3, #6
 800185e:	431a      	orrs	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001864:	085b      	lsrs	r3, r3, #1
 8001866:	3b01      	subs	r3, #1
 8001868:	041b      	lsls	r3, r3, #16
 800186a:	431a      	orrs	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001870:	061b      	lsls	r3, r3, #24
 8001872:	491b      	ldr	r1, [pc, #108]	@ (80018e0 <HAL_RCC_OscConfig+0x470>)
 8001874:	4313      	orrs	r3, r2
 8001876:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001878:	4b1b      	ldr	r3, [pc, #108]	@ (80018e8 <HAL_RCC_OscConfig+0x478>)
 800187a:	2201      	movs	r2, #1
 800187c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187e:	f7ff fb3b 	bl	8000ef8 <HAL_GetTick>
 8001882:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001884:	e008      	b.n	8001898 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001886:	f7ff fb37 	bl	8000ef8 <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b02      	cmp	r3, #2
 8001892:	d901      	bls.n	8001898 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e05c      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001898:	4b11      	ldr	r3, [pc, #68]	@ (80018e0 <HAL_RCC_OscConfig+0x470>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d0f0      	beq.n	8001886 <HAL_RCC_OscConfig+0x416>
 80018a4:	e054      	b.n	8001950 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018a6:	4b10      	ldr	r3, [pc, #64]	@ (80018e8 <HAL_RCC_OscConfig+0x478>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ac:	f7ff fb24 	bl	8000ef8 <HAL_GetTick>
 80018b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018b2:	e008      	b.n	80018c6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018b4:	f7ff fb20 	bl	8000ef8 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e045      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018c6:	4b06      	ldr	r3, [pc, #24]	@ (80018e0 <HAL_RCC_OscConfig+0x470>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1f0      	bne.n	80018b4 <HAL_RCC_OscConfig+0x444>
 80018d2:	e03d      	b.n	8001950 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d107      	bne.n	80018ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e038      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
 80018e0:	40023800 	.word	0x40023800
 80018e4:	40007000 	.word	0x40007000
 80018e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018ec:	4b1b      	ldr	r3, [pc, #108]	@ (800195c <HAL_RCC_OscConfig+0x4ec>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	699b      	ldr	r3, [r3, #24]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d028      	beq.n	800194c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001904:	429a      	cmp	r2, r3
 8001906:	d121      	bne.n	800194c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001912:	429a      	cmp	r2, r3
 8001914:	d11a      	bne.n	800194c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800191c:	4013      	ands	r3, r2
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001922:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001924:	4293      	cmp	r3, r2
 8001926:	d111      	bne.n	800194c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001932:	085b      	lsrs	r3, r3, #1
 8001934:	3b01      	subs	r3, #1
 8001936:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001938:	429a      	cmp	r2, r3
 800193a:	d107      	bne.n	800194c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001946:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001948:	429a      	cmp	r2, r3
 800194a:	d001      	beq.n	8001950 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e000      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3718      	adds	r7, #24
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40023800 	.word	0x40023800

08001960 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d101      	bne.n	8001974 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e0cc      	b.n	8001b0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001974:	4b68      	ldr	r3, [pc, #416]	@ (8001b18 <HAL_RCC_ClockConfig+0x1b8>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0307 	and.w	r3, r3, #7
 800197c:	683a      	ldr	r2, [r7, #0]
 800197e:	429a      	cmp	r2, r3
 8001980:	d90c      	bls.n	800199c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001982:	4b65      	ldr	r3, [pc, #404]	@ (8001b18 <HAL_RCC_ClockConfig+0x1b8>)
 8001984:	683a      	ldr	r2, [r7, #0]
 8001986:	b2d2      	uxtb	r2, r2
 8001988:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800198a:	4b63      	ldr	r3, [pc, #396]	@ (8001b18 <HAL_RCC_ClockConfig+0x1b8>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0307 	and.w	r3, r3, #7
 8001992:	683a      	ldr	r2, [r7, #0]
 8001994:	429a      	cmp	r2, r3
 8001996:	d001      	beq.n	800199c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e0b8      	b.n	8001b0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0302 	and.w	r3, r3, #2
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d020      	beq.n	80019ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0304 	and.w	r3, r3, #4
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d005      	beq.n	80019c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019b4:	4b59      	ldr	r3, [pc, #356]	@ (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	4a58      	ldr	r2, [pc, #352]	@ (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 80019ba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80019be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0308 	and.w	r3, r3, #8
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d005      	beq.n	80019d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019cc:	4b53      	ldr	r3, [pc, #332]	@ (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	4a52      	ldr	r2, [pc, #328]	@ (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 80019d2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80019d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019d8:	4b50      	ldr	r3, [pc, #320]	@ (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	494d      	ldr	r1, [pc, #308]	@ (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 80019e6:	4313      	orrs	r3, r2
 80019e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d044      	beq.n	8001a80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d107      	bne.n	8001a0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019fe:	4b47      	ldr	r3, [pc, #284]	@ (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d119      	bne.n	8001a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e07f      	b.n	8001b0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d003      	beq.n	8001a1e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a1a:	2b03      	cmp	r3, #3
 8001a1c:	d107      	bne.n	8001a2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a1e:	4b3f      	ldr	r3, [pc, #252]	@ (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d109      	bne.n	8001a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e06f      	b.n	8001b0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a2e:	4b3b      	ldr	r3, [pc, #236]	@ (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0302 	and.w	r3, r3, #2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d101      	bne.n	8001a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e067      	b.n	8001b0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a3e:	4b37      	ldr	r3, [pc, #220]	@ (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f023 0203 	bic.w	r2, r3, #3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	4934      	ldr	r1, [pc, #208]	@ (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a50:	f7ff fa52 	bl	8000ef8 <HAL_GetTick>
 8001a54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a56:	e00a      	b.n	8001a6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a58:	f7ff fa4e 	bl	8000ef8 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e04f      	b.n	8001b0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a6e:	4b2b      	ldr	r3, [pc, #172]	@ (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f003 020c 	and.w	r2, r3, #12
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d1eb      	bne.n	8001a58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a80:	4b25      	ldr	r3, [pc, #148]	@ (8001b18 <HAL_RCC_ClockConfig+0x1b8>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0307 	and.w	r3, r3, #7
 8001a88:	683a      	ldr	r2, [r7, #0]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d20c      	bcs.n	8001aa8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a8e:	4b22      	ldr	r3, [pc, #136]	@ (8001b18 <HAL_RCC_ClockConfig+0x1b8>)
 8001a90:	683a      	ldr	r2, [r7, #0]
 8001a92:	b2d2      	uxtb	r2, r2
 8001a94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a96:	4b20      	ldr	r3, [pc, #128]	@ (8001b18 <HAL_RCC_ClockConfig+0x1b8>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	683a      	ldr	r2, [r7, #0]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d001      	beq.n	8001aa8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e032      	b.n	8001b0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0304 	and.w	r3, r3, #4
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d008      	beq.n	8001ac6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ab4:	4b19      	ldr	r3, [pc, #100]	@ (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	4916      	ldr	r1, [pc, #88]	@ (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0308 	and.w	r3, r3, #8
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d009      	beq.n	8001ae6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ad2:	4b12      	ldr	r3, [pc, #72]	@ (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	490e      	ldr	r1, [pc, #56]	@ (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ae6:	f000 f821 	bl	8001b2c <HAL_RCC_GetSysClockFreq>
 8001aea:	4602      	mov	r2, r0
 8001aec:	4b0b      	ldr	r3, [pc, #44]	@ (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	091b      	lsrs	r3, r3, #4
 8001af2:	f003 030f 	and.w	r3, r3, #15
 8001af6:	490a      	ldr	r1, [pc, #40]	@ (8001b20 <HAL_RCC_ClockConfig+0x1c0>)
 8001af8:	5ccb      	ldrb	r3, [r1, r3]
 8001afa:	fa22 f303 	lsr.w	r3, r2, r3
 8001afe:	4a09      	ldr	r2, [pc, #36]	@ (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 8001b00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001b02:	4b09      	ldr	r3, [pc, #36]	@ (8001b28 <HAL_RCC_ClockConfig+0x1c8>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff f9b2 	bl	8000e70 <HAL_InitTick>

  return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3710      	adds	r7, #16
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40023c00 	.word	0x40023c00
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	08002f14 	.word	0x08002f14
 8001b24:	20000014 	.word	0x20000014
 8001b28:	20000018 	.word	0x20000018

08001b2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b30:	b094      	sub	sp, #80	@ 0x50
 8001b32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001b34:	2300      	movs	r3, #0
 8001b36:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001b40:	2300      	movs	r3, #0
 8001b42:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b44:	4b79      	ldr	r3, [pc, #484]	@ (8001d2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f003 030c 	and.w	r3, r3, #12
 8001b4c:	2b08      	cmp	r3, #8
 8001b4e:	d00d      	beq.n	8001b6c <HAL_RCC_GetSysClockFreq+0x40>
 8001b50:	2b08      	cmp	r3, #8
 8001b52:	f200 80e1 	bhi.w	8001d18 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d002      	beq.n	8001b60 <HAL_RCC_GetSysClockFreq+0x34>
 8001b5a:	2b04      	cmp	r3, #4
 8001b5c:	d003      	beq.n	8001b66 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b5e:	e0db      	b.n	8001d18 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b60:	4b73      	ldr	r3, [pc, #460]	@ (8001d30 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b62:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b64:	e0db      	b.n	8001d1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b66:	4b73      	ldr	r3, [pc, #460]	@ (8001d34 <HAL_RCC_GetSysClockFreq+0x208>)
 8001b68:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b6a:	e0d8      	b.n	8001d1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b6c:	4b6f      	ldr	r3, [pc, #444]	@ (8001d2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b74:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b76:	4b6d      	ldr	r3, [pc, #436]	@ (8001d2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d063      	beq.n	8001c4a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b82:	4b6a      	ldr	r3, [pc, #424]	@ (8001d2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	099b      	lsrs	r3, r3, #6
 8001b88:	2200      	movs	r2, #0
 8001b8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001b8c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b94:	633b      	str	r3, [r7, #48]	@ 0x30
 8001b96:	2300      	movs	r3, #0
 8001b98:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b9a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001b9e:	4622      	mov	r2, r4
 8001ba0:	462b      	mov	r3, r5
 8001ba2:	f04f 0000 	mov.w	r0, #0
 8001ba6:	f04f 0100 	mov.w	r1, #0
 8001baa:	0159      	lsls	r1, r3, #5
 8001bac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bb0:	0150      	lsls	r0, r2, #5
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	4621      	mov	r1, r4
 8001bb8:	1a51      	subs	r1, r2, r1
 8001bba:	6139      	str	r1, [r7, #16]
 8001bbc:	4629      	mov	r1, r5
 8001bbe:	eb63 0301 	sbc.w	r3, r3, r1
 8001bc2:	617b      	str	r3, [r7, #20]
 8001bc4:	f04f 0200 	mov.w	r2, #0
 8001bc8:	f04f 0300 	mov.w	r3, #0
 8001bcc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001bd0:	4659      	mov	r1, fp
 8001bd2:	018b      	lsls	r3, r1, #6
 8001bd4:	4651      	mov	r1, sl
 8001bd6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001bda:	4651      	mov	r1, sl
 8001bdc:	018a      	lsls	r2, r1, #6
 8001bde:	4651      	mov	r1, sl
 8001be0:	ebb2 0801 	subs.w	r8, r2, r1
 8001be4:	4659      	mov	r1, fp
 8001be6:	eb63 0901 	sbc.w	r9, r3, r1
 8001bea:	f04f 0200 	mov.w	r2, #0
 8001bee:	f04f 0300 	mov.w	r3, #0
 8001bf2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bf6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bfa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bfe:	4690      	mov	r8, r2
 8001c00:	4699      	mov	r9, r3
 8001c02:	4623      	mov	r3, r4
 8001c04:	eb18 0303 	adds.w	r3, r8, r3
 8001c08:	60bb      	str	r3, [r7, #8]
 8001c0a:	462b      	mov	r3, r5
 8001c0c:	eb49 0303 	adc.w	r3, r9, r3
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	f04f 0200 	mov.w	r2, #0
 8001c16:	f04f 0300 	mov.w	r3, #0
 8001c1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c1e:	4629      	mov	r1, r5
 8001c20:	024b      	lsls	r3, r1, #9
 8001c22:	4621      	mov	r1, r4
 8001c24:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c28:	4621      	mov	r1, r4
 8001c2a:	024a      	lsls	r2, r1, #9
 8001c2c:	4610      	mov	r0, r2
 8001c2e:	4619      	mov	r1, r3
 8001c30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c32:	2200      	movs	r2, #0
 8001c34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001c38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001c3c:	f7fe facc 	bl	80001d8 <__aeabi_uldivmod>
 8001c40:	4602      	mov	r2, r0
 8001c42:	460b      	mov	r3, r1
 8001c44:	4613      	mov	r3, r2
 8001c46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c48:	e058      	b.n	8001cfc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c4a:	4b38      	ldr	r3, [pc, #224]	@ (8001d2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	099b      	lsrs	r3, r3, #6
 8001c50:	2200      	movs	r2, #0
 8001c52:	4618      	mov	r0, r3
 8001c54:	4611      	mov	r1, r2
 8001c56:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c5a:	623b      	str	r3, [r7, #32]
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c64:	4642      	mov	r2, r8
 8001c66:	464b      	mov	r3, r9
 8001c68:	f04f 0000 	mov.w	r0, #0
 8001c6c:	f04f 0100 	mov.w	r1, #0
 8001c70:	0159      	lsls	r1, r3, #5
 8001c72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c76:	0150      	lsls	r0, r2, #5
 8001c78:	4602      	mov	r2, r0
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	4641      	mov	r1, r8
 8001c7e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c82:	4649      	mov	r1, r9
 8001c84:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c88:	f04f 0200 	mov.w	r2, #0
 8001c8c:	f04f 0300 	mov.w	r3, #0
 8001c90:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c98:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c9c:	ebb2 040a 	subs.w	r4, r2, sl
 8001ca0:	eb63 050b 	sbc.w	r5, r3, fp
 8001ca4:	f04f 0200 	mov.w	r2, #0
 8001ca8:	f04f 0300 	mov.w	r3, #0
 8001cac:	00eb      	lsls	r3, r5, #3
 8001cae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001cb2:	00e2      	lsls	r2, r4, #3
 8001cb4:	4614      	mov	r4, r2
 8001cb6:	461d      	mov	r5, r3
 8001cb8:	4643      	mov	r3, r8
 8001cba:	18e3      	adds	r3, r4, r3
 8001cbc:	603b      	str	r3, [r7, #0]
 8001cbe:	464b      	mov	r3, r9
 8001cc0:	eb45 0303 	adc.w	r3, r5, r3
 8001cc4:	607b      	str	r3, [r7, #4]
 8001cc6:	f04f 0200 	mov.w	r2, #0
 8001cca:	f04f 0300 	mov.w	r3, #0
 8001cce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001cd2:	4629      	mov	r1, r5
 8001cd4:	028b      	lsls	r3, r1, #10
 8001cd6:	4621      	mov	r1, r4
 8001cd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001cdc:	4621      	mov	r1, r4
 8001cde:	028a      	lsls	r2, r1, #10
 8001ce0:	4610      	mov	r0, r2
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	61bb      	str	r3, [r7, #24]
 8001cea:	61fa      	str	r2, [r7, #28]
 8001cec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cf0:	f7fe fa72 	bl	80001d8 <__aeabi_uldivmod>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001cfc:	4b0b      	ldr	r3, [pc, #44]	@ (8001d2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	0c1b      	lsrs	r3, r3, #16
 8001d02:	f003 0303 	and.w	r3, r3, #3
 8001d06:	3301      	adds	r3, #1
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001d0c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001d0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d14:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d16:	e002      	b.n	8001d1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d18:	4b05      	ldr	r3, [pc, #20]	@ (8001d30 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d1a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3750      	adds	r7, #80	@ 0x50
 8001d24:	46bd      	mov	sp, r7
 8001d26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	00f42400 	.word	0x00f42400
 8001d34:	007a1200 	.word	0x007a1200

08001d38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d3c:	4b03      	ldr	r3, [pc, #12]	@ (8001d4c <HAL_RCC_GetHCLKFreq+0x14>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	20000014 	.word	0x20000014

08001d50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d54:	f7ff fff0 	bl	8001d38 <HAL_RCC_GetHCLKFreq>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	4b05      	ldr	r3, [pc, #20]	@ (8001d70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	0a9b      	lsrs	r3, r3, #10
 8001d60:	f003 0307 	and.w	r3, r3, #7
 8001d64:	4903      	ldr	r1, [pc, #12]	@ (8001d74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d66:	5ccb      	ldrb	r3, [r1, r3]
 8001d68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40023800 	.word	0x40023800
 8001d74:	08002f24 	.word	0x08002f24

08001d78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d7c:	f7ff ffdc 	bl	8001d38 <HAL_RCC_GetHCLKFreq>
 8001d80:	4602      	mov	r2, r0
 8001d82:	4b05      	ldr	r3, [pc, #20]	@ (8001d98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	0b5b      	lsrs	r3, r3, #13
 8001d88:	f003 0307 	and.w	r3, r3, #7
 8001d8c:	4903      	ldr	r1, [pc, #12]	@ (8001d9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d8e:	5ccb      	ldrb	r3, [r1, r3]
 8001d90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	08002f24 	.word	0x08002f24

08001da0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d101      	bne.n	8001db2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e041      	b.n	8001e36 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d106      	bne.n	8001dcc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f7fe ff4a 	bl	8000c60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2202      	movs	r2, #2
 8001dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	3304      	adds	r3, #4
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4610      	mov	r0, r2
 8001de0:	f000 fa16 	bl	8002210 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b084      	sub	sp, #16
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	691b      	ldr	r3, [r3, #16]
 8001e54:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	f003 0302 	and.w	r3, r3, #2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d020      	beq.n	8001ea2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d01b      	beq.n	8001ea2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f06f 0202 	mvn.w	r2, #2
 8001e72:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	f003 0303 	and.w	r3, r3, #3
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d003      	beq.n	8001e90 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f000 f9a3 	bl	80021d4 <HAL_TIM_IC_CaptureCallback>
 8001e8e:	e005      	b.n	8001e9c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f000 f995 	bl	80021c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 f9a6 	bl	80021e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d020      	beq.n	8001eee <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f003 0304 	and.w	r3, r3, #4
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d01b      	beq.n	8001eee <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f06f 0204 	mvn.w	r2, #4
 8001ebe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2202      	movs	r2, #2
 8001ec4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d003      	beq.n	8001edc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f000 f97d 	bl	80021d4 <HAL_TIM_IC_CaptureCallback>
 8001eda:	e005      	b.n	8001ee8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f000 f96f 	bl	80021c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 f980 	bl	80021e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	f003 0308 	and.w	r3, r3, #8
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d020      	beq.n	8001f3a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f003 0308 	and.w	r3, r3, #8
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d01b      	beq.n	8001f3a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f06f 0208 	mvn.w	r2, #8
 8001f0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2204      	movs	r2, #4
 8001f10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	69db      	ldr	r3, [r3, #28]
 8001f18:	f003 0303 	and.w	r3, r3, #3
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d003      	beq.n	8001f28 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 f957 	bl	80021d4 <HAL_TIM_IC_CaptureCallback>
 8001f26:	e005      	b.n	8001f34 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f000 f949 	bl	80021c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 f95a 	bl	80021e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	f003 0310 	and.w	r3, r3, #16
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d020      	beq.n	8001f86 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f003 0310 	and.w	r3, r3, #16
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d01b      	beq.n	8001f86 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f06f 0210 	mvn.w	r2, #16
 8001f56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2208      	movs	r2, #8
 8001f5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	69db      	ldr	r3, [r3, #28]
 8001f64:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d003      	beq.n	8001f74 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f000 f931 	bl	80021d4 <HAL_TIM_IC_CaptureCallback>
 8001f72:	e005      	b.n	8001f80 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 f923 	bl	80021c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 f934 	bl	80021e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	f003 0301 	and.w	r3, r3, #1
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d00c      	beq.n	8001faa <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d007      	beq.n	8001faa <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f06f 0201 	mvn.w	r2, #1
 8001fa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f000 f901 	bl	80021ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d00c      	beq.n	8001fce <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d007      	beq.n	8001fce <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001fc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f000 fabf 	bl	800254c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d00c      	beq.n	8001ff2 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d007      	beq.n	8001ff2 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001fea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f000 f905 	bl	80021fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	f003 0320 	and.w	r3, r3, #32
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d00c      	beq.n	8002016 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f003 0320 	and.w	r3, r3, #32
 8002002:	2b00      	cmp	r3, #0
 8002004:	d007      	beq.n	8002016 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f06f 0220 	mvn.w	r2, #32
 800200e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f000 fa91 	bl	8002538 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002016:	bf00      	nop
 8002018:	3710      	adds	r7, #16
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b084      	sub	sp, #16
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
 8002026:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002028:	2300      	movs	r3, #0
 800202a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002032:	2b01      	cmp	r3, #1
 8002034:	d101      	bne.n	800203a <HAL_TIM_ConfigClockSource+0x1c>
 8002036:	2302      	movs	r3, #2
 8002038:	e0b4      	b.n	80021a4 <HAL_TIM_ConfigClockSource+0x186>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2201      	movs	r2, #1
 800203e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2202      	movs	r2, #2
 8002046:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002058:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002060:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68ba      	ldr	r2, [r7, #8]
 8002068:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002072:	d03e      	beq.n	80020f2 <HAL_TIM_ConfigClockSource+0xd4>
 8002074:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002078:	f200 8087 	bhi.w	800218a <HAL_TIM_ConfigClockSource+0x16c>
 800207c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002080:	f000 8086 	beq.w	8002190 <HAL_TIM_ConfigClockSource+0x172>
 8002084:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002088:	d87f      	bhi.n	800218a <HAL_TIM_ConfigClockSource+0x16c>
 800208a:	2b70      	cmp	r3, #112	@ 0x70
 800208c:	d01a      	beq.n	80020c4 <HAL_TIM_ConfigClockSource+0xa6>
 800208e:	2b70      	cmp	r3, #112	@ 0x70
 8002090:	d87b      	bhi.n	800218a <HAL_TIM_ConfigClockSource+0x16c>
 8002092:	2b60      	cmp	r3, #96	@ 0x60
 8002094:	d050      	beq.n	8002138 <HAL_TIM_ConfigClockSource+0x11a>
 8002096:	2b60      	cmp	r3, #96	@ 0x60
 8002098:	d877      	bhi.n	800218a <HAL_TIM_ConfigClockSource+0x16c>
 800209a:	2b50      	cmp	r3, #80	@ 0x50
 800209c:	d03c      	beq.n	8002118 <HAL_TIM_ConfigClockSource+0xfa>
 800209e:	2b50      	cmp	r3, #80	@ 0x50
 80020a0:	d873      	bhi.n	800218a <HAL_TIM_ConfigClockSource+0x16c>
 80020a2:	2b40      	cmp	r3, #64	@ 0x40
 80020a4:	d058      	beq.n	8002158 <HAL_TIM_ConfigClockSource+0x13a>
 80020a6:	2b40      	cmp	r3, #64	@ 0x40
 80020a8:	d86f      	bhi.n	800218a <HAL_TIM_ConfigClockSource+0x16c>
 80020aa:	2b30      	cmp	r3, #48	@ 0x30
 80020ac:	d064      	beq.n	8002178 <HAL_TIM_ConfigClockSource+0x15a>
 80020ae:	2b30      	cmp	r3, #48	@ 0x30
 80020b0:	d86b      	bhi.n	800218a <HAL_TIM_ConfigClockSource+0x16c>
 80020b2:	2b20      	cmp	r3, #32
 80020b4:	d060      	beq.n	8002178 <HAL_TIM_ConfigClockSource+0x15a>
 80020b6:	2b20      	cmp	r3, #32
 80020b8:	d867      	bhi.n	800218a <HAL_TIM_ConfigClockSource+0x16c>
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d05c      	beq.n	8002178 <HAL_TIM_ConfigClockSource+0x15a>
 80020be:	2b10      	cmp	r3, #16
 80020c0:	d05a      	beq.n	8002178 <HAL_TIM_ConfigClockSource+0x15a>
 80020c2:	e062      	b.n	800218a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80020d4:	f000 f9a2 	bl	800241c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80020e6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	68ba      	ldr	r2, [r7, #8]
 80020ee:	609a      	str	r2, [r3, #8]
      break;
 80020f0:	e04f      	b.n	8002192 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002102:	f000 f98b 	bl	800241c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	689a      	ldr	r2, [r3, #8]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002114:	609a      	str	r2, [r3, #8]
      break;
 8002116:	e03c      	b.n	8002192 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002124:	461a      	mov	r2, r3
 8002126:	f000 f8ff 	bl	8002328 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2150      	movs	r1, #80	@ 0x50
 8002130:	4618      	mov	r0, r3
 8002132:	f000 f958 	bl	80023e6 <TIM_ITRx_SetConfig>
      break;
 8002136:	e02c      	b.n	8002192 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002144:	461a      	mov	r2, r3
 8002146:	f000 f91e 	bl	8002386 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2160      	movs	r1, #96	@ 0x60
 8002150:	4618      	mov	r0, r3
 8002152:	f000 f948 	bl	80023e6 <TIM_ITRx_SetConfig>
      break;
 8002156:	e01c      	b.n	8002192 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002164:	461a      	mov	r2, r3
 8002166:	f000 f8df 	bl	8002328 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2140      	movs	r1, #64	@ 0x40
 8002170:	4618      	mov	r0, r3
 8002172:	f000 f938 	bl	80023e6 <TIM_ITRx_SetConfig>
      break;
 8002176:	e00c      	b.n	8002192 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4619      	mov	r1, r3
 8002182:	4610      	mov	r0, r2
 8002184:	f000 f92f 	bl	80023e6 <TIM_ITRx_SetConfig>
      break;
 8002188:	e003      	b.n	8002192 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	73fb      	strb	r3, [r7, #15]
      break;
 800218e:	e000      	b.n	8002192 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002190:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2201      	movs	r2, #1
 8002196:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80021a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3710      	adds	r7, #16
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4a3a      	ldr	r2, [pc, #232]	@ (800230c <TIM_Base_SetConfig+0xfc>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d00f      	beq.n	8002248 <TIM_Base_SetConfig+0x38>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800222e:	d00b      	beq.n	8002248 <TIM_Base_SetConfig+0x38>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4a37      	ldr	r2, [pc, #220]	@ (8002310 <TIM_Base_SetConfig+0x100>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d007      	beq.n	8002248 <TIM_Base_SetConfig+0x38>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a36      	ldr	r2, [pc, #216]	@ (8002314 <TIM_Base_SetConfig+0x104>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d003      	beq.n	8002248 <TIM_Base_SetConfig+0x38>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4a35      	ldr	r2, [pc, #212]	@ (8002318 <TIM_Base_SetConfig+0x108>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d108      	bne.n	800225a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800224e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	4313      	orrs	r3, r2
 8002258:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a2b      	ldr	r2, [pc, #172]	@ (800230c <TIM_Base_SetConfig+0xfc>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d01b      	beq.n	800229a <TIM_Base_SetConfig+0x8a>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002268:	d017      	beq.n	800229a <TIM_Base_SetConfig+0x8a>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a28      	ldr	r2, [pc, #160]	@ (8002310 <TIM_Base_SetConfig+0x100>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d013      	beq.n	800229a <TIM_Base_SetConfig+0x8a>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a27      	ldr	r2, [pc, #156]	@ (8002314 <TIM_Base_SetConfig+0x104>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d00f      	beq.n	800229a <TIM_Base_SetConfig+0x8a>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a26      	ldr	r2, [pc, #152]	@ (8002318 <TIM_Base_SetConfig+0x108>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d00b      	beq.n	800229a <TIM_Base_SetConfig+0x8a>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a25      	ldr	r2, [pc, #148]	@ (800231c <TIM_Base_SetConfig+0x10c>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d007      	beq.n	800229a <TIM_Base_SetConfig+0x8a>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a24      	ldr	r2, [pc, #144]	@ (8002320 <TIM_Base_SetConfig+0x110>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d003      	beq.n	800229a <TIM_Base_SetConfig+0x8a>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a23      	ldr	r2, [pc, #140]	@ (8002324 <TIM_Base_SetConfig+0x114>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d108      	bne.n	80022ac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80022a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	68fa      	ldr	r2, [r7, #12]
 80022be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	689a      	ldr	r2, [r3, #8]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	4a0e      	ldr	r2, [pc, #56]	@ (800230c <TIM_Base_SetConfig+0xfc>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d103      	bne.n	80022e0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	691a      	ldr	r2, [r3, #16]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d105      	bne.n	80022fe <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	f023 0201 	bic.w	r2, r3, #1
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	611a      	str	r2, [r3, #16]
  }
}
 80022fe:	bf00      	nop
 8002300:	3714      	adds	r7, #20
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	40010000 	.word	0x40010000
 8002310:	40000400 	.word	0x40000400
 8002314:	40000800 	.word	0x40000800
 8002318:	40000c00 	.word	0x40000c00
 800231c:	40014000 	.word	0x40014000
 8002320:	40014400 	.word	0x40014400
 8002324:	40014800 	.word	0x40014800

08002328 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002328:	b480      	push	{r7}
 800232a:	b087      	sub	sp, #28
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6a1b      	ldr	r3, [r3, #32]
 8002338:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6a1b      	ldr	r3, [r3, #32]
 800233e:	f023 0201 	bic.w	r2, r3, #1
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002352:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	011b      	lsls	r3, r3, #4
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	4313      	orrs	r3, r2
 800235c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	f023 030a 	bic.w	r3, r3, #10
 8002364:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002366:	697a      	ldr	r2, [r7, #20]
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	4313      	orrs	r3, r2
 800236c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	693a      	ldr	r2, [r7, #16]
 8002372:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	697a      	ldr	r2, [r7, #20]
 8002378:	621a      	str	r2, [r3, #32]
}
 800237a:	bf00      	nop
 800237c:	371c      	adds	r7, #28
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr

08002386 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002386:	b480      	push	{r7}
 8002388:	b087      	sub	sp, #28
 800238a:	af00      	add	r7, sp, #0
 800238c:	60f8      	str	r0, [r7, #12]
 800238e:	60b9      	str	r1, [r7, #8]
 8002390:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6a1b      	ldr	r3, [r3, #32]
 8002396:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6a1b      	ldr	r3, [r3, #32]
 800239c:	f023 0210 	bic.w	r2, r3, #16
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	699b      	ldr	r3, [r3, #24]
 80023a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80023b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	031b      	lsls	r3, r3, #12
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80023c2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	011b      	lsls	r3, r3, #4
 80023c8:	697a      	ldr	r2, [r7, #20]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	697a      	ldr	r2, [r7, #20]
 80023d8:	621a      	str	r2, [r3, #32]
}
 80023da:	bf00      	nop
 80023dc:	371c      	adds	r7, #28
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr

080023e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80023e6:	b480      	push	{r7}
 80023e8:	b085      	sub	sp, #20
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
 80023ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	4313      	orrs	r3, r2
 8002404:	f043 0307 	orr.w	r3, r3, #7
 8002408:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	68fa      	ldr	r2, [r7, #12]
 800240e:	609a      	str	r2, [r3, #8]
}
 8002410:	bf00      	nop
 8002412:	3714      	adds	r7, #20
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800241c:	b480      	push	{r7}
 800241e:	b087      	sub	sp, #28
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]
 8002428:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002436:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	021a      	lsls	r2, r3, #8
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	431a      	orrs	r2, r3
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	4313      	orrs	r3, r2
 8002444:	697a      	ldr	r2, [r7, #20]
 8002446:	4313      	orrs	r3, r2
 8002448:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	697a      	ldr	r2, [r7, #20]
 800244e:	609a      	str	r2, [r3, #8]
}
 8002450:	bf00      	nop
 8002452:	371c      	adds	r7, #28
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800246c:	2b01      	cmp	r3, #1
 800246e:	d101      	bne.n	8002474 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002470:	2302      	movs	r3, #2
 8002472:	e050      	b.n	8002516 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2202      	movs	r2, #2
 8002480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800249a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68fa      	ldr	r2, [r7, #12]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68fa      	ldr	r2, [r7, #12]
 80024ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a1c      	ldr	r2, [pc, #112]	@ (8002524 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d018      	beq.n	80024ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024c0:	d013      	beq.n	80024ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a18      	ldr	r2, [pc, #96]	@ (8002528 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d00e      	beq.n	80024ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a16      	ldr	r2, [pc, #88]	@ (800252c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d009      	beq.n	80024ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a15      	ldr	r2, [pc, #84]	@ (8002530 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d004      	beq.n	80024ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a13      	ldr	r2, [pc, #76]	@ (8002534 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d10c      	bne.n	8002504 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80024f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	68ba      	ldr	r2, [r7, #8]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68ba      	ldr	r2, [r7, #8]
 8002502:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3714      	adds	r7, #20
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	40010000 	.word	0x40010000
 8002528:	40000400 	.word	0x40000400
 800252c:	40000800 	.word	0x40000800
 8002530:	40000c00 	.word	0x40000c00
 8002534:	40014000 	.word	0x40014000

08002538 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d101      	bne.n	8002572 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e042      	b.n	80025f8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d106      	bne.n	800258c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f7fe fb92 	bl	8000cb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2224      	movs	r2, #36	@ 0x24
 8002590:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68da      	ldr	r2, [r3, #12]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80025a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f000 fa09 	bl	80029bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	691a      	ldr	r2, [r3, #16]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80025b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	695a      	ldr	r2, [r3, #20]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80025c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68da      	ldr	r2, [r3, #12]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80025d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2220      	movs	r2, #32
 80025e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2220      	movs	r2, #32
 80025ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3708      	adds	r7, #8
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b08a      	sub	sp, #40	@ 0x28
 8002604:	af02      	add	r7, sp, #8
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	603b      	str	r3, [r7, #0]
 800260c:	4613      	mov	r3, r2
 800260e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002610:	2300      	movs	r3, #0
 8002612:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800261a:	b2db      	uxtb	r3, r3
 800261c:	2b20      	cmp	r3, #32
 800261e:	d175      	bne.n	800270c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d002      	beq.n	800262c <HAL_UART_Transmit+0x2c>
 8002626:	88fb      	ldrh	r3, [r7, #6]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e06e      	b.n	800270e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2200      	movs	r2, #0
 8002634:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2221      	movs	r2, #33	@ 0x21
 800263a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800263e:	f7fe fc5b 	bl	8000ef8 <HAL_GetTick>
 8002642:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	88fa      	ldrh	r2, [r7, #6]
 8002648:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	88fa      	ldrh	r2, [r7, #6]
 800264e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002658:	d108      	bne.n	800266c <HAL_UART_Transmit+0x6c>
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d104      	bne.n	800266c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002662:	2300      	movs	r3, #0
 8002664:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	61bb      	str	r3, [r7, #24]
 800266a:	e003      	b.n	8002674 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002670:	2300      	movs	r3, #0
 8002672:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002674:	e02e      	b.n	80026d4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	9300      	str	r3, [sp, #0]
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	2200      	movs	r2, #0
 800267e:	2180      	movs	r1, #128	@ 0x80
 8002680:	68f8      	ldr	r0, [r7, #12]
 8002682:	f000 f8df 	bl	8002844 <UART_WaitOnFlagUntilTimeout>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d005      	beq.n	8002698 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2220      	movs	r2, #32
 8002690:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e03a      	b.n	800270e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d10b      	bne.n	80026b6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	881b      	ldrh	r3, [r3, #0]
 80026a2:	461a      	mov	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	3302      	adds	r3, #2
 80026b2:	61bb      	str	r3, [r7, #24]
 80026b4:	e007      	b.n	80026c6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	781a      	ldrb	r2, [r3, #0]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	3301      	adds	r3, #1
 80026c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	3b01      	subs	r3, #1
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80026d8:	b29b      	uxth	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1cb      	bne.n	8002676 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	9300      	str	r3, [sp, #0]
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	2200      	movs	r2, #0
 80026e6:	2140      	movs	r1, #64	@ 0x40
 80026e8:	68f8      	ldr	r0, [r7, #12]
 80026ea:	f000 f8ab 	bl	8002844 <UART_WaitOnFlagUntilTimeout>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d005      	beq.n	8002700 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2220      	movs	r2, #32
 80026f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e006      	b.n	800270e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2220      	movs	r2, #32
 8002704:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002708:	2300      	movs	r3, #0
 800270a:	e000      	b.n	800270e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800270c:	2302      	movs	r3, #2
  }
}
 800270e:	4618      	mov	r0, r3
 8002710:	3720      	adds	r7, #32
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002716:	b580      	push	{r7, lr}
 8002718:	b08a      	sub	sp, #40	@ 0x28
 800271a:	af02      	add	r7, sp, #8
 800271c:	60f8      	str	r0, [r7, #12]
 800271e:	60b9      	str	r1, [r7, #8]
 8002720:	603b      	str	r3, [r7, #0]
 8002722:	4613      	mov	r3, r2
 8002724:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002726:	2300      	movs	r3, #0
 8002728:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002730:	b2db      	uxtb	r3, r3
 8002732:	2b20      	cmp	r3, #32
 8002734:	f040 8081 	bne.w	800283a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d002      	beq.n	8002744 <HAL_UART_Receive+0x2e>
 800273e:	88fb      	ldrh	r3, [r7, #6]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d101      	bne.n	8002748 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e079      	b.n	800283c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2200      	movs	r2, #0
 800274c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2222      	movs	r2, #34	@ 0x22
 8002752:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2200      	movs	r2, #0
 800275a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800275c:	f7fe fbcc 	bl	8000ef8 <HAL_GetTick>
 8002760:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	88fa      	ldrh	r2, [r7, #6]
 8002766:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	88fa      	ldrh	r2, [r7, #6]
 800276c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002776:	d108      	bne.n	800278a <HAL_UART_Receive+0x74>
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d104      	bne.n	800278a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002780:	2300      	movs	r3, #0
 8002782:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	61bb      	str	r3, [r7, #24]
 8002788:	e003      	b.n	8002792 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800278e:	2300      	movs	r3, #0
 8002790:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002792:	e047      	b.n	8002824 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	9300      	str	r3, [sp, #0]
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	2200      	movs	r2, #0
 800279c:	2120      	movs	r1, #32
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	f000 f850 	bl	8002844 <UART_WaitOnFlagUntilTimeout>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d005      	beq.n	80027b6 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2220      	movs	r2, #32
 80027ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e042      	b.n	800283c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d10c      	bne.n	80027d6 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027c8:	b29a      	uxth	r2, r3
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	3302      	adds	r3, #2
 80027d2:	61bb      	str	r3, [r7, #24]
 80027d4:	e01f      	b.n	8002816 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027de:	d007      	beq.n	80027f0 <HAL_UART_Receive+0xda>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d10a      	bne.n	80027fe <HAL_UART_Receive+0xe8>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	691b      	ldr	r3, [r3, #16]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d106      	bne.n	80027fe <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	b2da      	uxtb	r2, r3
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	701a      	strb	r2, [r3, #0]
 80027fc:	e008      	b.n	8002810 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	b2db      	uxtb	r3, r3
 8002806:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800280a:	b2da      	uxtb	r2, r3
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	3301      	adds	r3, #1
 8002814:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800281a:	b29b      	uxth	r3, r3
 800281c:	3b01      	subs	r3, #1
 800281e:	b29a      	uxth	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002828:	b29b      	uxth	r3, r3
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1b2      	bne.n	8002794 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2220      	movs	r2, #32
 8002832:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8002836:	2300      	movs	r3, #0
 8002838:	e000      	b.n	800283c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800283a:	2302      	movs	r3, #2
  }
}
 800283c:	4618      	mov	r0, r3
 800283e:	3720      	adds	r7, #32
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b086      	sub	sp, #24
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	603b      	str	r3, [r7, #0]
 8002850:	4613      	mov	r3, r2
 8002852:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002854:	e03b      	b.n	80028ce <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002856:	6a3b      	ldr	r3, [r7, #32]
 8002858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800285c:	d037      	beq.n	80028ce <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800285e:	f7fe fb4b 	bl	8000ef8 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	6a3a      	ldr	r2, [r7, #32]
 800286a:	429a      	cmp	r2, r3
 800286c:	d302      	bcc.n	8002874 <UART_WaitOnFlagUntilTimeout+0x30>
 800286e:	6a3b      	ldr	r3, [r7, #32]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d101      	bne.n	8002878 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e03a      	b.n	80028ee <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	f003 0304 	and.w	r3, r3, #4
 8002882:	2b00      	cmp	r3, #0
 8002884:	d023      	beq.n	80028ce <UART_WaitOnFlagUntilTimeout+0x8a>
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	2b80      	cmp	r3, #128	@ 0x80
 800288a:	d020      	beq.n	80028ce <UART_WaitOnFlagUntilTimeout+0x8a>
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	2b40      	cmp	r3, #64	@ 0x40
 8002890:	d01d      	beq.n	80028ce <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0308 	and.w	r3, r3, #8
 800289c:	2b08      	cmp	r3, #8
 800289e:	d116      	bne.n	80028ce <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80028a0:	2300      	movs	r3, #0
 80028a2:	617b      	str	r3, [r7, #20]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	617b      	str	r3, [r7, #20]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	617b      	str	r3, [r7, #20]
 80028b4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80028b6:	68f8      	ldr	r0, [r7, #12]
 80028b8:	f000 f81d 	bl	80028f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2208      	movs	r2, #8
 80028c0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e00f      	b.n	80028ee <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	4013      	ands	r3, r2
 80028d8:	68ba      	ldr	r2, [r7, #8]
 80028da:	429a      	cmp	r2, r3
 80028dc:	bf0c      	ite	eq
 80028de:	2301      	moveq	r3, #1
 80028e0:	2300      	movne	r3, #0
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	461a      	mov	r2, r3
 80028e6:	79fb      	ldrb	r3, [r7, #7]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d0b4      	beq.n	8002856 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3718      	adds	r7, #24
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80028f6:	b480      	push	{r7}
 80028f8:	b095      	sub	sp, #84	@ 0x54
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	330c      	adds	r3, #12
 8002904:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002906:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002908:	e853 3f00 	ldrex	r3, [r3]
 800290c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800290e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002910:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002914:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	330c      	adds	r3, #12
 800291c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800291e:	643a      	str	r2, [r7, #64]	@ 0x40
 8002920:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002922:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002924:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002926:	e841 2300 	strex	r3, r2, [r1]
 800292a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800292c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1e5      	bne.n	80028fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	3314      	adds	r3, #20
 8002938:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800293a:	6a3b      	ldr	r3, [r7, #32]
 800293c:	e853 3f00 	ldrex	r3, [r3]
 8002940:	61fb      	str	r3, [r7, #28]
   return(result);
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	f023 0301 	bic.w	r3, r3, #1
 8002948:	64bb      	str	r3, [r7, #72]	@ 0x48
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	3314      	adds	r3, #20
 8002950:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002952:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002954:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002956:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002958:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800295a:	e841 2300 	strex	r3, r2, [r1]
 800295e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1e5      	bne.n	8002932 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800296a:	2b01      	cmp	r3, #1
 800296c:	d119      	bne.n	80029a2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	330c      	adds	r3, #12
 8002974:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	e853 3f00 	ldrex	r3, [r3]
 800297c:	60bb      	str	r3, [r7, #8]
   return(result);
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	f023 0310 	bic.w	r3, r3, #16
 8002984:	647b      	str	r3, [r7, #68]	@ 0x44
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	330c      	adds	r3, #12
 800298c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800298e:	61ba      	str	r2, [r7, #24]
 8002990:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002992:	6979      	ldr	r1, [r7, #20]
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	e841 2300 	strex	r3, r2, [r1]
 800299a:	613b      	str	r3, [r7, #16]
   return(result);
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1e5      	bne.n	800296e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2220      	movs	r2, #32
 80029a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80029b0:	bf00      	nop
 80029b2:	3754      	adds	r7, #84	@ 0x54
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029c0:	b0c0      	sub	sp, #256	@ 0x100
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	691b      	ldr	r3, [r3, #16]
 80029d0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80029d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029d8:	68d9      	ldr	r1, [r3, #12]
 80029da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	ea40 0301 	orr.w	r3, r0, r1
 80029e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80029e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029ea:	689a      	ldr	r2, [r3, #8]
 80029ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	431a      	orrs	r2, r3
 80029f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	431a      	orrs	r2, r3
 80029fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a00:	69db      	ldr	r3, [r3, #28]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002a14:	f021 010c 	bic.w	r1, r1, #12
 8002a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002a22:	430b      	orrs	r3, r1
 8002a24:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a36:	6999      	ldr	r1, [r3, #24]
 8002a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	ea40 0301 	orr.w	r3, r0, r1
 8002a42:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	4b8f      	ldr	r3, [pc, #572]	@ (8002c88 <UART_SetConfig+0x2cc>)
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d005      	beq.n	8002a5c <UART_SetConfig+0xa0>
 8002a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	4b8d      	ldr	r3, [pc, #564]	@ (8002c8c <UART_SetConfig+0x2d0>)
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d104      	bne.n	8002a66 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a5c:	f7ff f98c 	bl	8001d78 <HAL_RCC_GetPCLK2Freq>
 8002a60:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002a64:	e003      	b.n	8002a6e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a66:	f7ff f973 	bl	8001d50 <HAL_RCC_GetPCLK1Freq>
 8002a6a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a72:	69db      	ldr	r3, [r3, #28]
 8002a74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a78:	f040 810c 	bne.w	8002c94 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a80:	2200      	movs	r2, #0
 8002a82:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002a86:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002a8a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002a8e:	4622      	mov	r2, r4
 8002a90:	462b      	mov	r3, r5
 8002a92:	1891      	adds	r1, r2, r2
 8002a94:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002a96:	415b      	adcs	r3, r3
 8002a98:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002a9a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002a9e:	4621      	mov	r1, r4
 8002aa0:	eb12 0801 	adds.w	r8, r2, r1
 8002aa4:	4629      	mov	r1, r5
 8002aa6:	eb43 0901 	adc.w	r9, r3, r1
 8002aaa:	f04f 0200 	mov.w	r2, #0
 8002aae:	f04f 0300 	mov.w	r3, #0
 8002ab2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ab6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002aba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002abe:	4690      	mov	r8, r2
 8002ac0:	4699      	mov	r9, r3
 8002ac2:	4623      	mov	r3, r4
 8002ac4:	eb18 0303 	adds.w	r3, r8, r3
 8002ac8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002acc:	462b      	mov	r3, r5
 8002ace:	eb49 0303 	adc.w	r3, r9, r3
 8002ad2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002ae2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002ae6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002aea:	460b      	mov	r3, r1
 8002aec:	18db      	adds	r3, r3, r3
 8002aee:	653b      	str	r3, [r7, #80]	@ 0x50
 8002af0:	4613      	mov	r3, r2
 8002af2:	eb42 0303 	adc.w	r3, r2, r3
 8002af6:	657b      	str	r3, [r7, #84]	@ 0x54
 8002af8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002afc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002b00:	f7fd fb6a 	bl	80001d8 <__aeabi_uldivmod>
 8002b04:	4602      	mov	r2, r0
 8002b06:	460b      	mov	r3, r1
 8002b08:	4b61      	ldr	r3, [pc, #388]	@ (8002c90 <UART_SetConfig+0x2d4>)
 8002b0a:	fba3 2302 	umull	r2, r3, r3, r2
 8002b0e:	095b      	lsrs	r3, r3, #5
 8002b10:	011c      	lsls	r4, r3, #4
 8002b12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b16:	2200      	movs	r2, #0
 8002b18:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002b1c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002b20:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002b24:	4642      	mov	r2, r8
 8002b26:	464b      	mov	r3, r9
 8002b28:	1891      	adds	r1, r2, r2
 8002b2a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002b2c:	415b      	adcs	r3, r3
 8002b2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b30:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002b34:	4641      	mov	r1, r8
 8002b36:	eb12 0a01 	adds.w	sl, r2, r1
 8002b3a:	4649      	mov	r1, r9
 8002b3c:	eb43 0b01 	adc.w	fp, r3, r1
 8002b40:	f04f 0200 	mov.w	r2, #0
 8002b44:	f04f 0300 	mov.w	r3, #0
 8002b48:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002b4c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002b50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b54:	4692      	mov	sl, r2
 8002b56:	469b      	mov	fp, r3
 8002b58:	4643      	mov	r3, r8
 8002b5a:	eb1a 0303 	adds.w	r3, sl, r3
 8002b5e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002b62:	464b      	mov	r3, r9
 8002b64:	eb4b 0303 	adc.w	r3, fp, r3
 8002b68:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002b78:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002b7c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002b80:	460b      	mov	r3, r1
 8002b82:	18db      	adds	r3, r3, r3
 8002b84:	643b      	str	r3, [r7, #64]	@ 0x40
 8002b86:	4613      	mov	r3, r2
 8002b88:	eb42 0303 	adc.w	r3, r2, r3
 8002b8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b8e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002b92:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002b96:	f7fd fb1f 	bl	80001d8 <__aeabi_uldivmod>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	4611      	mov	r1, r2
 8002ba0:	4b3b      	ldr	r3, [pc, #236]	@ (8002c90 <UART_SetConfig+0x2d4>)
 8002ba2:	fba3 2301 	umull	r2, r3, r3, r1
 8002ba6:	095b      	lsrs	r3, r3, #5
 8002ba8:	2264      	movs	r2, #100	@ 0x64
 8002baa:	fb02 f303 	mul.w	r3, r2, r3
 8002bae:	1acb      	subs	r3, r1, r3
 8002bb0:	00db      	lsls	r3, r3, #3
 8002bb2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002bb6:	4b36      	ldr	r3, [pc, #216]	@ (8002c90 <UART_SetConfig+0x2d4>)
 8002bb8:	fba3 2302 	umull	r2, r3, r3, r2
 8002bbc:	095b      	lsrs	r3, r3, #5
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002bc4:	441c      	add	r4, r3
 8002bc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002bd0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002bd4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002bd8:	4642      	mov	r2, r8
 8002bda:	464b      	mov	r3, r9
 8002bdc:	1891      	adds	r1, r2, r2
 8002bde:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002be0:	415b      	adcs	r3, r3
 8002be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002be4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002be8:	4641      	mov	r1, r8
 8002bea:	1851      	adds	r1, r2, r1
 8002bec:	6339      	str	r1, [r7, #48]	@ 0x30
 8002bee:	4649      	mov	r1, r9
 8002bf0:	414b      	adcs	r3, r1
 8002bf2:	637b      	str	r3, [r7, #52]	@ 0x34
 8002bf4:	f04f 0200 	mov.w	r2, #0
 8002bf8:	f04f 0300 	mov.w	r3, #0
 8002bfc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002c00:	4659      	mov	r1, fp
 8002c02:	00cb      	lsls	r3, r1, #3
 8002c04:	4651      	mov	r1, sl
 8002c06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c0a:	4651      	mov	r1, sl
 8002c0c:	00ca      	lsls	r2, r1, #3
 8002c0e:	4610      	mov	r0, r2
 8002c10:	4619      	mov	r1, r3
 8002c12:	4603      	mov	r3, r0
 8002c14:	4642      	mov	r2, r8
 8002c16:	189b      	adds	r3, r3, r2
 8002c18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002c1c:	464b      	mov	r3, r9
 8002c1e:	460a      	mov	r2, r1
 8002c20:	eb42 0303 	adc.w	r3, r2, r3
 8002c24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002c34:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002c38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	18db      	adds	r3, r3, r3
 8002c40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c42:	4613      	mov	r3, r2
 8002c44:	eb42 0303 	adc.w	r3, r2, r3
 8002c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002c4e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002c52:	f7fd fac1 	bl	80001d8 <__aeabi_uldivmod>
 8002c56:	4602      	mov	r2, r0
 8002c58:	460b      	mov	r3, r1
 8002c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8002c90 <UART_SetConfig+0x2d4>)
 8002c5c:	fba3 1302 	umull	r1, r3, r3, r2
 8002c60:	095b      	lsrs	r3, r3, #5
 8002c62:	2164      	movs	r1, #100	@ 0x64
 8002c64:	fb01 f303 	mul.w	r3, r1, r3
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	3332      	adds	r3, #50	@ 0x32
 8002c6e:	4a08      	ldr	r2, [pc, #32]	@ (8002c90 <UART_SetConfig+0x2d4>)
 8002c70:	fba2 2303 	umull	r2, r3, r2, r3
 8002c74:	095b      	lsrs	r3, r3, #5
 8002c76:	f003 0207 	and.w	r2, r3, #7
 8002c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4422      	add	r2, r4
 8002c82:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002c84:	e106      	b.n	8002e94 <UART_SetConfig+0x4d8>
 8002c86:	bf00      	nop
 8002c88:	40011000 	.word	0x40011000
 8002c8c:	40011400 	.word	0x40011400
 8002c90:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002c9e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002ca2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002ca6:	4642      	mov	r2, r8
 8002ca8:	464b      	mov	r3, r9
 8002caa:	1891      	adds	r1, r2, r2
 8002cac:	6239      	str	r1, [r7, #32]
 8002cae:	415b      	adcs	r3, r3
 8002cb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cb2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002cb6:	4641      	mov	r1, r8
 8002cb8:	1854      	adds	r4, r2, r1
 8002cba:	4649      	mov	r1, r9
 8002cbc:	eb43 0501 	adc.w	r5, r3, r1
 8002cc0:	f04f 0200 	mov.w	r2, #0
 8002cc4:	f04f 0300 	mov.w	r3, #0
 8002cc8:	00eb      	lsls	r3, r5, #3
 8002cca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cce:	00e2      	lsls	r2, r4, #3
 8002cd0:	4614      	mov	r4, r2
 8002cd2:	461d      	mov	r5, r3
 8002cd4:	4643      	mov	r3, r8
 8002cd6:	18e3      	adds	r3, r4, r3
 8002cd8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002cdc:	464b      	mov	r3, r9
 8002cde:	eb45 0303 	adc.w	r3, r5, r3
 8002ce2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002cf2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002cf6:	f04f 0200 	mov.w	r2, #0
 8002cfa:	f04f 0300 	mov.w	r3, #0
 8002cfe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002d02:	4629      	mov	r1, r5
 8002d04:	008b      	lsls	r3, r1, #2
 8002d06:	4621      	mov	r1, r4
 8002d08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d0c:	4621      	mov	r1, r4
 8002d0e:	008a      	lsls	r2, r1, #2
 8002d10:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002d14:	f7fd fa60 	bl	80001d8 <__aeabi_uldivmod>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	4b60      	ldr	r3, [pc, #384]	@ (8002ea0 <UART_SetConfig+0x4e4>)
 8002d1e:	fba3 2302 	umull	r2, r3, r3, r2
 8002d22:	095b      	lsrs	r3, r3, #5
 8002d24:	011c      	lsls	r4, r3, #4
 8002d26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002d30:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002d34:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002d38:	4642      	mov	r2, r8
 8002d3a:	464b      	mov	r3, r9
 8002d3c:	1891      	adds	r1, r2, r2
 8002d3e:	61b9      	str	r1, [r7, #24]
 8002d40:	415b      	adcs	r3, r3
 8002d42:	61fb      	str	r3, [r7, #28]
 8002d44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d48:	4641      	mov	r1, r8
 8002d4a:	1851      	adds	r1, r2, r1
 8002d4c:	6139      	str	r1, [r7, #16]
 8002d4e:	4649      	mov	r1, r9
 8002d50:	414b      	adcs	r3, r1
 8002d52:	617b      	str	r3, [r7, #20]
 8002d54:	f04f 0200 	mov.w	r2, #0
 8002d58:	f04f 0300 	mov.w	r3, #0
 8002d5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d60:	4659      	mov	r1, fp
 8002d62:	00cb      	lsls	r3, r1, #3
 8002d64:	4651      	mov	r1, sl
 8002d66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d6a:	4651      	mov	r1, sl
 8002d6c:	00ca      	lsls	r2, r1, #3
 8002d6e:	4610      	mov	r0, r2
 8002d70:	4619      	mov	r1, r3
 8002d72:	4603      	mov	r3, r0
 8002d74:	4642      	mov	r2, r8
 8002d76:	189b      	adds	r3, r3, r2
 8002d78:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002d7c:	464b      	mov	r3, r9
 8002d7e:	460a      	mov	r2, r1
 8002d80:	eb42 0303 	adc.w	r3, r2, r3
 8002d84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002d92:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002d94:	f04f 0200 	mov.w	r2, #0
 8002d98:	f04f 0300 	mov.w	r3, #0
 8002d9c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002da0:	4649      	mov	r1, r9
 8002da2:	008b      	lsls	r3, r1, #2
 8002da4:	4641      	mov	r1, r8
 8002da6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002daa:	4641      	mov	r1, r8
 8002dac:	008a      	lsls	r2, r1, #2
 8002dae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002db2:	f7fd fa11 	bl	80001d8 <__aeabi_uldivmod>
 8002db6:	4602      	mov	r2, r0
 8002db8:	460b      	mov	r3, r1
 8002dba:	4611      	mov	r1, r2
 8002dbc:	4b38      	ldr	r3, [pc, #224]	@ (8002ea0 <UART_SetConfig+0x4e4>)
 8002dbe:	fba3 2301 	umull	r2, r3, r3, r1
 8002dc2:	095b      	lsrs	r3, r3, #5
 8002dc4:	2264      	movs	r2, #100	@ 0x64
 8002dc6:	fb02 f303 	mul.w	r3, r2, r3
 8002dca:	1acb      	subs	r3, r1, r3
 8002dcc:	011b      	lsls	r3, r3, #4
 8002dce:	3332      	adds	r3, #50	@ 0x32
 8002dd0:	4a33      	ldr	r2, [pc, #204]	@ (8002ea0 <UART_SetConfig+0x4e4>)
 8002dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd6:	095b      	lsrs	r3, r3, #5
 8002dd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ddc:	441c      	add	r4, r3
 8002dde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002de2:	2200      	movs	r2, #0
 8002de4:	673b      	str	r3, [r7, #112]	@ 0x70
 8002de6:	677a      	str	r2, [r7, #116]	@ 0x74
 8002de8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002dec:	4642      	mov	r2, r8
 8002dee:	464b      	mov	r3, r9
 8002df0:	1891      	adds	r1, r2, r2
 8002df2:	60b9      	str	r1, [r7, #8]
 8002df4:	415b      	adcs	r3, r3
 8002df6:	60fb      	str	r3, [r7, #12]
 8002df8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002dfc:	4641      	mov	r1, r8
 8002dfe:	1851      	adds	r1, r2, r1
 8002e00:	6039      	str	r1, [r7, #0]
 8002e02:	4649      	mov	r1, r9
 8002e04:	414b      	adcs	r3, r1
 8002e06:	607b      	str	r3, [r7, #4]
 8002e08:	f04f 0200 	mov.w	r2, #0
 8002e0c:	f04f 0300 	mov.w	r3, #0
 8002e10:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002e14:	4659      	mov	r1, fp
 8002e16:	00cb      	lsls	r3, r1, #3
 8002e18:	4651      	mov	r1, sl
 8002e1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e1e:	4651      	mov	r1, sl
 8002e20:	00ca      	lsls	r2, r1, #3
 8002e22:	4610      	mov	r0, r2
 8002e24:	4619      	mov	r1, r3
 8002e26:	4603      	mov	r3, r0
 8002e28:	4642      	mov	r2, r8
 8002e2a:	189b      	adds	r3, r3, r2
 8002e2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002e2e:	464b      	mov	r3, r9
 8002e30:	460a      	mov	r2, r1
 8002e32:	eb42 0303 	adc.w	r3, r2, r3
 8002e36:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	663b      	str	r3, [r7, #96]	@ 0x60
 8002e42:	667a      	str	r2, [r7, #100]	@ 0x64
 8002e44:	f04f 0200 	mov.w	r2, #0
 8002e48:	f04f 0300 	mov.w	r3, #0
 8002e4c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002e50:	4649      	mov	r1, r9
 8002e52:	008b      	lsls	r3, r1, #2
 8002e54:	4641      	mov	r1, r8
 8002e56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e5a:	4641      	mov	r1, r8
 8002e5c:	008a      	lsls	r2, r1, #2
 8002e5e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002e62:	f7fd f9b9 	bl	80001d8 <__aeabi_uldivmod>
 8002e66:	4602      	mov	r2, r0
 8002e68:	460b      	mov	r3, r1
 8002e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8002ea0 <UART_SetConfig+0x4e4>)
 8002e6c:	fba3 1302 	umull	r1, r3, r3, r2
 8002e70:	095b      	lsrs	r3, r3, #5
 8002e72:	2164      	movs	r1, #100	@ 0x64
 8002e74:	fb01 f303 	mul.w	r3, r1, r3
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	011b      	lsls	r3, r3, #4
 8002e7c:	3332      	adds	r3, #50	@ 0x32
 8002e7e:	4a08      	ldr	r2, [pc, #32]	@ (8002ea0 <UART_SetConfig+0x4e4>)
 8002e80:	fba2 2303 	umull	r2, r3, r2, r3
 8002e84:	095b      	lsrs	r3, r3, #5
 8002e86:	f003 020f 	and.w	r2, r3, #15
 8002e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4422      	add	r2, r4
 8002e92:	609a      	str	r2, [r3, #8]
}
 8002e94:	bf00      	nop
 8002e96:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ea0:	51eb851f 	.word	0x51eb851f

08002ea4 <memset>:
 8002ea4:	4402      	add	r2, r0
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d100      	bne.n	8002eae <memset+0xa>
 8002eac:	4770      	bx	lr
 8002eae:	f803 1b01 	strb.w	r1, [r3], #1
 8002eb2:	e7f9      	b.n	8002ea8 <memset+0x4>

08002eb4 <__libc_init_array>:
 8002eb4:	b570      	push	{r4, r5, r6, lr}
 8002eb6:	4d0d      	ldr	r5, [pc, #52]	@ (8002eec <__libc_init_array+0x38>)
 8002eb8:	4c0d      	ldr	r4, [pc, #52]	@ (8002ef0 <__libc_init_array+0x3c>)
 8002eba:	1b64      	subs	r4, r4, r5
 8002ebc:	10a4      	asrs	r4, r4, #2
 8002ebe:	2600      	movs	r6, #0
 8002ec0:	42a6      	cmp	r6, r4
 8002ec2:	d109      	bne.n	8002ed8 <__libc_init_array+0x24>
 8002ec4:	4d0b      	ldr	r5, [pc, #44]	@ (8002ef4 <__libc_init_array+0x40>)
 8002ec6:	4c0c      	ldr	r4, [pc, #48]	@ (8002ef8 <__libc_init_array+0x44>)
 8002ec8:	f000 f818 	bl	8002efc <_init>
 8002ecc:	1b64      	subs	r4, r4, r5
 8002ece:	10a4      	asrs	r4, r4, #2
 8002ed0:	2600      	movs	r6, #0
 8002ed2:	42a6      	cmp	r6, r4
 8002ed4:	d105      	bne.n	8002ee2 <__libc_init_array+0x2e>
 8002ed6:	bd70      	pop	{r4, r5, r6, pc}
 8002ed8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002edc:	4798      	blx	r3
 8002ede:	3601      	adds	r6, #1
 8002ee0:	e7ee      	b.n	8002ec0 <__libc_init_array+0xc>
 8002ee2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ee6:	4798      	blx	r3
 8002ee8:	3601      	adds	r6, #1
 8002eea:	e7f2      	b.n	8002ed2 <__libc_init_array+0x1e>
 8002eec:	08002f34 	.word	0x08002f34
 8002ef0:	08002f34 	.word	0x08002f34
 8002ef4:	08002f34 	.word	0x08002f34
 8002ef8:	08002f38 	.word	0x08002f38

08002efc <_init>:
 8002efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002efe:	bf00      	nop
 8002f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f02:	bc08      	pop	{r3}
 8002f04:	469e      	mov	lr, r3
 8002f06:	4770      	bx	lr

08002f08 <_fini>:
 8002f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f0a:	bf00      	nop
 8002f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f0e:	bc08      	pop	{r3}
 8002f10:	469e      	mov	lr, r3
 8002f12:	4770      	bx	lr
