
012_PETIT_MODBUS_CODE_MERGE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000452c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  0800470c  0800470c  0000570c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800479c  0800479c  00006060  2**0
                  CONTENTS
  4 .ARM          00000008  0800479c  0800479c  0000579c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047a4  080047a4  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047a4  080047a4  000057a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080047a8  080047a8  000057a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080047ac  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000029c  20000060  0800480c  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002fc  0800480c  000062fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011dc2  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000234a  00000000  00000000  00017e52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe8  00000000  00000000  0001a1a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c72  00000000  00000000  0001b188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026243  00000000  00000000  0001bdfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012865  00000000  00000000  0004203d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb138  00000000  00000000  000548a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014f9da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048d4  00000000  00000000  0014fa20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  001542f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000060 	.word	0x20000060
 80001fc:	00000000 	.word	0x00000000
 8000200:	080046f4 	.word	0x080046f4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000064 	.word	0x20000064
 800021c:	080046f4 	.word	0x080046f4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <WRITE_DATA>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int counter =0;
char testchar ='B';

void WRITE_DATA(void){
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
	while(!(huart2.Instance->ISR % USART_ISR_RXNE));
 80005b6:	bf00      	nop
 80005b8:	4b13      	ldr	r3, [pc, #76]	@ (8000608 <WRITE_DATA+0x58>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	69db      	ldr	r3, [r3, #28]
 80005be:	f003 031f 	and.w	r3, r3, #31
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d0f8      	beq.n	80005b8 <WRITE_DATA+0x8>
	char reciver= huart2.Instance->RDR;
 80005c6:	4b10      	ldr	r3, [pc, #64]	@ (8000608 <WRITE_DATA+0x58>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005cc:	73fb      	strb	r3, [r7, #15]
	if(reciver==testchar){
 80005ce:	4b0f      	ldr	r3, [pc, #60]	@ (800060c <WRITE_DATA+0x5c>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	7bfa      	ldrb	r2, [r7, #15]
 80005d4:	429a      	cmp	r2, r3
 80005d6:	d112      	bne.n	80005fe <WRITE_DATA+0x4e>
		char RX_buffer[10]= " " ;
 80005d8:	2320      	movs	r3, #32
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	f107 0308 	add.w	r3, r7, #8
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	809a      	strh	r2, [r3, #4]
		sprintf(RX_buffer,"Char: %c\n",reciver);
 80005e6:	7bfa      	ldrb	r2, [r7, #15]
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	4909      	ldr	r1, [pc, #36]	@ (8000610 <WRITE_DATA+0x60>)
 80005ec:	4618      	mov	r0, r3
 80005ee:	f003 fbe1 	bl	8003db4 <siprintf>
		HAL_UART_Receive(&huart2, RX_buffer, sizeof(RX_buffer), 100);
 80005f2:	1d39      	adds	r1, r7, #4
 80005f4:	2364      	movs	r3, #100	@ 0x64
 80005f6:	220a      	movs	r2, #10
 80005f8:	4803      	ldr	r0, [pc, #12]	@ (8000608 <WRITE_DATA+0x58>)
 80005fa:	f002 fcf5 	bl	8002fe8 <HAL_UART_Receive>

		  	  }

}
 80005fe:	bf00      	nop
 8000600:	3710      	adds	r7, #16
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	20000114 	.word	0x20000114
 800060c:	20000000 	.word	0x20000000
 8000610:	0800470c 	.word	0x0800470c

08000614 <COUNTER>:

void COUNTER(void){
 8000614:	b580      	push	{r7, lr}
 8000616:	b08e      	sub	sp, #56	@ 0x38
 8000618:	af00      	add	r7, sp, #0
	counter++;
 800061a:	4b0f      	ldr	r3, [pc, #60]	@ (8000658 <COUNTER+0x44>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	3301      	adds	r3, #1
 8000620:	4a0d      	ldr	r2, [pc, #52]	@ (8000658 <COUNTER+0x44>)
 8000622:	6013      	str	r3, [r2, #0]
	char buffer[50]=" ";
 8000624:	2320      	movs	r3, #32
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	f107 0308 	add.w	r3, r7, #8
 800062c:	222e      	movs	r2, #46	@ 0x2e
 800062e:	2100      	movs	r1, #0
 8000630:	4618      	mov	r0, r3
 8000632:	f003 fbdf 	bl	8003df4 <memset>
	sprintf(buffer,"COUNTER: %d\n",counter);
 8000636:	4b08      	ldr	r3, [pc, #32]	@ (8000658 <COUNTER+0x44>)
 8000638:	681a      	ldr	r2, [r3, #0]
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	4907      	ldr	r1, [pc, #28]	@ (800065c <COUNTER+0x48>)
 800063e:	4618      	mov	r0, r3
 8000640:	f003 fbb8 	bl	8003db4 <siprintf>
	HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), 100);
 8000644:	1d39      	adds	r1, r7, #4
 8000646:	2364      	movs	r3, #100	@ 0x64
 8000648:	2232      	movs	r2, #50	@ 0x32
 800064a:	4805      	ldr	r0, [pc, #20]	@ (8000660 <COUNTER+0x4c>)
 800064c:	f002 fc3e 	bl	8002ecc <HAL_UART_Transmit>
}
 8000650:	bf00      	nop
 8000652:	3738      	adds	r7, #56	@ 0x38
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	200001a8 	.word	0x200001a8
 800065c:	08004718 	.word	0x08004718
 8000660:	20000114 	.word	0x20000114

08000664 <PETIT_MODBUS>:
void PETIT_MODBUS(int c){
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]

	while(!(huart2.Instance->ISR & USART_ISR_TC)); //ISR ve TC bayraklarını kontrol ediyoruz eğer veri iletilmişse yani tc bayrağı 1 olmuşsa ve ISR veri gelmişse ve gitmişse...
 800066c:	bf00      	nop
 800066e:	4b08      	ldr	r3, [pc, #32]	@ (8000690 <PETIT_MODBUS+0x2c>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	69db      	ldr	r3, [r3, #28]
 8000674:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000678:	2b00      	cmp	r3, #0
 800067a:	d0f8      	beq.n	800066e <PETIT_MODBUS+0xa>
	huart2.Instance->TDR = c;	// TDR(Transmit Data Register) registerına c değerini yaz
 800067c:	4b04      	ldr	r3, [pc, #16]	@ (8000690 <PETIT_MODBUS+0x2c>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	687a      	ldr	r2, [r7, #4]
 8000682:	629a      	str	r2, [r3, #40]	@ 0x28

}
 8000684:	bf00      	nop
 8000686:	370c      	adds	r7, #12
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr
 8000690:	20000114 	.word	0x20000114

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000698:	f000 faf3 	bl	8000c82 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069c:	f000 f818 	bl	80006d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a0:	f000 f928 	bl	80008f4 <MX_GPIO_Init>
  MX_TIM1_Init();
 80006a4:	f000 f860 	bl	8000768 <MX_TIM1_Init>
  MX_TIM16_Init();
 80006a8:	f000 f8b2 	bl	8000810 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 80006ac:	f000 f8d6 	bl	800085c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_Base_Start_IT(&htim16);
 80006b0:	4805      	ldr	r0, [pc, #20]	@ (80006c8 <main+0x34>)
 80006b2:	f001 fe89 	bl	80023c8 <HAL_TIM_Base_Start_IT>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  PETIT_MODBUS(testchar);
 80006b6:	4b05      	ldr	r3, [pc, #20]	@ (80006cc <main+0x38>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff ffd2 	bl	8000664 <PETIT_MODBUS>
	  WRITE_DATA();
 80006c0:	f7ff ff76 	bl	80005b0 <WRITE_DATA>
	  PETIT_MODBUS(testchar);
 80006c4:	bf00      	nop
 80006c6:	e7f6      	b.n	80006b6 <main+0x22>
 80006c8:	200000c8 	.word	0x200000c8
 80006cc:	20000000 	.word	0x20000000

080006d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b094      	sub	sp, #80	@ 0x50
 80006d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d6:	f107 0318 	add.w	r3, r7, #24
 80006da:	2238      	movs	r2, #56	@ 0x38
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f003 fb88 	bl	8003df4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
 80006f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80006f2:	2000      	movs	r0, #0
 80006f4:	f000 fde0 	bl	80012b8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f8:	2302      	movs	r3, #2
 80006fa:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000700:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000702:	2340      	movs	r3, #64	@ 0x40
 8000704:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000706:	2302      	movs	r3, #2
 8000708:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800070a:	2302      	movs	r3, #2
 800070c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800070e:	2304      	movs	r3, #4
 8000710:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000712:	2355      	movs	r3, #85	@ 0x55
 8000714:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000716:	2302      	movs	r3, #2
 8000718:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800071a:	2302      	movs	r3, #2
 800071c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800071e:	2302      	movs	r3, #2
 8000720:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000722:	f107 0318 	add.w	r3, r7, #24
 8000726:	4618      	mov	r0, r3
 8000728:	f000 fe7a 	bl	8001420 <HAL_RCC_OscConfig>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000732:	f000 f933 	bl	800099c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000736:	230f      	movs	r3, #15
 8000738:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073a:	2303      	movs	r3, #3
 800073c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073e:	2300      	movs	r3, #0
 8000740:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000742:	2300      	movs	r3, #0
 8000744:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000746:	2300      	movs	r3, #0
 8000748:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800074a:	1d3b      	adds	r3, r7, #4
 800074c:	2104      	movs	r1, #4
 800074e:	4618      	mov	r0, r3
 8000750:	f001 f978 	bl	8001a44 <HAL_RCC_ClockConfig>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800075a:	f000 f91f 	bl	800099c <Error_Handler>
  }
}
 800075e:	bf00      	nop
 8000760:	3750      	adds	r7, #80	@ 0x50
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
	...

08000768 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b088      	sub	sp, #32
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800076e:	f107 0310 	add.w	r3, r7, #16
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800077c:	1d3b      	adds	r3, r7, #4
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000786:	4b20      	ldr	r3, [pc, #128]	@ (8000808 <MX_TIM1_Init+0xa0>)
 8000788:	4a20      	ldr	r2, [pc, #128]	@ (800080c <MX_TIM1_Init+0xa4>)
 800078a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800078c:	4b1e      	ldr	r3, [pc, #120]	@ (8000808 <MX_TIM1_Init+0xa0>)
 800078e:	2200      	movs	r2, #0
 8000790:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000792:	4b1d      	ldr	r3, [pc, #116]	@ (8000808 <MX_TIM1_Init+0xa0>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000798:	4b1b      	ldr	r3, [pc, #108]	@ (8000808 <MX_TIM1_Init+0xa0>)
 800079a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800079e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007a0:	4b19      	ldr	r3, [pc, #100]	@ (8000808 <MX_TIM1_Init+0xa0>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007a6:	4b18      	ldr	r3, [pc, #96]	@ (8000808 <MX_TIM1_Init+0xa0>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ac:	4b16      	ldr	r3, [pc, #88]	@ (8000808 <MX_TIM1_Init+0xa0>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007b2:	4815      	ldr	r0, [pc, #84]	@ (8000808 <MX_TIM1_Init+0xa0>)
 80007b4:	f001 fdb0 	bl	8002318 <HAL_TIM_Base_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80007be:	f000 f8ed 	bl	800099c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007c8:	f107 0310 	add.w	r3, r7, #16
 80007cc:	4619      	mov	r1, r3
 80007ce:	480e      	ldr	r0, [pc, #56]	@ (8000808 <MX_TIM1_Init+0xa0>)
 80007d0:	f001 ffc2 	bl	8002758 <HAL_TIM_ConfigClockSource>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80007da:	f000 f8df 	bl	800099c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80007e2:	2300      	movs	r3, #0
 80007e4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007e6:	2300      	movs	r3, #0
 80007e8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	4619      	mov	r1, r3
 80007ee:	4806      	ldr	r0, [pc, #24]	@ (8000808 <MX_TIM1_Init+0xa0>)
 80007f0:	f002 fa40 	bl	8002c74 <HAL_TIMEx_MasterConfigSynchronization>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80007fa:	f000 f8cf 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80007fe:	bf00      	nop
 8000800:	3720      	adds	r7, #32
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	2000007c 	.word	0x2000007c
 800080c:	40012c00 	.word	0x40012c00

08000810 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000814:	4b0f      	ldr	r3, [pc, #60]	@ (8000854 <MX_TIM16_Init+0x44>)
 8000816:	4a10      	ldr	r2, [pc, #64]	@ (8000858 <MX_TIM16_Init+0x48>)
 8000818:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 17000;
 800081a:	4b0e      	ldr	r3, [pc, #56]	@ (8000854 <MX_TIM16_Init+0x44>)
 800081c:	f244 2268 	movw	r2, #17000	@ 0x4268
 8000820:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000822:	4b0c      	ldr	r3, [pc, #48]	@ (8000854 <MX_TIM16_Init+0x44>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10;
 8000828:	4b0a      	ldr	r3, [pc, #40]	@ (8000854 <MX_TIM16_Init+0x44>)
 800082a:	220a      	movs	r2, #10
 800082c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800082e:	4b09      	ldr	r3, [pc, #36]	@ (8000854 <MX_TIM16_Init+0x44>)
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000834:	4b07      	ldr	r3, [pc, #28]	@ (8000854 <MX_TIM16_Init+0x44>)
 8000836:	2200      	movs	r2, #0
 8000838:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800083a:	4b06      	ldr	r3, [pc, #24]	@ (8000854 <MX_TIM16_Init+0x44>)
 800083c:	2200      	movs	r2, #0
 800083e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000840:	4804      	ldr	r0, [pc, #16]	@ (8000854 <MX_TIM16_Init+0x44>)
 8000842:	f001 fd69 	bl	8002318 <HAL_TIM_Base_Init>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 800084c:	f000 f8a6 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000850:	bf00      	nop
 8000852:	bd80      	pop	{r7, pc}
 8000854:	200000c8 	.word	0x200000c8
 8000858:	40014400 	.word	0x40014400

0800085c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000860:	4b22      	ldr	r3, [pc, #136]	@ (80008ec <MX_USART2_UART_Init+0x90>)
 8000862:	4a23      	ldr	r2, [pc, #140]	@ (80008f0 <MX_USART2_UART_Init+0x94>)
 8000864:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000866:	4b21      	ldr	r3, [pc, #132]	@ (80008ec <MX_USART2_UART_Init+0x90>)
 8000868:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800086c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800086e:	4b1f      	ldr	r3, [pc, #124]	@ (80008ec <MX_USART2_UART_Init+0x90>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000874:	4b1d      	ldr	r3, [pc, #116]	@ (80008ec <MX_USART2_UART_Init+0x90>)
 8000876:	2200      	movs	r2, #0
 8000878:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800087a:	4b1c      	ldr	r3, [pc, #112]	@ (80008ec <MX_USART2_UART_Init+0x90>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000880:	4b1a      	ldr	r3, [pc, #104]	@ (80008ec <MX_USART2_UART_Init+0x90>)
 8000882:	220c      	movs	r2, #12
 8000884:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000886:	4b19      	ldr	r3, [pc, #100]	@ (80008ec <MX_USART2_UART_Init+0x90>)
 8000888:	2200      	movs	r2, #0
 800088a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800088c:	4b17      	ldr	r3, [pc, #92]	@ (80008ec <MX_USART2_UART_Init+0x90>)
 800088e:	2200      	movs	r2, #0
 8000890:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000892:	4b16      	ldr	r3, [pc, #88]	@ (80008ec <MX_USART2_UART_Init+0x90>)
 8000894:	2200      	movs	r2, #0
 8000896:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000898:	4b14      	ldr	r3, [pc, #80]	@ (80008ec <MX_USART2_UART_Init+0x90>)
 800089a:	2200      	movs	r2, #0
 800089c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800089e:	4b13      	ldr	r3, [pc, #76]	@ (80008ec <MX_USART2_UART_Init+0x90>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008a4:	4811      	ldr	r0, [pc, #68]	@ (80008ec <MX_USART2_UART_Init+0x90>)
 80008a6:	f002 fac1 	bl	8002e2c <HAL_UART_Init>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80008b0:	f000 f874 	bl	800099c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008b4:	2100      	movs	r1, #0
 80008b6:	480d      	ldr	r0, [pc, #52]	@ (80008ec <MX_USART2_UART_Init+0x90>)
 80008b8:	f003 f9b2 	bl	8003c20 <HAL_UARTEx_SetTxFifoThreshold>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80008c2:	f000 f86b 	bl	800099c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008c6:	2100      	movs	r1, #0
 80008c8:	4808      	ldr	r0, [pc, #32]	@ (80008ec <MX_USART2_UART_Init+0x90>)
 80008ca:	f003 f9e7 	bl	8003c9c <HAL_UARTEx_SetRxFifoThreshold>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80008d4:	f000 f862 	bl	800099c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80008d8:	4804      	ldr	r0, [pc, #16]	@ (80008ec <MX_USART2_UART_Init+0x90>)
 80008da:	f003 f968 	bl	8003bae <HAL_UARTEx_DisableFifoMode>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80008e4:	f000 f85a 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	20000114 	.word	0x20000114
 80008f0:	40004400 	.word	0x40004400

080008f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b088      	sub	sp, #32
 80008f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fa:	f107 030c 	add.w	r3, r7, #12
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	605a      	str	r2, [r3, #4]
 8000904:	609a      	str	r2, [r3, #8]
 8000906:	60da      	str	r2, [r3, #12]
 8000908:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800090a:	4b1e      	ldr	r3, [pc, #120]	@ (8000984 <MX_GPIO_Init+0x90>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800090e:	4a1d      	ldr	r2, [pc, #116]	@ (8000984 <MX_GPIO_Init+0x90>)
 8000910:	f043 0304 	orr.w	r3, r3, #4
 8000914:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000916:	4b1b      	ldr	r3, [pc, #108]	@ (8000984 <MX_GPIO_Init+0x90>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800091a:	f003 0304 	and.w	r3, r3, #4
 800091e:	60bb      	str	r3, [r7, #8]
 8000920:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000922:	4b18      	ldr	r3, [pc, #96]	@ (8000984 <MX_GPIO_Init+0x90>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000926:	4a17      	ldr	r2, [pc, #92]	@ (8000984 <MX_GPIO_Init+0x90>)
 8000928:	f043 0320 	orr.w	r3, r3, #32
 800092c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800092e:	4b15      	ldr	r3, [pc, #84]	@ (8000984 <MX_GPIO_Init+0x90>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000932:	f003 0320 	and.w	r3, r3, #32
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800093a:	4b12      	ldr	r3, [pc, #72]	@ (8000984 <MX_GPIO_Init+0x90>)
 800093c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800093e:	4a11      	ldr	r2, [pc, #68]	@ (8000984 <MX_GPIO_Init+0x90>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000946:	4b0f      	ldr	r3, [pc, #60]	@ (8000984 <MX_GPIO_Init+0x90>)
 8000948:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	603b      	str	r3, [r7, #0]
 8000950:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	2120      	movs	r1, #32
 8000956:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800095a:	f000 fc95 	bl	8001288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800095e:	2320      	movs	r3, #32
 8000960:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000962:	2301      	movs	r3, #1
 8000964:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096a:	2300      	movs	r3, #0
 800096c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800096e:	f107 030c 	add.w	r3, r7, #12
 8000972:	4619      	mov	r1, r3
 8000974:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000978:	f000 fb04 	bl	8000f84 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800097c:	bf00      	nop
 800097e:	3720      	adds	r7, #32
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	40021000 	.word	0x40021000

08000988 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]

	COUNTER();
 8000990:	f7ff fe40 	bl	8000614 <COUNTER>

}
 8000994:	bf00      	nop
 8000996:	3708      	adds	r7, #8
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}

0800099c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a0:	b672      	cpsid	i
}
 80009a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a4:	bf00      	nop
 80009a6:	e7fd      	b.n	80009a4 <Error_Handler+0x8>

080009a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ae:	4b0f      	ldr	r3, [pc, #60]	@ (80009ec <HAL_MspInit+0x44>)
 80009b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009b2:	4a0e      	ldr	r2, [pc, #56]	@ (80009ec <HAL_MspInit+0x44>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	6613      	str	r3, [r2, #96]	@ 0x60
 80009ba:	4b0c      	ldr	r3, [pc, #48]	@ (80009ec <HAL_MspInit+0x44>)
 80009bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	607b      	str	r3, [r7, #4]
 80009c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c6:	4b09      	ldr	r3, [pc, #36]	@ (80009ec <HAL_MspInit+0x44>)
 80009c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009ca:	4a08      	ldr	r2, [pc, #32]	@ (80009ec <HAL_MspInit+0x44>)
 80009cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80009d2:	4b06      	ldr	r3, [pc, #24]	@ (80009ec <HAL_MspInit+0x44>)
 80009d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009da:	603b      	str	r3, [r7, #0]
 80009dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80009de:	f000 fd0f 	bl	8001400 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e2:	bf00      	nop
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40021000 	.word	0x40021000

080009f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a1a      	ldr	r2, [pc, #104]	@ (8000a68 <HAL_TIM_Base_MspInit+0x78>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d114      	bne.n	8000a2c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a02:	4b1a      	ldr	r3, [pc, #104]	@ (8000a6c <HAL_TIM_Base_MspInit+0x7c>)
 8000a04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a06:	4a19      	ldr	r2, [pc, #100]	@ (8000a6c <HAL_TIM_Base_MspInit+0x7c>)
 8000a08:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000a0c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a0e:	4b17      	ldr	r3, [pc, #92]	@ (8000a6c <HAL_TIM_Base_MspInit+0x7c>)
 8000a10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a12:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	2019      	movs	r0, #25
 8000a20:	f000 fa7b 	bl	8000f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000a24:	2019      	movs	r0, #25
 8000a26:	f000 fa92 	bl	8000f4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000a2a:	e018      	b.n	8000a5e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM16)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a0f      	ldr	r2, [pc, #60]	@ (8000a70 <HAL_TIM_Base_MspInit+0x80>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d113      	bne.n	8000a5e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000a36:	4b0d      	ldr	r3, [pc, #52]	@ (8000a6c <HAL_TIM_Base_MspInit+0x7c>)
 8000a38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a3a:	4a0c      	ldr	r2, [pc, #48]	@ (8000a6c <HAL_TIM_Base_MspInit+0x7c>)
 8000a3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a40:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a42:	4b0a      	ldr	r3, [pc, #40]	@ (8000a6c <HAL_TIM_Base_MspInit+0x7c>)
 8000a44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a4a:	60bb      	str	r3, [r7, #8]
 8000a4c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2100      	movs	r1, #0
 8000a52:	2019      	movs	r0, #25
 8000a54:	f000 fa61 	bl	8000f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000a58:	2019      	movs	r0, #25
 8000a5a:	f000 fa78 	bl	8000f4e <HAL_NVIC_EnableIRQ>
}
 8000a5e:	bf00      	nop
 8000a60:	3710      	adds	r7, #16
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40012c00 	.word	0x40012c00
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	40014400 	.word	0x40014400

08000a74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b09e      	sub	sp, #120	@ 0x78
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a8c:	f107 0310 	add.w	r3, r7, #16
 8000a90:	2254      	movs	r2, #84	@ 0x54
 8000a92:	2100      	movs	r1, #0
 8000a94:	4618      	mov	r0, r3
 8000a96:	f003 f9ad 	bl	8003df4 <memset>
  if(huart->Instance==USART2)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4a1f      	ldr	r2, [pc, #124]	@ (8000b1c <HAL_UART_MspInit+0xa8>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d136      	bne.n	8000b12 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aac:	f107 0310 	add.w	r3, r7, #16
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f001 f9e3 	bl	8001e7c <HAL_RCCEx_PeriphCLKConfig>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000abc:	f7ff ff6e 	bl	800099c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ac0:	4b17      	ldr	r3, [pc, #92]	@ (8000b20 <HAL_UART_MspInit+0xac>)
 8000ac2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ac4:	4a16      	ldr	r2, [pc, #88]	@ (8000b20 <HAL_UART_MspInit+0xac>)
 8000ac6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000aca:	6593      	str	r3, [r2, #88]	@ 0x58
 8000acc:	4b14      	ldr	r3, [pc, #80]	@ (8000b20 <HAL_UART_MspInit+0xac>)
 8000ace:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ad0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad8:	4b11      	ldr	r3, [pc, #68]	@ (8000b20 <HAL_UART_MspInit+0xac>)
 8000ada:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000adc:	4a10      	ldr	r2, [pc, #64]	@ (8000b20 <HAL_UART_MspInit+0xac>)
 8000ade:	f043 0301 	orr.w	r3, r3, #1
 8000ae2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ae4:	4b0e      	ldr	r3, [pc, #56]	@ (8000b20 <HAL_UART_MspInit+0xac>)
 8000ae6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ae8:	f003 0301 	and.w	r3, r3, #1
 8000aec:	60bb      	str	r3, [r7, #8]
 8000aee:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000af0:	230c      	movs	r3, #12
 8000af2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af4:	2302      	movs	r3, #2
 8000af6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afc:	2300      	movs	r3, #0
 8000afe:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b00:	2307      	movs	r3, #7
 8000b02:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b04:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b08:	4619      	mov	r1, r3
 8000b0a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b0e:	f000 fa39 	bl	8000f84 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b12:	bf00      	nop
 8000b14:	3778      	adds	r7, #120	@ 0x78
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40004400 	.word	0x40004400
 8000b20:	40021000 	.word	0x40021000

08000b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b28:	bf00      	nop
 8000b2a:	e7fd      	b.n	8000b28 <NMI_Handler+0x4>

08000b2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b30:	bf00      	nop
 8000b32:	e7fd      	b.n	8000b30 <HardFault_Handler+0x4>

08000b34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b38:	bf00      	nop
 8000b3a:	e7fd      	b.n	8000b38 <MemManage_Handler+0x4>

08000b3c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b40:	bf00      	nop
 8000b42:	e7fd      	b.n	8000b40 <BusFault_Handler+0x4>

08000b44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b48:	bf00      	nop
 8000b4a:	e7fd      	b.n	8000b48 <UsageFault_Handler+0x4>

08000b4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr

08000b68 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr

08000b76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b7a:	f000 f8d5 	bl	8000d28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
	...

08000b84 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b88:	4803      	ldr	r0, [pc, #12]	@ (8000b98 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8000b8a:	f001 fc95 	bl	80024b8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8000b8e:	4803      	ldr	r0, [pc, #12]	@ (8000b9c <TIM1_UP_TIM16_IRQHandler+0x18>)
 8000b90:	f001 fc92 	bl	80024b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000b94:	bf00      	nop
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	2000007c 	.word	0x2000007c
 8000b9c:	200000c8 	.word	0x200000c8

08000ba0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ba8:	4a14      	ldr	r2, [pc, #80]	@ (8000bfc <_sbrk+0x5c>)
 8000baa:	4b15      	ldr	r3, [pc, #84]	@ (8000c00 <_sbrk+0x60>)
 8000bac:	1ad3      	subs	r3, r2, r3
 8000bae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bb4:	4b13      	ldr	r3, [pc, #76]	@ (8000c04 <_sbrk+0x64>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d102      	bne.n	8000bc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bbc:	4b11      	ldr	r3, [pc, #68]	@ (8000c04 <_sbrk+0x64>)
 8000bbe:	4a12      	ldr	r2, [pc, #72]	@ (8000c08 <_sbrk+0x68>)
 8000bc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bc2:	4b10      	ldr	r3, [pc, #64]	@ (8000c04 <_sbrk+0x64>)
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4413      	add	r3, r2
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	d207      	bcs.n	8000be0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bd0:	f003 f918 	bl	8003e04 <__errno>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	220c      	movs	r2, #12
 8000bd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bda:	f04f 33ff 	mov.w	r3, #4294967295
 8000bde:	e009      	b.n	8000bf4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000be0:	4b08      	ldr	r3, [pc, #32]	@ (8000c04 <_sbrk+0x64>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000be6:	4b07      	ldr	r3, [pc, #28]	@ (8000c04 <_sbrk+0x64>)
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4413      	add	r3, r2
 8000bee:	4a05      	ldr	r2, [pc, #20]	@ (8000c04 <_sbrk+0x64>)
 8000bf0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bf2:	68fb      	ldr	r3, [r7, #12]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3718      	adds	r7, #24
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	20020000 	.word	0x20020000
 8000c00:	00000400 	.word	0x00000400
 8000c04:	200001ac 	.word	0x200001ac
 8000c08:	20000300 	.word	0x20000300

08000c0c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c10:	4b06      	ldr	r3, [pc, #24]	@ (8000c2c <SystemInit+0x20>)
 8000c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c16:	4a05      	ldr	r2, [pc, #20]	@ (8000c2c <SystemInit+0x20>)
 8000c18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c30:	480d      	ldr	r0, [pc, #52]	@ (8000c68 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c32:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c34:	f7ff ffea 	bl	8000c0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c38:	480c      	ldr	r0, [pc, #48]	@ (8000c6c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c3a:	490d      	ldr	r1, [pc, #52]	@ (8000c70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c74 <LoopForever+0xe>)
  movs r3, #0
 8000c3e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000c40:	e002      	b.n	8000c48 <LoopCopyDataInit>

08000c42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c46:	3304      	adds	r3, #4

08000c48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c4c:	d3f9      	bcc.n	8000c42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c50:	4c0a      	ldr	r4, [pc, #40]	@ (8000c7c <LoopForever+0x16>)
  movs r3, #0
 8000c52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c54:	e001      	b.n	8000c5a <LoopFillZerobss>

08000c56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c58:	3204      	adds	r2, #4

08000c5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c5c:	d3fb      	bcc.n	8000c56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c5e:	f003 f8d7 	bl	8003e10 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c62:	f7ff fd17 	bl	8000694 <main>

08000c66 <LoopForever>:

LoopForever:
    b LoopForever
 8000c66:	e7fe      	b.n	8000c66 <LoopForever>
  ldr   r0, =_estack
 8000c68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c70:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000c74:	080047ac 	.word	0x080047ac
  ldr r2, =_sbss
 8000c78:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000c7c:	200002fc 	.word	0x200002fc

08000c80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c80:	e7fe      	b.n	8000c80 <ADC1_2_IRQHandler>

08000c82 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b082      	sub	sp, #8
 8000c86:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c8c:	2003      	movs	r0, #3
 8000c8e:	f000 f939 	bl	8000f04 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c92:	2000      	movs	r0, #0
 8000c94:	f000 f80e 	bl	8000cb4 <HAL_InitTick>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d002      	beq.n	8000ca4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	71fb      	strb	r3, [r7, #7]
 8000ca2:	e001      	b.n	8000ca8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ca4:	f7ff fe80 	bl	80009a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ca8:	79fb      	ldrb	r3, [r7, #7]

}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
	...

08000cb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000cc0:	4b16      	ldr	r3, [pc, #88]	@ (8000d1c <HAL_InitTick+0x68>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d022      	beq.n	8000d0e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000cc8:	4b15      	ldr	r3, [pc, #84]	@ (8000d20 <HAL_InitTick+0x6c>)
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	4b13      	ldr	r3, [pc, #76]	@ (8000d1c <HAL_InitTick+0x68>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000cd4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f000 f944 	bl	8000f6a <HAL_SYSTICK_Config>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d10f      	bne.n	8000d08 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2b0f      	cmp	r3, #15
 8000cec:	d809      	bhi.n	8000d02 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	6879      	ldr	r1, [r7, #4]
 8000cf2:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf6:	f000 f910 	bl	8000f1a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cfa:	4a0a      	ldr	r2, [pc, #40]	@ (8000d24 <HAL_InitTick+0x70>)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6013      	str	r3, [r2, #0]
 8000d00:	e007      	b.n	8000d12 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	73fb      	strb	r3, [r7, #15]
 8000d06:	e004      	b.n	8000d12 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	73fb      	strb	r3, [r7, #15]
 8000d0c:	e001      	b.n	8000d12 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3710      	adds	r7, #16
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	2000000c 	.word	0x2000000c
 8000d20:	20000004 	.word	0x20000004
 8000d24:	20000008 	.word	0x20000008

08000d28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d2c:	4b05      	ldr	r3, [pc, #20]	@ (8000d44 <HAL_IncTick+0x1c>)
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	4b05      	ldr	r3, [pc, #20]	@ (8000d48 <HAL_IncTick+0x20>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4413      	add	r3, r2
 8000d36:	4a03      	ldr	r2, [pc, #12]	@ (8000d44 <HAL_IncTick+0x1c>)
 8000d38:	6013      	str	r3, [r2, #0]
}
 8000d3a:	bf00      	nop
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	200001b0 	.word	0x200001b0
 8000d48:	2000000c 	.word	0x2000000c

08000d4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d50:	4b03      	ldr	r3, [pc, #12]	@ (8000d60 <HAL_GetTick+0x14>)
 8000d52:	681b      	ldr	r3, [r3, #0]
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	200001b0 	.word	0x200001b0

08000d64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f003 0307 	and.w	r3, r3, #7
 8000d72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d74:	4b0c      	ldr	r3, [pc, #48]	@ (8000da8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d7a:	68ba      	ldr	r2, [r7, #8]
 8000d7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d80:	4013      	ands	r3, r2
 8000d82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d96:	4a04      	ldr	r2, [pc, #16]	@ (8000da8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	60d3      	str	r3, [r2, #12]
}
 8000d9c:	bf00      	nop
 8000d9e:	3714      	adds	r7, #20
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db0:	4b04      	ldr	r3, [pc, #16]	@ (8000dc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	0a1b      	lsrs	r3, r3, #8
 8000db6:	f003 0307 	and.w	r3, r3, #7
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	db0b      	blt.n	8000df2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	f003 021f 	and.w	r2, r3, #31
 8000de0:	4907      	ldr	r1, [pc, #28]	@ (8000e00 <__NVIC_EnableIRQ+0x38>)
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	095b      	lsrs	r3, r3, #5
 8000de8:	2001      	movs	r0, #1
 8000dea:	fa00 f202 	lsl.w	r2, r0, r2
 8000dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000df2:	bf00      	nop
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	e000e100 	.word	0xe000e100

08000e04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	6039      	str	r1, [r7, #0]
 8000e0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	db0a      	blt.n	8000e2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	b2da      	uxtb	r2, r3
 8000e1c:	490c      	ldr	r1, [pc, #48]	@ (8000e50 <__NVIC_SetPriority+0x4c>)
 8000e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e22:	0112      	lsls	r2, r2, #4
 8000e24:	b2d2      	uxtb	r2, r2
 8000e26:	440b      	add	r3, r1
 8000e28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e2c:	e00a      	b.n	8000e44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	b2da      	uxtb	r2, r3
 8000e32:	4908      	ldr	r1, [pc, #32]	@ (8000e54 <__NVIC_SetPriority+0x50>)
 8000e34:	79fb      	ldrb	r3, [r7, #7]
 8000e36:	f003 030f 	and.w	r3, r3, #15
 8000e3a:	3b04      	subs	r3, #4
 8000e3c:	0112      	lsls	r2, r2, #4
 8000e3e:	b2d2      	uxtb	r2, r2
 8000e40:	440b      	add	r3, r1
 8000e42:	761a      	strb	r2, [r3, #24]
}
 8000e44:	bf00      	nop
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	e000e100 	.word	0xe000e100
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b089      	sub	sp, #36	@ 0x24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	f003 0307 	and.w	r3, r3, #7
 8000e6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	f1c3 0307 	rsb	r3, r3, #7
 8000e72:	2b04      	cmp	r3, #4
 8000e74:	bf28      	it	cs
 8000e76:	2304      	movcs	r3, #4
 8000e78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	3304      	adds	r3, #4
 8000e7e:	2b06      	cmp	r3, #6
 8000e80:	d902      	bls.n	8000e88 <NVIC_EncodePriority+0x30>
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	3b03      	subs	r3, #3
 8000e86:	e000      	b.n	8000e8a <NVIC_EncodePriority+0x32>
 8000e88:	2300      	movs	r3, #0
 8000e8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	43da      	mvns	r2, r3
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	401a      	ands	r2, r3
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ea0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eaa:	43d9      	mvns	r1, r3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb0:	4313      	orrs	r3, r2
         );
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3724      	adds	r7, #36	@ 0x24
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
	...

08000ec0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ed0:	d301      	bcc.n	8000ed6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e00f      	b.n	8000ef6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ed6:	4a0a      	ldr	r2, [pc, #40]	@ (8000f00 <SysTick_Config+0x40>)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3b01      	subs	r3, #1
 8000edc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ede:	210f      	movs	r1, #15
 8000ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee4:	f7ff ff8e 	bl	8000e04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee8:	4b05      	ldr	r3, [pc, #20]	@ (8000f00 <SysTick_Config+0x40>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eee:	4b04      	ldr	r3, [pc, #16]	@ (8000f00 <SysTick_Config+0x40>)
 8000ef0:	2207      	movs	r2, #7
 8000ef2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	e000e010 	.word	0xe000e010

08000f04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f7ff ff29 	bl	8000d64 <__NVIC_SetPriorityGrouping>
}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b086      	sub	sp, #24
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	4603      	mov	r3, r0
 8000f22:	60b9      	str	r1, [r7, #8]
 8000f24:	607a      	str	r2, [r7, #4]
 8000f26:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f28:	f7ff ff40 	bl	8000dac <__NVIC_GetPriorityGrouping>
 8000f2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	68b9      	ldr	r1, [r7, #8]
 8000f32:	6978      	ldr	r0, [r7, #20]
 8000f34:	f7ff ff90 	bl	8000e58 <NVIC_EncodePriority>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f3e:	4611      	mov	r1, r2
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff ff5f 	bl	8000e04 <__NVIC_SetPriority>
}
 8000f46:	bf00      	nop
 8000f48:	3718      	adds	r7, #24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b082      	sub	sp, #8
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	4603      	mov	r3, r0
 8000f56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff ff33 	bl	8000dc8 <__NVIC_EnableIRQ>
}
 8000f62:	bf00      	nop
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b082      	sub	sp, #8
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f7ff ffa4 	bl	8000ec0 <SysTick_Config>
 8000f78:	4603      	mov	r3, r0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
	...

08000f84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b087      	sub	sp, #28
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000f92:	e15a      	b.n	800124a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	2101      	movs	r1, #1
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	f000 814c 	beq.w	8001244 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f003 0303 	and.w	r3, r3, #3
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d005      	beq.n	8000fc4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d130      	bne.n	8001026 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	2203      	movs	r2, #3
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	68da      	ldr	r2, [r3, #12]
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	43db      	mvns	r3, r3
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	4013      	ands	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	091b      	lsrs	r3, r3, #4
 8001010:	f003 0201 	and.w	r2, r3, #1
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	4313      	orrs	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f003 0303 	and.w	r3, r3, #3
 800102e:	2b03      	cmp	r3, #3
 8001030:	d017      	beq.n	8001062 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	68db      	ldr	r3, [r3, #12]
 8001036:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	2203      	movs	r2, #3
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	43db      	mvns	r3, r3
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	4013      	ands	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	689a      	ldr	r2, [r3, #8]
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	4313      	orrs	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f003 0303 	and.w	r3, r3, #3
 800106a:	2b02      	cmp	r3, #2
 800106c:	d123      	bne.n	80010b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	08da      	lsrs	r2, r3, #3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	3208      	adds	r2, #8
 8001076:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800107a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	f003 0307 	and.w	r3, r3, #7
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	220f      	movs	r2, #15
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43db      	mvns	r3, r3
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	4013      	ands	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	691a      	ldr	r2, [r3, #16]
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	f003 0307 	and.w	r3, r3, #7
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	08da      	lsrs	r2, r3, #3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3208      	adds	r2, #8
 80010b0:	6939      	ldr	r1, [r7, #16]
 80010b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	2203      	movs	r2, #3
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	43db      	mvns	r3, r3
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	4013      	ands	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f003 0203 	and.w	r2, r3, #3
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	f000 80a6 	beq.w	8001244 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f8:	4b5b      	ldr	r3, [pc, #364]	@ (8001268 <HAL_GPIO_Init+0x2e4>)
 80010fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010fc:	4a5a      	ldr	r2, [pc, #360]	@ (8001268 <HAL_GPIO_Init+0x2e4>)
 80010fe:	f043 0301 	orr.w	r3, r3, #1
 8001102:	6613      	str	r3, [r2, #96]	@ 0x60
 8001104:	4b58      	ldr	r3, [pc, #352]	@ (8001268 <HAL_GPIO_Init+0x2e4>)
 8001106:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001108:	f003 0301 	and.w	r3, r3, #1
 800110c:	60bb      	str	r3, [r7, #8]
 800110e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001110:	4a56      	ldr	r2, [pc, #344]	@ (800126c <HAL_GPIO_Init+0x2e8>)
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	089b      	lsrs	r3, r3, #2
 8001116:	3302      	adds	r3, #2
 8001118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800111c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	f003 0303 	and.w	r3, r3, #3
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	220f      	movs	r2, #15
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	43db      	mvns	r3, r3
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	4013      	ands	r3, r2
 8001132:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800113a:	d01f      	beq.n	800117c <HAL_GPIO_Init+0x1f8>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4a4c      	ldr	r2, [pc, #304]	@ (8001270 <HAL_GPIO_Init+0x2ec>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d019      	beq.n	8001178 <HAL_GPIO_Init+0x1f4>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4a4b      	ldr	r2, [pc, #300]	@ (8001274 <HAL_GPIO_Init+0x2f0>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d013      	beq.n	8001174 <HAL_GPIO_Init+0x1f0>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4a4a      	ldr	r2, [pc, #296]	@ (8001278 <HAL_GPIO_Init+0x2f4>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d00d      	beq.n	8001170 <HAL_GPIO_Init+0x1ec>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4a49      	ldr	r2, [pc, #292]	@ (800127c <HAL_GPIO_Init+0x2f8>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d007      	beq.n	800116c <HAL_GPIO_Init+0x1e8>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4a48      	ldr	r2, [pc, #288]	@ (8001280 <HAL_GPIO_Init+0x2fc>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d101      	bne.n	8001168 <HAL_GPIO_Init+0x1e4>
 8001164:	2305      	movs	r3, #5
 8001166:	e00a      	b.n	800117e <HAL_GPIO_Init+0x1fa>
 8001168:	2306      	movs	r3, #6
 800116a:	e008      	b.n	800117e <HAL_GPIO_Init+0x1fa>
 800116c:	2304      	movs	r3, #4
 800116e:	e006      	b.n	800117e <HAL_GPIO_Init+0x1fa>
 8001170:	2303      	movs	r3, #3
 8001172:	e004      	b.n	800117e <HAL_GPIO_Init+0x1fa>
 8001174:	2302      	movs	r3, #2
 8001176:	e002      	b.n	800117e <HAL_GPIO_Init+0x1fa>
 8001178:	2301      	movs	r3, #1
 800117a:	e000      	b.n	800117e <HAL_GPIO_Init+0x1fa>
 800117c:	2300      	movs	r3, #0
 800117e:	697a      	ldr	r2, [r7, #20]
 8001180:	f002 0203 	and.w	r2, r2, #3
 8001184:	0092      	lsls	r2, r2, #2
 8001186:	4093      	lsls	r3, r2
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	4313      	orrs	r3, r2
 800118c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800118e:	4937      	ldr	r1, [pc, #220]	@ (800126c <HAL_GPIO_Init+0x2e8>)
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	089b      	lsrs	r3, r3, #2
 8001194:	3302      	adds	r3, #2
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800119c:	4b39      	ldr	r3, [pc, #228]	@ (8001284 <HAL_GPIO_Init+0x300>)
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	43db      	mvns	r3, r3
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	4013      	ands	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d003      	beq.n	80011c0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80011b8:	693a      	ldr	r2, [r7, #16]
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	4313      	orrs	r3, r2
 80011be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011c0:	4a30      	ldr	r2, [pc, #192]	@ (8001284 <HAL_GPIO_Init+0x300>)
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80011c6:	4b2f      	ldr	r3, [pc, #188]	@ (8001284 <HAL_GPIO_Init+0x300>)
 80011c8:	68db      	ldr	r3, [r3, #12]
 80011ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	43db      	mvns	r3, r3
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	4013      	ands	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d003      	beq.n	80011ea <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011ea:	4a26      	ldr	r2, [pc, #152]	@ (8001284 <HAL_GPIO_Init+0x300>)
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80011f0:	4b24      	ldr	r3, [pc, #144]	@ (8001284 <HAL_GPIO_Init+0x300>)
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	43db      	mvns	r3, r3
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	4013      	ands	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001208:	2b00      	cmp	r3, #0
 800120a:	d003      	beq.n	8001214 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	4313      	orrs	r3, r2
 8001212:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001214:	4a1b      	ldr	r2, [pc, #108]	@ (8001284 <HAL_GPIO_Init+0x300>)
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800121a:	4b1a      	ldr	r3, [pc, #104]	@ (8001284 <HAL_GPIO_Init+0x300>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	43db      	mvns	r3, r3
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	4013      	ands	r3, r2
 8001228:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d003      	beq.n	800123e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	4313      	orrs	r3, r2
 800123c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800123e:	4a11      	ldr	r2, [pc, #68]	@ (8001284 <HAL_GPIO_Init+0x300>)
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	3301      	adds	r3, #1
 8001248:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	fa22 f303 	lsr.w	r3, r2, r3
 8001254:	2b00      	cmp	r3, #0
 8001256:	f47f ae9d 	bne.w	8000f94 <HAL_GPIO_Init+0x10>
  }
}
 800125a:	bf00      	nop
 800125c:	bf00      	nop
 800125e:	371c      	adds	r7, #28
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	40021000 	.word	0x40021000
 800126c:	40010000 	.word	0x40010000
 8001270:	48000400 	.word	0x48000400
 8001274:	48000800 	.word	0x48000800
 8001278:	48000c00 	.word	0x48000c00
 800127c:	48001000 	.word	0x48001000
 8001280:	48001400 	.word	0x48001400
 8001284:	40010400 	.word	0x40010400

08001288 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	460b      	mov	r3, r1
 8001292:	807b      	strh	r3, [r7, #2]
 8001294:	4613      	mov	r3, r2
 8001296:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001298:	787b      	ldrb	r3, [r7, #1]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d003      	beq.n	80012a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800129e:	887a      	ldrh	r2, [r7, #2]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012a4:	e002      	b.n	80012ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012a6:	887a      	ldrh	r2, [r7, #2]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d141      	bne.n	800134a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80012c6:	4b4b      	ldr	r3, [pc, #300]	@ (80013f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80012ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012d2:	d131      	bne.n	8001338 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012d4:	4b47      	ldr	r3, [pc, #284]	@ (80013f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80012da:	4a46      	ldr	r2, [pc, #280]	@ (80013f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80012e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012e4:	4b43      	ldr	r3, [pc, #268]	@ (80013f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80012ec:	4a41      	ldr	r2, [pc, #260]	@ (80013f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012f2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012f4:	4b40      	ldr	r3, [pc, #256]	@ (80013f8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2232      	movs	r2, #50	@ 0x32
 80012fa:	fb02 f303 	mul.w	r3, r2, r3
 80012fe:	4a3f      	ldr	r2, [pc, #252]	@ (80013fc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001300:	fba2 2303 	umull	r2, r3, r2, r3
 8001304:	0c9b      	lsrs	r3, r3, #18
 8001306:	3301      	adds	r3, #1
 8001308:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800130a:	e002      	b.n	8001312 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	3b01      	subs	r3, #1
 8001310:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001312:	4b38      	ldr	r3, [pc, #224]	@ (80013f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001314:	695b      	ldr	r3, [r3, #20]
 8001316:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800131a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800131e:	d102      	bne.n	8001326 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d1f2      	bne.n	800130c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001326:	4b33      	ldr	r3, [pc, #204]	@ (80013f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001328:	695b      	ldr	r3, [r3, #20]
 800132a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800132e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001332:	d158      	bne.n	80013e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001334:	2303      	movs	r3, #3
 8001336:	e057      	b.n	80013e8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001338:	4b2e      	ldr	r3, [pc, #184]	@ (80013f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800133a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800133e:	4a2d      	ldr	r2, [pc, #180]	@ (80013f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001340:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001344:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001348:	e04d      	b.n	80013e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001350:	d141      	bne.n	80013d6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001352:	4b28      	ldr	r3, [pc, #160]	@ (80013f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800135a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800135e:	d131      	bne.n	80013c4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001360:	4b24      	ldr	r3, [pc, #144]	@ (80013f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001362:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001366:	4a23      	ldr	r2, [pc, #140]	@ (80013f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001368:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800136c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001370:	4b20      	ldr	r3, [pc, #128]	@ (80013f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001378:	4a1e      	ldr	r2, [pc, #120]	@ (80013f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800137a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800137e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001380:	4b1d      	ldr	r3, [pc, #116]	@ (80013f8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2232      	movs	r2, #50	@ 0x32
 8001386:	fb02 f303 	mul.w	r3, r2, r3
 800138a:	4a1c      	ldr	r2, [pc, #112]	@ (80013fc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800138c:	fba2 2303 	umull	r2, r3, r2, r3
 8001390:	0c9b      	lsrs	r3, r3, #18
 8001392:	3301      	adds	r3, #1
 8001394:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001396:	e002      	b.n	800139e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	3b01      	subs	r3, #1
 800139c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800139e:	4b15      	ldr	r3, [pc, #84]	@ (80013f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013a0:	695b      	ldr	r3, [r3, #20]
 80013a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013aa:	d102      	bne.n	80013b2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d1f2      	bne.n	8001398 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013b2:	4b10      	ldr	r3, [pc, #64]	@ (80013f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013b4:	695b      	ldr	r3, [r3, #20]
 80013b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013be:	d112      	bne.n	80013e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80013c0:	2303      	movs	r3, #3
 80013c2:	e011      	b.n	80013e8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013c4:	4b0b      	ldr	r3, [pc, #44]	@ (80013f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80013ca:	4a0a      	ldr	r2, [pc, #40]	@ (80013f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013d0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80013d4:	e007      	b.n	80013e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80013d6:	4b07      	ldr	r3, [pc, #28]	@ (80013f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80013de:	4a05      	ldr	r2, [pc, #20]	@ (80013f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013e0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013e4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80013e6:	2300      	movs	r3, #0
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3714      	adds	r7, #20
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	40007000 	.word	0x40007000
 80013f8:	20000004 	.word	0x20000004
 80013fc:	431bde83 	.word	0x431bde83

08001400 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001404:	4b05      	ldr	r3, [pc, #20]	@ (800141c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	4a04      	ldr	r2, [pc, #16]	@ (800141c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800140a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800140e:	6093      	str	r3, [r2, #8]
}
 8001410:	bf00      	nop
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	40007000 	.word	0x40007000

08001420 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b088      	sub	sp, #32
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d101      	bne.n	8001432 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e2fe      	b.n	8001a30 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	2b00      	cmp	r3, #0
 800143c:	d075      	beq.n	800152a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800143e:	4b97      	ldr	r3, [pc, #604]	@ (800169c <HAL_RCC_OscConfig+0x27c>)
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f003 030c 	and.w	r3, r3, #12
 8001446:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001448:	4b94      	ldr	r3, [pc, #592]	@ (800169c <HAL_RCC_OscConfig+0x27c>)
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	f003 0303 	and.w	r3, r3, #3
 8001450:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	2b0c      	cmp	r3, #12
 8001456:	d102      	bne.n	800145e <HAL_RCC_OscConfig+0x3e>
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	2b03      	cmp	r3, #3
 800145c:	d002      	beq.n	8001464 <HAL_RCC_OscConfig+0x44>
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	2b08      	cmp	r3, #8
 8001462:	d10b      	bne.n	800147c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001464:	4b8d      	ldr	r3, [pc, #564]	@ (800169c <HAL_RCC_OscConfig+0x27c>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800146c:	2b00      	cmp	r3, #0
 800146e:	d05b      	beq.n	8001528 <HAL_RCC_OscConfig+0x108>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d157      	bne.n	8001528 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e2d9      	b.n	8001a30 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001484:	d106      	bne.n	8001494 <HAL_RCC_OscConfig+0x74>
 8001486:	4b85      	ldr	r3, [pc, #532]	@ (800169c <HAL_RCC_OscConfig+0x27c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a84      	ldr	r2, [pc, #528]	@ (800169c <HAL_RCC_OscConfig+0x27c>)
 800148c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001490:	6013      	str	r3, [r2, #0]
 8001492:	e01d      	b.n	80014d0 <HAL_RCC_OscConfig+0xb0>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800149c:	d10c      	bne.n	80014b8 <HAL_RCC_OscConfig+0x98>
 800149e:	4b7f      	ldr	r3, [pc, #508]	@ (800169c <HAL_RCC_OscConfig+0x27c>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a7e      	ldr	r2, [pc, #504]	@ (800169c <HAL_RCC_OscConfig+0x27c>)
 80014a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014a8:	6013      	str	r3, [r2, #0]
 80014aa:	4b7c      	ldr	r3, [pc, #496]	@ (800169c <HAL_RCC_OscConfig+0x27c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a7b      	ldr	r2, [pc, #492]	@ (800169c <HAL_RCC_OscConfig+0x27c>)
 80014b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014b4:	6013      	str	r3, [r2, #0]
 80014b6:	e00b      	b.n	80014d0 <HAL_RCC_OscConfig+0xb0>
 80014b8:	4b78      	ldr	r3, [pc, #480]	@ (800169c <HAL_RCC_OscConfig+0x27c>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a77      	ldr	r2, [pc, #476]	@ (800169c <HAL_RCC_OscConfig+0x27c>)
 80014be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014c2:	6013      	str	r3, [r2, #0]
 80014c4:	4b75      	ldr	r3, [pc, #468]	@ (800169c <HAL_RCC_OscConfig+0x27c>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a74      	ldr	r2, [pc, #464]	@ (800169c <HAL_RCC_OscConfig+0x27c>)
 80014ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d013      	beq.n	8001500 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d8:	f7ff fc38 	bl	8000d4c <HAL_GetTick>
 80014dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014de:	e008      	b.n	80014f2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014e0:	f7ff fc34 	bl	8000d4c <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b64      	cmp	r3, #100	@ 0x64
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e29e      	b.n	8001a30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014f2:	4b6a      	ldr	r3, [pc, #424]	@ (800169c <HAL_RCC_OscConfig+0x27c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d0f0      	beq.n	80014e0 <HAL_RCC_OscConfig+0xc0>
 80014fe:	e014      	b.n	800152a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001500:	f7ff fc24 	bl	8000d4c <HAL_GetTick>
 8001504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001506:	e008      	b.n	800151a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001508:	f7ff fc20 	bl	8000d4c <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b64      	cmp	r3, #100	@ 0x64
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e28a      	b.n	8001a30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800151a:	4b60      	ldr	r3, [pc, #384]	@ (800169c <HAL_RCC_OscConfig+0x27c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1f0      	bne.n	8001508 <HAL_RCC_OscConfig+0xe8>
 8001526:	e000      	b.n	800152a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001528:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d075      	beq.n	8001622 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001536:	4b59      	ldr	r3, [pc, #356]	@ (800169c <HAL_RCC_OscConfig+0x27c>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	f003 030c 	and.w	r3, r3, #12
 800153e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001540:	4b56      	ldr	r3, [pc, #344]	@ (800169c <HAL_RCC_OscConfig+0x27c>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	f003 0303 	and.w	r3, r3, #3
 8001548:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	2b0c      	cmp	r3, #12
 800154e:	d102      	bne.n	8001556 <HAL_RCC_OscConfig+0x136>
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	2b02      	cmp	r3, #2
 8001554:	d002      	beq.n	800155c <HAL_RCC_OscConfig+0x13c>
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	2b04      	cmp	r3, #4
 800155a:	d11f      	bne.n	800159c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800155c:	4b4f      	ldr	r3, [pc, #316]	@ (800169c <HAL_RCC_OscConfig+0x27c>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001564:	2b00      	cmp	r3, #0
 8001566:	d005      	beq.n	8001574 <HAL_RCC_OscConfig+0x154>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d101      	bne.n	8001574 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e25d      	b.n	8001a30 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001574:	4b49      	ldr	r3, [pc, #292]	@ (800169c <HAL_RCC_OscConfig+0x27c>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	691b      	ldr	r3, [r3, #16]
 8001580:	061b      	lsls	r3, r3, #24
 8001582:	4946      	ldr	r1, [pc, #280]	@ (800169c <HAL_RCC_OscConfig+0x27c>)
 8001584:	4313      	orrs	r3, r2
 8001586:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001588:	4b45      	ldr	r3, [pc, #276]	@ (80016a0 <HAL_RCC_OscConfig+0x280>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff fb91 	bl	8000cb4 <HAL_InitTick>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d043      	beq.n	8001620 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e249      	b.n	8001a30 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d023      	beq.n	80015ec <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015a4:	4b3d      	ldr	r3, [pc, #244]	@ (800169c <HAL_RCC_OscConfig+0x27c>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a3c      	ldr	r2, [pc, #240]	@ (800169c <HAL_RCC_OscConfig+0x27c>)
 80015aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b0:	f7ff fbcc 	bl	8000d4c <HAL_GetTick>
 80015b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015b6:	e008      	b.n	80015ca <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015b8:	f7ff fbc8 	bl	8000d4c <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e232      	b.n	8001a30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015ca:	4b34      	ldr	r3, [pc, #208]	@ (800169c <HAL_RCC_OscConfig+0x27c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d0f0      	beq.n	80015b8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015d6:	4b31      	ldr	r3, [pc, #196]	@ (800169c <HAL_RCC_OscConfig+0x27c>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	691b      	ldr	r3, [r3, #16]
 80015e2:	061b      	lsls	r3, r3, #24
 80015e4:	492d      	ldr	r1, [pc, #180]	@ (800169c <HAL_RCC_OscConfig+0x27c>)
 80015e6:	4313      	orrs	r3, r2
 80015e8:	604b      	str	r3, [r1, #4]
 80015ea:	e01a      	b.n	8001622 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015ec:	4b2b      	ldr	r3, [pc, #172]	@ (800169c <HAL_RCC_OscConfig+0x27c>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a2a      	ldr	r2, [pc, #168]	@ (800169c <HAL_RCC_OscConfig+0x27c>)
 80015f2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80015f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f8:	f7ff fba8 	bl	8000d4c <HAL_GetTick>
 80015fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015fe:	e008      	b.n	8001612 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001600:	f7ff fba4 	bl	8000d4c <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b02      	cmp	r3, #2
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e20e      	b.n	8001a30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001612:	4b22      	ldr	r3, [pc, #136]	@ (800169c <HAL_RCC_OscConfig+0x27c>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800161a:	2b00      	cmp	r3, #0
 800161c:	d1f0      	bne.n	8001600 <HAL_RCC_OscConfig+0x1e0>
 800161e:	e000      	b.n	8001622 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001620:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0308 	and.w	r3, r3, #8
 800162a:	2b00      	cmp	r3, #0
 800162c:	d041      	beq.n	80016b2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	695b      	ldr	r3, [r3, #20]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d01c      	beq.n	8001670 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001636:	4b19      	ldr	r3, [pc, #100]	@ (800169c <HAL_RCC_OscConfig+0x27c>)
 8001638:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800163c:	4a17      	ldr	r2, [pc, #92]	@ (800169c <HAL_RCC_OscConfig+0x27c>)
 800163e:	f043 0301 	orr.w	r3, r3, #1
 8001642:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001646:	f7ff fb81 	bl	8000d4c <HAL_GetTick>
 800164a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800164c:	e008      	b.n	8001660 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800164e:	f7ff fb7d 	bl	8000d4c <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e1e7      	b.n	8001a30 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001660:	4b0e      	ldr	r3, [pc, #56]	@ (800169c <HAL_RCC_OscConfig+0x27c>)
 8001662:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d0ef      	beq.n	800164e <HAL_RCC_OscConfig+0x22e>
 800166e:	e020      	b.n	80016b2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001670:	4b0a      	ldr	r3, [pc, #40]	@ (800169c <HAL_RCC_OscConfig+0x27c>)
 8001672:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001676:	4a09      	ldr	r2, [pc, #36]	@ (800169c <HAL_RCC_OscConfig+0x27c>)
 8001678:	f023 0301 	bic.w	r3, r3, #1
 800167c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001680:	f7ff fb64 	bl	8000d4c <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001686:	e00d      	b.n	80016a4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001688:	f7ff fb60 	bl	8000d4c <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d906      	bls.n	80016a4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e1ca      	b.n	8001a30 <HAL_RCC_OscConfig+0x610>
 800169a:	bf00      	nop
 800169c:	40021000 	.word	0x40021000
 80016a0:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016a4:	4b8c      	ldr	r3, [pc, #560]	@ (80018d8 <HAL_RCC_OscConfig+0x4b8>)
 80016a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d1ea      	bne.n	8001688 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0304 	and.w	r3, r3, #4
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	f000 80a6 	beq.w	800180c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016c0:	2300      	movs	r3, #0
 80016c2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80016c4:	4b84      	ldr	r3, [pc, #528]	@ (80018d8 <HAL_RCC_OscConfig+0x4b8>)
 80016c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d101      	bne.n	80016d4 <HAL_RCC_OscConfig+0x2b4>
 80016d0:	2301      	movs	r3, #1
 80016d2:	e000      	b.n	80016d6 <HAL_RCC_OscConfig+0x2b6>
 80016d4:	2300      	movs	r3, #0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d00d      	beq.n	80016f6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016da:	4b7f      	ldr	r3, [pc, #508]	@ (80018d8 <HAL_RCC_OscConfig+0x4b8>)
 80016dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016de:	4a7e      	ldr	r2, [pc, #504]	@ (80018d8 <HAL_RCC_OscConfig+0x4b8>)
 80016e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80016e6:	4b7c      	ldr	r3, [pc, #496]	@ (80018d8 <HAL_RCC_OscConfig+0x4b8>)
 80016e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80016f2:	2301      	movs	r3, #1
 80016f4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016f6:	4b79      	ldr	r3, [pc, #484]	@ (80018dc <HAL_RCC_OscConfig+0x4bc>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d118      	bne.n	8001734 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001702:	4b76      	ldr	r3, [pc, #472]	@ (80018dc <HAL_RCC_OscConfig+0x4bc>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a75      	ldr	r2, [pc, #468]	@ (80018dc <HAL_RCC_OscConfig+0x4bc>)
 8001708:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800170c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800170e:	f7ff fb1d 	bl	8000d4c <HAL_GetTick>
 8001712:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001714:	e008      	b.n	8001728 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001716:	f7ff fb19 	bl	8000d4c <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	2b02      	cmp	r3, #2
 8001722:	d901      	bls.n	8001728 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e183      	b.n	8001a30 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001728:	4b6c      	ldr	r3, [pc, #432]	@ (80018dc <HAL_RCC_OscConfig+0x4bc>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001730:	2b00      	cmp	r3, #0
 8001732:	d0f0      	beq.n	8001716 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d108      	bne.n	800174e <HAL_RCC_OscConfig+0x32e>
 800173c:	4b66      	ldr	r3, [pc, #408]	@ (80018d8 <HAL_RCC_OscConfig+0x4b8>)
 800173e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001742:	4a65      	ldr	r2, [pc, #404]	@ (80018d8 <HAL_RCC_OscConfig+0x4b8>)
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800174c:	e024      	b.n	8001798 <HAL_RCC_OscConfig+0x378>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	2b05      	cmp	r3, #5
 8001754:	d110      	bne.n	8001778 <HAL_RCC_OscConfig+0x358>
 8001756:	4b60      	ldr	r3, [pc, #384]	@ (80018d8 <HAL_RCC_OscConfig+0x4b8>)
 8001758:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800175c:	4a5e      	ldr	r2, [pc, #376]	@ (80018d8 <HAL_RCC_OscConfig+0x4b8>)
 800175e:	f043 0304 	orr.w	r3, r3, #4
 8001762:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001766:	4b5c      	ldr	r3, [pc, #368]	@ (80018d8 <HAL_RCC_OscConfig+0x4b8>)
 8001768:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800176c:	4a5a      	ldr	r2, [pc, #360]	@ (80018d8 <HAL_RCC_OscConfig+0x4b8>)
 800176e:	f043 0301 	orr.w	r3, r3, #1
 8001772:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001776:	e00f      	b.n	8001798 <HAL_RCC_OscConfig+0x378>
 8001778:	4b57      	ldr	r3, [pc, #348]	@ (80018d8 <HAL_RCC_OscConfig+0x4b8>)
 800177a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800177e:	4a56      	ldr	r2, [pc, #344]	@ (80018d8 <HAL_RCC_OscConfig+0x4b8>)
 8001780:	f023 0301 	bic.w	r3, r3, #1
 8001784:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001788:	4b53      	ldr	r3, [pc, #332]	@ (80018d8 <HAL_RCC_OscConfig+0x4b8>)
 800178a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800178e:	4a52      	ldr	r2, [pc, #328]	@ (80018d8 <HAL_RCC_OscConfig+0x4b8>)
 8001790:	f023 0304 	bic.w	r3, r3, #4
 8001794:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d016      	beq.n	80017ce <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a0:	f7ff fad4 	bl	8000d4c <HAL_GetTick>
 80017a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017a6:	e00a      	b.n	80017be <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017a8:	f7ff fad0 	bl	8000d4c <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e138      	b.n	8001a30 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017be:	4b46      	ldr	r3, [pc, #280]	@ (80018d8 <HAL_RCC_OscConfig+0x4b8>)
 80017c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017c4:	f003 0302 	and.w	r3, r3, #2
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d0ed      	beq.n	80017a8 <HAL_RCC_OscConfig+0x388>
 80017cc:	e015      	b.n	80017fa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ce:	f7ff fabd 	bl	8000d4c <HAL_GetTick>
 80017d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017d4:	e00a      	b.n	80017ec <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017d6:	f7ff fab9 	bl	8000d4c <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d901      	bls.n	80017ec <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e121      	b.n	8001a30 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017ec:	4b3a      	ldr	r3, [pc, #232]	@ (80018d8 <HAL_RCC_OscConfig+0x4b8>)
 80017ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1ed      	bne.n	80017d6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80017fa:	7ffb      	ldrb	r3, [r7, #31]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d105      	bne.n	800180c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001800:	4b35      	ldr	r3, [pc, #212]	@ (80018d8 <HAL_RCC_OscConfig+0x4b8>)
 8001802:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001804:	4a34      	ldr	r2, [pc, #208]	@ (80018d8 <HAL_RCC_OscConfig+0x4b8>)
 8001806:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800180a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0320 	and.w	r3, r3, #32
 8001814:	2b00      	cmp	r3, #0
 8001816:	d03c      	beq.n	8001892 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d01c      	beq.n	800185a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001820:	4b2d      	ldr	r3, [pc, #180]	@ (80018d8 <HAL_RCC_OscConfig+0x4b8>)
 8001822:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001826:	4a2c      	ldr	r2, [pc, #176]	@ (80018d8 <HAL_RCC_OscConfig+0x4b8>)
 8001828:	f043 0301 	orr.w	r3, r3, #1
 800182c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001830:	f7ff fa8c 	bl	8000d4c <HAL_GetTick>
 8001834:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001836:	e008      	b.n	800184a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001838:	f7ff fa88 	bl	8000d4c <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b02      	cmp	r3, #2
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e0f2      	b.n	8001a30 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800184a:	4b23      	ldr	r3, [pc, #140]	@ (80018d8 <HAL_RCC_OscConfig+0x4b8>)
 800184c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001850:	f003 0302 	and.w	r3, r3, #2
 8001854:	2b00      	cmp	r3, #0
 8001856:	d0ef      	beq.n	8001838 <HAL_RCC_OscConfig+0x418>
 8001858:	e01b      	b.n	8001892 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800185a:	4b1f      	ldr	r3, [pc, #124]	@ (80018d8 <HAL_RCC_OscConfig+0x4b8>)
 800185c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001860:	4a1d      	ldr	r2, [pc, #116]	@ (80018d8 <HAL_RCC_OscConfig+0x4b8>)
 8001862:	f023 0301 	bic.w	r3, r3, #1
 8001866:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800186a:	f7ff fa6f 	bl	8000d4c <HAL_GetTick>
 800186e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001870:	e008      	b.n	8001884 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001872:	f7ff fa6b 	bl	8000d4c <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e0d5      	b.n	8001a30 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001884:	4b14      	ldr	r3, [pc, #80]	@ (80018d8 <HAL_RCC_OscConfig+0x4b8>)
 8001886:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1ef      	bne.n	8001872 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	69db      	ldr	r3, [r3, #28]
 8001896:	2b00      	cmp	r3, #0
 8001898:	f000 80c9 	beq.w	8001a2e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800189c:	4b0e      	ldr	r3, [pc, #56]	@ (80018d8 <HAL_RCC_OscConfig+0x4b8>)
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	f003 030c 	and.w	r3, r3, #12
 80018a4:	2b0c      	cmp	r3, #12
 80018a6:	f000 8083 	beq.w	80019b0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	69db      	ldr	r3, [r3, #28]
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d15e      	bne.n	8001970 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018b2:	4b09      	ldr	r3, [pc, #36]	@ (80018d8 <HAL_RCC_OscConfig+0x4b8>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a08      	ldr	r2, [pc, #32]	@ (80018d8 <HAL_RCC_OscConfig+0x4b8>)
 80018b8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018be:	f7ff fa45 	bl	8000d4c <HAL_GetTick>
 80018c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018c4:	e00c      	b.n	80018e0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018c6:	f7ff fa41 	bl	8000d4c <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d905      	bls.n	80018e0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e0ab      	b.n	8001a30 <HAL_RCC_OscConfig+0x610>
 80018d8:	40021000 	.word	0x40021000
 80018dc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018e0:	4b55      	ldr	r3, [pc, #340]	@ (8001a38 <HAL_RCC_OscConfig+0x618>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d1ec      	bne.n	80018c6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018ec:	4b52      	ldr	r3, [pc, #328]	@ (8001a38 <HAL_RCC_OscConfig+0x618>)
 80018ee:	68da      	ldr	r2, [r3, #12]
 80018f0:	4b52      	ldr	r3, [pc, #328]	@ (8001a3c <HAL_RCC_OscConfig+0x61c>)
 80018f2:	4013      	ands	r3, r2
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	6a11      	ldr	r1, [r2, #32]
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80018fc:	3a01      	subs	r2, #1
 80018fe:	0112      	lsls	r2, r2, #4
 8001900:	4311      	orrs	r1, r2
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001906:	0212      	lsls	r2, r2, #8
 8001908:	4311      	orrs	r1, r2
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800190e:	0852      	lsrs	r2, r2, #1
 8001910:	3a01      	subs	r2, #1
 8001912:	0552      	lsls	r2, r2, #21
 8001914:	4311      	orrs	r1, r2
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800191a:	0852      	lsrs	r2, r2, #1
 800191c:	3a01      	subs	r2, #1
 800191e:	0652      	lsls	r2, r2, #25
 8001920:	4311      	orrs	r1, r2
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001926:	06d2      	lsls	r2, r2, #27
 8001928:	430a      	orrs	r2, r1
 800192a:	4943      	ldr	r1, [pc, #268]	@ (8001a38 <HAL_RCC_OscConfig+0x618>)
 800192c:	4313      	orrs	r3, r2
 800192e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001930:	4b41      	ldr	r3, [pc, #260]	@ (8001a38 <HAL_RCC_OscConfig+0x618>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a40      	ldr	r2, [pc, #256]	@ (8001a38 <HAL_RCC_OscConfig+0x618>)
 8001936:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800193a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800193c:	4b3e      	ldr	r3, [pc, #248]	@ (8001a38 <HAL_RCC_OscConfig+0x618>)
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	4a3d      	ldr	r2, [pc, #244]	@ (8001a38 <HAL_RCC_OscConfig+0x618>)
 8001942:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001946:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001948:	f7ff fa00 	bl	8000d4c <HAL_GetTick>
 800194c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800194e:	e008      	b.n	8001962 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001950:	f7ff f9fc 	bl	8000d4c <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b02      	cmp	r3, #2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e066      	b.n	8001a30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001962:	4b35      	ldr	r3, [pc, #212]	@ (8001a38 <HAL_RCC_OscConfig+0x618>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d0f0      	beq.n	8001950 <HAL_RCC_OscConfig+0x530>
 800196e:	e05e      	b.n	8001a2e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001970:	4b31      	ldr	r3, [pc, #196]	@ (8001a38 <HAL_RCC_OscConfig+0x618>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a30      	ldr	r2, [pc, #192]	@ (8001a38 <HAL_RCC_OscConfig+0x618>)
 8001976:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800197a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800197c:	f7ff f9e6 	bl	8000d4c <HAL_GetTick>
 8001980:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001984:	f7ff f9e2 	bl	8000d4c <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b02      	cmp	r3, #2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e04c      	b.n	8001a30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001996:	4b28      	ldr	r3, [pc, #160]	@ (8001a38 <HAL_RCC_OscConfig+0x618>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d1f0      	bne.n	8001984 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80019a2:	4b25      	ldr	r3, [pc, #148]	@ (8001a38 <HAL_RCC_OscConfig+0x618>)
 80019a4:	68da      	ldr	r2, [r3, #12]
 80019a6:	4924      	ldr	r1, [pc, #144]	@ (8001a38 <HAL_RCC_OscConfig+0x618>)
 80019a8:	4b25      	ldr	r3, [pc, #148]	@ (8001a40 <HAL_RCC_OscConfig+0x620>)
 80019aa:	4013      	ands	r3, r2
 80019ac:	60cb      	str	r3, [r1, #12]
 80019ae:	e03e      	b.n	8001a2e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	69db      	ldr	r3, [r3, #28]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d101      	bne.n	80019bc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e039      	b.n	8001a30 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80019bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001a38 <HAL_RCC_OscConfig+0x618>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	f003 0203 	and.w	r2, r3, #3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a1b      	ldr	r3, [r3, #32]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d12c      	bne.n	8001a2a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019da:	3b01      	subs	r3, #1
 80019dc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019de:	429a      	cmp	r2, r3
 80019e0:	d123      	bne.n	8001a2a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ec:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d11b      	bne.n	8001a2a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019fc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d113      	bne.n	8001a2a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0c:	085b      	lsrs	r3, r3, #1
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d109      	bne.n	8001a2a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a20:	085b      	lsrs	r3, r3, #1
 8001a22:	3b01      	subs	r3, #1
 8001a24:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d001      	beq.n	8001a2e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e000      	b.n	8001a30 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3720      	adds	r7, #32
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	019f800c 	.word	0x019f800c
 8001a40:	feeefffc 	.word	0xfeeefffc

08001a44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d101      	bne.n	8001a5c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e11e      	b.n	8001c9a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a5c:	4b91      	ldr	r3, [pc, #580]	@ (8001ca4 <HAL_RCC_ClockConfig+0x260>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 030f 	and.w	r3, r3, #15
 8001a64:	683a      	ldr	r2, [r7, #0]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d910      	bls.n	8001a8c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a6a:	4b8e      	ldr	r3, [pc, #568]	@ (8001ca4 <HAL_RCC_ClockConfig+0x260>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f023 020f 	bic.w	r2, r3, #15
 8001a72:	498c      	ldr	r1, [pc, #560]	@ (8001ca4 <HAL_RCC_ClockConfig+0x260>)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a7a:	4b8a      	ldr	r3, [pc, #552]	@ (8001ca4 <HAL_RCC_ClockConfig+0x260>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 030f 	and.w	r3, r3, #15
 8001a82:	683a      	ldr	r2, [r7, #0]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d001      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e106      	b.n	8001c9a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0301 	and.w	r3, r3, #1
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d073      	beq.n	8001b80 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	2b03      	cmp	r3, #3
 8001a9e:	d129      	bne.n	8001af4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aa0:	4b81      	ldr	r3, [pc, #516]	@ (8001ca8 <HAL_RCC_ClockConfig+0x264>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d101      	bne.n	8001ab0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e0f4      	b.n	8001c9a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001ab0:	f000 f99e 	bl	8001df0 <RCC_GetSysClockFreqFromPLLSource>
 8001ab4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	4a7c      	ldr	r2, [pc, #496]	@ (8001cac <HAL_RCC_ClockConfig+0x268>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d93f      	bls.n	8001b3e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001abe:	4b7a      	ldr	r3, [pc, #488]	@ (8001ca8 <HAL_RCC_ClockConfig+0x264>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d009      	beq.n	8001ade <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d033      	beq.n	8001b3e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d12f      	bne.n	8001b3e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001ade:	4b72      	ldr	r3, [pc, #456]	@ (8001ca8 <HAL_RCC_ClockConfig+0x264>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001ae6:	4a70      	ldr	r2, [pc, #448]	@ (8001ca8 <HAL_RCC_ClockConfig+0x264>)
 8001ae8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001aec:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001aee:	2380      	movs	r3, #128	@ 0x80
 8001af0:	617b      	str	r3, [r7, #20]
 8001af2:	e024      	b.n	8001b3e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d107      	bne.n	8001b0c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001afc:	4b6a      	ldr	r3, [pc, #424]	@ (8001ca8 <HAL_RCC_ClockConfig+0x264>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d109      	bne.n	8001b1c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e0c6      	b.n	8001c9a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b0c:	4b66      	ldr	r3, [pc, #408]	@ (8001ca8 <HAL_RCC_ClockConfig+0x264>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d101      	bne.n	8001b1c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e0be      	b.n	8001c9a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001b1c:	f000 f8ce 	bl	8001cbc <HAL_RCC_GetSysClockFreq>
 8001b20:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	4a61      	ldr	r2, [pc, #388]	@ (8001cac <HAL_RCC_ClockConfig+0x268>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d909      	bls.n	8001b3e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001b2a:	4b5f      	ldr	r3, [pc, #380]	@ (8001ca8 <HAL_RCC_ClockConfig+0x264>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001b32:	4a5d      	ldr	r2, [pc, #372]	@ (8001ca8 <HAL_RCC_ClockConfig+0x264>)
 8001b34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b38:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001b3a:	2380      	movs	r3, #128	@ 0x80
 8001b3c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b3e:	4b5a      	ldr	r3, [pc, #360]	@ (8001ca8 <HAL_RCC_ClockConfig+0x264>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f023 0203 	bic.w	r2, r3, #3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	4957      	ldr	r1, [pc, #348]	@ (8001ca8 <HAL_RCC_ClockConfig+0x264>)
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b50:	f7ff f8fc 	bl	8000d4c <HAL_GetTick>
 8001b54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b56:	e00a      	b.n	8001b6e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b58:	f7ff f8f8 	bl	8000d4c <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e095      	b.n	8001c9a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b6e:	4b4e      	ldr	r3, [pc, #312]	@ (8001ca8 <HAL_RCC_ClockConfig+0x264>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f003 020c 	and.w	r2, r3, #12
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d1eb      	bne.n	8001b58 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0302 	and.w	r3, r3, #2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d023      	beq.n	8001bd4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0304 	and.w	r3, r3, #4
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d005      	beq.n	8001ba4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b98:	4b43      	ldr	r3, [pc, #268]	@ (8001ca8 <HAL_RCC_ClockConfig+0x264>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	4a42      	ldr	r2, [pc, #264]	@ (8001ca8 <HAL_RCC_ClockConfig+0x264>)
 8001b9e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001ba2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0308 	and.w	r3, r3, #8
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d007      	beq.n	8001bc0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001bb0:	4b3d      	ldr	r3, [pc, #244]	@ (8001ca8 <HAL_RCC_ClockConfig+0x264>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001bb8:	4a3b      	ldr	r2, [pc, #236]	@ (8001ca8 <HAL_RCC_ClockConfig+0x264>)
 8001bba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001bbe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bc0:	4b39      	ldr	r3, [pc, #228]	@ (8001ca8 <HAL_RCC_ClockConfig+0x264>)
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	4936      	ldr	r1, [pc, #216]	@ (8001ca8 <HAL_RCC_ClockConfig+0x264>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	608b      	str	r3, [r1, #8]
 8001bd2:	e008      	b.n	8001be6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	2b80      	cmp	r3, #128	@ 0x80
 8001bd8:	d105      	bne.n	8001be6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001bda:	4b33      	ldr	r3, [pc, #204]	@ (8001ca8 <HAL_RCC_ClockConfig+0x264>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	4a32      	ldr	r2, [pc, #200]	@ (8001ca8 <HAL_RCC_ClockConfig+0x264>)
 8001be0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001be4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001be6:	4b2f      	ldr	r3, [pc, #188]	@ (8001ca4 <HAL_RCC_ClockConfig+0x260>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 030f 	and.w	r3, r3, #15
 8001bee:	683a      	ldr	r2, [r7, #0]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d21d      	bcs.n	8001c30 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bf4:	4b2b      	ldr	r3, [pc, #172]	@ (8001ca4 <HAL_RCC_ClockConfig+0x260>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f023 020f 	bic.w	r2, r3, #15
 8001bfc:	4929      	ldr	r1, [pc, #164]	@ (8001ca4 <HAL_RCC_ClockConfig+0x260>)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c04:	f7ff f8a2 	bl	8000d4c <HAL_GetTick>
 8001c08:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c0a:	e00a      	b.n	8001c22 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c0c:	f7ff f89e 	bl	8000d4c <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e03b      	b.n	8001c9a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c22:	4b20      	ldr	r3, [pc, #128]	@ (8001ca4 <HAL_RCC_ClockConfig+0x260>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 030f 	and.w	r3, r3, #15
 8001c2a:	683a      	ldr	r2, [r7, #0]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d1ed      	bne.n	8001c0c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0304 	and.w	r3, r3, #4
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d008      	beq.n	8001c4e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c3c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ca8 <HAL_RCC_ClockConfig+0x264>)
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	4917      	ldr	r1, [pc, #92]	@ (8001ca8 <HAL_RCC_ClockConfig+0x264>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0308 	and.w	r3, r3, #8
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d009      	beq.n	8001c6e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c5a:	4b13      	ldr	r3, [pc, #76]	@ (8001ca8 <HAL_RCC_ClockConfig+0x264>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	691b      	ldr	r3, [r3, #16]
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	490f      	ldr	r1, [pc, #60]	@ (8001ca8 <HAL_RCC_ClockConfig+0x264>)
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c6e:	f000 f825 	bl	8001cbc <HAL_RCC_GetSysClockFreq>
 8001c72:	4602      	mov	r2, r0
 8001c74:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca8 <HAL_RCC_ClockConfig+0x264>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	091b      	lsrs	r3, r3, #4
 8001c7a:	f003 030f 	and.w	r3, r3, #15
 8001c7e:	490c      	ldr	r1, [pc, #48]	@ (8001cb0 <HAL_RCC_ClockConfig+0x26c>)
 8001c80:	5ccb      	ldrb	r3, [r1, r3]
 8001c82:	f003 031f 	and.w	r3, r3, #31
 8001c86:	fa22 f303 	lsr.w	r3, r2, r3
 8001c8a:	4a0a      	ldr	r2, [pc, #40]	@ (8001cb4 <HAL_RCC_ClockConfig+0x270>)
 8001c8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001c8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001cb8 <HAL_RCC_ClockConfig+0x274>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff f80e 	bl	8000cb4 <HAL_InitTick>
 8001c98:	4603      	mov	r3, r0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3718      	adds	r7, #24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40022000 	.word	0x40022000
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	04c4b400 	.word	0x04c4b400
 8001cb0:	08004728 	.word	0x08004728
 8001cb4:	20000004 	.word	0x20000004
 8001cb8:	20000008 	.word	0x20000008

08001cbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b087      	sub	sp, #28
 8001cc0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001cc2:	4b2c      	ldr	r3, [pc, #176]	@ (8001d74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f003 030c 	and.w	r3, r3, #12
 8001cca:	2b04      	cmp	r3, #4
 8001ccc:	d102      	bne.n	8001cd4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001cce:	4b2a      	ldr	r3, [pc, #168]	@ (8001d78 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001cd0:	613b      	str	r3, [r7, #16]
 8001cd2:	e047      	b.n	8001d64 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001cd4:	4b27      	ldr	r3, [pc, #156]	@ (8001d74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f003 030c 	and.w	r3, r3, #12
 8001cdc:	2b08      	cmp	r3, #8
 8001cde:	d102      	bne.n	8001ce6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ce0:	4b26      	ldr	r3, [pc, #152]	@ (8001d7c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ce2:	613b      	str	r3, [r7, #16]
 8001ce4:	e03e      	b.n	8001d64 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001ce6:	4b23      	ldr	r3, [pc, #140]	@ (8001d74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f003 030c 	and.w	r3, r3, #12
 8001cee:	2b0c      	cmp	r3, #12
 8001cf0:	d136      	bne.n	8001d60 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cf2:	4b20      	ldr	r3, [pc, #128]	@ (8001d74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	f003 0303 	and.w	r3, r3, #3
 8001cfa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cfc:	4b1d      	ldr	r3, [pc, #116]	@ (8001d74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	091b      	lsrs	r3, r3, #4
 8001d02:	f003 030f 	and.w	r3, r3, #15
 8001d06:	3301      	adds	r3, #1
 8001d08:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2b03      	cmp	r3, #3
 8001d0e:	d10c      	bne.n	8001d2a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d10:	4a1a      	ldr	r2, [pc, #104]	@ (8001d7c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d18:	4a16      	ldr	r2, [pc, #88]	@ (8001d74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d1a:	68d2      	ldr	r2, [r2, #12]
 8001d1c:	0a12      	lsrs	r2, r2, #8
 8001d1e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001d22:	fb02 f303 	mul.w	r3, r2, r3
 8001d26:	617b      	str	r3, [r7, #20]
      break;
 8001d28:	e00c      	b.n	8001d44 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d2a:	4a13      	ldr	r2, [pc, #76]	@ (8001d78 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d32:	4a10      	ldr	r2, [pc, #64]	@ (8001d74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d34:	68d2      	ldr	r2, [r2, #12]
 8001d36:	0a12      	lsrs	r2, r2, #8
 8001d38:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001d3c:	fb02 f303 	mul.w	r3, r2, r3
 8001d40:	617b      	str	r3, [r7, #20]
      break;
 8001d42:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d44:	4b0b      	ldr	r3, [pc, #44]	@ (8001d74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	0e5b      	lsrs	r3, r3, #25
 8001d4a:	f003 0303 	and.w	r3, r3, #3
 8001d4e:	3301      	adds	r3, #1
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001d54:	697a      	ldr	r2, [r7, #20]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d5c:	613b      	str	r3, [r7, #16]
 8001d5e:	e001      	b.n	8001d64 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001d60:	2300      	movs	r3, #0
 8001d62:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001d64:	693b      	ldr	r3, [r7, #16]
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	371c      	adds	r7, #28
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	40021000 	.word	0x40021000
 8001d78:	00f42400 	.word	0x00f42400
 8001d7c:	016e3600 	.word	0x016e3600

08001d80 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d84:	4b03      	ldr	r3, [pc, #12]	@ (8001d94 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d86:	681b      	ldr	r3, [r3, #0]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	20000004 	.word	0x20000004

08001d98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d9c:	f7ff fff0 	bl	8001d80 <HAL_RCC_GetHCLKFreq>
 8001da0:	4602      	mov	r2, r0
 8001da2:	4b06      	ldr	r3, [pc, #24]	@ (8001dbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	0a1b      	lsrs	r3, r3, #8
 8001da8:	f003 0307 	and.w	r3, r3, #7
 8001dac:	4904      	ldr	r1, [pc, #16]	@ (8001dc0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001dae:	5ccb      	ldrb	r3, [r1, r3]
 8001db0:	f003 031f 	and.w	r3, r3, #31
 8001db4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	08004738 	.word	0x08004738

08001dc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001dc8:	f7ff ffda 	bl	8001d80 <HAL_RCC_GetHCLKFreq>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	4b06      	ldr	r3, [pc, #24]	@ (8001de8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	0adb      	lsrs	r3, r3, #11
 8001dd4:	f003 0307 	and.w	r3, r3, #7
 8001dd8:	4904      	ldr	r1, [pc, #16]	@ (8001dec <HAL_RCC_GetPCLK2Freq+0x28>)
 8001dda:	5ccb      	ldrb	r3, [r1, r3]
 8001ddc:	f003 031f 	and.w	r3, r3, #31
 8001de0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40021000 	.word	0x40021000
 8001dec:	08004738 	.word	0x08004738

08001df0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b087      	sub	sp, #28
 8001df4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001df6:	4b1e      	ldr	r3, [pc, #120]	@ (8001e70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	f003 0303 	and.w	r3, r3, #3
 8001dfe:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e00:	4b1b      	ldr	r3, [pc, #108]	@ (8001e70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	091b      	lsrs	r3, r3, #4
 8001e06:	f003 030f 	and.w	r3, r3, #15
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	2b03      	cmp	r3, #3
 8001e12:	d10c      	bne.n	8001e2e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e14:	4a17      	ldr	r2, [pc, #92]	@ (8001e74 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e1c:	4a14      	ldr	r2, [pc, #80]	@ (8001e70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e1e:	68d2      	ldr	r2, [r2, #12]
 8001e20:	0a12      	lsrs	r2, r2, #8
 8001e22:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001e26:	fb02 f303 	mul.w	r3, r2, r3
 8001e2a:	617b      	str	r3, [r7, #20]
    break;
 8001e2c:	e00c      	b.n	8001e48 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e2e:	4a12      	ldr	r2, [pc, #72]	@ (8001e78 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e36:	4a0e      	ldr	r2, [pc, #56]	@ (8001e70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e38:	68d2      	ldr	r2, [r2, #12]
 8001e3a:	0a12      	lsrs	r2, r2, #8
 8001e3c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001e40:	fb02 f303 	mul.w	r3, r2, r3
 8001e44:	617b      	str	r3, [r7, #20]
    break;
 8001e46:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e48:	4b09      	ldr	r3, [pc, #36]	@ (8001e70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	0e5b      	lsrs	r3, r3, #25
 8001e4e:	f003 0303 	and.w	r3, r3, #3
 8001e52:	3301      	adds	r3, #1
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001e58:	697a      	ldr	r2, [r7, #20]
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e60:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001e62:	687b      	ldr	r3, [r7, #4]
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	371c      	adds	r7, #28
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr
 8001e70:	40021000 	.word	0x40021000
 8001e74:	016e3600 	.word	0x016e3600
 8001e78:	00f42400 	.word	0x00f42400

08001e7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e84:	2300      	movs	r3, #0
 8001e86:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e88:	2300      	movs	r3, #0
 8001e8a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	f000 8098 	beq.w	8001fca <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e9e:	4b43      	ldr	r3, [pc, #268]	@ (8001fac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ea0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ea2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d10d      	bne.n	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eaa:	4b40      	ldr	r3, [pc, #256]	@ (8001fac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001eac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eae:	4a3f      	ldr	r2, [pc, #252]	@ (8001fac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001eb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001eb4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001eb6:	4b3d      	ldr	r3, [pc, #244]	@ (8001fac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001eb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ebe:	60bb      	str	r3, [r7, #8]
 8001ec0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ec6:	4b3a      	ldr	r3, [pc, #232]	@ (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a39      	ldr	r2, [pc, #228]	@ (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001ecc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ed0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ed2:	f7fe ff3b 	bl	8000d4c <HAL_GetTick>
 8001ed6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ed8:	e009      	b.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eda:	f7fe ff37 	bl	8000d4c <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d902      	bls.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	74fb      	strb	r3, [r7, #19]
        break;
 8001eec:	e005      	b.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001eee:	4b30      	ldr	r3, [pc, #192]	@ (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d0ef      	beq.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001efa:	7cfb      	ldrb	r3, [r7, #19]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d159      	bne.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f00:	4b2a      	ldr	r3, [pc, #168]	@ (8001fac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f0a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d01e      	beq.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f16:	697a      	ldr	r2, [r7, #20]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d019      	beq.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f1c:	4b23      	ldr	r3, [pc, #140]	@ (8001fac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f26:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f28:	4b20      	ldr	r3, [pc, #128]	@ (8001fac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f2e:	4a1f      	ldr	r2, [pc, #124]	@ (8001fac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f38:	4b1c      	ldr	r3, [pc, #112]	@ (8001fac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f3e:	4a1b      	ldr	r2, [pc, #108]	@ (8001fac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f48:	4a18      	ldr	r2, [pc, #96]	@ (8001fac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d016      	beq.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f5a:	f7fe fef7 	bl	8000d4c <HAL_GetTick>
 8001f5e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f60:	e00b      	b.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f62:	f7fe fef3 	bl	8000d4c <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d902      	bls.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	74fb      	strb	r3, [r7, #19]
            break;
 8001f78:	e006      	b.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f7a:	4b0c      	ldr	r3, [pc, #48]	@ (8001fac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f80:	f003 0302 	and.w	r3, r3, #2
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d0ec      	beq.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001f88:	7cfb      	ldrb	r3, [r7, #19]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d10b      	bne.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f8e:	4b07      	ldr	r3, [pc, #28]	@ (8001fac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f94:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f9c:	4903      	ldr	r1, [pc, #12]	@ (8001fac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001fa4:	e008      	b.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001fa6:	7cfb      	ldrb	r3, [r7, #19]
 8001fa8:	74bb      	strb	r3, [r7, #18]
 8001faa:	e005      	b.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fb4:	7cfb      	ldrb	r3, [r7, #19]
 8001fb6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fb8:	7c7b      	ldrb	r3, [r7, #17]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d105      	bne.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fbe:	4ba7      	ldr	r3, [pc, #668]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fc2:	4aa6      	ldr	r2, [pc, #664]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fc4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fc8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d00a      	beq.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001fd6:	4ba1      	ldr	r3, [pc, #644]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fdc:	f023 0203 	bic.w	r2, r3, #3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	499d      	ldr	r1, [pc, #628]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d00a      	beq.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001ff8:	4b98      	ldr	r3, [pc, #608]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ffe:	f023 020c 	bic.w	r2, r3, #12
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	4995      	ldr	r1, [pc, #596]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002008:	4313      	orrs	r3, r2
 800200a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0304 	and.w	r3, r3, #4
 8002016:	2b00      	cmp	r3, #0
 8002018:	d00a      	beq.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800201a:	4b90      	ldr	r3, [pc, #576]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800201c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002020:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	498c      	ldr	r1, [pc, #560]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800202a:	4313      	orrs	r3, r2
 800202c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0308 	and.w	r3, r3, #8
 8002038:	2b00      	cmp	r3, #0
 800203a:	d00a      	beq.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800203c:	4b87      	ldr	r3, [pc, #540]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800203e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002042:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	4984      	ldr	r1, [pc, #528]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800204c:	4313      	orrs	r3, r2
 800204e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0310 	and.w	r3, r3, #16
 800205a:	2b00      	cmp	r3, #0
 800205c:	d00a      	beq.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800205e:	4b7f      	ldr	r3, [pc, #508]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002060:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002064:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	695b      	ldr	r3, [r3, #20]
 800206c:	497b      	ldr	r1, [pc, #492]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800206e:	4313      	orrs	r3, r2
 8002070:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0320 	and.w	r3, r3, #32
 800207c:	2b00      	cmp	r3, #0
 800207e:	d00a      	beq.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002080:	4b76      	ldr	r3, [pc, #472]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002082:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002086:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	4973      	ldr	r1, [pc, #460]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002090:	4313      	orrs	r3, r2
 8002092:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d00a      	beq.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020a2:	4b6e      	ldr	r3, [pc, #440]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020a8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	69db      	ldr	r3, [r3, #28]
 80020b0:	496a      	ldr	r1, [pc, #424]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d00a      	beq.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80020c4:	4b65      	ldr	r3, [pc, #404]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020ca:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a1b      	ldr	r3, [r3, #32]
 80020d2:	4962      	ldr	r1, [pc, #392]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020d4:	4313      	orrs	r3, r2
 80020d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d00a      	beq.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80020e6:	4b5d      	ldr	r3, [pc, #372]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020ec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f4:	4959      	ldr	r1, [pc, #356]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d00a      	beq.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002108:	4b54      	ldr	r3, [pc, #336]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800210a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800210e:	f023 0203 	bic.w	r2, r3, #3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002116:	4951      	ldr	r1, [pc, #324]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002118:	4313      	orrs	r3, r2
 800211a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002126:	2b00      	cmp	r3, #0
 8002128:	d00a      	beq.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800212a:	4b4c      	ldr	r3, [pc, #304]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800212c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002130:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002138:	4948      	ldr	r1, [pc, #288]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800213a:	4313      	orrs	r3, r2
 800213c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002148:	2b00      	cmp	r3, #0
 800214a:	d015      	beq.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800214c:	4b43      	ldr	r3, [pc, #268]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800214e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002152:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215a:	4940      	ldr	r1, [pc, #256]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800215c:	4313      	orrs	r3, r2
 800215e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002166:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800216a:	d105      	bne.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800216c:	4b3b      	ldr	r3, [pc, #236]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	4a3a      	ldr	r2, [pc, #232]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002172:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002176:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002180:	2b00      	cmp	r3, #0
 8002182:	d015      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002184:	4b35      	ldr	r3, [pc, #212]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002186:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800218a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002192:	4932      	ldr	r1, [pc, #200]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002194:	4313      	orrs	r3, r2
 8002196:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800219e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80021a2:	d105      	bne.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021a4:	4b2d      	ldr	r3, [pc, #180]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	4a2c      	ldr	r2, [pc, #176]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021ae:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d015      	beq.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80021bc:	4b27      	ldr	r3, [pc, #156]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021c2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021ca:	4924      	ldr	r1, [pc, #144]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021da:	d105      	bne.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021dc:	4b1f      	ldr	r3, [pc, #124]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	4a1e      	ldr	r2, [pc, #120]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021e6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d015      	beq.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021f4:	4b19      	ldr	r3, [pc, #100]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021fa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002202:	4916      	ldr	r1, [pc, #88]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002204:	4313      	orrs	r3, r2
 8002206:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800220e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002212:	d105      	bne.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002214:	4b11      	ldr	r3, [pc, #68]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	4a10      	ldr	r2, [pc, #64]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800221a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800221e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d019      	beq.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800222c:	4b0b      	ldr	r3, [pc, #44]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800222e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002232:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223a:	4908      	ldr	r1, [pc, #32]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800223c:	4313      	orrs	r3, r2
 800223e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002246:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800224a:	d109      	bne.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800224c:	4b03      	ldr	r3, [pc, #12]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	4a02      	ldr	r2, [pc, #8]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002252:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002256:	60d3      	str	r3, [r2, #12]
 8002258:	e002      	b.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800225a:	bf00      	nop
 800225c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d015      	beq.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800226c:	4b29      	ldr	r3, [pc, #164]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800226e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002272:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800227a:	4926      	ldr	r1, [pc, #152]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800227c:	4313      	orrs	r3, r2
 800227e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002286:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800228a:	d105      	bne.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800228c:	4b21      	ldr	r3, [pc, #132]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	4a20      	ldr	r2, [pc, #128]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002292:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002296:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d015      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80022a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022aa:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022b2:	4918      	ldr	r1, [pc, #96]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022c2:	d105      	bne.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80022c4:	4b13      	ldr	r3, [pc, #76]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	4a12      	ldr	r2, [pc, #72]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022ce:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d015      	beq.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80022dc:	4b0d      	ldr	r3, [pc, #52]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80022e2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ea:	490a      	ldr	r1, [pc, #40]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80022fa:	d105      	bne.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022fc:	4b05      	ldr	r3, [pc, #20]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	4a04      	ldr	r2, [pc, #16]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002302:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002306:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002308:	7cbb      	ldrb	r3, [r7, #18]
}
 800230a:	4618      	mov	r0, r3
 800230c:	3718      	adds	r7, #24
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	40021000 	.word	0x40021000

08002318 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d101      	bne.n	800232a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e049      	b.n	80023be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b00      	cmp	r3, #0
 8002334:	d106      	bne.n	8002344 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f7fe fb56 	bl	80009f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2202      	movs	r2, #2
 8002348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	3304      	adds	r3, #4
 8002354:	4619      	mov	r1, r3
 8002356:	4610      	mov	r0, r2
 8002358:	f000 fb3c 	bl	80029d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
	...

080023c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d001      	beq.n	80023e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e054      	b.n	800248a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2202      	movs	r2, #2
 80023e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	68da      	ldr	r2, [r3, #12]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f042 0201 	orr.w	r2, r2, #1
 80023f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a26      	ldr	r2, [pc, #152]	@ (8002498 <HAL_TIM_Base_Start_IT+0xd0>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d022      	beq.n	8002448 <HAL_TIM_Base_Start_IT+0x80>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800240a:	d01d      	beq.n	8002448 <HAL_TIM_Base_Start_IT+0x80>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a22      	ldr	r2, [pc, #136]	@ (800249c <HAL_TIM_Base_Start_IT+0xd4>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d018      	beq.n	8002448 <HAL_TIM_Base_Start_IT+0x80>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a21      	ldr	r2, [pc, #132]	@ (80024a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d013      	beq.n	8002448 <HAL_TIM_Base_Start_IT+0x80>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a1f      	ldr	r2, [pc, #124]	@ (80024a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d00e      	beq.n	8002448 <HAL_TIM_Base_Start_IT+0x80>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a1e      	ldr	r2, [pc, #120]	@ (80024a8 <HAL_TIM_Base_Start_IT+0xe0>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d009      	beq.n	8002448 <HAL_TIM_Base_Start_IT+0x80>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a1c      	ldr	r2, [pc, #112]	@ (80024ac <HAL_TIM_Base_Start_IT+0xe4>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d004      	beq.n	8002448 <HAL_TIM_Base_Start_IT+0x80>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a1b      	ldr	r2, [pc, #108]	@ (80024b0 <HAL_TIM_Base_Start_IT+0xe8>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d115      	bne.n	8002474 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	689a      	ldr	r2, [r3, #8]
 800244e:	4b19      	ldr	r3, [pc, #100]	@ (80024b4 <HAL_TIM_Base_Start_IT+0xec>)
 8002450:	4013      	ands	r3, r2
 8002452:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2b06      	cmp	r3, #6
 8002458:	d015      	beq.n	8002486 <HAL_TIM_Base_Start_IT+0xbe>
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002460:	d011      	beq.n	8002486 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f042 0201 	orr.w	r2, r2, #1
 8002470:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002472:	e008      	b.n	8002486 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f042 0201 	orr.w	r2, r2, #1
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	e000      	b.n	8002488 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002486:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3714      	adds	r7, #20
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	40012c00 	.word	0x40012c00
 800249c:	40000400 	.word	0x40000400
 80024a0:	40000800 	.word	0x40000800
 80024a4:	40000c00 	.word	0x40000c00
 80024a8:	40013400 	.word	0x40013400
 80024ac:	40014000 	.word	0x40014000
 80024b0:	40015000 	.word	0x40015000
 80024b4:	00010007 	.word	0x00010007

080024b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d020      	beq.n	800251c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f003 0302 	and.w	r3, r3, #2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d01b      	beq.n	800251c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f06f 0202 	mvn.w	r2, #2
 80024ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2201      	movs	r2, #1
 80024f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	f003 0303 	and.w	r3, r3, #3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d003      	beq.n	800250a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 fa48 	bl	8002998 <HAL_TIM_IC_CaptureCallback>
 8002508:	e005      	b.n	8002516 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f000 fa3a 	bl	8002984 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f000 fa4b 	bl	80029ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	f003 0304 	and.w	r3, r3, #4
 8002522:	2b00      	cmp	r3, #0
 8002524:	d020      	beq.n	8002568 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f003 0304 	and.w	r3, r3, #4
 800252c:	2b00      	cmp	r3, #0
 800252e:	d01b      	beq.n	8002568 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f06f 0204 	mvn.w	r2, #4
 8002538:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2202      	movs	r2, #2
 800253e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	699b      	ldr	r3, [r3, #24]
 8002546:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800254a:	2b00      	cmp	r3, #0
 800254c:	d003      	beq.n	8002556 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 fa22 	bl	8002998 <HAL_TIM_IC_CaptureCallback>
 8002554:	e005      	b.n	8002562 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 fa14 	bl	8002984 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f000 fa25 	bl	80029ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	f003 0308 	and.w	r3, r3, #8
 800256e:	2b00      	cmp	r3, #0
 8002570:	d020      	beq.n	80025b4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f003 0308 	and.w	r3, r3, #8
 8002578:	2b00      	cmp	r3, #0
 800257a:	d01b      	beq.n	80025b4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f06f 0208 	mvn.w	r2, #8
 8002584:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2204      	movs	r2, #4
 800258a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	69db      	ldr	r3, [r3, #28]
 8002592:	f003 0303 	and.w	r3, r3, #3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d003      	beq.n	80025a2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f000 f9fc 	bl	8002998 <HAL_TIM_IC_CaptureCallback>
 80025a0:	e005      	b.n	80025ae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f000 f9ee 	bl	8002984 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f000 f9ff 	bl	80029ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	f003 0310 	and.w	r3, r3, #16
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d020      	beq.n	8002600 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f003 0310 	and.w	r3, r3, #16
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d01b      	beq.n	8002600 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f06f 0210 	mvn.w	r2, #16
 80025d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2208      	movs	r2, #8
 80025d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	69db      	ldr	r3, [r3, #28]
 80025de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d003      	beq.n	80025ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 f9d6 	bl	8002998 <HAL_TIM_IC_CaptureCallback>
 80025ec:	e005      	b.n	80025fa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 f9c8 	bl	8002984 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f000 f9d9 	bl	80029ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	2b00      	cmp	r3, #0
 8002608:	d00c      	beq.n	8002624 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f003 0301 	and.w	r3, r3, #1
 8002610:	2b00      	cmp	r3, #0
 8002612:	d007      	beq.n	8002624 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f06f 0201 	mvn.w	r2, #1
 800261c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f7fe f9b2 	bl	8000988 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800262a:	2b00      	cmp	r3, #0
 800262c:	d104      	bne.n	8002638 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00c      	beq.n	8002652 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800263e:	2b00      	cmp	r3, #0
 8002640:	d007      	beq.n	8002652 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800264a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f000 fbb1 	bl	8002db4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002658:	2b00      	cmp	r3, #0
 800265a:	d00c      	beq.n	8002676 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002662:	2b00      	cmp	r3, #0
 8002664:	d007      	beq.n	8002676 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800266e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f000 fba9 	bl	8002dc8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00c      	beq.n	800269a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002686:	2b00      	cmp	r3, #0
 8002688:	d007      	beq.n	800269a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002692:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f000 f993 	bl	80029c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	f003 0320 	and.w	r3, r3, #32
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d00c      	beq.n	80026be <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f003 0320 	and.w	r3, r3, #32
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d007      	beq.n	80026be <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f06f 0220 	mvn.w	r2, #32
 80026b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f000 fb71 	bl	8002da0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d00c      	beq.n	80026e2 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d007      	beq.n	80026e2 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80026da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f000 fb7d 	bl	8002ddc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d00c      	beq.n	8002706 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d007      	beq.n	8002706 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80026fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f000 fb75 	bl	8002df0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d00c      	beq.n	800272a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d007      	beq.n	800272a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8002722:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f000 fb6d 	bl	8002e04 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d00c      	beq.n	800274e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d007      	beq.n	800274e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8002746:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f000 fb65 	bl	8002e18 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800274e:	bf00      	nop
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
	...

08002758 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002762:	2300      	movs	r3, #0
 8002764:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800276c:	2b01      	cmp	r3, #1
 800276e:	d101      	bne.n	8002774 <HAL_TIM_ConfigClockSource+0x1c>
 8002770:	2302      	movs	r3, #2
 8002772:	e0f6      	b.n	8002962 <HAL_TIM_ConfigClockSource+0x20a>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2202      	movs	r2, #2
 8002780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8002792:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002796:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800279e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68ba      	ldr	r2, [r7, #8]
 80027a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a6f      	ldr	r2, [pc, #444]	@ (800296c <HAL_TIM_ConfigClockSource+0x214>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	f000 80c1 	beq.w	8002936 <HAL_TIM_ConfigClockSource+0x1de>
 80027b4:	4a6d      	ldr	r2, [pc, #436]	@ (800296c <HAL_TIM_ConfigClockSource+0x214>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	f200 80c6 	bhi.w	8002948 <HAL_TIM_ConfigClockSource+0x1f0>
 80027bc:	4a6c      	ldr	r2, [pc, #432]	@ (8002970 <HAL_TIM_ConfigClockSource+0x218>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	f000 80b9 	beq.w	8002936 <HAL_TIM_ConfigClockSource+0x1de>
 80027c4:	4a6a      	ldr	r2, [pc, #424]	@ (8002970 <HAL_TIM_ConfigClockSource+0x218>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	f200 80be 	bhi.w	8002948 <HAL_TIM_ConfigClockSource+0x1f0>
 80027cc:	4a69      	ldr	r2, [pc, #420]	@ (8002974 <HAL_TIM_ConfigClockSource+0x21c>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	f000 80b1 	beq.w	8002936 <HAL_TIM_ConfigClockSource+0x1de>
 80027d4:	4a67      	ldr	r2, [pc, #412]	@ (8002974 <HAL_TIM_ConfigClockSource+0x21c>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	f200 80b6 	bhi.w	8002948 <HAL_TIM_ConfigClockSource+0x1f0>
 80027dc:	4a66      	ldr	r2, [pc, #408]	@ (8002978 <HAL_TIM_ConfigClockSource+0x220>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	f000 80a9 	beq.w	8002936 <HAL_TIM_ConfigClockSource+0x1de>
 80027e4:	4a64      	ldr	r2, [pc, #400]	@ (8002978 <HAL_TIM_ConfigClockSource+0x220>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	f200 80ae 	bhi.w	8002948 <HAL_TIM_ConfigClockSource+0x1f0>
 80027ec:	4a63      	ldr	r2, [pc, #396]	@ (800297c <HAL_TIM_ConfigClockSource+0x224>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	f000 80a1 	beq.w	8002936 <HAL_TIM_ConfigClockSource+0x1de>
 80027f4:	4a61      	ldr	r2, [pc, #388]	@ (800297c <HAL_TIM_ConfigClockSource+0x224>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	f200 80a6 	bhi.w	8002948 <HAL_TIM_ConfigClockSource+0x1f0>
 80027fc:	4a60      	ldr	r2, [pc, #384]	@ (8002980 <HAL_TIM_ConfigClockSource+0x228>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	f000 8099 	beq.w	8002936 <HAL_TIM_ConfigClockSource+0x1de>
 8002804:	4a5e      	ldr	r2, [pc, #376]	@ (8002980 <HAL_TIM_ConfigClockSource+0x228>)
 8002806:	4293      	cmp	r3, r2
 8002808:	f200 809e 	bhi.w	8002948 <HAL_TIM_ConfigClockSource+0x1f0>
 800280c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8002810:	f000 8091 	beq.w	8002936 <HAL_TIM_ConfigClockSource+0x1de>
 8002814:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8002818:	f200 8096 	bhi.w	8002948 <HAL_TIM_ConfigClockSource+0x1f0>
 800281c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002820:	f000 8089 	beq.w	8002936 <HAL_TIM_ConfigClockSource+0x1de>
 8002824:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002828:	f200 808e 	bhi.w	8002948 <HAL_TIM_ConfigClockSource+0x1f0>
 800282c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002830:	d03e      	beq.n	80028b0 <HAL_TIM_ConfigClockSource+0x158>
 8002832:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002836:	f200 8087 	bhi.w	8002948 <HAL_TIM_ConfigClockSource+0x1f0>
 800283a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800283e:	f000 8086 	beq.w	800294e <HAL_TIM_ConfigClockSource+0x1f6>
 8002842:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002846:	d87f      	bhi.n	8002948 <HAL_TIM_ConfigClockSource+0x1f0>
 8002848:	2b70      	cmp	r3, #112	@ 0x70
 800284a:	d01a      	beq.n	8002882 <HAL_TIM_ConfigClockSource+0x12a>
 800284c:	2b70      	cmp	r3, #112	@ 0x70
 800284e:	d87b      	bhi.n	8002948 <HAL_TIM_ConfigClockSource+0x1f0>
 8002850:	2b60      	cmp	r3, #96	@ 0x60
 8002852:	d050      	beq.n	80028f6 <HAL_TIM_ConfigClockSource+0x19e>
 8002854:	2b60      	cmp	r3, #96	@ 0x60
 8002856:	d877      	bhi.n	8002948 <HAL_TIM_ConfigClockSource+0x1f0>
 8002858:	2b50      	cmp	r3, #80	@ 0x50
 800285a:	d03c      	beq.n	80028d6 <HAL_TIM_ConfigClockSource+0x17e>
 800285c:	2b50      	cmp	r3, #80	@ 0x50
 800285e:	d873      	bhi.n	8002948 <HAL_TIM_ConfigClockSource+0x1f0>
 8002860:	2b40      	cmp	r3, #64	@ 0x40
 8002862:	d058      	beq.n	8002916 <HAL_TIM_ConfigClockSource+0x1be>
 8002864:	2b40      	cmp	r3, #64	@ 0x40
 8002866:	d86f      	bhi.n	8002948 <HAL_TIM_ConfigClockSource+0x1f0>
 8002868:	2b30      	cmp	r3, #48	@ 0x30
 800286a:	d064      	beq.n	8002936 <HAL_TIM_ConfigClockSource+0x1de>
 800286c:	2b30      	cmp	r3, #48	@ 0x30
 800286e:	d86b      	bhi.n	8002948 <HAL_TIM_ConfigClockSource+0x1f0>
 8002870:	2b20      	cmp	r3, #32
 8002872:	d060      	beq.n	8002936 <HAL_TIM_ConfigClockSource+0x1de>
 8002874:	2b20      	cmp	r3, #32
 8002876:	d867      	bhi.n	8002948 <HAL_TIM_ConfigClockSource+0x1f0>
 8002878:	2b00      	cmp	r3, #0
 800287a:	d05c      	beq.n	8002936 <HAL_TIM_ConfigClockSource+0x1de>
 800287c:	2b10      	cmp	r3, #16
 800287e:	d05a      	beq.n	8002936 <HAL_TIM_ConfigClockSource+0x1de>
 8002880:	e062      	b.n	8002948 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002892:	f000 f9cf 	bl	8002c34 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80028a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68ba      	ldr	r2, [r7, #8]
 80028ac:	609a      	str	r2, [r3, #8]
      break;
 80028ae:	e04f      	b.n	8002950 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80028c0:	f000 f9b8 	bl	8002c34 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	689a      	ldr	r2, [r3, #8]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80028d2:	609a      	str	r2, [r3, #8]
      break;
 80028d4:	e03c      	b.n	8002950 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028e2:	461a      	mov	r2, r3
 80028e4:	f000 f92a 	bl	8002b3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2150      	movs	r1, #80	@ 0x50
 80028ee:	4618      	mov	r0, r3
 80028f0:	f000 f983 	bl	8002bfa <TIM_ITRx_SetConfig>
      break;
 80028f4:	e02c      	b.n	8002950 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002902:	461a      	mov	r2, r3
 8002904:	f000 f949 	bl	8002b9a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2160      	movs	r1, #96	@ 0x60
 800290e:	4618      	mov	r0, r3
 8002910:	f000 f973 	bl	8002bfa <TIM_ITRx_SetConfig>
      break;
 8002914:	e01c      	b.n	8002950 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002922:	461a      	mov	r2, r3
 8002924:	f000 f90a 	bl	8002b3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2140      	movs	r1, #64	@ 0x40
 800292e:	4618      	mov	r0, r3
 8002930:	f000 f963 	bl	8002bfa <TIM_ITRx_SetConfig>
      break;
 8002934:	e00c      	b.n	8002950 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4619      	mov	r1, r3
 8002940:	4610      	mov	r0, r2
 8002942:	f000 f95a 	bl	8002bfa <TIM_ITRx_SetConfig>
      break;
 8002946:	e003      	b.n	8002950 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	73fb      	strb	r3, [r7, #15]
      break;
 800294c:	e000      	b.n	8002950 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800294e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002960:	7bfb      	ldrb	r3, [r7, #15]
}
 8002962:	4618      	mov	r0, r3
 8002964:	3710      	adds	r7, #16
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	00100070 	.word	0x00100070
 8002970:	00100060 	.word	0x00100060
 8002974:	00100050 	.word	0x00100050
 8002978:	00100040 	.word	0x00100040
 800297c:	00100030 	.word	0x00100030
 8002980:	00100020 	.word	0x00100020

08002984 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029c8:	bf00      	nop
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a4c      	ldr	r2, [pc, #304]	@ (8002b18 <TIM_Base_SetConfig+0x144>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d017      	beq.n	8002a1c <TIM_Base_SetConfig+0x48>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029f2:	d013      	beq.n	8002a1c <TIM_Base_SetConfig+0x48>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a49      	ldr	r2, [pc, #292]	@ (8002b1c <TIM_Base_SetConfig+0x148>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d00f      	beq.n	8002a1c <TIM_Base_SetConfig+0x48>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4a48      	ldr	r2, [pc, #288]	@ (8002b20 <TIM_Base_SetConfig+0x14c>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d00b      	beq.n	8002a1c <TIM_Base_SetConfig+0x48>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a47      	ldr	r2, [pc, #284]	@ (8002b24 <TIM_Base_SetConfig+0x150>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d007      	beq.n	8002a1c <TIM_Base_SetConfig+0x48>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a46      	ldr	r2, [pc, #280]	@ (8002b28 <TIM_Base_SetConfig+0x154>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d003      	beq.n	8002a1c <TIM_Base_SetConfig+0x48>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a45      	ldr	r2, [pc, #276]	@ (8002b2c <TIM_Base_SetConfig+0x158>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d108      	bne.n	8002a2e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a39      	ldr	r2, [pc, #228]	@ (8002b18 <TIM_Base_SetConfig+0x144>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d023      	beq.n	8002a7e <TIM_Base_SetConfig+0xaa>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a3c:	d01f      	beq.n	8002a7e <TIM_Base_SetConfig+0xaa>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a36      	ldr	r2, [pc, #216]	@ (8002b1c <TIM_Base_SetConfig+0x148>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d01b      	beq.n	8002a7e <TIM_Base_SetConfig+0xaa>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a35      	ldr	r2, [pc, #212]	@ (8002b20 <TIM_Base_SetConfig+0x14c>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d017      	beq.n	8002a7e <TIM_Base_SetConfig+0xaa>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a34      	ldr	r2, [pc, #208]	@ (8002b24 <TIM_Base_SetConfig+0x150>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d013      	beq.n	8002a7e <TIM_Base_SetConfig+0xaa>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a33      	ldr	r2, [pc, #204]	@ (8002b28 <TIM_Base_SetConfig+0x154>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d00f      	beq.n	8002a7e <TIM_Base_SetConfig+0xaa>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a33      	ldr	r2, [pc, #204]	@ (8002b30 <TIM_Base_SetConfig+0x15c>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d00b      	beq.n	8002a7e <TIM_Base_SetConfig+0xaa>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a32      	ldr	r2, [pc, #200]	@ (8002b34 <TIM_Base_SetConfig+0x160>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d007      	beq.n	8002a7e <TIM_Base_SetConfig+0xaa>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a31      	ldr	r2, [pc, #196]	@ (8002b38 <TIM_Base_SetConfig+0x164>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d003      	beq.n	8002a7e <TIM_Base_SetConfig+0xaa>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a2c      	ldr	r2, [pc, #176]	@ (8002b2c <TIM_Base_SetConfig+0x158>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d108      	bne.n	8002a90 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	68fa      	ldr	r2, [r7, #12]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	68fa      	ldr	r2, [r7, #12]
 8002aa2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	689a      	ldr	r2, [r3, #8]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a18      	ldr	r2, [pc, #96]	@ (8002b18 <TIM_Base_SetConfig+0x144>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d013      	beq.n	8002ae4 <TIM_Base_SetConfig+0x110>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4a1a      	ldr	r2, [pc, #104]	@ (8002b28 <TIM_Base_SetConfig+0x154>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d00f      	beq.n	8002ae4 <TIM_Base_SetConfig+0x110>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4a1a      	ldr	r2, [pc, #104]	@ (8002b30 <TIM_Base_SetConfig+0x15c>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d00b      	beq.n	8002ae4 <TIM_Base_SetConfig+0x110>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4a19      	ldr	r2, [pc, #100]	@ (8002b34 <TIM_Base_SetConfig+0x160>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d007      	beq.n	8002ae4 <TIM_Base_SetConfig+0x110>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a18      	ldr	r2, [pc, #96]	@ (8002b38 <TIM_Base_SetConfig+0x164>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d003      	beq.n	8002ae4 <TIM_Base_SetConfig+0x110>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a13      	ldr	r2, [pc, #76]	@ (8002b2c <TIM_Base_SetConfig+0x158>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d103      	bne.n	8002aec <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	691a      	ldr	r2, [r3, #16]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d105      	bne.n	8002b0a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	f023 0201 	bic.w	r2, r3, #1
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	611a      	str	r2, [r3, #16]
  }
}
 8002b0a:	bf00      	nop
 8002b0c:	3714      	adds	r7, #20
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	40012c00 	.word	0x40012c00
 8002b1c:	40000400 	.word	0x40000400
 8002b20:	40000800 	.word	0x40000800
 8002b24:	40000c00 	.word	0x40000c00
 8002b28:	40013400 	.word	0x40013400
 8002b2c:	40015000 	.word	0x40015000
 8002b30:	40014000 	.word	0x40014000
 8002b34:	40014400 	.word	0x40014400
 8002b38:	40014800 	.word	0x40014800

08002b3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b087      	sub	sp, #28
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6a1b      	ldr	r3, [r3, #32]
 8002b4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	f023 0201 	bic.w	r2, r3, #1
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002b66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	011b      	lsls	r3, r3, #4
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	f023 030a 	bic.w	r3, r3, #10
 8002b78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b7a:	697a      	ldr	r2, [r7, #20]
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	621a      	str	r2, [r3, #32]
}
 8002b8e:	bf00      	nop
 8002b90:	371c      	adds	r7, #28
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr

08002b9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b087      	sub	sp, #28
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	60f8      	str	r0, [r7, #12]
 8002ba2:	60b9      	str	r1, [r7, #8]
 8002ba4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6a1b      	ldr	r3, [r3, #32]
 8002baa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6a1b      	ldr	r3, [r3, #32]
 8002bb0:	f023 0210 	bic.w	r2, r3, #16
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002bc4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	031b      	lsls	r3, r3, #12
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002bd6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	011b      	lsls	r3, r3, #4
 8002bdc:	697a      	ldr	r2, [r7, #20]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	621a      	str	r2, [r3, #32]
}
 8002bee:	bf00      	nop
 8002bf0:	371c      	adds	r7, #28
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr

08002bfa <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b085      	sub	sp, #20
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
 8002c02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8002c10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c16:	683a      	ldr	r2, [r7, #0]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	f043 0307 	orr.w	r3, r3, #7
 8002c20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	609a      	str	r2, [r3, #8]
}
 8002c28:	bf00      	nop
 8002c2a:	3714      	adds	r7, #20
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b087      	sub	sp, #28
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
 8002c40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002c4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	021a      	lsls	r2, r3, #8
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	431a      	orrs	r2, r3
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	697a      	ldr	r2, [r7, #20]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	697a      	ldr	r2, [r7, #20]
 8002c66:	609a      	str	r2, [r3, #8]
}
 8002c68:	bf00      	nop
 8002c6a:	371c      	adds	r7, #28
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d101      	bne.n	8002c8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c88:	2302      	movs	r3, #2
 8002c8a:	e074      	b.n	8002d76 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2202      	movs	r2, #2
 8002c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a34      	ldr	r2, [pc, #208]	@ (8002d84 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d009      	beq.n	8002cca <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a33      	ldr	r2, [pc, #204]	@ (8002d88 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d004      	beq.n	8002cca <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a31      	ldr	r2, [pc, #196]	@ (8002d8c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d108      	bne.n	8002cdc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8002cd0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8002ce2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ce6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68fa      	ldr	r2, [r7, #12]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a21      	ldr	r2, [pc, #132]	@ (8002d84 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d022      	beq.n	8002d4a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d0c:	d01d      	beq.n	8002d4a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a1f      	ldr	r2, [pc, #124]	@ (8002d90 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d018      	beq.n	8002d4a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a1d      	ldr	r2, [pc, #116]	@ (8002d94 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d013      	beq.n	8002d4a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a1c      	ldr	r2, [pc, #112]	@ (8002d98 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d00e      	beq.n	8002d4a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a15      	ldr	r2, [pc, #84]	@ (8002d88 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d009      	beq.n	8002d4a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a18      	ldr	r2, [pc, #96]	@ (8002d9c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d004      	beq.n	8002d4a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a11      	ldr	r2, [pc, #68]	@ (8002d8c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d10c      	bne.n	8002d64 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	68ba      	ldr	r2, [r7, #8]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68ba      	ldr	r2, [r7, #8]
 8002d62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3714      	adds	r7, #20
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	40012c00 	.word	0x40012c00
 8002d88:	40013400 	.word	0x40013400
 8002d8c:	40015000 	.word	0x40015000
 8002d90:	40000400 	.word	0x40000400
 8002d94:	40000800 	.word	0x40000800
 8002d98:	40000c00 	.word	0x40000c00
 8002d9c:	40014000 	.word	0x40014000

08002da0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002dbc:	bf00      	nop
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8002de4:	bf00      	nop
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8002df8:	bf00      	nop
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d101      	bne.n	8002e3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e042      	b.n	8002ec4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d106      	bne.n	8002e56 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f7fd fe0f 	bl	8000a74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2224      	movs	r2, #36	@ 0x24
 8002e5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f022 0201 	bic.w	r2, r2, #1
 8002e6c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d002      	beq.n	8002e7c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 fc7a 	bl	8003770 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f000 f97b 	bl	8003178 <UART_SetConfig>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d101      	bne.n	8002e8c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e01b      	b.n	8002ec4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	685a      	ldr	r2, [r3, #4]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	689a      	ldr	r2, [r3, #8]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002eaa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f042 0201 	orr.w	r2, r2, #1
 8002eba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f000 fcf9 	bl	80038b4 <UART_CheckIdleState>
 8002ec2:	4603      	mov	r3, r0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3708      	adds	r7, #8
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b08a      	sub	sp, #40	@ 0x28
 8002ed0:	af02      	add	r7, sp, #8
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	603b      	str	r3, [r7, #0]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ee2:	2b20      	cmp	r3, #32
 8002ee4:	d17b      	bne.n	8002fde <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d002      	beq.n	8002ef2 <HAL_UART_Transmit+0x26>
 8002eec:	88fb      	ldrh	r3, [r7, #6]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e074      	b.n	8002fe0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2221      	movs	r2, #33	@ 0x21
 8002f02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f06:	f7fd ff21 	bl	8000d4c <HAL_GetTick>
 8002f0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	88fa      	ldrh	r2, [r7, #6]
 8002f10:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	88fa      	ldrh	r2, [r7, #6]
 8002f18:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f24:	d108      	bne.n	8002f38 <HAL_UART_Transmit+0x6c>
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d104      	bne.n	8002f38 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	61bb      	str	r3, [r7, #24]
 8002f36:	e003      	b.n	8002f40 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f40:	e030      	b.n	8002fa4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	9300      	str	r3, [sp, #0]
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	2180      	movs	r1, #128	@ 0x80
 8002f4c:	68f8      	ldr	r0, [r7, #12]
 8002f4e:	f000 fd5b 	bl	8003a08 <UART_WaitOnFlagUntilTimeout>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d005      	beq.n	8002f64 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2220      	movs	r2, #32
 8002f5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e03d      	b.n	8002fe0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d10b      	bne.n	8002f82 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	881b      	ldrh	r3, [r3, #0]
 8002f6e:	461a      	mov	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f78:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	3302      	adds	r3, #2
 8002f7e:	61bb      	str	r3, [r7, #24]
 8002f80:	e007      	b.n	8002f92 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	781a      	ldrb	r2, [r3, #0]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	3301      	adds	r3, #1
 8002f90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	b29a      	uxth	r2, r3
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1c8      	bne.n	8002f42 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	9300      	str	r3, [sp, #0]
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	2140      	movs	r1, #64	@ 0x40
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f000 fd24 	bl	8003a08 <UART_WaitOnFlagUntilTimeout>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d005      	beq.n	8002fd2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2220      	movs	r2, #32
 8002fca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e006      	b.n	8002fe0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2220      	movs	r2, #32
 8002fd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	e000      	b.n	8002fe0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8002fde:	2302      	movs	r3, #2
  }
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3720      	adds	r7, #32
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b08a      	sub	sp, #40	@ 0x28
 8002fec:	af02      	add	r7, sp, #8
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	603b      	str	r3, [r7, #0]
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ffe:	2b20      	cmp	r3, #32
 8003000:	f040 80b5 	bne.w	800316e <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d002      	beq.n	8003010 <HAL_UART_Receive+0x28>
 800300a:	88fb      	ldrh	r3, [r7, #6]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d101      	bne.n	8003014 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e0ad      	b.n	8003170 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2200      	movs	r2, #0
 8003018:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2222      	movs	r2, #34	@ 0x22
 8003020:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2200      	movs	r2, #0
 8003028:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800302a:	f7fd fe8f 	bl	8000d4c <HAL_GetTick>
 800302e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	88fa      	ldrh	r2, [r7, #6]
 8003034:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	88fa      	ldrh	r2, [r7, #6]
 800303c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003048:	d10e      	bne.n	8003068 <HAL_UART_Receive+0x80>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d105      	bne.n	800305e <HAL_UART_Receive+0x76>
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003058:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800305c:	e02d      	b.n	80030ba <HAL_UART_Receive+0xd2>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	22ff      	movs	r2, #255	@ 0xff
 8003062:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003066:	e028      	b.n	80030ba <HAL_UART_Receive+0xd2>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d10d      	bne.n	800308c <HAL_UART_Receive+0xa4>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d104      	bne.n	8003082 <HAL_UART_Receive+0x9a>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	22ff      	movs	r2, #255	@ 0xff
 800307c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003080:	e01b      	b.n	80030ba <HAL_UART_Receive+0xd2>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	227f      	movs	r2, #127	@ 0x7f
 8003086:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800308a:	e016      	b.n	80030ba <HAL_UART_Receive+0xd2>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003094:	d10d      	bne.n	80030b2 <HAL_UART_Receive+0xca>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d104      	bne.n	80030a8 <HAL_UART_Receive+0xc0>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	227f      	movs	r2, #127	@ 0x7f
 80030a2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80030a6:	e008      	b.n	80030ba <HAL_UART_Receive+0xd2>
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	223f      	movs	r2, #63	@ 0x3f
 80030ac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80030b0:	e003      	b.n	80030ba <HAL_UART_Receive+0xd2>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80030c0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030ca:	d108      	bne.n	80030de <HAL_UART_Receive+0xf6>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d104      	bne.n	80030de <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80030d4:	2300      	movs	r3, #0
 80030d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	61bb      	str	r3, [r7, #24]
 80030dc:	e003      	b.n	80030e6 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030e2:	2300      	movs	r3, #0
 80030e4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80030e6:	e036      	b.n	8003156 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	9300      	str	r3, [sp, #0]
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	2200      	movs	r2, #0
 80030f0:	2120      	movs	r1, #32
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	f000 fc88 	bl	8003a08 <UART_WaitOnFlagUntilTimeout>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d005      	beq.n	800310a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2220      	movs	r2, #32
 8003102:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e032      	b.n	8003170 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d10c      	bne.n	800312a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003116:	b29a      	uxth	r2, r3
 8003118:	8a7b      	ldrh	r3, [r7, #18]
 800311a:	4013      	ands	r3, r2
 800311c:	b29a      	uxth	r2, r3
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	3302      	adds	r3, #2
 8003126:	61bb      	str	r3, [r7, #24]
 8003128:	e00c      	b.n	8003144 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003130:	b2da      	uxtb	r2, r3
 8003132:	8a7b      	ldrh	r3, [r7, #18]
 8003134:	b2db      	uxtb	r3, r3
 8003136:	4013      	ands	r3, r2
 8003138:	b2da      	uxtb	r2, r3
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	3301      	adds	r3, #1
 8003142:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800314a:	b29b      	uxth	r3, r3
 800314c:	3b01      	subs	r3, #1
 800314e:	b29a      	uxth	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800315c:	b29b      	uxth	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1c2      	bne.n	80030e8 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2220      	movs	r2, #32
 8003166:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800316a:	2300      	movs	r3, #0
 800316c:	e000      	b.n	8003170 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800316e:	2302      	movs	r3, #2
  }
}
 8003170:	4618      	mov	r0, r3
 8003172:	3720      	adds	r7, #32
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003178:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800317c:	b08c      	sub	sp, #48	@ 0x30
 800317e:	af00      	add	r7, sp, #0
 8003180:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003182:	2300      	movs	r3, #0
 8003184:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	689a      	ldr	r2, [r3, #8]
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	431a      	orrs	r2, r3
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	431a      	orrs	r2, r3
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	69db      	ldr	r3, [r3, #28]
 800319c:	4313      	orrs	r3, r2
 800319e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	4baa      	ldr	r3, [pc, #680]	@ (8003450 <UART_SetConfig+0x2d8>)
 80031a8:	4013      	ands	r3, r2
 80031aa:	697a      	ldr	r2, [r7, #20]
 80031ac:	6812      	ldr	r2, [r2, #0]
 80031ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80031b0:	430b      	orrs	r3, r1
 80031b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	68da      	ldr	r2, [r3, #12]
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	430a      	orrs	r2, r1
 80031c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a9f      	ldr	r2, [pc, #636]	@ (8003454 <UART_SetConfig+0x2dc>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d004      	beq.n	80031e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	6a1b      	ldr	r3, [r3, #32]
 80031de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031e0:	4313      	orrs	r3, r2
 80031e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80031ee:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	6812      	ldr	r2, [r2, #0]
 80031f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80031f8:	430b      	orrs	r3, r1
 80031fa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003202:	f023 010f 	bic.w	r1, r3, #15
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a90      	ldr	r2, [pc, #576]	@ (8003458 <UART_SetConfig+0x2e0>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d125      	bne.n	8003268 <UART_SetConfig+0xf0>
 800321c:	4b8f      	ldr	r3, [pc, #572]	@ (800345c <UART_SetConfig+0x2e4>)
 800321e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003222:	f003 0303 	and.w	r3, r3, #3
 8003226:	2b03      	cmp	r3, #3
 8003228:	d81a      	bhi.n	8003260 <UART_SetConfig+0xe8>
 800322a:	a201      	add	r2, pc, #4	@ (adr r2, 8003230 <UART_SetConfig+0xb8>)
 800322c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003230:	08003241 	.word	0x08003241
 8003234:	08003251 	.word	0x08003251
 8003238:	08003249 	.word	0x08003249
 800323c:	08003259 	.word	0x08003259
 8003240:	2301      	movs	r3, #1
 8003242:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003246:	e116      	b.n	8003476 <UART_SetConfig+0x2fe>
 8003248:	2302      	movs	r3, #2
 800324a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800324e:	e112      	b.n	8003476 <UART_SetConfig+0x2fe>
 8003250:	2304      	movs	r3, #4
 8003252:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003256:	e10e      	b.n	8003476 <UART_SetConfig+0x2fe>
 8003258:	2308      	movs	r3, #8
 800325a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800325e:	e10a      	b.n	8003476 <UART_SetConfig+0x2fe>
 8003260:	2310      	movs	r3, #16
 8003262:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003266:	e106      	b.n	8003476 <UART_SetConfig+0x2fe>
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a7c      	ldr	r2, [pc, #496]	@ (8003460 <UART_SetConfig+0x2e8>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d138      	bne.n	80032e4 <UART_SetConfig+0x16c>
 8003272:	4b7a      	ldr	r3, [pc, #488]	@ (800345c <UART_SetConfig+0x2e4>)
 8003274:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003278:	f003 030c 	and.w	r3, r3, #12
 800327c:	2b0c      	cmp	r3, #12
 800327e:	d82d      	bhi.n	80032dc <UART_SetConfig+0x164>
 8003280:	a201      	add	r2, pc, #4	@ (adr r2, 8003288 <UART_SetConfig+0x110>)
 8003282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003286:	bf00      	nop
 8003288:	080032bd 	.word	0x080032bd
 800328c:	080032dd 	.word	0x080032dd
 8003290:	080032dd 	.word	0x080032dd
 8003294:	080032dd 	.word	0x080032dd
 8003298:	080032cd 	.word	0x080032cd
 800329c:	080032dd 	.word	0x080032dd
 80032a0:	080032dd 	.word	0x080032dd
 80032a4:	080032dd 	.word	0x080032dd
 80032a8:	080032c5 	.word	0x080032c5
 80032ac:	080032dd 	.word	0x080032dd
 80032b0:	080032dd 	.word	0x080032dd
 80032b4:	080032dd 	.word	0x080032dd
 80032b8:	080032d5 	.word	0x080032d5
 80032bc:	2300      	movs	r3, #0
 80032be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032c2:	e0d8      	b.n	8003476 <UART_SetConfig+0x2fe>
 80032c4:	2302      	movs	r3, #2
 80032c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032ca:	e0d4      	b.n	8003476 <UART_SetConfig+0x2fe>
 80032cc:	2304      	movs	r3, #4
 80032ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032d2:	e0d0      	b.n	8003476 <UART_SetConfig+0x2fe>
 80032d4:	2308      	movs	r3, #8
 80032d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032da:	e0cc      	b.n	8003476 <UART_SetConfig+0x2fe>
 80032dc:	2310      	movs	r3, #16
 80032de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032e2:	e0c8      	b.n	8003476 <UART_SetConfig+0x2fe>
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a5e      	ldr	r2, [pc, #376]	@ (8003464 <UART_SetConfig+0x2ec>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d125      	bne.n	800333a <UART_SetConfig+0x1c2>
 80032ee:	4b5b      	ldr	r3, [pc, #364]	@ (800345c <UART_SetConfig+0x2e4>)
 80032f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032f4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80032f8:	2b30      	cmp	r3, #48	@ 0x30
 80032fa:	d016      	beq.n	800332a <UART_SetConfig+0x1b2>
 80032fc:	2b30      	cmp	r3, #48	@ 0x30
 80032fe:	d818      	bhi.n	8003332 <UART_SetConfig+0x1ba>
 8003300:	2b20      	cmp	r3, #32
 8003302:	d00a      	beq.n	800331a <UART_SetConfig+0x1a2>
 8003304:	2b20      	cmp	r3, #32
 8003306:	d814      	bhi.n	8003332 <UART_SetConfig+0x1ba>
 8003308:	2b00      	cmp	r3, #0
 800330a:	d002      	beq.n	8003312 <UART_SetConfig+0x19a>
 800330c:	2b10      	cmp	r3, #16
 800330e:	d008      	beq.n	8003322 <UART_SetConfig+0x1aa>
 8003310:	e00f      	b.n	8003332 <UART_SetConfig+0x1ba>
 8003312:	2300      	movs	r3, #0
 8003314:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003318:	e0ad      	b.n	8003476 <UART_SetConfig+0x2fe>
 800331a:	2302      	movs	r3, #2
 800331c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003320:	e0a9      	b.n	8003476 <UART_SetConfig+0x2fe>
 8003322:	2304      	movs	r3, #4
 8003324:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003328:	e0a5      	b.n	8003476 <UART_SetConfig+0x2fe>
 800332a:	2308      	movs	r3, #8
 800332c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003330:	e0a1      	b.n	8003476 <UART_SetConfig+0x2fe>
 8003332:	2310      	movs	r3, #16
 8003334:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003338:	e09d      	b.n	8003476 <UART_SetConfig+0x2fe>
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a4a      	ldr	r2, [pc, #296]	@ (8003468 <UART_SetConfig+0x2f0>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d125      	bne.n	8003390 <UART_SetConfig+0x218>
 8003344:	4b45      	ldr	r3, [pc, #276]	@ (800345c <UART_SetConfig+0x2e4>)
 8003346:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800334a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800334e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003350:	d016      	beq.n	8003380 <UART_SetConfig+0x208>
 8003352:	2bc0      	cmp	r3, #192	@ 0xc0
 8003354:	d818      	bhi.n	8003388 <UART_SetConfig+0x210>
 8003356:	2b80      	cmp	r3, #128	@ 0x80
 8003358:	d00a      	beq.n	8003370 <UART_SetConfig+0x1f8>
 800335a:	2b80      	cmp	r3, #128	@ 0x80
 800335c:	d814      	bhi.n	8003388 <UART_SetConfig+0x210>
 800335e:	2b00      	cmp	r3, #0
 8003360:	d002      	beq.n	8003368 <UART_SetConfig+0x1f0>
 8003362:	2b40      	cmp	r3, #64	@ 0x40
 8003364:	d008      	beq.n	8003378 <UART_SetConfig+0x200>
 8003366:	e00f      	b.n	8003388 <UART_SetConfig+0x210>
 8003368:	2300      	movs	r3, #0
 800336a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800336e:	e082      	b.n	8003476 <UART_SetConfig+0x2fe>
 8003370:	2302      	movs	r3, #2
 8003372:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003376:	e07e      	b.n	8003476 <UART_SetConfig+0x2fe>
 8003378:	2304      	movs	r3, #4
 800337a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800337e:	e07a      	b.n	8003476 <UART_SetConfig+0x2fe>
 8003380:	2308      	movs	r3, #8
 8003382:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003386:	e076      	b.n	8003476 <UART_SetConfig+0x2fe>
 8003388:	2310      	movs	r3, #16
 800338a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800338e:	e072      	b.n	8003476 <UART_SetConfig+0x2fe>
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a35      	ldr	r2, [pc, #212]	@ (800346c <UART_SetConfig+0x2f4>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d12a      	bne.n	80033f0 <UART_SetConfig+0x278>
 800339a:	4b30      	ldr	r3, [pc, #192]	@ (800345c <UART_SetConfig+0x2e4>)
 800339c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80033a8:	d01a      	beq.n	80033e0 <UART_SetConfig+0x268>
 80033aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80033ae:	d81b      	bhi.n	80033e8 <UART_SetConfig+0x270>
 80033b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033b4:	d00c      	beq.n	80033d0 <UART_SetConfig+0x258>
 80033b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033ba:	d815      	bhi.n	80033e8 <UART_SetConfig+0x270>
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d003      	beq.n	80033c8 <UART_SetConfig+0x250>
 80033c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033c4:	d008      	beq.n	80033d8 <UART_SetConfig+0x260>
 80033c6:	e00f      	b.n	80033e8 <UART_SetConfig+0x270>
 80033c8:	2300      	movs	r3, #0
 80033ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80033ce:	e052      	b.n	8003476 <UART_SetConfig+0x2fe>
 80033d0:	2302      	movs	r3, #2
 80033d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80033d6:	e04e      	b.n	8003476 <UART_SetConfig+0x2fe>
 80033d8:	2304      	movs	r3, #4
 80033da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80033de:	e04a      	b.n	8003476 <UART_SetConfig+0x2fe>
 80033e0:	2308      	movs	r3, #8
 80033e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80033e6:	e046      	b.n	8003476 <UART_SetConfig+0x2fe>
 80033e8:	2310      	movs	r3, #16
 80033ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80033ee:	e042      	b.n	8003476 <UART_SetConfig+0x2fe>
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a17      	ldr	r2, [pc, #92]	@ (8003454 <UART_SetConfig+0x2dc>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d13a      	bne.n	8003470 <UART_SetConfig+0x2f8>
 80033fa:	4b18      	ldr	r3, [pc, #96]	@ (800345c <UART_SetConfig+0x2e4>)
 80033fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003400:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003404:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003408:	d01a      	beq.n	8003440 <UART_SetConfig+0x2c8>
 800340a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800340e:	d81b      	bhi.n	8003448 <UART_SetConfig+0x2d0>
 8003410:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003414:	d00c      	beq.n	8003430 <UART_SetConfig+0x2b8>
 8003416:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800341a:	d815      	bhi.n	8003448 <UART_SetConfig+0x2d0>
 800341c:	2b00      	cmp	r3, #0
 800341e:	d003      	beq.n	8003428 <UART_SetConfig+0x2b0>
 8003420:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003424:	d008      	beq.n	8003438 <UART_SetConfig+0x2c0>
 8003426:	e00f      	b.n	8003448 <UART_SetConfig+0x2d0>
 8003428:	2300      	movs	r3, #0
 800342a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800342e:	e022      	b.n	8003476 <UART_SetConfig+0x2fe>
 8003430:	2302      	movs	r3, #2
 8003432:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003436:	e01e      	b.n	8003476 <UART_SetConfig+0x2fe>
 8003438:	2304      	movs	r3, #4
 800343a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800343e:	e01a      	b.n	8003476 <UART_SetConfig+0x2fe>
 8003440:	2308      	movs	r3, #8
 8003442:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003446:	e016      	b.n	8003476 <UART_SetConfig+0x2fe>
 8003448:	2310      	movs	r3, #16
 800344a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800344e:	e012      	b.n	8003476 <UART_SetConfig+0x2fe>
 8003450:	cfff69f3 	.word	0xcfff69f3
 8003454:	40008000 	.word	0x40008000
 8003458:	40013800 	.word	0x40013800
 800345c:	40021000 	.word	0x40021000
 8003460:	40004400 	.word	0x40004400
 8003464:	40004800 	.word	0x40004800
 8003468:	40004c00 	.word	0x40004c00
 800346c:	40005000 	.word	0x40005000
 8003470:	2310      	movs	r3, #16
 8003472:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4aae      	ldr	r2, [pc, #696]	@ (8003734 <UART_SetConfig+0x5bc>)
 800347c:	4293      	cmp	r3, r2
 800347e:	f040 8097 	bne.w	80035b0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003482:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003486:	2b08      	cmp	r3, #8
 8003488:	d823      	bhi.n	80034d2 <UART_SetConfig+0x35a>
 800348a:	a201      	add	r2, pc, #4	@ (adr r2, 8003490 <UART_SetConfig+0x318>)
 800348c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003490:	080034b5 	.word	0x080034b5
 8003494:	080034d3 	.word	0x080034d3
 8003498:	080034bd 	.word	0x080034bd
 800349c:	080034d3 	.word	0x080034d3
 80034a0:	080034c3 	.word	0x080034c3
 80034a4:	080034d3 	.word	0x080034d3
 80034a8:	080034d3 	.word	0x080034d3
 80034ac:	080034d3 	.word	0x080034d3
 80034b0:	080034cb 	.word	0x080034cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034b4:	f7fe fc70 	bl	8001d98 <HAL_RCC_GetPCLK1Freq>
 80034b8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80034ba:	e010      	b.n	80034de <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034bc:	4b9e      	ldr	r3, [pc, #632]	@ (8003738 <UART_SetConfig+0x5c0>)
 80034be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80034c0:	e00d      	b.n	80034de <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034c2:	f7fe fbfb 	bl	8001cbc <HAL_RCC_GetSysClockFreq>
 80034c6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80034c8:	e009      	b.n	80034de <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034ce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80034d0:	e005      	b.n	80034de <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80034d2:	2300      	movs	r3, #0
 80034d4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80034dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80034de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f000 8130 	beq.w	8003746 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ea:	4a94      	ldr	r2, [pc, #592]	@ (800373c <UART_SetConfig+0x5c4>)
 80034ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034f0:	461a      	mov	r2, r3
 80034f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80034f8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	685a      	ldr	r2, [r3, #4]
 80034fe:	4613      	mov	r3, r2
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	4413      	add	r3, r2
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	429a      	cmp	r2, r3
 8003508:	d305      	bcc.n	8003516 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	429a      	cmp	r2, r3
 8003514:	d903      	bls.n	800351e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800351c:	e113      	b.n	8003746 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800351e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003520:	2200      	movs	r2, #0
 8003522:	60bb      	str	r3, [r7, #8]
 8003524:	60fa      	str	r2, [r7, #12]
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800352a:	4a84      	ldr	r2, [pc, #528]	@ (800373c <UART_SetConfig+0x5c4>)
 800352c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003530:	b29b      	uxth	r3, r3
 8003532:	2200      	movs	r2, #0
 8003534:	603b      	str	r3, [r7, #0]
 8003536:	607a      	str	r2, [r7, #4]
 8003538:	e9d7 2300 	ldrd	r2, r3, [r7]
 800353c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003540:	f7fc febe 	bl	80002c0 <__aeabi_uldivmod>
 8003544:	4602      	mov	r2, r0
 8003546:	460b      	mov	r3, r1
 8003548:	4610      	mov	r0, r2
 800354a:	4619      	mov	r1, r3
 800354c:	f04f 0200 	mov.w	r2, #0
 8003550:	f04f 0300 	mov.w	r3, #0
 8003554:	020b      	lsls	r3, r1, #8
 8003556:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800355a:	0202      	lsls	r2, r0, #8
 800355c:	6979      	ldr	r1, [r7, #20]
 800355e:	6849      	ldr	r1, [r1, #4]
 8003560:	0849      	lsrs	r1, r1, #1
 8003562:	2000      	movs	r0, #0
 8003564:	460c      	mov	r4, r1
 8003566:	4605      	mov	r5, r0
 8003568:	eb12 0804 	adds.w	r8, r2, r4
 800356c:	eb43 0905 	adc.w	r9, r3, r5
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	469a      	mov	sl, r3
 8003578:	4693      	mov	fp, r2
 800357a:	4652      	mov	r2, sl
 800357c:	465b      	mov	r3, fp
 800357e:	4640      	mov	r0, r8
 8003580:	4649      	mov	r1, r9
 8003582:	f7fc fe9d 	bl	80002c0 <__aeabi_uldivmod>
 8003586:	4602      	mov	r2, r0
 8003588:	460b      	mov	r3, r1
 800358a:	4613      	mov	r3, r2
 800358c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800358e:	6a3b      	ldr	r3, [r7, #32]
 8003590:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003594:	d308      	bcc.n	80035a8 <UART_SetConfig+0x430>
 8003596:	6a3b      	ldr	r3, [r7, #32]
 8003598:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800359c:	d204      	bcs.n	80035a8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	6a3a      	ldr	r2, [r7, #32]
 80035a4:	60da      	str	r2, [r3, #12]
 80035a6:	e0ce      	b.n	8003746 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80035ae:	e0ca      	b.n	8003746 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	69db      	ldr	r3, [r3, #28]
 80035b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035b8:	d166      	bne.n	8003688 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80035ba:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80035be:	2b08      	cmp	r3, #8
 80035c0:	d827      	bhi.n	8003612 <UART_SetConfig+0x49a>
 80035c2:	a201      	add	r2, pc, #4	@ (adr r2, 80035c8 <UART_SetConfig+0x450>)
 80035c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c8:	080035ed 	.word	0x080035ed
 80035cc:	080035f5 	.word	0x080035f5
 80035d0:	080035fd 	.word	0x080035fd
 80035d4:	08003613 	.word	0x08003613
 80035d8:	08003603 	.word	0x08003603
 80035dc:	08003613 	.word	0x08003613
 80035e0:	08003613 	.word	0x08003613
 80035e4:	08003613 	.word	0x08003613
 80035e8:	0800360b 	.word	0x0800360b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035ec:	f7fe fbd4 	bl	8001d98 <HAL_RCC_GetPCLK1Freq>
 80035f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80035f2:	e014      	b.n	800361e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035f4:	f7fe fbe6 	bl	8001dc4 <HAL_RCC_GetPCLK2Freq>
 80035f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80035fa:	e010      	b.n	800361e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035fc:	4b4e      	ldr	r3, [pc, #312]	@ (8003738 <UART_SetConfig+0x5c0>)
 80035fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003600:	e00d      	b.n	800361e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003602:	f7fe fb5b 	bl	8001cbc <HAL_RCC_GetSysClockFreq>
 8003606:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003608:	e009      	b.n	800361e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800360a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800360e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003610:	e005      	b.n	800361e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003612:	2300      	movs	r3, #0
 8003614:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800361c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800361e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 8090 	beq.w	8003746 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800362a:	4a44      	ldr	r2, [pc, #272]	@ (800373c <UART_SetConfig+0x5c4>)
 800362c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003630:	461a      	mov	r2, r3
 8003632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003634:	fbb3 f3f2 	udiv	r3, r3, r2
 8003638:	005a      	lsls	r2, r3, #1
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	085b      	lsrs	r3, r3, #1
 8003640:	441a      	add	r2, r3
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	fbb2 f3f3 	udiv	r3, r2, r3
 800364a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800364c:	6a3b      	ldr	r3, [r7, #32]
 800364e:	2b0f      	cmp	r3, #15
 8003650:	d916      	bls.n	8003680 <UART_SetConfig+0x508>
 8003652:	6a3b      	ldr	r3, [r7, #32]
 8003654:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003658:	d212      	bcs.n	8003680 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800365a:	6a3b      	ldr	r3, [r7, #32]
 800365c:	b29b      	uxth	r3, r3
 800365e:	f023 030f 	bic.w	r3, r3, #15
 8003662:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003664:	6a3b      	ldr	r3, [r7, #32]
 8003666:	085b      	lsrs	r3, r3, #1
 8003668:	b29b      	uxth	r3, r3
 800366a:	f003 0307 	and.w	r3, r3, #7
 800366e:	b29a      	uxth	r2, r3
 8003670:	8bfb      	ldrh	r3, [r7, #30]
 8003672:	4313      	orrs	r3, r2
 8003674:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	8bfa      	ldrh	r2, [r7, #30]
 800367c:	60da      	str	r2, [r3, #12]
 800367e:	e062      	b.n	8003746 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003686:	e05e      	b.n	8003746 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003688:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800368c:	2b08      	cmp	r3, #8
 800368e:	d828      	bhi.n	80036e2 <UART_SetConfig+0x56a>
 8003690:	a201      	add	r2, pc, #4	@ (adr r2, 8003698 <UART_SetConfig+0x520>)
 8003692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003696:	bf00      	nop
 8003698:	080036bd 	.word	0x080036bd
 800369c:	080036c5 	.word	0x080036c5
 80036a0:	080036cd 	.word	0x080036cd
 80036a4:	080036e3 	.word	0x080036e3
 80036a8:	080036d3 	.word	0x080036d3
 80036ac:	080036e3 	.word	0x080036e3
 80036b0:	080036e3 	.word	0x080036e3
 80036b4:	080036e3 	.word	0x080036e3
 80036b8:	080036db 	.word	0x080036db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036bc:	f7fe fb6c 	bl	8001d98 <HAL_RCC_GetPCLK1Freq>
 80036c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80036c2:	e014      	b.n	80036ee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036c4:	f7fe fb7e 	bl	8001dc4 <HAL_RCC_GetPCLK2Freq>
 80036c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80036ca:	e010      	b.n	80036ee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036cc:	4b1a      	ldr	r3, [pc, #104]	@ (8003738 <UART_SetConfig+0x5c0>)
 80036ce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80036d0:	e00d      	b.n	80036ee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036d2:	f7fe faf3 	bl	8001cbc <HAL_RCC_GetSysClockFreq>
 80036d6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80036d8:	e009      	b.n	80036ee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80036e0:	e005      	b.n	80036ee <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80036e2:	2300      	movs	r3, #0
 80036e4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80036ec:	bf00      	nop
    }

    if (pclk != 0U)
 80036ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d028      	beq.n	8003746 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f8:	4a10      	ldr	r2, [pc, #64]	@ (800373c <UART_SetConfig+0x5c4>)
 80036fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80036fe:	461a      	mov	r2, r3
 8003700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003702:	fbb3 f2f2 	udiv	r2, r3, r2
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	085b      	lsrs	r3, r3, #1
 800370c:	441a      	add	r2, r3
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	fbb2 f3f3 	udiv	r3, r2, r3
 8003716:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003718:	6a3b      	ldr	r3, [r7, #32]
 800371a:	2b0f      	cmp	r3, #15
 800371c:	d910      	bls.n	8003740 <UART_SetConfig+0x5c8>
 800371e:	6a3b      	ldr	r3, [r7, #32]
 8003720:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003724:	d20c      	bcs.n	8003740 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003726:	6a3b      	ldr	r3, [r7, #32]
 8003728:	b29a      	uxth	r2, r3
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	60da      	str	r2, [r3, #12]
 8003730:	e009      	b.n	8003746 <UART_SetConfig+0x5ce>
 8003732:	bf00      	nop
 8003734:	40008000 	.word	0x40008000
 8003738:	00f42400 	.word	0x00f42400
 800373c:	08004740 	.word	0x08004740
      }
      else
      {
        ret = HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	2201      	movs	r2, #1
 800374a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	2201      	movs	r2, #1
 8003752:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	2200      	movs	r2, #0
 800375a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	2200      	movs	r2, #0
 8003760:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003762:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003766:	4618      	mov	r0, r3
 8003768:	3730      	adds	r7, #48	@ 0x30
 800376a:	46bd      	mov	sp, r7
 800376c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003770 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800377c:	f003 0308 	and.w	r3, r3, #8
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00a      	beq.n	800379a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	430a      	orrs	r2, r1
 8003798:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800379e:	f003 0301 	and.w	r3, r3, #1
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00a      	beq.n	80037bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	430a      	orrs	r2, r1
 80037ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037c0:	f003 0302 	and.w	r3, r3, #2
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00a      	beq.n	80037de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	430a      	orrs	r2, r1
 80037dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037e2:	f003 0304 	and.w	r3, r3, #4
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00a      	beq.n	8003800 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	430a      	orrs	r2, r1
 80037fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003804:	f003 0310 	and.w	r3, r3, #16
 8003808:	2b00      	cmp	r3, #0
 800380a:	d00a      	beq.n	8003822 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	430a      	orrs	r2, r1
 8003820:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003826:	f003 0320 	and.w	r3, r3, #32
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00a      	beq.n	8003844 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	430a      	orrs	r2, r1
 8003842:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003848:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800384c:	2b00      	cmp	r3, #0
 800384e:	d01a      	beq.n	8003886 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	430a      	orrs	r2, r1
 8003864:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800386a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800386e:	d10a      	bne.n	8003886 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	430a      	orrs	r2, r1
 8003884:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800388a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00a      	beq.n	80038a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	430a      	orrs	r2, r1
 80038a6:	605a      	str	r2, [r3, #4]
  }
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b098      	sub	sp, #96	@ 0x60
 80038b8:	af02      	add	r7, sp, #8
 80038ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80038c4:	f7fd fa42 	bl	8000d4c <HAL_GetTick>
 80038c8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0308 	and.w	r3, r3, #8
 80038d4:	2b08      	cmp	r3, #8
 80038d6:	d12f      	bne.n	8003938 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038d8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80038dc:	9300      	str	r3, [sp, #0]
 80038de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038e0:	2200      	movs	r2, #0
 80038e2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 f88e 	bl	8003a08 <UART_WaitOnFlagUntilTimeout>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d022      	beq.n	8003938 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038fa:	e853 3f00 	ldrex	r3, [r3]
 80038fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003900:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003902:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003906:	653b      	str	r3, [r7, #80]	@ 0x50
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	461a      	mov	r2, r3
 800390e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003910:	647b      	str	r3, [r7, #68]	@ 0x44
 8003912:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003914:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003916:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003918:	e841 2300 	strex	r3, r2, [r1]
 800391c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800391e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003920:	2b00      	cmp	r3, #0
 8003922:	d1e6      	bne.n	80038f2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2220      	movs	r2, #32
 8003928:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e063      	b.n	8003a00 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0304 	and.w	r3, r3, #4
 8003942:	2b04      	cmp	r3, #4
 8003944:	d149      	bne.n	80039da <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003946:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800394a:	9300      	str	r3, [sp, #0]
 800394c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800394e:	2200      	movs	r2, #0
 8003950:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 f857 	bl	8003a08 <UART_WaitOnFlagUntilTimeout>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d03c      	beq.n	80039da <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003968:	e853 3f00 	ldrex	r3, [r3]
 800396c:	623b      	str	r3, [r7, #32]
   return(result);
 800396e:	6a3b      	ldr	r3, [r7, #32]
 8003970:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003974:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	461a      	mov	r2, r3
 800397c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800397e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003980:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003982:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003984:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003986:	e841 2300 	strex	r3, r2, [r1]
 800398a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800398c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1e6      	bne.n	8003960 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	3308      	adds	r3, #8
 8003998:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	e853 3f00 	ldrex	r3, [r3]
 80039a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f023 0301 	bic.w	r3, r3, #1
 80039a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	3308      	adds	r3, #8
 80039b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80039b2:	61fa      	str	r2, [r7, #28]
 80039b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b6:	69b9      	ldr	r1, [r7, #24]
 80039b8:	69fa      	ldr	r2, [r7, #28]
 80039ba:	e841 2300 	strex	r3, r2, [r1]
 80039be:	617b      	str	r3, [r7, #20]
   return(result);
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1e5      	bne.n	8003992 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2220      	movs	r2, #32
 80039ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e012      	b.n	8003a00 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2220      	movs	r2, #32
 80039de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2220      	movs	r2, #32
 80039e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3758      	adds	r7, #88	@ 0x58
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	603b      	str	r3, [r7, #0]
 8003a14:	4613      	mov	r3, r2
 8003a16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a18:	e04f      	b.n	8003aba <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a20:	d04b      	beq.n	8003aba <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a22:	f7fd f993 	bl	8000d4c <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	69ba      	ldr	r2, [r7, #24]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d302      	bcc.n	8003a38 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d101      	bne.n	8003a3c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e04e      	b.n	8003ada <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0304 	and.w	r3, r3, #4
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d037      	beq.n	8003aba <UART_WaitOnFlagUntilTimeout+0xb2>
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	2b80      	cmp	r3, #128	@ 0x80
 8003a4e:	d034      	beq.n	8003aba <UART_WaitOnFlagUntilTimeout+0xb2>
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	2b40      	cmp	r3, #64	@ 0x40
 8003a54:	d031      	beq.n	8003aba <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	69db      	ldr	r3, [r3, #28]
 8003a5c:	f003 0308 	and.w	r3, r3, #8
 8003a60:	2b08      	cmp	r3, #8
 8003a62:	d110      	bne.n	8003a86 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2208      	movs	r2, #8
 8003a6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a6c:	68f8      	ldr	r0, [r7, #12]
 8003a6e:	f000 f838 	bl	8003ae2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2208      	movs	r2, #8
 8003a76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e029      	b.n	8003ada <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	69db      	ldr	r3, [r3, #28]
 8003a8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a94:	d111      	bne.n	8003aba <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003a9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003aa0:	68f8      	ldr	r0, [r7, #12]
 8003aa2:	f000 f81e 	bl	8003ae2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2220      	movs	r2, #32
 8003aaa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e00f      	b.n	8003ada <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	69da      	ldr	r2, [r3, #28]
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	68ba      	ldr	r2, [r7, #8]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	bf0c      	ite	eq
 8003aca:	2301      	moveq	r3, #1
 8003acc:	2300      	movne	r3, #0
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	79fb      	ldrb	r3, [r7, #7]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d0a0      	beq.n	8003a1a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3710      	adds	r7, #16
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}

08003ae2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ae2:	b480      	push	{r7}
 8003ae4:	b095      	sub	sp, #84	@ 0x54
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003af2:	e853 3f00 	ldrex	r3, [r3]
 8003af6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003afa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003afe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	461a      	mov	r2, r3
 8003b06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b08:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b0a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b0c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003b0e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003b10:	e841 2300 	strex	r3, r2, [r1]
 8003b14:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d1e6      	bne.n	8003aea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	3308      	adds	r3, #8
 8003b22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b24:	6a3b      	ldr	r3, [r7, #32]
 8003b26:	e853 3f00 	ldrex	r3, [r3]
 8003b2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b32:	f023 0301 	bic.w	r3, r3, #1
 8003b36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	3308      	adds	r3, #8
 8003b3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b40:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b42:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b48:	e841 2300 	strex	r3, r2, [r1]
 8003b4c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d1e3      	bne.n	8003b1c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d118      	bne.n	8003b8e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	e853 3f00 	ldrex	r3, [r3]
 8003b68:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	f023 0310 	bic.w	r3, r3, #16
 8003b70:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	461a      	mov	r2, r3
 8003b78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b7a:	61bb      	str	r3, [r7, #24]
 8003b7c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b7e:	6979      	ldr	r1, [r7, #20]
 8003b80:	69ba      	ldr	r2, [r7, #24]
 8003b82:	e841 2300 	strex	r3, r2, [r1]
 8003b86:	613b      	str	r3, [r7, #16]
   return(result);
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1e6      	bne.n	8003b5c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2220      	movs	r2, #32
 8003b92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003ba2:	bf00      	nop
 8003ba4:	3754      	adds	r7, #84	@ 0x54
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr

08003bae <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003bae:	b480      	push	{r7}
 8003bb0:	b085      	sub	sp, #20
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d101      	bne.n	8003bc4 <HAL_UARTEx_DisableFifoMode+0x16>
 8003bc0:	2302      	movs	r3, #2
 8003bc2:	e027      	b.n	8003c14 <HAL_UARTEx_DisableFifoMode+0x66>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2224      	movs	r2, #36	@ 0x24
 8003bd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f022 0201 	bic.w	r2, r2, #1
 8003bea:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8003bf2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2220      	movs	r2, #32
 8003c06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003c12:	2300      	movs	r3, #0
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3714      	adds	r7, #20
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d101      	bne.n	8003c38 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003c34:	2302      	movs	r3, #2
 8003c36:	e02d      	b.n	8003c94 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2224      	movs	r2, #36	@ 0x24
 8003c44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f022 0201 	bic.w	r2, r2, #1
 8003c5e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	683a      	ldr	r2, [r7, #0]
 8003c70:	430a      	orrs	r2, r1
 8003c72:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f000 f84f 	bl	8003d18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2220      	movs	r2, #32
 8003c86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3710      	adds	r7, #16
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d101      	bne.n	8003cb4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003cb0:	2302      	movs	r3, #2
 8003cb2:	e02d      	b.n	8003d10 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2224      	movs	r2, #36	@ 0x24
 8003cc0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f022 0201 	bic.w	r2, r2, #1
 8003cda:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	683a      	ldr	r2, [r7, #0]
 8003cec:	430a      	orrs	r2, r1
 8003cee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f000 f811 	bl	8003d18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2220      	movs	r2, #32
 8003d02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3710      	adds	r7, #16
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d108      	bne.n	8003d3a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003d38:	e031      	b.n	8003d9e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003d3a:	2308      	movs	r3, #8
 8003d3c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003d3e:	2308      	movs	r3, #8
 8003d40:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	0e5b      	lsrs	r3, r3, #25
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	f003 0307 	and.w	r3, r3, #7
 8003d50:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	0f5b      	lsrs	r3, r3, #29
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	f003 0307 	and.w	r3, r3, #7
 8003d60:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003d62:	7bbb      	ldrb	r3, [r7, #14]
 8003d64:	7b3a      	ldrb	r2, [r7, #12]
 8003d66:	4911      	ldr	r1, [pc, #68]	@ (8003dac <UARTEx_SetNbDataToProcess+0x94>)
 8003d68:	5c8a      	ldrb	r2, [r1, r2]
 8003d6a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003d6e:	7b3a      	ldrb	r2, [r7, #12]
 8003d70:	490f      	ldr	r1, [pc, #60]	@ (8003db0 <UARTEx_SetNbDataToProcess+0x98>)
 8003d72:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003d74:	fb93 f3f2 	sdiv	r3, r3, r2
 8003d78:	b29a      	uxth	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003d80:	7bfb      	ldrb	r3, [r7, #15]
 8003d82:	7b7a      	ldrb	r2, [r7, #13]
 8003d84:	4909      	ldr	r1, [pc, #36]	@ (8003dac <UARTEx_SetNbDataToProcess+0x94>)
 8003d86:	5c8a      	ldrb	r2, [r1, r2]
 8003d88:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003d8c:	7b7a      	ldrb	r2, [r7, #13]
 8003d8e:	4908      	ldr	r1, [pc, #32]	@ (8003db0 <UARTEx_SetNbDataToProcess+0x98>)
 8003d90:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003d92:	fb93 f3f2 	sdiv	r3, r3, r2
 8003d96:	b29a      	uxth	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8003d9e:	bf00      	nop
 8003da0:	3714      	adds	r7, #20
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	08004758 	.word	0x08004758
 8003db0:	08004760 	.word	0x08004760

08003db4 <siprintf>:
 8003db4:	b40e      	push	{r1, r2, r3}
 8003db6:	b500      	push	{lr}
 8003db8:	b09c      	sub	sp, #112	@ 0x70
 8003dba:	ab1d      	add	r3, sp, #116	@ 0x74
 8003dbc:	9002      	str	r0, [sp, #8]
 8003dbe:	9006      	str	r0, [sp, #24]
 8003dc0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003dc4:	4809      	ldr	r0, [pc, #36]	@ (8003dec <siprintf+0x38>)
 8003dc6:	9107      	str	r1, [sp, #28]
 8003dc8:	9104      	str	r1, [sp, #16]
 8003dca:	4909      	ldr	r1, [pc, #36]	@ (8003df0 <siprintf+0x3c>)
 8003dcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8003dd0:	9105      	str	r1, [sp, #20]
 8003dd2:	6800      	ldr	r0, [r0, #0]
 8003dd4:	9301      	str	r3, [sp, #4]
 8003dd6:	a902      	add	r1, sp, #8
 8003dd8:	f000 f994 	bl	8004104 <_svfiprintf_r>
 8003ddc:	9b02      	ldr	r3, [sp, #8]
 8003dde:	2200      	movs	r2, #0
 8003de0:	701a      	strb	r2, [r3, #0]
 8003de2:	b01c      	add	sp, #112	@ 0x70
 8003de4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003de8:	b003      	add	sp, #12
 8003dea:	4770      	bx	lr
 8003dec:	20000010 	.word	0x20000010
 8003df0:	ffff0208 	.word	0xffff0208

08003df4 <memset>:
 8003df4:	4402      	add	r2, r0
 8003df6:	4603      	mov	r3, r0
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d100      	bne.n	8003dfe <memset+0xa>
 8003dfc:	4770      	bx	lr
 8003dfe:	f803 1b01 	strb.w	r1, [r3], #1
 8003e02:	e7f9      	b.n	8003df8 <memset+0x4>

08003e04 <__errno>:
 8003e04:	4b01      	ldr	r3, [pc, #4]	@ (8003e0c <__errno+0x8>)
 8003e06:	6818      	ldr	r0, [r3, #0]
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	20000010 	.word	0x20000010

08003e10 <__libc_init_array>:
 8003e10:	b570      	push	{r4, r5, r6, lr}
 8003e12:	4d0d      	ldr	r5, [pc, #52]	@ (8003e48 <__libc_init_array+0x38>)
 8003e14:	4c0d      	ldr	r4, [pc, #52]	@ (8003e4c <__libc_init_array+0x3c>)
 8003e16:	1b64      	subs	r4, r4, r5
 8003e18:	10a4      	asrs	r4, r4, #2
 8003e1a:	2600      	movs	r6, #0
 8003e1c:	42a6      	cmp	r6, r4
 8003e1e:	d109      	bne.n	8003e34 <__libc_init_array+0x24>
 8003e20:	4d0b      	ldr	r5, [pc, #44]	@ (8003e50 <__libc_init_array+0x40>)
 8003e22:	4c0c      	ldr	r4, [pc, #48]	@ (8003e54 <__libc_init_array+0x44>)
 8003e24:	f000 fc66 	bl	80046f4 <_init>
 8003e28:	1b64      	subs	r4, r4, r5
 8003e2a:	10a4      	asrs	r4, r4, #2
 8003e2c:	2600      	movs	r6, #0
 8003e2e:	42a6      	cmp	r6, r4
 8003e30:	d105      	bne.n	8003e3e <__libc_init_array+0x2e>
 8003e32:	bd70      	pop	{r4, r5, r6, pc}
 8003e34:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e38:	4798      	blx	r3
 8003e3a:	3601      	adds	r6, #1
 8003e3c:	e7ee      	b.n	8003e1c <__libc_init_array+0xc>
 8003e3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e42:	4798      	blx	r3
 8003e44:	3601      	adds	r6, #1
 8003e46:	e7f2      	b.n	8003e2e <__libc_init_array+0x1e>
 8003e48:	080047a4 	.word	0x080047a4
 8003e4c:	080047a4 	.word	0x080047a4
 8003e50:	080047a4 	.word	0x080047a4
 8003e54:	080047a8 	.word	0x080047a8

08003e58 <__retarget_lock_acquire_recursive>:
 8003e58:	4770      	bx	lr

08003e5a <__retarget_lock_release_recursive>:
 8003e5a:	4770      	bx	lr

08003e5c <_free_r>:
 8003e5c:	b538      	push	{r3, r4, r5, lr}
 8003e5e:	4605      	mov	r5, r0
 8003e60:	2900      	cmp	r1, #0
 8003e62:	d041      	beq.n	8003ee8 <_free_r+0x8c>
 8003e64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e68:	1f0c      	subs	r4, r1, #4
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	bfb8      	it	lt
 8003e6e:	18e4      	addlt	r4, r4, r3
 8003e70:	f000 f8e0 	bl	8004034 <__malloc_lock>
 8003e74:	4a1d      	ldr	r2, [pc, #116]	@ (8003eec <_free_r+0x90>)
 8003e76:	6813      	ldr	r3, [r2, #0]
 8003e78:	b933      	cbnz	r3, 8003e88 <_free_r+0x2c>
 8003e7a:	6063      	str	r3, [r4, #4]
 8003e7c:	6014      	str	r4, [r2, #0]
 8003e7e:	4628      	mov	r0, r5
 8003e80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e84:	f000 b8dc 	b.w	8004040 <__malloc_unlock>
 8003e88:	42a3      	cmp	r3, r4
 8003e8a:	d908      	bls.n	8003e9e <_free_r+0x42>
 8003e8c:	6820      	ldr	r0, [r4, #0]
 8003e8e:	1821      	adds	r1, r4, r0
 8003e90:	428b      	cmp	r3, r1
 8003e92:	bf01      	itttt	eq
 8003e94:	6819      	ldreq	r1, [r3, #0]
 8003e96:	685b      	ldreq	r3, [r3, #4]
 8003e98:	1809      	addeq	r1, r1, r0
 8003e9a:	6021      	streq	r1, [r4, #0]
 8003e9c:	e7ed      	b.n	8003e7a <_free_r+0x1e>
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	b10b      	cbz	r3, 8003ea8 <_free_r+0x4c>
 8003ea4:	42a3      	cmp	r3, r4
 8003ea6:	d9fa      	bls.n	8003e9e <_free_r+0x42>
 8003ea8:	6811      	ldr	r1, [r2, #0]
 8003eaa:	1850      	adds	r0, r2, r1
 8003eac:	42a0      	cmp	r0, r4
 8003eae:	d10b      	bne.n	8003ec8 <_free_r+0x6c>
 8003eb0:	6820      	ldr	r0, [r4, #0]
 8003eb2:	4401      	add	r1, r0
 8003eb4:	1850      	adds	r0, r2, r1
 8003eb6:	4283      	cmp	r3, r0
 8003eb8:	6011      	str	r1, [r2, #0]
 8003eba:	d1e0      	bne.n	8003e7e <_free_r+0x22>
 8003ebc:	6818      	ldr	r0, [r3, #0]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	6053      	str	r3, [r2, #4]
 8003ec2:	4408      	add	r0, r1
 8003ec4:	6010      	str	r0, [r2, #0]
 8003ec6:	e7da      	b.n	8003e7e <_free_r+0x22>
 8003ec8:	d902      	bls.n	8003ed0 <_free_r+0x74>
 8003eca:	230c      	movs	r3, #12
 8003ecc:	602b      	str	r3, [r5, #0]
 8003ece:	e7d6      	b.n	8003e7e <_free_r+0x22>
 8003ed0:	6820      	ldr	r0, [r4, #0]
 8003ed2:	1821      	adds	r1, r4, r0
 8003ed4:	428b      	cmp	r3, r1
 8003ed6:	bf04      	itt	eq
 8003ed8:	6819      	ldreq	r1, [r3, #0]
 8003eda:	685b      	ldreq	r3, [r3, #4]
 8003edc:	6063      	str	r3, [r4, #4]
 8003ede:	bf04      	itt	eq
 8003ee0:	1809      	addeq	r1, r1, r0
 8003ee2:	6021      	streq	r1, [r4, #0]
 8003ee4:	6054      	str	r4, [r2, #4]
 8003ee6:	e7ca      	b.n	8003e7e <_free_r+0x22>
 8003ee8:	bd38      	pop	{r3, r4, r5, pc}
 8003eea:	bf00      	nop
 8003eec:	200002f8 	.word	0x200002f8

08003ef0 <sbrk_aligned>:
 8003ef0:	b570      	push	{r4, r5, r6, lr}
 8003ef2:	4e0f      	ldr	r6, [pc, #60]	@ (8003f30 <sbrk_aligned+0x40>)
 8003ef4:	460c      	mov	r4, r1
 8003ef6:	6831      	ldr	r1, [r6, #0]
 8003ef8:	4605      	mov	r5, r0
 8003efa:	b911      	cbnz	r1, 8003f02 <sbrk_aligned+0x12>
 8003efc:	f000 fba6 	bl	800464c <_sbrk_r>
 8003f00:	6030      	str	r0, [r6, #0]
 8003f02:	4621      	mov	r1, r4
 8003f04:	4628      	mov	r0, r5
 8003f06:	f000 fba1 	bl	800464c <_sbrk_r>
 8003f0a:	1c43      	adds	r3, r0, #1
 8003f0c:	d103      	bne.n	8003f16 <sbrk_aligned+0x26>
 8003f0e:	f04f 34ff 	mov.w	r4, #4294967295
 8003f12:	4620      	mov	r0, r4
 8003f14:	bd70      	pop	{r4, r5, r6, pc}
 8003f16:	1cc4      	adds	r4, r0, #3
 8003f18:	f024 0403 	bic.w	r4, r4, #3
 8003f1c:	42a0      	cmp	r0, r4
 8003f1e:	d0f8      	beq.n	8003f12 <sbrk_aligned+0x22>
 8003f20:	1a21      	subs	r1, r4, r0
 8003f22:	4628      	mov	r0, r5
 8003f24:	f000 fb92 	bl	800464c <_sbrk_r>
 8003f28:	3001      	adds	r0, #1
 8003f2a:	d1f2      	bne.n	8003f12 <sbrk_aligned+0x22>
 8003f2c:	e7ef      	b.n	8003f0e <sbrk_aligned+0x1e>
 8003f2e:	bf00      	nop
 8003f30:	200002f4 	.word	0x200002f4

08003f34 <_malloc_r>:
 8003f34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f38:	1ccd      	adds	r5, r1, #3
 8003f3a:	f025 0503 	bic.w	r5, r5, #3
 8003f3e:	3508      	adds	r5, #8
 8003f40:	2d0c      	cmp	r5, #12
 8003f42:	bf38      	it	cc
 8003f44:	250c      	movcc	r5, #12
 8003f46:	2d00      	cmp	r5, #0
 8003f48:	4606      	mov	r6, r0
 8003f4a:	db01      	blt.n	8003f50 <_malloc_r+0x1c>
 8003f4c:	42a9      	cmp	r1, r5
 8003f4e:	d904      	bls.n	8003f5a <_malloc_r+0x26>
 8003f50:	230c      	movs	r3, #12
 8003f52:	6033      	str	r3, [r6, #0]
 8003f54:	2000      	movs	r0, #0
 8003f56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f5a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004030 <_malloc_r+0xfc>
 8003f5e:	f000 f869 	bl	8004034 <__malloc_lock>
 8003f62:	f8d8 3000 	ldr.w	r3, [r8]
 8003f66:	461c      	mov	r4, r3
 8003f68:	bb44      	cbnz	r4, 8003fbc <_malloc_r+0x88>
 8003f6a:	4629      	mov	r1, r5
 8003f6c:	4630      	mov	r0, r6
 8003f6e:	f7ff ffbf 	bl	8003ef0 <sbrk_aligned>
 8003f72:	1c43      	adds	r3, r0, #1
 8003f74:	4604      	mov	r4, r0
 8003f76:	d158      	bne.n	800402a <_malloc_r+0xf6>
 8003f78:	f8d8 4000 	ldr.w	r4, [r8]
 8003f7c:	4627      	mov	r7, r4
 8003f7e:	2f00      	cmp	r7, #0
 8003f80:	d143      	bne.n	800400a <_malloc_r+0xd6>
 8003f82:	2c00      	cmp	r4, #0
 8003f84:	d04b      	beq.n	800401e <_malloc_r+0xea>
 8003f86:	6823      	ldr	r3, [r4, #0]
 8003f88:	4639      	mov	r1, r7
 8003f8a:	4630      	mov	r0, r6
 8003f8c:	eb04 0903 	add.w	r9, r4, r3
 8003f90:	f000 fb5c 	bl	800464c <_sbrk_r>
 8003f94:	4581      	cmp	r9, r0
 8003f96:	d142      	bne.n	800401e <_malloc_r+0xea>
 8003f98:	6821      	ldr	r1, [r4, #0]
 8003f9a:	1a6d      	subs	r5, r5, r1
 8003f9c:	4629      	mov	r1, r5
 8003f9e:	4630      	mov	r0, r6
 8003fa0:	f7ff ffa6 	bl	8003ef0 <sbrk_aligned>
 8003fa4:	3001      	adds	r0, #1
 8003fa6:	d03a      	beq.n	800401e <_malloc_r+0xea>
 8003fa8:	6823      	ldr	r3, [r4, #0]
 8003faa:	442b      	add	r3, r5
 8003fac:	6023      	str	r3, [r4, #0]
 8003fae:	f8d8 3000 	ldr.w	r3, [r8]
 8003fb2:	685a      	ldr	r2, [r3, #4]
 8003fb4:	bb62      	cbnz	r2, 8004010 <_malloc_r+0xdc>
 8003fb6:	f8c8 7000 	str.w	r7, [r8]
 8003fba:	e00f      	b.n	8003fdc <_malloc_r+0xa8>
 8003fbc:	6822      	ldr	r2, [r4, #0]
 8003fbe:	1b52      	subs	r2, r2, r5
 8003fc0:	d420      	bmi.n	8004004 <_malloc_r+0xd0>
 8003fc2:	2a0b      	cmp	r2, #11
 8003fc4:	d917      	bls.n	8003ff6 <_malloc_r+0xc2>
 8003fc6:	1961      	adds	r1, r4, r5
 8003fc8:	42a3      	cmp	r3, r4
 8003fca:	6025      	str	r5, [r4, #0]
 8003fcc:	bf18      	it	ne
 8003fce:	6059      	strne	r1, [r3, #4]
 8003fd0:	6863      	ldr	r3, [r4, #4]
 8003fd2:	bf08      	it	eq
 8003fd4:	f8c8 1000 	streq.w	r1, [r8]
 8003fd8:	5162      	str	r2, [r4, r5]
 8003fda:	604b      	str	r3, [r1, #4]
 8003fdc:	4630      	mov	r0, r6
 8003fde:	f000 f82f 	bl	8004040 <__malloc_unlock>
 8003fe2:	f104 000b 	add.w	r0, r4, #11
 8003fe6:	1d23      	adds	r3, r4, #4
 8003fe8:	f020 0007 	bic.w	r0, r0, #7
 8003fec:	1ac2      	subs	r2, r0, r3
 8003fee:	bf1c      	itt	ne
 8003ff0:	1a1b      	subne	r3, r3, r0
 8003ff2:	50a3      	strne	r3, [r4, r2]
 8003ff4:	e7af      	b.n	8003f56 <_malloc_r+0x22>
 8003ff6:	6862      	ldr	r2, [r4, #4]
 8003ff8:	42a3      	cmp	r3, r4
 8003ffa:	bf0c      	ite	eq
 8003ffc:	f8c8 2000 	streq.w	r2, [r8]
 8004000:	605a      	strne	r2, [r3, #4]
 8004002:	e7eb      	b.n	8003fdc <_malloc_r+0xa8>
 8004004:	4623      	mov	r3, r4
 8004006:	6864      	ldr	r4, [r4, #4]
 8004008:	e7ae      	b.n	8003f68 <_malloc_r+0x34>
 800400a:	463c      	mov	r4, r7
 800400c:	687f      	ldr	r7, [r7, #4]
 800400e:	e7b6      	b.n	8003f7e <_malloc_r+0x4a>
 8004010:	461a      	mov	r2, r3
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	42a3      	cmp	r3, r4
 8004016:	d1fb      	bne.n	8004010 <_malloc_r+0xdc>
 8004018:	2300      	movs	r3, #0
 800401a:	6053      	str	r3, [r2, #4]
 800401c:	e7de      	b.n	8003fdc <_malloc_r+0xa8>
 800401e:	230c      	movs	r3, #12
 8004020:	6033      	str	r3, [r6, #0]
 8004022:	4630      	mov	r0, r6
 8004024:	f000 f80c 	bl	8004040 <__malloc_unlock>
 8004028:	e794      	b.n	8003f54 <_malloc_r+0x20>
 800402a:	6005      	str	r5, [r0, #0]
 800402c:	e7d6      	b.n	8003fdc <_malloc_r+0xa8>
 800402e:	bf00      	nop
 8004030:	200002f8 	.word	0x200002f8

08004034 <__malloc_lock>:
 8004034:	4801      	ldr	r0, [pc, #4]	@ (800403c <__malloc_lock+0x8>)
 8004036:	f7ff bf0f 	b.w	8003e58 <__retarget_lock_acquire_recursive>
 800403a:	bf00      	nop
 800403c:	200002f0 	.word	0x200002f0

08004040 <__malloc_unlock>:
 8004040:	4801      	ldr	r0, [pc, #4]	@ (8004048 <__malloc_unlock+0x8>)
 8004042:	f7ff bf0a 	b.w	8003e5a <__retarget_lock_release_recursive>
 8004046:	bf00      	nop
 8004048:	200002f0 	.word	0x200002f0

0800404c <__ssputs_r>:
 800404c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004050:	688e      	ldr	r6, [r1, #8]
 8004052:	461f      	mov	r7, r3
 8004054:	42be      	cmp	r6, r7
 8004056:	680b      	ldr	r3, [r1, #0]
 8004058:	4682      	mov	sl, r0
 800405a:	460c      	mov	r4, r1
 800405c:	4690      	mov	r8, r2
 800405e:	d82d      	bhi.n	80040bc <__ssputs_r+0x70>
 8004060:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004064:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004068:	d026      	beq.n	80040b8 <__ssputs_r+0x6c>
 800406a:	6965      	ldr	r5, [r4, #20]
 800406c:	6909      	ldr	r1, [r1, #16]
 800406e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004072:	eba3 0901 	sub.w	r9, r3, r1
 8004076:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800407a:	1c7b      	adds	r3, r7, #1
 800407c:	444b      	add	r3, r9
 800407e:	106d      	asrs	r5, r5, #1
 8004080:	429d      	cmp	r5, r3
 8004082:	bf38      	it	cc
 8004084:	461d      	movcc	r5, r3
 8004086:	0553      	lsls	r3, r2, #21
 8004088:	d527      	bpl.n	80040da <__ssputs_r+0x8e>
 800408a:	4629      	mov	r1, r5
 800408c:	f7ff ff52 	bl	8003f34 <_malloc_r>
 8004090:	4606      	mov	r6, r0
 8004092:	b360      	cbz	r0, 80040ee <__ssputs_r+0xa2>
 8004094:	6921      	ldr	r1, [r4, #16]
 8004096:	464a      	mov	r2, r9
 8004098:	f000 fae8 	bl	800466c <memcpy>
 800409c:	89a3      	ldrh	r3, [r4, #12]
 800409e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80040a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040a6:	81a3      	strh	r3, [r4, #12]
 80040a8:	6126      	str	r6, [r4, #16]
 80040aa:	6165      	str	r5, [r4, #20]
 80040ac:	444e      	add	r6, r9
 80040ae:	eba5 0509 	sub.w	r5, r5, r9
 80040b2:	6026      	str	r6, [r4, #0]
 80040b4:	60a5      	str	r5, [r4, #8]
 80040b6:	463e      	mov	r6, r7
 80040b8:	42be      	cmp	r6, r7
 80040ba:	d900      	bls.n	80040be <__ssputs_r+0x72>
 80040bc:	463e      	mov	r6, r7
 80040be:	6820      	ldr	r0, [r4, #0]
 80040c0:	4632      	mov	r2, r6
 80040c2:	4641      	mov	r1, r8
 80040c4:	f000 faa8 	bl	8004618 <memmove>
 80040c8:	68a3      	ldr	r3, [r4, #8]
 80040ca:	1b9b      	subs	r3, r3, r6
 80040cc:	60a3      	str	r3, [r4, #8]
 80040ce:	6823      	ldr	r3, [r4, #0]
 80040d0:	4433      	add	r3, r6
 80040d2:	6023      	str	r3, [r4, #0]
 80040d4:	2000      	movs	r0, #0
 80040d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040da:	462a      	mov	r2, r5
 80040dc:	f000 fad4 	bl	8004688 <_realloc_r>
 80040e0:	4606      	mov	r6, r0
 80040e2:	2800      	cmp	r0, #0
 80040e4:	d1e0      	bne.n	80040a8 <__ssputs_r+0x5c>
 80040e6:	6921      	ldr	r1, [r4, #16]
 80040e8:	4650      	mov	r0, sl
 80040ea:	f7ff feb7 	bl	8003e5c <_free_r>
 80040ee:	230c      	movs	r3, #12
 80040f0:	f8ca 3000 	str.w	r3, [sl]
 80040f4:	89a3      	ldrh	r3, [r4, #12]
 80040f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80040fa:	81a3      	strh	r3, [r4, #12]
 80040fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004100:	e7e9      	b.n	80040d6 <__ssputs_r+0x8a>
	...

08004104 <_svfiprintf_r>:
 8004104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004108:	4698      	mov	r8, r3
 800410a:	898b      	ldrh	r3, [r1, #12]
 800410c:	061b      	lsls	r3, r3, #24
 800410e:	b09d      	sub	sp, #116	@ 0x74
 8004110:	4607      	mov	r7, r0
 8004112:	460d      	mov	r5, r1
 8004114:	4614      	mov	r4, r2
 8004116:	d510      	bpl.n	800413a <_svfiprintf_r+0x36>
 8004118:	690b      	ldr	r3, [r1, #16]
 800411a:	b973      	cbnz	r3, 800413a <_svfiprintf_r+0x36>
 800411c:	2140      	movs	r1, #64	@ 0x40
 800411e:	f7ff ff09 	bl	8003f34 <_malloc_r>
 8004122:	6028      	str	r0, [r5, #0]
 8004124:	6128      	str	r0, [r5, #16]
 8004126:	b930      	cbnz	r0, 8004136 <_svfiprintf_r+0x32>
 8004128:	230c      	movs	r3, #12
 800412a:	603b      	str	r3, [r7, #0]
 800412c:	f04f 30ff 	mov.w	r0, #4294967295
 8004130:	b01d      	add	sp, #116	@ 0x74
 8004132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004136:	2340      	movs	r3, #64	@ 0x40
 8004138:	616b      	str	r3, [r5, #20]
 800413a:	2300      	movs	r3, #0
 800413c:	9309      	str	r3, [sp, #36]	@ 0x24
 800413e:	2320      	movs	r3, #32
 8004140:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004144:	f8cd 800c 	str.w	r8, [sp, #12]
 8004148:	2330      	movs	r3, #48	@ 0x30
 800414a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80042e8 <_svfiprintf_r+0x1e4>
 800414e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004152:	f04f 0901 	mov.w	r9, #1
 8004156:	4623      	mov	r3, r4
 8004158:	469a      	mov	sl, r3
 800415a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800415e:	b10a      	cbz	r2, 8004164 <_svfiprintf_r+0x60>
 8004160:	2a25      	cmp	r2, #37	@ 0x25
 8004162:	d1f9      	bne.n	8004158 <_svfiprintf_r+0x54>
 8004164:	ebba 0b04 	subs.w	fp, sl, r4
 8004168:	d00b      	beq.n	8004182 <_svfiprintf_r+0x7e>
 800416a:	465b      	mov	r3, fp
 800416c:	4622      	mov	r2, r4
 800416e:	4629      	mov	r1, r5
 8004170:	4638      	mov	r0, r7
 8004172:	f7ff ff6b 	bl	800404c <__ssputs_r>
 8004176:	3001      	adds	r0, #1
 8004178:	f000 80a7 	beq.w	80042ca <_svfiprintf_r+0x1c6>
 800417c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800417e:	445a      	add	r2, fp
 8004180:	9209      	str	r2, [sp, #36]	@ 0x24
 8004182:	f89a 3000 	ldrb.w	r3, [sl]
 8004186:	2b00      	cmp	r3, #0
 8004188:	f000 809f 	beq.w	80042ca <_svfiprintf_r+0x1c6>
 800418c:	2300      	movs	r3, #0
 800418e:	f04f 32ff 	mov.w	r2, #4294967295
 8004192:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004196:	f10a 0a01 	add.w	sl, sl, #1
 800419a:	9304      	str	r3, [sp, #16]
 800419c:	9307      	str	r3, [sp, #28]
 800419e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80041a2:	931a      	str	r3, [sp, #104]	@ 0x68
 80041a4:	4654      	mov	r4, sl
 80041a6:	2205      	movs	r2, #5
 80041a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041ac:	484e      	ldr	r0, [pc, #312]	@ (80042e8 <_svfiprintf_r+0x1e4>)
 80041ae:	f7fc f837 	bl	8000220 <memchr>
 80041b2:	9a04      	ldr	r2, [sp, #16]
 80041b4:	b9d8      	cbnz	r0, 80041ee <_svfiprintf_r+0xea>
 80041b6:	06d0      	lsls	r0, r2, #27
 80041b8:	bf44      	itt	mi
 80041ba:	2320      	movmi	r3, #32
 80041bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80041c0:	0711      	lsls	r1, r2, #28
 80041c2:	bf44      	itt	mi
 80041c4:	232b      	movmi	r3, #43	@ 0x2b
 80041c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80041ca:	f89a 3000 	ldrb.w	r3, [sl]
 80041ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80041d0:	d015      	beq.n	80041fe <_svfiprintf_r+0xfa>
 80041d2:	9a07      	ldr	r2, [sp, #28]
 80041d4:	4654      	mov	r4, sl
 80041d6:	2000      	movs	r0, #0
 80041d8:	f04f 0c0a 	mov.w	ip, #10
 80041dc:	4621      	mov	r1, r4
 80041de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80041e2:	3b30      	subs	r3, #48	@ 0x30
 80041e4:	2b09      	cmp	r3, #9
 80041e6:	d94b      	bls.n	8004280 <_svfiprintf_r+0x17c>
 80041e8:	b1b0      	cbz	r0, 8004218 <_svfiprintf_r+0x114>
 80041ea:	9207      	str	r2, [sp, #28]
 80041ec:	e014      	b.n	8004218 <_svfiprintf_r+0x114>
 80041ee:	eba0 0308 	sub.w	r3, r0, r8
 80041f2:	fa09 f303 	lsl.w	r3, r9, r3
 80041f6:	4313      	orrs	r3, r2
 80041f8:	9304      	str	r3, [sp, #16]
 80041fa:	46a2      	mov	sl, r4
 80041fc:	e7d2      	b.n	80041a4 <_svfiprintf_r+0xa0>
 80041fe:	9b03      	ldr	r3, [sp, #12]
 8004200:	1d19      	adds	r1, r3, #4
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	9103      	str	r1, [sp, #12]
 8004206:	2b00      	cmp	r3, #0
 8004208:	bfbb      	ittet	lt
 800420a:	425b      	neglt	r3, r3
 800420c:	f042 0202 	orrlt.w	r2, r2, #2
 8004210:	9307      	strge	r3, [sp, #28]
 8004212:	9307      	strlt	r3, [sp, #28]
 8004214:	bfb8      	it	lt
 8004216:	9204      	strlt	r2, [sp, #16]
 8004218:	7823      	ldrb	r3, [r4, #0]
 800421a:	2b2e      	cmp	r3, #46	@ 0x2e
 800421c:	d10a      	bne.n	8004234 <_svfiprintf_r+0x130>
 800421e:	7863      	ldrb	r3, [r4, #1]
 8004220:	2b2a      	cmp	r3, #42	@ 0x2a
 8004222:	d132      	bne.n	800428a <_svfiprintf_r+0x186>
 8004224:	9b03      	ldr	r3, [sp, #12]
 8004226:	1d1a      	adds	r2, r3, #4
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	9203      	str	r2, [sp, #12]
 800422c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004230:	3402      	adds	r4, #2
 8004232:	9305      	str	r3, [sp, #20]
 8004234:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80042f8 <_svfiprintf_r+0x1f4>
 8004238:	7821      	ldrb	r1, [r4, #0]
 800423a:	2203      	movs	r2, #3
 800423c:	4650      	mov	r0, sl
 800423e:	f7fb ffef 	bl	8000220 <memchr>
 8004242:	b138      	cbz	r0, 8004254 <_svfiprintf_r+0x150>
 8004244:	9b04      	ldr	r3, [sp, #16]
 8004246:	eba0 000a 	sub.w	r0, r0, sl
 800424a:	2240      	movs	r2, #64	@ 0x40
 800424c:	4082      	lsls	r2, r0
 800424e:	4313      	orrs	r3, r2
 8004250:	3401      	adds	r4, #1
 8004252:	9304      	str	r3, [sp, #16]
 8004254:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004258:	4824      	ldr	r0, [pc, #144]	@ (80042ec <_svfiprintf_r+0x1e8>)
 800425a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800425e:	2206      	movs	r2, #6
 8004260:	f7fb ffde 	bl	8000220 <memchr>
 8004264:	2800      	cmp	r0, #0
 8004266:	d036      	beq.n	80042d6 <_svfiprintf_r+0x1d2>
 8004268:	4b21      	ldr	r3, [pc, #132]	@ (80042f0 <_svfiprintf_r+0x1ec>)
 800426a:	bb1b      	cbnz	r3, 80042b4 <_svfiprintf_r+0x1b0>
 800426c:	9b03      	ldr	r3, [sp, #12]
 800426e:	3307      	adds	r3, #7
 8004270:	f023 0307 	bic.w	r3, r3, #7
 8004274:	3308      	adds	r3, #8
 8004276:	9303      	str	r3, [sp, #12]
 8004278:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800427a:	4433      	add	r3, r6
 800427c:	9309      	str	r3, [sp, #36]	@ 0x24
 800427e:	e76a      	b.n	8004156 <_svfiprintf_r+0x52>
 8004280:	fb0c 3202 	mla	r2, ip, r2, r3
 8004284:	460c      	mov	r4, r1
 8004286:	2001      	movs	r0, #1
 8004288:	e7a8      	b.n	80041dc <_svfiprintf_r+0xd8>
 800428a:	2300      	movs	r3, #0
 800428c:	3401      	adds	r4, #1
 800428e:	9305      	str	r3, [sp, #20]
 8004290:	4619      	mov	r1, r3
 8004292:	f04f 0c0a 	mov.w	ip, #10
 8004296:	4620      	mov	r0, r4
 8004298:	f810 2b01 	ldrb.w	r2, [r0], #1
 800429c:	3a30      	subs	r2, #48	@ 0x30
 800429e:	2a09      	cmp	r2, #9
 80042a0:	d903      	bls.n	80042aa <_svfiprintf_r+0x1a6>
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d0c6      	beq.n	8004234 <_svfiprintf_r+0x130>
 80042a6:	9105      	str	r1, [sp, #20]
 80042a8:	e7c4      	b.n	8004234 <_svfiprintf_r+0x130>
 80042aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80042ae:	4604      	mov	r4, r0
 80042b0:	2301      	movs	r3, #1
 80042b2:	e7f0      	b.n	8004296 <_svfiprintf_r+0x192>
 80042b4:	ab03      	add	r3, sp, #12
 80042b6:	9300      	str	r3, [sp, #0]
 80042b8:	462a      	mov	r2, r5
 80042ba:	4b0e      	ldr	r3, [pc, #56]	@ (80042f4 <_svfiprintf_r+0x1f0>)
 80042bc:	a904      	add	r1, sp, #16
 80042be:	4638      	mov	r0, r7
 80042c0:	f3af 8000 	nop.w
 80042c4:	1c42      	adds	r2, r0, #1
 80042c6:	4606      	mov	r6, r0
 80042c8:	d1d6      	bne.n	8004278 <_svfiprintf_r+0x174>
 80042ca:	89ab      	ldrh	r3, [r5, #12]
 80042cc:	065b      	lsls	r3, r3, #25
 80042ce:	f53f af2d 	bmi.w	800412c <_svfiprintf_r+0x28>
 80042d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80042d4:	e72c      	b.n	8004130 <_svfiprintf_r+0x2c>
 80042d6:	ab03      	add	r3, sp, #12
 80042d8:	9300      	str	r3, [sp, #0]
 80042da:	462a      	mov	r2, r5
 80042dc:	4b05      	ldr	r3, [pc, #20]	@ (80042f4 <_svfiprintf_r+0x1f0>)
 80042de:	a904      	add	r1, sp, #16
 80042e0:	4638      	mov	r0, r7
 80042e2:	f000 f879 	bl	80043d8 <_printf_i>
 80042e6:	e7ed      	b.n	80042c4 <_svfiprintf_r+0x1c0>
 80042e8:	08004768 	.word	0x08004768
 80042ec:	08004772 	.word	0x08004772
 80042f0:	00000000 	.word	0x00000000
 80042f4:	0800404d 	.word	0x0800404d
 80042f8:	0800476e 	.word	0x0800476e

080042fc <_printf_common>:
 80042fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004300:	4616      	mov	r6, r2
 8004302:	4698      	mov	r8, r3
 8004304:	688a      	ldr	r2, [r1, #8]
 8004306:	690b      	ldr	r3, [r1, #16]
 8004308:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800430c:	4293      	cmp	r3, r2
 800430e:	bfb8      	it	lt
 8004310:	4613      	movlt	r3, r2
 8004312:	6033      	str	r3, [r6, #0]
 8004314:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004318:	4607      	mov	r7, r0
 800431a:	460c      	mov	r4, r1
 800431c:	b10a      	cbz	r2, 8004322 <_printf_common+0x26>
 800431e:	3301      	adds	r3, #1
 8004320:	6033      	str	r3, [r6, #0]
 8004322:	6823      	ldr	r3, [r4, #0]
 8004324:	0699      	lsls	r1, r3, #26
 8004326:	bf42      	ittt	mi
 8004328:	6833      	ldrmi	r3, [r6, #0]
 800432a:	3302      	addmi	r3, #2
 800432c:	6033      	strmi	r3, [r6, #0]
 800432e:	6825      	ldr	r5, [r4, #0]
 8004330:	f015 0506 	ands.w	r5, r5, #6
 8004334:	d106      	bne.n	8004344 <_printf_common+0x48>
 8004336:	f104 0a19 	add.w	sl, r4, #25
 800433a:	68e3      	ldr	r3, [r4, #12]
 800433c:	6832      	ldr	r2, [r6, #0]
 800433e:	1a9b      	subs	r3, r3, r2
 8004340:	42ab      	cmp	r3, r5
 8004342:	dc26      	bgt.n	8004392 <_printf_common+0x96>
 8004344:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004348:	6822      	ldr	r2, [r4, #0]
 800434a:	3b00      	subs	r3, #0
 800434c:	bf18      	it	ne
 800434e:	2301      	movne	r3, #1
 8004350:	0692      	lsls	r2, r2, #26
 8004352:	d42b      	bmi.n	80043ac <_printf_common+0xb0>
 8004354:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004358:	4641      	mov	r1, r8
 800435a:	4638      	mov	r0, r7
 800435c:	47c8      	blx	r9
 800435e:	3001      	adds	r0, #1
 8004360:	d01e      	beq.n	80043a0 <_printf_common+0xa4>
 8004362:	6823      	ldr	r3, [r4, #0]
 8004364:	6922      	ldr	r2, [r4, #16]
 8004366:	f003 0306 	and.w	r3, r3, #6
 800436a:	2b04      	cmp	r3, #4
 800436c:	bf02      	ittt	eq
 800436e:	68e5      	ldreq	r5, [r4, #12]
 8004370:	6833      	ldreq	r3, [r6, #0]
 8004372:	1aed      	subeq	r5, r5, r3
 8004374:	68a3      	ldr	r3, [r4, #8]
 8004376:	bf0c      	ite	eq
 8004378:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800437c:	2500      	movne	r5, #0
 800437e:	4293      	cmp	r3, r2
 8004380:	bfc4      	itt	gt
 8004382:	1a9b      	subgt	r3, r3, r2
 8004384:	18ed      	addgt	r5, r5, r3
 8004386:	2600      	movs	r6, #0
 8004388:	341a      	adds	r4, #26
 800438a:	42b5      	cmp	r5, r6
 800438c:	d11a      	bne.n	80043c4 <_printf_common+0xc8>
 800438e:	2000      	movs	r0, #0
 8004390:	e008      	b.n	80043a4 <_printf_common+0xa8>
 8004392:	2301      	movs	r3, #1
 8004394:	4652      	mov	r2, sl
 8004396:	4641      	mov	r1, r8
 8004398:	4638      	mov	r0, r7
 800439a:	47c8      	blx	r9
 800439c:	3001      	adds	r0, #1
 800439e:	d103      	bne.n	80043a8 <_printf_common+0xac>
 80043a0:	f04f 30ff 	mov.w	r0, #4294967295
 80043a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043a8:	3501      	adds	r5, #1
 80043aa:	e7c6      	b.n	800433a <_printf_common+0x3e>
 80043ac:	18e1      	adds	r1, r4, r3
 80043ae:	1c5a      	adds	r2, r3, #1
 80043b0:	2030      	movs	r0, #48	@ 0x30
 80043b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80043b6:	4422      	add	r2, r4
 80043b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80043bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80043c0:	3302      	adds	r3, #2
 80043c2:	e7c7      	b.n	8004354 <_printf_common+0x58>
 80043c4:	2301      	movs	r3, #1
 80043c6:	4622      	mov	r2, r4
 80043c8:	4641      	mov	r1, r8
 80043ca:	4638      	mov	r0, r7
 80043cc:	47c8      	blx	r9
 80043ce:	3001      	adds	r0, #1
 80043d0:	d0e6      	beq.n	80043a0 <_printf_common+0xa4>
 80043d2:	3601      	adds	r6, #1
 80043d4:	e7d9      	b.n	800438a <_printf_common+0x8e>
	...

080043d8 <_printf_i>:
 80043d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80043dc:	7e0f      	ldrb	r7, [r1, #24]
 80043de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80043e0:	2f78      	cmp	r7, #120	@ 0x78
 80043e2:	4691      	mov	r9, r2
 80043e4:	4680      	mov	r8, r0
 80043e6:	460c      	mov	r4, r1
 80043e8:	469a      	mov	sl, r3
 80043ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80043ee:	d807      	bhi.n	8004400 <_printf_i+0x28>
 80043f0:	2f62      	cmp	r7, #98	@ 0x62
 80043f2:	d80a      	bhi.n	800440a <_printf_i+0x32>
 80043f4:	2f00      	cmp	r7, #0
 80043f6:	f000 80d2 	beq.w	800459e <_printf_i+0x1c6>
 80043fa:	2f58      	cmp	r7, #88	@ 0x58
 80043fc:	f000 80b9 	beq.w	8004572 <_printf_i+0x19a>
 8004400:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004404:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004408:	e03a      	b.n	8004480 <_printf_i+0xa8>
 800440a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800440e:	2b15      	cmp	r3, #21
 8004410:	d8f6      	bhi.n	8004400 <_printf_i+0x28>
 8004412:	a101      	add	r1, pc, #4	@ (adr r1, 8004418 <_printf_i+0x40>)
 8004414:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004418:	08004471 	.word	0x08004471
 800441c:	08004485 	.word	0x08004485
 8004420:	08004401 	.word	0x08004401
 8004424:	08004401 	.word	0x08004401
 8004428:	08004401 	.word	0x08004401
 800442c:	08004401 	.word	0x08004401
 8004430:	08004485 	.word	0x08004485
 8004434:	08004401 	.word	0x08004401
 8004438:	08004401 	.word	0x08004401
 800443c:	08004401 	.word	0x08004401
 8004440:	08004401 	.word	0x08004401
 8004444:	08004585 	.word	0x08004585
 8004448:	080044af 	.word	0x080044af
 800444c:	0800453f 	.word	0x0800453f
 8004450:	08004401 	.word	0x08004401
 8004454:	08004401 	.word	0x08004401
 8004458:	080045a7 	.word	0x080045a7
 800445c:	08004401 	.word	0x08004401
 8004460:	080044af 	.word	0x080044af
 8004464:	08004401 	.word	0x08004401
 8004468:	08004401 	.word	0x08004401
 800446c:	08004547 	.word	0x08004547
 8004470:	6833      	ldr	r3, [r6, #0]
 8004472:	1d1a      	adds	r2, r3, #4
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	6032      	str	r2, [r6, #0]
 8004478:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800447c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004480:	2301      	movs	r3, #1
 8004482:	e09d      	b.n	80045c0 <_printf_i+0x1e8>
 8004484:	6833      	ldr	r3, [r6, #0]
 8004486:	6820      	ldr	r0, [r4, #0]
 8004488:	1d19      	adds	r1, r3, #4
 800448a:	6031      	str	r1, [r6, #0]
 800448c:	0606      	lsls	r6, r0, #24
 800448e:	d501      	bpl.n	8004494 <_printf_i+0xbc>
 8004490:	681d      	ldr	r5, [r3, #0]
 8004492:	e003      	b.n	800449c <_printf_i+0xc4>
 8004494:	0645      	lsls	r5, r0, #25
 8004496:	d5fb      	bpl.n	8004490 <_printf_i+0xb8>
 8004498:	f9b3 5000 	ldrsh.w	r5, [r3]
 800449c:	2d00      	cmp	r5, #0
 800449e:	da03      	bge.n	80044a8 <_printf_i+0xd0>
 80044a0:	232d      	movs	r3, #45	@ 0x2d
 80044a2:	426d      	negs	r5, r5
 80044a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80044a8:	4859      	ldr	r0, [pc, #356]	@ (8004610 <_printf_i+0x238>)
 80044aa:	230a      	movs	r3, #10
 80044ac:	e011      	b.n	80044d2 <_printf_i+0xfa>
 80044ae:	6821      	ldr	r1, [r4, #0]
 80044b0:	6833      	ldr	r3, [r6, #0]
 80044b2:	0608      	lsls	r0, r1, #24
 80044b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80044b8:	d402      	bmi.n	80044c0 <_printf_i+0xe8>
 80044ba:	0649      	lsls	r1, r1, #25
 80044bc:	bf48      	it	mi
 80044be:	b2ad      	uxthmi	r5, r5
 80044c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80044c2:	4853      	ldr	r0, [pc, #332]	@ (8004610 <_printf_i+0x238>)
 80044c4:	6033      	str	r3, [r6, #0]
 80044c6:	bf14      	ite	ne
 80044c8:	230a      	movne	r3, #10
 80044ca:	2308      	moveq	r3, #8
 80044cc:	2100      	movs	r1, #0
 80044ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80044d2:	6866      	ldr	r6, [r4, #4]
 80044d4:	60a6      	str	r6, [r4, #8]
 80044d6:	2e00      	cmp	r6, #0
 80044d8:	bfa2      	ittt	ge
 80044da:	6821      	ldrge	r1, [r4, #0]
 80044dc:	f021 0104 	bicge.w	r1, r1, #4
 80044e0:	6021      	strge	r1, [r4, #0]
 80044e2:	b90d      	cbnz	r5, 80044e8 <_printf_i+0x110>
 80044e4:	2e00      	cmp	r6, #0
 80044e6:	d04b      	beq.n	8004580 <_printf_i+0x1a8>
 80044e8:	4616      	mov	r6, r2
 80044ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80044ee:	fb03 5711 	mls	r7, r3, r1, r5
 80044f2:	5dc7      	ldrb	r7, [r0, r7]
 80044f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80044f8:	462f      	mov	r7, r5
 80044fa:	42bb      	cmp	r3, r7
 80044fc:	460d      	mov	r5, r1
 80044fe:	d9f4      	bls.n	80044ea <_printf_i+0x112>
 8004500:	2b08      	cmp	r3, #8
 8004502:	d10b      	bne.n	800451c <_printf_i+0x144>
 8004504:	6823      	ldr	r3, [r4, #0]
 8004506:	07df      	lsls	r7, r3, #31
 8004508:	d508      	bpl.n	800451c <_printf_i+0x144>
 800450a:	6923      	ldr	r3, [r4, #16]
 800450c:	6861      	ldr	r1, [r4, #4]
 800450e:	4299      	cmp	r1, r3
 8004510:	bfde      	ittt	le
 8004512:	2330      	movle	r3, #48	@ 0x30
 8004514:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004518:	f106 36ff 	addle.w	r6, r6, #4294967295
 800451c:	1b92      	subs	r2, r2, r6
 800451e:	6122      	str	r2, [r4, #16]
 8004520:	f8cd a000 	str.w	sl, [sp]
 8004524:	464b      	mov	r3, r9
 8004526:	aa03      	add	r2, sp, #12
 8004528:	4621      	mov	r1, r4
 800452a:	4640      	mov	r0, r8
 800452c:	f7ff fee6 	bl	80042fc <_printf_common>
 8004530:	3001      	adds	r0, #1
 8004532:	d14a      	bne.n	80045ca <_printf_i+0x1f2>
 8004534:	f04f 30ff 	mov.w	r0, #4294967295
 8004538:	b004      	add	sp, #16
 800453a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800453e:	6823      	ldr	r3, [r4, #0]
 8004540:	f043 0320 	orr.w	r3, r3, #32
 8004544:	6023      	str	r3, [r4, #0]
 8004546:	4833      	ldr	r0, [pc, #204]	@ (8004614 <_printf_i+0x23c>)
 8004548:	2778      	movs	r7, #120	@ 0x78
 800454a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800454e:	6823      	ldr	r3, [r4, #0]
 8004550:	6831      	ldr	r1, [r6, #0]
 8004552:	061f      	lsls	r7, r3, #24
 8004554:	f851 5b04 	ldr.w	r5, [r1], #4
 8004558:	d402      	bmi.n	8004560 <_printf_i+0x188>
 800455a:	065f      	lsls	r7, r3, #25
 800455c:	bf48      	it	mi
 800455e:	b2ad      	uxthmi	r5, r5
 8004560:	6031      	str	r1, [r6, #0]
 8004562:	07d9      	lsls	r1, r3, #31
 8004564:	bf44      	itt	mi
 8004566:	f043 0320 	orrmi.w	r3, r3, #32
 800456a:	6023      	strmi	r3, [r4, #0]
 800456c:	b11d      	cbz	r5, 8004576 <_printf_i+0x19e>
 800456e:	2310      	movs	r3, #16
 8004570:	e7ac      	b.n	80044cc <_printf_i+0xf4>
 8004572:	4827      	ldr	r0, [pc, #156]	@ (8004610 <_printf_i+0x238>)
 8004574:	e7e9      	b.n	800454a <_printf_i+0x172>
 8004576:	6823      	ldr	r3, [r4, #0]
 8004578:	f023 0320 	bic.w	r3, r3, #32
 800457c:	6023      	str	r3, [r4, #0]
 800457e:	e7f6      	b.n	800456e <_printf_i+0x196>
 8004580:	4616      	mov	r6, r2
 8004582:	e7bd      	b.n	8004500 <_printf_i+0x128>
 8004584:	6833      	ldr	r3, [r6, #0]
 8004586:	6825      	ldr	r5, [r4, #0]
 8004588:	6961      	ldr	r1, [r4, #20]
 800458a:	1d18      	adds	r0, r3, #4
 800458c:	6030      	str	r0, [r6, #0]
 800458e:	062e      	lsls	r6, r5, #24
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	d501      	bpl.n	8004598 <_printf_i+0x1c0>
 8004594:	6019      	str	r1, [r3, #0]
 8004596:	e002      	b.n	800459e <_printf_i+0x1c6>
 8004598:	0668      	lsls	r0, r5, #25
 800459a:	d5fb      	bpl.n	8004594 <_printf_i+0x1bc>
 800459c:	8019      	strh	r1, [r3, #0]
 800459e:	2300      	movs	r3, #0
 80045a0:	6123      	str	r3, [r4, #16]
 80045a2:	4616      	mov	r6, r2
 80045a4:	e7bc      	b.n	8004520 <_printf_i+0x148>
 80045a6:	6833      	ldr	r3, [r6, #0]
 80045a8:	1d1a      	adds	r2, r3, #4
 80045aa:	6032      	str	r2, [r6, #0]
 80045ac:	681e      	ldr	r6, [r3, #0]
 80045ae:	6862      	ldr	r2, [r4, #4]
 80045b0:	2100      	movs	r1, #0
 80045b2:	4630      	mov	r0, r6
 80045b4:	f7fb fe34 	bl	8000220 <memchr>
 80045b8:	b108      	cbz	r0, 80045be <_printf_i+0x1e6>
 80045ba:	1b80      	subs	r0, r0, r6
 80045bc:	6060      	str	r0, [r4, #4]
 80045be:	6863      	ldr	r3, [r4, #4]
 80045c0:	6123      	str	r3, [r4, #16]
 80045c2:	2300      	movs	r3, #0
 80045c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80045c8:	e7aa      	b.n	8004520 <_printf_i+0x148>
 80045ca:	6923      	ldr	r3, [r4, #16]
 80045cc:	4632      	mov	r2, r6
 80045ce:	4649      	mov	r1, r9
 80045d0:	4640      	mov	r0, r8
 80045d2:	47d0      	blx	sl
 80045d4:	3001      	adds	r0, #1
 80045d6:	d0ad      	beq.n	8004534 <_printf_i+0x15c>
 80045d8:	6823      	ldr	r3, [r4, #0]
 80045da:	079b      	lsls	r3, r3, #30
 80045dc:	d413      	bmi.n	8004606 <_printf_i+0x22e>
 80045de:	68e0      	ldr	r0, [r4, #12]
 80045e0:	9b03      	ldr	r3, [sp, #12]
 80045e2:	4298      	cmp	r0, r3
 80045e4:	bfb8      	it	lt
 80045e6:	4618      	movlt	r0, r3
 80045e8:	e7a6      	b.n	8004538 <_printf_i+0x160>
 80045ea:	2301      	movs	r3, #1
 80045ec:	4632      	mov	r2, r6
 80045ee:	4649      	mov	r1, r9
 80045f0:	4640      	mov	r0, r8
 80045f2:	47d0      	blx	sl
 80045f4:	3001      	adds	r0, #1
 80045f6:	d09d      	beq.n	8004534 <_printf_i+0x15c>
 80045f8:	3501      	adds	r5, #1
 80045fa:	68e3      	ldr	r3, [r4, #12]
 80045fc:	9903      	ldr	r1, [sp, #12]
 80045fe:	1a5b      	subs	r3, r3, r1
 8004600:	42ab      	cmp	r3, r5
 8004602:	dcf2      	bgt.n	80045ea <_printf_i+0x212>
 8004604:	e7eb      	b.n	80045de <_printf_i+0x206>
 8004606:	2500      	movs	r5, #0
 8004608:	f104 0619 	add.w	r6, r4, #25
 800460c:	e7f5      	b.n	80045fa <_printf_i+0x222>
 800460e:	bf00      	nop
 8004610:	08004779 	.word	0x08004779
 8004614:	0800478a 	.word	0x0800478a

08004618 <memmove>:
 8004618:	4288      	cmp	r0, r1
 800461a:	b510      	push	{r4, lr}
 800461c:	eb01 0402 	add.w	r4, r1, r2
 8004620:	d902      	bls.n	8004628 <memmove+0x10>
 8004622:	4284      	cmp	r4, r0
 8004624:	4623      	mov	r3, r4
 8004626:	d807      	bhi.n	8004638 <memmove+0x20>
 8004628:	1e43      	subs	r3, r0, #1
 800462a:	42a1      	cmp	r1, r4
 800462c:	d008      	beq.n	8004640 <memmove+0x28>
 800462e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004632:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004636:	e7f8      	b.n	800462a <memmove+0x12>
 8004638:	4402      	add	r2, r0
 800463a:	4601      	mov	r1, r0
 800463c:	428a      	cmp	r2, r1
 800463e:	d100      	bne.n	8004642 <memmove+0x2a>
 8004640:	bd10      	pop	{r4, pc}
 8004642:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004646:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800464a:	e7f7      	b.n	800463c <memmove+0x24>

0800464c <_sbrk_r>:
 800464c:	b538      	push	{r3, r4, r5, lr}
 800464e:	4d06      	ldr	r5, [pc, #24]	@ (8004668 <_sbrk_r+0x1c>)
 8004650:	2300      	movs	r3, #0
 8004652:	4604      	mov	r4, r0
 8004654:	4608      	mov	r0, r1
 8004656:	602b      	str	r3, [r5, #0]
 8004658:	f7fc faa2 	bl	8000ba0 <_sbrk>
 800465c:	1c43      	adds	r3, r0, #1
 800465e:	d102      	bne.n	8004666 <_sbrk_r+0x1a>
 8004660:	682b      	ldr	r3, [r5, #0]
 8004662:	b103      	cbz	r3, 8004666 <_sbrk_r+0x1a>
 8004664:	6023      	str	r3, [r4, #0]
 8004666:	bd38      	pop	{r3, r4, r5, pc}
 8004668:	200002ec 	.word	0x200002ec

0800466c <memcpy>:
 800466c:	440a      	add	r2, r1
 800466e:	4291      	cmp	r1, r2
 8004670:	f100 33ff 	add.w	r3, r0, #4294967295
 8004674:	d100      	bne.n	8004678 <memcpy+0xc>
 8004676:	4770      	bx	lr
 8004678:	b510      	push	{r4, lr}
 800467a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800467e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004682:	4291      	cmp	r1, r2
 8004684:	d1f9      	bne.n	800467a <memcpy+0xe>
 8004686:	bd10      	pop	{r4, pc}

08004688 <_realloc_r>:
 8004688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800468c:	4680      	mov	r8, r0
 800468e:	4615      	mov	r5, r2
 8004690:	460c      	mov	r4, r1
 8004692:	b921      	cbnz	r1, 800469e <_realloc_r+0x16>
 8004694:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004698:	4611      	mov	r1, r2
 800469a:	f7ff bc4b 	b.w	8003f34 <_malloc_r>
 800469e:	b92a      	cbnz	r2, 80046ac <_realloc_r+0x24>
 80046a0:	f7ff fbdc 	bl	8003e5c <_free_r>
 80046a4:	2400      	movs	r4, #0
 80046a6:	4620      	mov	r0, r4
 80046a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046ac:	f000 f81a 	bl	80046e4 <_malloc_usable_size_r>
 80046b0:	4285      	cmp	r5, r0
 80046b2:	4606      	mov	r6, r0
 80046b4:	d802      	bhi.n	80046bc <_realloc_r+0x34>
 80046b6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80046ba:	d8f4      	bhi.n	80046a6 <_realloc_r+0x1e>
 80046bc:	4629      	mov	r1, r5
 80046be:	4640      	mov	r0, r8
 80046c0:	f7ff fc38 	bl	8003f34 <_malloc_r>
 80046c4:	4607      	mov	r7, r0
 80046c6:	2800      	cmp	r0, #0
 80046c8:	d0ec      	beq.n	80046a4 <_realloc_r+0x1c>
 80046ca:	42b5      	cmp	r5, r6
 80046cc:	462a      	mov	r2, r5
 80046ce:	4621      	mov	r1, r4
 80046d0:	bf28      	it	cs
 80046d2:	4632      	movcs	r2, r6
 80046d4:	f7ff ffca 	bl	800466c <memcpy>
 80046d8:	4621      	mov	r1, r4
 80046da:	4640      	mov	r0, r8
 80046dc:	f7ff fbbe 	bl	8003e5c <_free_r>
 80046e0:	463c      	mov	r4, r7
 80046e2:	e7e0      	b.n	80046a6 <_realloc_r+0x1e>

080046e4 <_malloc_usable_size_r>:
 80046e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046e8:	1f18      	subs	r0, r3, #4
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	bfbc      	itt	lt
 80046ee:	580b      	ldrlt	r3, [r1, r0]
 80046f0:	18c0      	addlt	r0, r0, r3
 80046f2:	4770      	bx	lr

080046f4 <_init>:
 80046f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046f6:	bf00      	nop
 80046f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046fa:	bc08      	pop	{r3}
 80046fc:	469e      	mov	lr, r3
 80046fe:	4770      	bx	lr

08004700 <_fini>:
 8004700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004702:	bf00      	nop
 8004704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004706:	bc08      	pop	{r3}
 8004708:	469e      	mov	lr, r3
 800470a:	4770      	bx	lr
