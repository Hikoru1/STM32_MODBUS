
022_STM32F407_LEDBLINK_WITH_LIBRARY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004630  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080047b8  080047b8  000057b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047d8  080047d8  00006018  2**0
                  CONTENTS
  4 .ARM          00000008  080047d8  080047d8  000057d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047e0  080047e0  00006018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047e0  080047e0  000057e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080047e4  080047e4  000057e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  080047e8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006018  2**0
                  CONTENTS
 10 .bss          00000258  20000018  20000018  00006018  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000270  20000270  00006018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006018  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dc08  00000000  00000000  00006048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020f2  00000000  00000000  00013c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d30  00000000  00000000  00015d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a3e  00000000  00000000  00016a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002052f  00000000  00000000  000174b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ec3d  00000000  00000000  000379e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7fce  00000000  00000000  00046622  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010e5f0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000036cc  00000000  00000000  0010e634  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007f  00000000  00000000  00111d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080047a0 	.word	0x080047a0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	080047a0 	.word	0x080047a0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <Petit_CRC16>:
 * @param[in]           : Data  - Data to Calculate CRC
 * @param[in/out]       : CRC   - Anlik CRC degeri
 * @How to use          : First initial data has to be 0xFFFF.
 */
void Petit_CRC16(const unsigned char Data_Petit, unsigned int* CRC_Petit)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b085      	sub	sp, #20
 80004bc:	af00      	add	r7, sp, #0
 80004be:	4603      	mov	r3, r0
 80004c0:	6039      	str	r1, [r7, #0]
 80004c2:	71fb      	strb	r3, [r7, #7]
    unsigned int i;

    *CRC_Petit = *CRC_Petit ^(unsigned int) Data_Petit;
 80004c4:	683b      	ldr	r3, [r7, #0]
 80004c6:	681a      	ldr	r2, [r3, #0]
 80004c8:	79fb      	ldrb	r3, [r7, #7]
 80004ca:	405a      	eors	r2, r3
 80004cc:	683b      	ldr	r3, [r7, #0]
 80004ce:	601a      	str	r2, [r3, #0]
    for (i = 8; i > 0; i--)
 80004d0:	2308      	movs	r3, #8
 80004d2:	60fb      	str	r3, [r7, #12]
 80004d4:	e017      	b.n	8000506 <Petit_CRC16+0x4e>
    {
        if (*CRC_Petit & 0x0001)
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	f003 0301 	and.w	r3, r3, #1
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d009      	beq.n	80004f6 <Petit_CRC16+0x3e>
            *CRC_Petit = (*CRC_Petit >> 1) ^ 0xA001;
 80004e2:	683b      	ldr	r3, [r7, #0]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	085b      	lsrs	r3, r3, #1
 80004e8:	f483 4320 	eor.w	r3, r3, #40960	@ 0xa000
 80004ec:	f083 0301 	eor.w	r3, r3, #1
 80004f0:	683a      	ldr	r2, [r7, #0]
 80004f2:	6013      	str	r3, [r2, #0]
 80004f4:	e004      	b.n	8000500 <Petit_CRC16+0x48>
        else
            *CRC_Petit >>= 1;
 80004f6:	683b      	ldr	r3, [r7, #0]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	085a      	lsrs	r2, r3, #1
 80004fc:	683b      	ldr	r3, [r7, #0]
 80004fe:	601a      	str	r2, [r3, #0]
    for (i = 8; i > 0; i--)
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	3b01      	subs	r3, #1
 8000504:	60fb      	str	r3, [r7, #12]
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	2b00      	cmp	r3, #0
 800050a:	d1e4      	bne.n	80004d6 <Petit_CRC16+0x1e>
    }
}
 800050c:	bf00      	nop
 800050e:	bf00      	nop
 8000510:	3714      	adds	r7, #20
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
	...

0800051c <Petit_DoSlaveTX>:
 * Function Name        : DoTx
 * @param[out]          : TRUE
 * @How to use          : It is used for send data package over physical layer
 */
unsigned char Petit_DoSlaveTX(void)
{  
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0

    HAL_UART_Transmit_DMA(&huart2, Petit_Tx_Buf, Petit_Tx_Buf_Size);
 8000520:	4b06      	ldr	r3, [pc, #24]	@ (800053c <Petit_DoSlaveTX+0x20>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	b29b      	uxth	r3, r3
 8000526:	461a      	mov	r2, r3
 8000528:	4905      	ldr	r1, [pc, #20]	@ (8000540 <Petit_DoSlaveTX+0x24>)
 800052a:	4806      	ldr	r0, [pc, #24]	@ (8000544 <Petit_DoSlaveTX+0x28>)
 800052c:	f002 ff82 	bl	8003434 <HAL_UART_Transmit_DMA>

    Petit_Tx_Buf_Size = 0;
 8000530:	4b02      	ldr	r3, [pc, #8]	@ (800053c <Petit_DoSlaveTX+0x20>)
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
    return TRUE;
 8000536:	2301      	movs	r3, #1
}
 8000538:	4618      	mov	r0, r3
 800053a:	bd80      	pop	{r7, pc}
 800053c:	20000078 	.word	0x20000078
 8000540:	2000005c 	.word	0x2000005c
 8000544:	20000164 	.word	0x20000164

08000548 <PetitSendMessage>:
 * Function Name        : SendMessage
 * @param[out]          : TRUE/FALSE
 * @How to use          : This function start to sending messages
 */
unsigned char PetitSendMessage(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
    if (Petit_Tx_State != PETIT_RXTX_IDLE)
 800054c:	4b08      	ldr	r3, [pc, #32]	@ (8000570 <PetitSendMessage+0x28>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <PetitSendMessage+0x10>
        return FALSE;
 8000554:	2300      	movs	r3, #0
 8000556:	e006      	b.n	8000566 <PetitSendMessage+0x1e>

    Petit_Tx_Current  =0;
 8000558:	4b06      	ldr	r3, [pc, #24]	@ (8000574 <PetitSendMessage+0x2c>)
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
    Petit_Tx_State    =PETIT_RXTX_START;
 800055e:	4b04      	ldr	r3, [pc, #16]	@ (8000570 <PetitSendMessage+0x28>)
 8000560:	2201      	movs	r2, #1
 8000562:	701a      	strb	r2, [r3, #0]

    return TRUE;
 8000564:	2301      	movs	r3, #1
}
 8000566:	4618      	mov	r0, r3
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr
 8000570:	20000058 	.word	0x20000058
 8000574:	20000054 	.word	0x20000054

08000578 <HandlePetitModbusError>:
/*
 * Function Name        : HandleModbusError
 * @How to use          : This function generated errors to Modbus Master
 */
void HandlePetitModbusError(char ErrorCode)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	4603      	mov	r3, r0
 8000580:	71fb      	strb	r3, [r7, #7]
    // Initialise the output buffer. The first byte in the buffer says how many registers we have read
    Petit_Tx_Data.Function    = Petit_Rx_Data.Function | 0x80;
 8000582:	4b0b      	ldr	r3, [pc, #44]	@ (80005b0 <HandlePetitModbusError+0x38>)
 8000584:	785b      	ldrb	r3, [r3, #1]
 8000586:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800058a:	b2da      	uxtb	r2, r3
 800058c:	4b09      	ldr	r3, [pc, #36]	@ (80005b4 <HandlePetitModbusError+0x3c>)
 800058e:	705a      	strb	r2, [r3, #1]
    Petit_Tx_Data.Address     = PETITMODBUS_SLAVE_ADDRESS;
 8000590:	4b09      	ldr	r3, [pc, #36]	@ (80005b8 <HandlePetitModbusError+0x40>)
 8000592:	781a      	ldrb	r2, [r3, #0]
 8000594:	4b07      	ldr	r3, [pc, #28]	@ (80005b4 <HandlePetitModbusError+0x3c>)
 8000596:	701a      	strb	r2, [r3, #0]
    Petit_Tx_Data.DataLen     = 1;
 8000598:	4b06      	ldr	r3, [pc, #24]	@ (80005b4 <HandlePetitModbusError+0x3c>)
 800059a:	2201      	movs	r2, #1
 800059c:	839a      	strh	r2, [r3, #28]
    Petit_Tx_Data.DataBuf[0]  = ErrorCode;
 800059e:	4a05      	ldr	r2, [pc, #20]	@ (80005b4 <HandlePetitModbusError+0x3c>)
 80005a0:	79fb      	ldrb	r3, [r7, #7]
 80005a2:	7093      	strb	r3, [r2, #2]
    PetitSendMessage();
 80005a4:	f7ff ffd0 	bl	8000548 <PetitSendMessage>
}
 80005a8:	bf00      	nop
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	2000007c 	.word	0x2000007c
 80005b4:	20000034 	.word	0x20000034
 80005b8:	20000000 	.word	0x20000000

080005bc <HandlePetitModbusReadHoldingRegisters>:
 * Function Name        : HandleModbusReadHoldingRegisters
 * @How to use          : Modbus function 03 - Read holding registers
 */
#if PETITMODBUS_READ_HOLDING_REGISTERS_ENABLED > 0
void HandlePetitModbusReadHoldingRegisters(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
    // Holding registers are effectively numerical outputs that can be written to by the host.
    // They can be control registers or analogue outputs.
    // We potientially have one - the pwm output value
    unsigned int    Petit_StartAddress        = 0;
 80005c2:	2300      	movs	r3, #0
 80005c4:	60bb      	str	r3, [r7, #8]
    unsigned int    Petit_NumberOfRegisters   = 0;
 80005c6:	2300      	movs	r3, #0
 80005c8:	607b      	str	r3, [r7, #4]
    unsigned int    Petit_i                   = 0;
 80005ca:	2300      	movs	r3, #0
 80005cc:	60fb      	str	r3, [r7, #12]

    // The message contains the requested start address and number of registers
    Petit_StartAddress        = ((unsigned int) (Petit_Rx_Data.DataBuf[0]) << 8) + (unsigned int) (Petit_Rx_Data.DataBuf[1]);
 80005ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000684 <HandlePetitModbusReadHoldingRegisters+0xc8>)
 80005d0:	789b      	ldrb	r3, [r3, #2]
 80005d2:	021b      	lsls	r3, r3, #8
 80005d4:	4a2b      	ldr	r2, [pc, #172]	@ (8000684 <HandlePetitModbusReadHoldingRegisters+0xc8>)
 80005d6:	78d2      	ldrb	r2, [r2, #3]
 80005d8:	4413      	add	r3, r2
 80005da:	60bb      	str	r3, [r7, #8]
    Petit_NumberOfRegisters   = ((unsigned int) (Petit_Rx_Data.DataBuf[2]) << 8) + (unsigned int) (Petit_Rx_Data.DataBuf[3]);
 80005dc:	4b29      	ldr	r3, [pc, #164]	@ (8000684 <HandlePetitModbusReadHoldingRegisters+0xc8>)
 80005de:	791b      	ldrb	r3, [r3, #4]
 80005e0:	021b      	lsls	r3, r3, #8
 80005e2:	4a28      	ldr	r2, [pc, #160]	@ (8000684 <HandlePetitModbusReadHoldingRegisters+0xc8>)
 80005e4:	7952      	ldrb	r2, [r2, #5]
 80005e6:	4413      	add	r3, r2
 80005e8:	607b      	str	r3, [r7, #4]

    // If it is bigger than RegisterNumber return error to Modbus Master
    if((Petit_StartAddress+Petit_NumberOfRegisters)>NUMBER_OF_OUTPUT_PETITREGISTERS)
 80005ea:	68ba      	ldr	r2, [r7, #8]
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4413      	add	r3, r2
 80005f0:	2b0a      	cmp	r3, #10
 80005f2:	d903      	bls.n	80005fc <HandlePetitModbusReadHoldingRegisters+0x40>
        HandlePetitModbusError(PETIT_ERROR_CODE_02);
 80005f4:	2002      	movs	r0, #2
 80005f6:	f7ff ffbf 	bl	8000578 <HandlePetitModbusError>
            Petit_Tx_Data.DataBuf[0]                      = Petit_Tx_Data.DataLen - 1;
        }

        PetitSendMessage();
    }
}
 80005fa:	e03f      	b.n	800067c <HandlePetitModbusReadHoldingRegisters+0xc0>
        Petit_Tx_Data.Function    = PETITMODBUS_READ_HOLDING_REGISTERS;
 80005fc:	4b22      	ldr	r3, [pc, #136]	@ (8000688 <HandlePetitModbusReadHoldingRegisters+0xcc>)
 80005fe:	2203      	movs	r2, #3
 8000600:	705a      	strb	r2, [r3, #1]
        Petit_Tx_Data.Address     = PETITMODBUS_SLAVE_ADDRESS;
 8000602:	4b22      	ldr	r3, [pc, #136]	@ (800068c <HandlePetitModbusReadHoldingRegisters+0xd0>)
 8000604:	781a      	ldrb	r2, [r3, #0]
 8000606:	4b20      	ldr	r3, [pc, #128]	@ (8000688 <HandlePetitModbusReadHoldingRegisters+0xcc>)
 8000608:	701a      	strb	r2, [r3, #0]
        Petit_Tx_Data.DataLen     = 1;
 800060a:	4b1f      	ldr	r3, [pc, #124]	@ (8000688 <HandlePetitModbusReadHoldingRegisters+0xcc>)
 800060c:	2201      	movs	r2, #1
 800060e:	839a      	strh	r2, [r3, #28]
        Petit_Tx_Data.DataBuf[0]  = 0;
 8000610:	4b1d      	ldr	r3, [pc, #116]	@ (8000688 <HandlePetitModbusReadHoldingRegisters+0xcc>)
 8000612:	2200      	movs	r2, #0
 8000614:	709a      	strb	r2, [r3, #2]
        for (Petit_i = 0; Petit_i < Petit_NumberOfRegisters; Petit_i++)
 8000616:	2300      	movs	r3, #0
 8000618:	60fb      	str	r3, [r7, #12]
 800061a:	e029      	b.n	8000670 <HandlePetitModbusReadHoldingRegisters+0xb4>
            unsigned short Petit_CurrentData = PetitRegisters[Petit_StartAddress+Petit_i].ActValue;
 800061c:	68ba      	ldr	r2, [r7, #8]
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	4413      	add	r3, r2
 8000622:	4a1b      	ldr	r2, [pc, #108]	@ (8000690 <HandlePetitModbusReadHoldingRegisters+0xd4>)
 8000624:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000628:	807b      	strh	r3, [r7, #2]
            Petit_Tx_Data.DataBuf[Petit_Tx_Data.DataLen]        = (unsigned char) ((Petit_CurrentData & 0xFF00) >> 8);
 800062a:	887b      	ldrh	r3, [r7, #2]
 800062c:	0a1b      	lsrs	r3, r3, #8
 800062e:	b29a      	uxth	r2, r3
 8000630:	4b15      	ldr	r3, [pc, #84]	@ (8000688 <HandlePetitModbusReadHoldingRegisters+0xcc>)
 8000632:	8b9b      	ldrh	r3, [r3, #28]
 8000634:	4619      	mov	r1, r3
 8000636:	b2d2      	uxtb	r2, r2
 8000638:	4b13      	ldr	r3, [pc, #76]	@ (8000688 <HandlePetitModbusReadHoldingRegisters+0xcc>)
 800063a:	440b      	add	r3, r1
 800063c:	709a      	strb	r2, [r3, #2]
            Petit_Tx_Data.DataBuf[Petit_Tx_Data.DataLen + 1]    = (unsigned char) (Petit_CurrentData & 0xFF);
 800063e:	4b12      	ldr	r3, [pc, #72]	@ (8000688 <HandlePetitModbusReadHoldingRegisters+0xcc>)
 8000640:	8b9b      	ldrh	r3, [r3, #28]
 8000642:	3301      	adds	r3, #1
 8000644:	887a      	ldrh	r2, [r7, #2]
 8000646:	b2d1      	uxtb	r1, r2
 8000648:	4a0f      	ldr	r2, [pc, #60]	@ (8000688 <HandlePetitModbusReadHoldingRegisters+0xcc>)
 800064a:	4413      	add	r3, r2
 800064c:	460a      	mov	r2, r1
 800064e:	709a      	strb	r2, [r3, #2]
            Petit_Tx_Data.DataLen                        += 2;
 8000650:	4b0d      	ldr	r3, [pc, #52]	@ (8000688 <HandlePetitModbusReadHoldingRegisters+0xcc>)
 8000652:	8b9b      	ldrh	r3, [r3, #28]
 8000654:	3302      	adds	r3, #2
 8000656:	b29a      	uxth	r2, r3
 8000658:	4b0b      	ldr	r3, [pc, #44]	@ (8000688 <HandlePetitModbusReadHoldingRegisters+0xcc>)
 800065a:	839a      	strh	r2, [r3, #28]
            Petit_Tx_Data.DataBuf[0]                      = Petit_Tx_Data.DataLen - 1;
 800065c:	4b0a      	ldr	r3, [pc, #40]	@ (8000688 <HandlePetitModbusReadHoldingRegisters+0xcc>)
 800065e:	8b9b      	ldrh	r3, [r3, #28]
 8000660:	b2db      	uxtb	r3, r3
 8000662:	3b01      	subs	r3, #1
 8000664:	b2da      	uxtb	r2, r3
 8000666:	4b08      	ldr	r3, [pc, #32]	@ (8000688 <HandlePetitModbusReadHoldingRegisters+0xcc>)
 8000668:	709a      	strb	r2, [r3, #2]
        for (Petit_i = 0; Petit_i < Petit_NumberOfRegisters; Petit_i++)
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	3301      	adds	r3, #1
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	68fa      	ldr	r2, [r7, #12]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	429a      	cmp	r2, r3
 8000676:	d3d1      	bcc.n	800061c <HandlePetitModbusReadHoldingRegisters+0x60>
        PetitSendMessage();
 8000678:	f7ff ff66 	bl	8000548 <PetitSendMessage>
}
 800067c:	bf00      	nop
 800067e:	3710      	adds	r7, #16
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	2000007c 	.word	0x2000007c
 8000688:	20000034 	.word	0x20000034
 800068c:	20000000 	.word	0x20000000
 8000690:	200000bc 	.word	0x200000bc

08000694 <HandlePetitModbusWriteSingleRegister>:
 * Function Name        : HandleModbusReadInputRegisters
 * @How to use          : Modbus function 06 - Write single register
 */
#if PETITMODBUSWRITE_SINGLE_REGISTER_ENABLED > 0
void HandlePetitModbusWriteSingleRegister(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
    // Write single numerical output
    unsigned int    Petit_Address   = 0;
 800069a:	2300      	movs	r3, #0
 800069c:	60bb      	str	r3, [r7, #8]
    unsigned int    Petit_Value     = 0;
 800069e:	2300      	movs	r3, #0
 80006a0:	607b      	str	r3, [r7, #4]
    unsigned char   Petit_i         = 0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	73fb      	strb	r3, [r7, #15]

    // The message contains the requested start address and number of registers
    Petit_Address   = ((unsigned int) (Petit_Rx_Data.DataBuf[0]) << 8) + (unsigned int) (Petit_Rx_Data.DataBuf[1]);
 80006a6:	4b1e      	ldr	r3, [pc, #120]	@ (8000720 <HandlePetitModbusWriteSingleRegister+0x8c>)
 80006a8:	789b      	ldrb	r3, [r3, #2]
 80006aa:	021b      	lsls	r3, r3, #8
 80006ac:	4a1c      	ldr	r2, [pc, #112]	@ (8000720 <HandlePetitModbusWriteSingleRegister+0x8c>)
 80006ae:	78d2      	ldrb	r2, [r2, #3]
 80006b0:	4413      	add	r3, r2
 80006b2:	60bb      	str	r3, [r7, #8]
    Petit_Value     = ((unsigned int) (Petit_Rx_Data.DataBuf[2]) << 8) + (unsigned int) (Petit_Rx_Data.DataBuf[3]);
 80006b4:	4b1a      	ldr	r3, [pc, #104]	@ (8000720 <HandlePetitModbusWriteSingleRegister+0x8c>)
 80006b6:	791b      	ldrb	r3, [r3, #4]
 80006b8:	021b      	lsls	r3, r3, #8
 80006ba:	4a19      	ldr	r2, [pc, #100]	@ (8000720 <HandlePetitModbusWriteSingleRegister+0x8c>)
 80006bc:	7952      	ldrb	r2, [r2, #5]
 80006be:	4413      	add	r3, r2
 80006c0:	607b      	str	r3, [r7, #4]

    // Initialise the output buffer. The first byte in the buffer says how many registers we have read
    Petit_Tx_Data.Function    = PETITMODBUS_WRITE_SINGLE_REGISTER;
 80006c2:	4b18      	ldr	r3, [pc, #96]	@ (8000724 <HandlePetitModbusWriteSingleRegister+0x90>)
 80006c4:	2206      	movs	r2, #6
 80006c6:	705a      	strb	r2, [r3, #1]
    Petit_Tx_Data.Address     = PETITMODBUS_SLAVE_ADDRESS;
 80006c8:	4b17      	ldr	r3, [pc, #92]	@ (8000728 <HandlePetitModbusWriteSingleRegister+0x94>)
 80006ca:	781a      	ldrb	r2, [r3, #0]
 80006cc:	4b15      	ldr	r3, [pc, #84]	@ (8000724 <HandlePetitModbusWriteSingleRegister+0x90>)
 80006ce:	701a      	strb	r2, [r3, #0]
    Petit_Tx_Data.DataLen     = 4;
 80006d0:	4b14      	ldr	r3, [pc, #80]	@ (8000724 <HandlePetitModbusWriteSingleRegister+0x90>)
 80006d2:	2204      	movs	r2, #4
 80006d4:	839a      	strh	r2, [r3, #28]

    if(Petit_Address>=NUMBER_OF_OUTPUT_PETITREGISTERS)
 80006d6:	68bb      	ldr	r3, [r7, #8]
 80006d8:	2b09      	cmp	r3, #9
 80006da:	d903      	bls.n	80006e4 <HandlePetitModbusWriteSingleRegister+0x50>
        HandlePetitModbusError(PETIT_ERROR_CODE_02);
 80006dc:	2002      	movs	r0, #2
 80006de:	f7ff ff4b 	bl	8000578 <HandlePetitModbusError>
 80006e2:	e017      	b.n	8000714 <HandlePetitModbusWriteSingleRegister+0x80>
    else
    {
        PetitRegisters[Petit_Address].ActValue=Petit_Value;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	b219      	sxth	r1, r3
 80006e8:	4a10      	ldr	r2, [pc, #64]	@ (800072c <HandlePetitModbusWriteSingleRegister+0x98>)
 80006ea:	68bb      	ldr	r3, [r7, #8]
 80006ec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        // Output data buffer is exact copy of input buffer
        for (Petit_i = 0; Petit_i < 4; ++Petit_i)
 80006f0:	2300      	movs	r3, #0
 80006f2:	73fb      	strb	r3, [r7, #15]
 80006f4:	e00b      	b.n	800070e <HandlePetitModbusWriteSingleRegister+0x7a>
            Petit_Tx_Data.DataBuf[Petit_i] = Petit_Rx_Data.DataBuf[Petit_i];
 80006f6:	7bfa      	ldrb	r2, [r7, #15]
 80006f8:	7bfb      	ldrb	r3, [r7, #15]
 80006fa:	4909      	ldr	r1, [pc, #36]	@ (8000720 <HandlePetitModbusWriteSingleRegister+0x8c>)
 80006fc:	440a      	add	r2, r1
 80006fe:	7891      	ldrb	r1, [r2, #2]
 8000700:	4a08      	ldr	r2, [pc, #32]	@ (8000724 <HandlePetitModbusWriteSingleRegister+0x90>)
 8000702:	4413      	add	r3, r2
 8000704:	460a      	mov	r2, r1
 8000706:	709a      	strb	r2, [r3, #2]
        for (Petit_i = 0; Petit_i < 4; ++Petit_i)
 8000708:	7bfb      	ldrb	r3, [r7, #15]
 800070a:	3301      	adds	r3, #1
 800070c:	73fb      	strb	r3, [r7, #15]
 800070e:	7bfb      	ldrb	r3, [r7, #15]
 8000710:	2b03      	cmp	r3, #3
 8000712:	d9f0      	bls.n	80006f6 <HandlePetitModbusWriteSingleRegister+0x62>
    }

    PetitSendMessage();
 8000714:	f7ff ff18 	bl	8000548 <PetitSendMessage>
}
 8000718:	bf00      	nop
 800071a:	3710      	adds	r7, #16
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	2000007c 	.word	0x2000007c
 8000724:	20000034 	.word	0x20000034
 8000728:	20000000 	.word	0x20000000
 800072c:	200000bc 	.word	0x200000bc

08000730 <HandleMPetitodbusWriteMultipleRegisters>:
 * Function Name        : HandleModbusWriteMultipleRegisters
 * @How to use          : Modbus function 16 - Write multiple registers
 */
#if PETITMODBUS_WRITE_MULTIPLE_REGISTERS_ENABLED > 0
void HandleMPetitodbusWriteMultipleRegisters(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b086      	sub	sp, #24
 8000734:	af00      	add	r7, sp, #0
    // Write single numerical output
    unsigned int    Petit_StartAddress            =0;
 8000736:	2300      	movs	r3, #0
 8000738:	613b      	str	r3, [r7, #16]
    unsigned char   Petit_ByteCount               =0;
 800073a:	2300      	movs	r3, #0
 800073c:	73fb      	strb	r3, [r7, #15]
    unsigned int    Petit_NumberOfRegisters       =0;
 800073e:	2300      	movs	r3, #0
 8000740:	60bb      	str	r3, [r7, #8]
    unsigned char   Petit_i                       =0;
 8000742:	2300      	movs	r3, #0
 8000744:	75fb      	strb	r3, [r7, #23]
    unsigned int	Petit_Value                   =0;
 8000746:	2300      	movs	r3, #0
 8000748:	607b      	str	r3, [r7, #4]

    // The message contains the requested start address and number of registers
    Petit_StartAddress        = ((unsigned int) (Petit_Rx_Data.DataBuf[0]) << 8) + (unsigned int) (Petit_Rx_Data.DataBuf[1]);
 800074a:	4b2d      	ldr	r3, [pc, #180]	@ (8000800 <HandleMPetitodbusWriteMultipleRegisters+0xd0>)
 800074c:	789b      	ldrb	r3, [r3, #2]
 800074e:	021b      	lsls	r3, r3, #8
 8000750:	4a2b      	ldr	r2, [pc, #172]	@ (8000800 <HandleMPetitodbusWriteMultipleRegisters+0xd0>)
 8000752:	78d2      	ldrb	r2, [r2, #3]
 8000754:	4413      	add	r3, r2
 8000756:	613b      	str	r3, [r7, #16]
    Petit_NumberOfRegisters   = ((unsigned int) (Petit_Rx_Data.DataBuf[2]) << 8) + (unsigned int) (Petit_Rx_Data.DataBuf[3]);
 8000758:	4b29      	ldr	r3, [pc, #164]	@ (8000800 <HandleMPetitodbusWriteMultipleRegisters+0xd0>)
 800075a:	791b      	ldrb	r3, [r3, #4]
 800075c:	021b      	lsls	r3, r3, #8
 800075e:	4a28      	ldr	r2, [pc, #160]	@ (8000800 <HandleMPetitodbusWriteMultipleRegisters+0xd0>)
 8000760:	7952      	ldrb	r2, [r2, #5]
 8000762:	4413      	add	r3, r2
 8000764:	60bb      	str	r3, [r7, #8]
    Petit_ByteCount           = Petit_Rx_Data.DataBuf[4];
 8000766:	4b26      	ldr	r3, [pc, #152]	@ (8000800 <HandleMPetitodbusWriteMultipleRegisters+0xd0>)
 8000768:	799b      	ldrb	r3, [r3, #6]
 800076a:	73fb      	strb	r3, [r7, #15]

    // If it is bigger than RegisterNumber return error to Modbus Master
    if((Petit_StartAddress+Petit_NumberOfRegisters)>NUMBER_OF_OUTPUT_PETITREGISTERS)
 800076c:	693a      	ldr	r2, [r7, #16]
 800076e:	68bb      	ldr	r3, [r7, #8]
 8000770:	4413      	add	r3, r2
 8000772:	2b0a      	cmp	r3, #10
 8000774:	d903      	bls.n	800077e <HandleMPetitodbusWriteMultipleRegisters+0x4e>
        HandlePetitModbusError(PETIT_ERROR_CODE_02);
 8000776:	2002      	movs	r0, #2
 8000778:	f7ff fefe 	bl	8000578 <HandlePetitModbusError>
            PetitRegisters[Petit_StartAddress+Petit_i].ActValue=Petit_Value;
        }

        PetitSendMessage();
    }
}
 800077c:	e03c      	b.n	80007f8 <HandleMPetitodbusWriteMultipleRegisters+0xc8>
        Petit_Tx_Data.Function    = PETITMODBUS_WRITE_MULTIPLE_REGISTERS;
 800077e:	4b21      	ldr	r3, [pc, #132]	@ (8000804 <HandleMPetitodbusWriteMultipleRegisters+0xd4>)
 8000780:	2210      	movs	r2, #16
 8000782:	705a      	strb	r2, [r3, #1]
        Petit_Tx_Data.Address     = PETITMODBUS_SLAVE_ADDRESS;
 8000784:	4b20      	ldr	r3, [pc, #128]	@ (8000808 <HandleMPetitodbusWriteMultipleRegisters+0xd8>)
 8000786:	781a      	ldrb	r2, [r3, #0]
 8000788:	4b1e      	ldr	r3, [pc, #120]	@ (8000804 <HandleMPetitodbusWriteMultipleRegisters+0xd4>)
 800078a:	701a      	strb	r2, [r3, #0]
        Petit_Tx_Data.DataLen     = 4;
 800078c:	4b1d      	ldr	r3, [pc, #116]	@ (8000804 <HandleMPetitodbusWriteMultipleRegisters+0xd4>)
 800078e:	2204      	movs	r2, #4
 8000790:	839a      	strh	r2, [r3, #28]
        Petit_Tx_Data.DataBuf[0]  = Petit_Rx_Data.DataBuf[0];
 8000792:	4b1b      	ldr	r3, [pc, #108]	@ (8000800 <HandleMPetitodbusWriteMultipleRegisters+0xd0>)
 8000794:	789a      	ldrb	r2, [r3, #2]
 8000796:	4b1b      	ldr	r3, [pc, #108]	@ (8000804 <HandleMPetitodbusWriteMultipleRegisters+0xd4>)
 8000798:	709a      	strb	r2, [r3, #2]
        Petit_Tx_Data.DataBuf[1]  = Petit_Rx_Data.DataBuf[1];
 800079a:	4b19      	ldr	r3, [pc, #100]	@ (8000800 <HandleMPetitodbusWriteMultipleRegisters+0xd0>)
 800079c:	78da      	ldrb	r2, [r3, #3]
 800079e:	4b19      	ldr	r3, [pc, #100]	@ (8000804 <HandleMPetitodbusWriteMultipleRegisters+0xd4>)
 80007a0:	70da      	strb	r2, [r3, #3]
        Petit_Tx_Data.DataBuf[2]  = Petit_Rx_Data.DataBuf[2];
 80007a2:	4b17      	ldr	r3, [pc, #92]	@ (8000800 <HandleMPetitodbusWriteMultipleRegisters+0xd0>)
 80007a4:	791a      	ldrb	r2, [r3, #4]
 80007a6:	4b17      	ldr	r3, [pc, #92]	@ (8000804 <HandleMPetitodbusWriteMultipleRegisters+0xd4>)
 80007a8:	711a      	strb	r2, [r3, #4]
        Petit_Tx_Data.DataBuf[3]  = Petit_Rx_Data.DataBuf[3];
 80007aa:	4b15      	ldr	r3, [pc, #84]	@ (8000800 <HandleMPetitodbusWriteMultipleRegisters+0xd0>)
 80007ac:	795a      	ldrb	r2, [r3, #5]
 80007ae:	4b15      	ldr	r3, [pc, #84]	@ (8000804 <HandleMPetitodbusWriteMultipleRegisters+0xd4>)
 80007b0:	715a      	strb	r2, [r3, #5]
        for (Petit_i = 0; Petit_i <Petit_NumberOfRegisters; Petit_i++)
 80007b2:	2300      	movs	r3, #0
 80007b4:	75fb      	strb	r3, [r7, #23]
 80007b6:	e019      	b.n	80007ec <HandleMPetitodbusWriteMultipleRegisters+0xbc>
            Petit_Value=(Petit_Rx_Data.DataBuf[5+2*Petit_i]<<8)+(Petit_Rx_Data.DataBuf[6+2*Petit_i]);
 80007b8:	7dfb      	ldrb	r3, [r7, #23]
 80007ba:	005b      	lsls	r3, r3, #1
 80007bc:	3305      	adds	r3, #5
 80007be:	4a10      	ldr	r2, [pc, #64]	@ (8000800 <HandleMPetitodbusWriteMultipleRegisters+0xd0>)
 80007c0:	4413      	add	r3, r2
 80007c2:	789b      	ldrb	r3, [r3, #2]
 80007c4:	021b      	lsls	r3, r3, #8
 80007c6:	7dfa      	ldrb	r2, [r7, #23]
 80007c8:	3203      	adds	r2, #3
 80007ca:	0052      	lsls	r2, r2, #1
 80007cc:	490c      	ldr	r1, [pc, #48]	@ (8000800 <HandleMPetitodbusWriteMultipleRegisters+0xd0>)
 80007ce:	440a      	add	r2, r1
 80007d0:	7892      	ldrb	r2, [r2, #2]
 80007d2:	4413      	add	r3, r2
 80007d4:	607b      	str	r3, [r7, #4]
            PetitRegisters[Petit_StartAddress+Petit_i].ActValue=Petit_Value;
 80007d6:	7dfa      	ldrb	r2, [r7, #23]
 80007d8:	693b      	ldr	r3, [r7, #16]
 80007da:	4413      	add	r3, r2
 80007dc:	687a      	ldr	r2, [r7, #4]
 80007de:	b211      	sxth	r1, r2
 80007e0:	4a0a      	ldr	r2, [pc, #40]	@ (800080c <HandleMPetitodbusWriteMultipleRegisters+0xdc>)
 80007e2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (Petit_i = 0; Petit_i <Petit_NumberOfRegisters; Petit_i++)
 80007e6:	7dfb      	ldrb	r3, [r7, #23]
 80007e8:	3301      	adds	r3, #1
 80007ea:	75fb      	strb	r3, [r7, #23]
 80007ec:	7dfb      	ldrb	r3, [r7, #23]
 80007ee:	68ba      	ldr	r2, [r7, #8]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	d8e1      	bhi.n	80007b8 <HandleMPetitodbusWriteMultipleRegisters+0x88>
        PetitSendMessage();
 80007f4:	f7ff fea8 	bl	8000548 <PetitSendMessage>
}
 80007f8:	bf00      	nop
 80007fa:	3718      	adds	r7, #24
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	2000007c 	.word	0x2000007c
 8000804:	20000034 	.word	0x20000034
 8000808:	20000000 	.word	0x20000000
 800080c:	200000bc 	.word	0x200000bc

08000810 <Petit_RxDataAvailable>:
 * Function Name        : RxDataAvailable
 * @return              : If Data is Ready, Return TRUE
 *                        If Data is not Ready, Return FALSE
 */
unsigned char Petit_RxDataAvailable(void)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
    unsigned char Result    = Petit_Rx_Data_Available;
 8000816:	4b06      	ldr	r3, [pc, #24]	@ (8000830 <Petit_RxDataAvailable+0x20>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	71fb      	strb	r3, [r7, #7]
    
    Petit_Rx_Data_Available       = FALSE;
 800081c:	4b04      	ldr	r3, [pc, #16]	@ (8000830 <Petit_RxDataAvailable+0x20>)
 800081e:	2200      	movs	r2, #0
 8000820:	701a      	strb	r2, [r3, #0]

    return Result;
 8000822:	79fb      	ldrb	r3, [r7, #7]
}
 8000824:	4618      	mov	r0, r3
 8000826:	370c      	adds	r7, #12
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr
 8000830:	2000009b 	.word	0x2000009b

08000834 <Petit_CheckRxTimeout>:
 * Function Name        : CheckRxTimeout
 * @return              : If Time is out return TRUE
 *                        If Time is not out return FALSE
 */
unsigned char Petit_CheckRxTimeout(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
    // A return value of true indicates there is a timeout    
    if (PetitModbusTimerValue>= PETITMODBUS_TIMEOUTTIMER)
 8000838:	4b09      	ldr	r3, [pc, #36]	@ (8000860 <Petit_CheckRxTimeout+0x2c>)
 800083a:	881b      	ldrh	r3, [r3, #0]
 800083c:	b29b      	uxth	r3, r3
 800083e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000842:	d307      	bcc.n	8000854 <Petit_CheckRxTimeout+0x20>
    {
        PetitModbusTimerValue   =0;
 8000844:	4b06      	ldr	r3, [pc, #24]	@ (8000860 <Petit_CheckRxTimeout+0x2c>)
 8000846:	2200      	movs	r2, #0
 8000848:	801a      	strh	r2, [r3, #0]
        PetitReceiveCounter     =0;
 800084a:	4b06      	ldr	r3, [pc, #24]	@ (8000864 <Petit_CheckRxTimeout+0x30>)
 800084c:	2200      	movs	r2, #0
 800084e:	701a      	strb	r2, [r3, #0]
        return TRUE;
 8000850:	2301      	movs	r3, #1
 8000852:	e000      	b.n	8000856 <Petit_CheckRxTimeout+0x22>
    }

    return FALSE;
 8000854:	2300      	movs	r3, #0
}
 8000856:	4618      	mov	r0, r3
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr
 8000860:	2000009c 	.word	0x2000009c
 8000864:	200000b9 	.word	0x200000b9

08000868 <CheckPetitModbusBufferComplete>:
 *                        If slave address is wrong, return     FALSE_SLAVE_ADDRESS
 *                        If data is not ready, return          DATA_NOT_READY
 *                        If functions is wrong, return         FALSE_FUNCTION
 */
unsigned char CheckPetitModbusBufferComplete(void)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
    int PetitExpectedReceiveCount=0;
 800086e:	2300      	movs	r3, #0
 8000870:	607b      	str	r3, [r7, #4]

    if(PetitReceiveCounter>4)
 8000872:	4b2c      	ldr	r3, [pc, #176]	@ (8000924 <CheckPetitModbusBufferComplete+0xbc>)
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	b2db      	uxtb	r3, r3
 8000878:	2b04      	cmp	r3, #4
 800087a:	d941      	bls.n	8000900 <CheckPetitModbusBufferComplete+0x98>
    {
        if(PetitReceiveBuffer[0]==PETITMODBUS_SLAVE_ADDRESS)
 800087c:	4b2a      	ldr	r3, [pc, #168]	@ (8000928 <CheckPetitModbusBufferComplete+0xc0>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	b2da      	uxtb	r2, r3
 8000882:	4b2a      	ldr	r3, [pc, #168]	@ (800092c <CheckPetitModbusBufferComplete+0xc4>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	429a      	cmp	r2, r3
 8000888:	d135      	bne.n	80008f6 <CheckPetitModbusBufferComplete+0x8e>
        {
            if(PetitReceiveBuffer[1]==0x01 || PetitReceiveBuffer[1]==0x02 || PetitReceiveBuffer[1]==0x03 || PetitReceiveBuffer[1]==0x04 || PetitReceiveBuffer[1]==0x05 || PetitReceiveBuffer[1]==0x06)  // RHR
 800088a:	4b27      	ldr	r3, [pc, #156]	@ (8000928 <CheckPetitModbusBufferComplete+0xc0>)
 800088c:	785b      	ldrb	r3, [r3, #1]
 800088e:	b2db      	uxtb	r3, r3
 8000890:	2b01      	cmp	r3, #1
 8000892:	d018      	beq.n	80008c6 <CheckPetitModbusBufferComplete+0x5e>
 8000894:	4b24      	ldr	r3, [pc, #144]	@ (8000928 <CheckPetitModbusBufferComplete+0xc0>)
 8000896:	785b      	ldrb	r3, [r3, #1]
 8000898:	b2db      	uxtb	r3, r3
 800089a:	2b02      	cmp	r3, #2
 800089c:	d013      	beq.n	80008c6 <CheckPetitModbusBufferComplete+0x5e>
 800089e:	4b22      	ldr	r3, [pc, #136]	@ (8000928 <CheckPetitModbusBufferComplete+0xc0>)
 80008a0:	785b      	ldrb	r3, [r3, #1]
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	2b03      	cmp	r3, #3
 80008a6:	d00e      	beq.n	80008c6 <CheckPetitModbusBufferComplete+0x5e>
 80008a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000928 <CheckPetitModbusBufferComplete+0xc0>)
 80008aa:	785b      	ldrb	r3, [r3, #1]
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	2b04      	cmp	r3, #4
 80008b0:	d009      	beq.n	80008c6 <CheckPetitModbusBufferComplete+0x5e>
 80008b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000928 <CheckPetitModbusBufferComplete+0xc0>)
 80008b4:	785b      	ldrb	r3, [r3, #1]
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	2b05      	cmp	r3, #5
 80008ba:	d004      	beq.n	80008c6 <CheckPetitModbusBufferComplete+0x5e>
 80008bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000928 <CheckPetitModbusBufferComplete+0xc0>)
 80008be:	785b      	ldrb	r3, [r3, #1]
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	2b06      	cmp	r3, #6
 80008c4:	d102      	bne.n	80008cc <CheckPetitModbusBufferComplete+0x64>
            {
                PetitExpectedReceiveCount    =8;
 80008c6:	2308      	movs	r3, #8
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	e01b      	b.n	8000904 <CheckPetitModbusBufferComplete+0x9c>
            }
            else if(PetitReceiveBuffer[1]==0x0F || PetitReceiveBuffer[1]==0x10)
 80008cc:	4b16      	ldr	r3, [pc, #88]	@ (8000928 <CheckPetitModbusBufferComplete+0xc0>)
 80008ce:	785b      	ldrb	r3, [r3, #1]
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	2b0f      	cmp	r3, #15
 80008d4:	d004      	beq.n	80008e0 <CheckPetitModbusBufferComplete+0x78>
 80008d6:	4b14      	ldr	r3, [pc, #80]	@ (8000928 <CheckPetitModbusBufferComplete+0xc0>)
 80008d8:	785b      	ldrb	r3, [r3, #1]
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	2b10      	cmp	r3, #16
 80008de:	d105      	bne.n	80008ec <CheckPetitModbusBufferComplete+0x84>
            {
                PetitExpectedReceiveCount=PetitReceiveBuffer[6]+9;
 80008e0:	4b11      	ldr	r3, [pc, #68]	@ (8000928 <CheckPetitModbusBufferComplete+0xc0>)
 80008e2:	799b      	ldrb	r3, [r3, #6]
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	3309      	adds	r3, #9
 80008e8:	607b      	str	r3, [r7, #4]
 80008ea:	e00b      	b.n	8000904 <CheckPetitModbusBufferComplete+0x9c>
            }
            else
            {
                PetitReceiveCounter=0;
 80008ec:	4b0d      	ldr	r3, [pc, #52]	@ (8000924 <CheckPetitModbusBufferComplete+0xbc>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	701a      	strb	r2, [r3, #0]
                return PETIT_FALSE_FUNCTION;
 80008f2:	2300      	movs	r3, #0
 80008f4:	e010      	b.n	8000918 <CheckPetitModbusBufferComplete+0xb0>
            }
        }
        else
        {
            PetitReceiveCounter=0;
 80008f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000924 <CheckPetitModbusBufferComplete+0xbc>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	701a      	strb	r2, [r3, #0]
            return PETIT_FALSE_SLAVE_ADDRESS;
 80008fc:	2301      	movs	r3, #1
 80008fe:	e00b      	b.n	8000918 <CheckPetitModbusBufferComplete+0xb0>
        }
    }
    else
        return PETIT_DATA_NOT_READY;
 8000900:	2302      	movs	r3, #2
 8000902:	e009      	b.n	8000918 <CheckPetitModbusBufferComplete+0xb0>

    if(PetitReceiveCounter==PetitExpectedReceiveCount)
 8000904:	4b07      	ldr	r3, [pc, #28]	@ (8000924 <CheckPetitModbusBufferComplete+0xbc>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	b2db      	uxtb	r3, r3
 800090a:	461a      	mov	r2, r3
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	4293      	cmp	r3, r2
 8000910:	d101      	bne.n	8000916 <CheckPetitModbusBufferComplete+0xae>
    {
        return PETIT_DATA_READY;
 8000912:	2303      	movs	r3, #3
 8000914:	e000      	b.n	8000918 <CheckPetitModbusBufferComplete+0xb0>
    }

    return PETIT_DATA_NOT_READY;
 8000916:	2302      	movs	r3, #2
}
 8000918:	4618      	mov	r0, r3
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	200000b9 	.word	0x200000b9
 8000928:	200000a0 	.word	0x200000a0
 800092c:	20000000 	.word	0x20000000

08000930 <Petit_RxRTU>:
/*
 * Function Name        : RxRTU
 * @How to use          : Check for data ready, if it is good return answer
 */
void Petit_RxRTU(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
    unsigned char   Petit_i;
    unsigned char   Petit_ReceiveBufferControl=0;
 8000936:	2300      	movs	r3, #0
 8000938:	71bb      	strb	r3, [r7, #6]

    Petit_ReceiveBufferControl    =CheckPetitModbusBufferComplete();
 800093a:	f7ff ff95 	bl	8000868 <CheckPetitModbusBufferComplete>
 800093e:	4603      	mov	r3, r0
 8000940:	71bb      	strb	r3, [r7, #6]

    if(Petit_ReceiveBufferControl==PETIT_DATA_READY)
 8000942:	79bb      	ldrb	r3, [r7, #6]
 8000944:	2b03      	cmp	r3, #3
 8000946:	d13c      	bne.n	80009c2 <Petit_RxRTU+0x92>
    {
        Petit_Rx_Data.Address               =PetitReceiveBuffer[0];
 8000948:	4b3e      	ldr	r3, [pc, #248]	@ (8000a44 <Petit_RxRTU+0x114>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	b2da      	uxtb	r2, r3
 800094e:	4b3e      	ldr	r3, [pc, #248]	@ (8000a48 <Petit_RxRTU+0x118>)
 8000950:	701a      	strb	r2, [r3, #0]
        Petit_Rx_CRC16                      = 0xffff;
 8000952:	4b3e      	ldr	r3, [pc, #248]	@ (8000a4c <Petit_RxRTU+0x11c>)
 8000954:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000958:	601a      	str	r2, [r3, #0]
        Petit_CRC16(Petit_Rx_Data.Address, &Petit_Rx_CRC16);
 800095a:	4b3b      	ldr	r3, [pc, #236]	@ (8000a48 <Petit_RxRTU+0x118>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	493b      	ldr	r1, [pc, #236]	@ (8000a4c <Petit_RxRTU+0x11c>)
 8000960:	4618      	mov	r0, r3
 8000962:	f7ff fda9 	bl	80004b8 <Petit_CRC16>
        Petit_Rx_Data.Function              =PetitReceiveBuffer[1];
 8000966:	4b37      	ldr	r3, [pc, #220]	@ (8000a44 <Petit_RxRTU+0x114>)
 8000968:	785b      	ldrb	r3, [r3, #1]
 800096a:	b2da      	uxtb	r2, r3
 800096c:	4b36      	ldr	r3, [pc, #216]	@ (8000a48 <Petit_RxRTU+0x118>)
 800096e:	705a      	strb	r2, [r3, #1]
        Petit_CRC16(Petit_Rx_Data.Function, &Petit_Rx_CRC16);
 8000970:	4b35      	ldr	r3, [pc, #212]	@ (8000a48 <Petit_RxRTU+0x118>)
 8000972:	785b      	ldrb	r3, [r3, #1]
 8000974:	4935      	ldr	r1, [pc, #212]	@ (8000a4c <Petit_RxRTU+0x11c>)
 8000976:	4618      	mov	r0, r3
 8000978:	f7ff fd9e 	bl	80004b8 <Petit_CRC16>

        Petit_Rx_Data.DataLen=0;
 800097c:	4b32      	ldr	r3, [pc, #200]	@ (8000a48 <Petit_RxRTU+0x118>)
 800097e:	2200      	movs	r2, #0
 8000980:	839a      	strh	r2, [r3, #28]

        for(Petit_i=2;Petit_i<PetitReceiveCounter;Petit_i++)
 8000982:	2302      	movs	r3, #2
 8000984:	71fb      	strb	r3, [r7, #7]
 8000986:	e010      	b.n	80009aa <Petit_RxRTU+0x7a>
            Petit_Rx_Data.DataBuf[Petit_Rx_Data.DataLen++]=PetitReceiveBuffer[Petit_i];
 8000988:	79fa      	ldrb	r2, [r7, #7]
 800098a:	4b2f      	ldr	r3, [pc, #188]	@ (8000a48 <Petit_RxRTU+0x118>)
 800098c:	8b9b      	ldrh	r3, [r3, #28]
 800098e:	1c59      	adds	r1, r3, #1
 8000990:	b288      	uxth	r0, r1
 8000992:	492d      	ldr	r1, [pc, #180]	@ (8000a48 <Petit_RxRTU+0x118>)
 8000994:	8388      	strh	r0, [r1, #28]
 8000996:	4619      	mov	r1, r3
 8000998:	4b2a      	ldr	r3, [pc, #168]	@ (8000a44 <Petit_RxRTU+0x114>)
 800099a:	5c9b      	ldrb	r3, [r3, r2]
 800099c:	b2da      	uxtb	r2, r3
 800099e:	4b2a      	ldr	r3, [pc, #168]	@ (8000a48 <Petit_RxRTU+0x118>)
 80009a0:	440b      	add	r3, r1
 80009a2:	709a      	strb	r2, [r3, #2]
        for(Petit_i=2;Petit_i<PetitReceiveCounter;Petit_i++)
 80009a4:	79fb      	ldrb	r3, [r7, #7]
 80009a6:	3301      	adds	r3, #1
 80009a8:	71fb      	strb	r3, [r7, #7]
 80009aa:	4b29      	ldr	r3, [pc, #164]	@ (8000a50 <Petit_RxRTU+0x120>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	79fa      	ldrb	r2, [r7, #7]
 80009b2:	429a      	cmp	r2, r3
 80009b4:	d3e8      	bcc.n	8000988 <Petit_RxRTU+0x58>

        Petit_Rx_State =PETIT_RXTX_DATABUF;
 80009b6:	4b27      	ldr	r3, [pc, #156]	@ (8000a54 <Petit_RxRTU+0x124>)
 80009b8:	2202      	movs	r2, #2
 80009ba:	701a      	strb	r2, [r3, #0]

        PetitReceiveCounter=0;
 80009bc:	4b24      	ldr	r3, [pc, #144]	@ (8000a50 <Petit_RxRTU+0x120>)
 80009be:	2200      	movs	r2, #0
 80009c0:	701a      	strb	r2, [r3, #0]
    }

    Petit_CheckRxTimeout();
 80009c2:	f7ff ff37 	bl	8000834 <Petit_CheckRxTimeout>

    if ((Petit_Rx_State == PETIT_RXTX_DATABUF) && (Petit_Rx_Data.DataLen >= 2))
 80009c6:	4b23      	ldr	r3, [pc, #140]	@ (8000a54 <Petit_RxRTU+0x124>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	2b02      	cmp	r3, #2
 80009cc:	d136      	bne.n	8000a3c <Petit_RxRTU+0x10c>
 80009ce:	4b1e      	ldr	r3, [pc, #120]	@ (8000a48 <Petit_RxRTU+0x118>)
 80009d0:	8b9b      	ldrh	r3, [r3, #28]
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	d932      	bls.n	8000a3c <Petit_RxRTU+0x10c>
    {
        // Finish off our CRC check
        Petit_Rx_Data.DataLen -= 2;
 80009d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a48 <Petit_RxRTU+0x118>)
 80009d8:	8b9b      	ldrh	r3, [r3, #28]
 80009da:	3b02      	subs	r3, #2
 80009dc:	b29a      	uxth	r2, r3
 80009de:	4b1a      	ldr	r3, [pc, #104]	@ (8000a48 <Petit_RxRTU+0x118>)
 80009e0:	839a      	strh	r2, [r3, #28]
        for (Petit_i = 0; Petit_i < Petit_Rx_Data.DataLen; ++Petit_i)
 80009e2:	2300      	movs	r3, #0
 80009e4:	71fb      	strb	r3, [r7, #7]
 80009e6:	e00a      	b.n	80009fe <Petit_RxRTU+0xce>
        {
            Petit_CRC16(Petit_Rx_Data.DataBuf[Petit_i], &Petit_Rx_CRC16);
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	4a17      	ldr	r2, [pc, #92]	@ (8000a48 <Petit_RxRTU+0x118>)
 80009ec:	4413      	add	r3, r2
 80009ee:	789b      	ldrb	r3, [r3, #2]
 80009f0:	4916      	ldr	r1, [pc, #88]	@ (8000a4c <Petit_RxRTU+0x11c>)
 80009f2:	4618      	mov	r0, r3
 80009f4:	f7ff fd60 	bl	80004b8 <Petit_CRC16>
        for (Petit_i = 0; Petit_i < Petit_Rx_Data.DataLen; ++Petit_i)
 80009f8:	79fb      	ldrb	r3, [r7, #7]
 80009fa:	3301      	adds	r3, #1
 80009fc:	71fb      	strb	r3, [r7, #7]
 80009fe:	79fb      	ldrb	r3, [r7, #7]
 8000a00:	b29a      	uxth	r2, r3
 8000a02:	4b11      	ldr	r3, [pc, #68]	@ (8000a48 <Petit_RxRTU+0x118>)
 8000a04:	8b9b      	ldrh	r3, [r3, #28]
 8000a06:	429a      	cmp	r2, r3
 8000a08:	d3ee      	bcc.n	80009e8 <Petit_RxRTU+0xb8>
        }
        
        if (((unsigned int) Petit_Rx_Data.DataBuf[Petit_Rx_Data.DataLen] + ((unsigned int) Petit_Rx_Data.DataBuf[Petit_Rx_Data.DataLen + 1] << 8)) == Petit_Rx_CRC16)
 8000a0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a48 <Petit_RxRTU+0x118>)
 8000a0c:	8b9b      	ldrh	r3, [r3, #28]
 8000a0e:	461a      	mov	r2, r3
 8000a10:	4b0d      	ldr	r3, [pc, #52]	@ (8000a48 <Petit_RxRTU+0x118>)
 8000a12:	4413      	add	r3, r2
 8000a14:	789b      	ldrb	r3, [r3, #2]
 8000a16:	4619      	mov	r1, r3
 8000a18:	4b0b      	ldr	r3, [pc, #44]	@ (8000a48 <Petit_RxRTU+0x118>)
 8000a1a:	8b9b      	ldrh	r3, [r3, #28]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a48 <Petit_RxRTU+0x118>)
 8000a20:	4413      	add	r3, r2
 8000a22:	789b      	ldrb	r3, [r3, #2]
 8000a24:	021b      	lsls	r3, r3, #8
 8000a26:	18ca      	adds	r2, r1, r3
 8000a28:	4b08      	ldr	r3, [pc, #32]	@ (8000a4c <Petit_RxRTU+0x11c>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	d102      	bne.n	8000a36 <Petit_RxRTU+0x106>
        {
            // Valid message!
            Petit_Rx_Data_Available = TRUE;
 8000a30:	4b09      	ldr	r3, [pc, #36]	@ (8000a58 <Petit_RxRTU+0x128>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	701a      	strb	r2, [r3, #0]
        }

        Petit_Rx_State = PETIT_RXTX_IDLE;
 8000a36:	4b07      	ldr	r3, [pc, #28]	@ (8000a54 <Petit_RxRTU+0x124>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	701a      	strb	r2, [r3, #0]
    }
}
 8000a3c:	bf00      	nop
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	200000a0 	.word	0x200000a0
 8000a48:	2000007c 	.word	0x2000007c
 8000a4c:	20000008 	.word	0x20000008
 8000a50:	200000b9 	.word	0x200000b9
 8000a54:	2000009a 	.word	0x2000009a
 8000a58:	2000009b 	.word	0x2000009b

08000a5c <Petit_TxRTU>:
/*
 * Function Name        : TxRTU
 * @How to use          : If it is ready send answers!
 */
void Petit_TxRTU(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
    Petit_Tx_CRC16                =0xFFFF;
 8000a60:	4b32      	ldr	r3, [pc, #200]	@ (8000b2c <Petit_TxRTU+0xd0>)
 8000a62:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a66:	601a      	str	r2, [r3, #0]
    Petit_Tx_Buf_Size             =0;
 8000a68:	4b31      	ldr	r3, [pc, #196]	@ (8000b30 <Petit_TxRTU+0xd4>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
    Petit_Tx_Buf[Petit_Tx_Buf_Size++]   =Petit_Tx_Data.Address;
 8000a6e:	4b30      	ldr	r3, [pc, #192]	@ (8000b30 <Petit_TxRTU+0xd4>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	1c5a      	adds	r2, r3, #1
 8000a74:	492e      	ldr	r1, [pc, #184]	@ (8000b30 <Petit_TxRTU+0xd4>)
 8000a76:	600a      	str	r2, [r1, #0]
 8000a78:	4a2e      	ldr	r2, [pc, #184]	@ (8000b34 <Petit_TxRTU+0xd8>)
 8000a7a:	7811      	ldrb	r1, [r2, #0]
 8000a7c:	4a2e      	ldr	r2, [pc, #184]	@ (8000b38 <Petit_TxRTU+0xdc>)
 8000a7e:	54d1      	strb	r1, [r2, r3]
    Petit_CRC16(Petit_Tx_Data.Address, &Petit_Tx_CRC16);
 8000a80:	4b2c      	ldr	r3, [pc, #176]	@ (8000b34 <Petit_TxRTU+0xd8>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	4929      	ldr	r1, [pc, #164]	@ (8000b2c <Petit_TxRTU+0xd0>)
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff fd16 	bl	80004b8 <Petit_CRC16>
    Petit_Tx_Buf[Petit_Tx_Buf_Size++]   =Petit_Tx_Data.Function;
 8000a8c:	4b28      	ldr	r3, [pc, #160]	@ (8000b30 <Petit_TxRTU+0xd4>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	1c5a      	adds	r2, r3, #1
 8000a92:	4927      	ldr	r1, [pc, #156]	@ (8000b30 <Petit_TxRTU+0xd4>)
 8000a94:	600a      	str	r2, [r1, #0]
 8000a96:	4a27      	ldr	r2, [pc, #156]	@ (8000b34 <Petit_TxRTU+0xd8>)
 8000a98:	7851      	ldrb	r1, [r2, #1]
 8000a9a:	4a27      	ldr	r2, [pc, #156]	@ (8000b38 <Petit_TxRTU+0xdc>)
 8000a9c:	54d1      	strb	r1, [r2, r3]
    Petit_CRC16(Petit_Tx_Data.Function, &Petit_Tx_CRC16);
 8000a9e:	4b25      	ldr	r3, [pc, #148]	@ (8000b34 <Petit_TxRTU+0xd8>)
 8000aa0:	785b      	ldrb	r3, [r3, #1]
 8000aa2:	4922      	ldr	r1, [pc, #136]	@ (8000b2c <Petit_TxRTU+0xd0>)
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff fd07 	bl	80004b8 <Petit_CRC16>

    for(Petit_Tx_Current=0; Petit_Tx_Current < Petit_Tx_Data.DataLen; Petit_Tx_Current++)
 8000aaa:	4b24      	ldr	r3, [pc, #144]	@ (8000b3c <Petit_TxRTU+0xe0>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	e019      	b.n	8000ae6 <Petit_TxRTU+0x8a>
    {
        Petit_Tx_Buf[Petit_Tx_Buf_Size++]=Petit_Tx_Data.DataBuf[Petit_Tx_Current];
 8000ab2:	4b22      	ldr	r3, [pc, #136]	@ (8000b3c <Petit_TxRTU+0xe0>)
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	4b1e      	ldr	r3, [pc, #120]	@ (8000b30 <Petit_TxRTU+0xd4>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	1c59      	adds	r1, r3, #1
 8000abc:	481c      	ldr	r0, [pc, #112]	@ (8000b30 <Petit_TxRTU+0xd4>)
 8000abe:	6001      	str	r1, [r0, #0]
 8000ac0:	491c      	ldr	r1, [pc, #112]	@ (8000b34 <Petit_TxRTU+0xd8>)
 8000ac2:	440a      	add	r2, r1
 8000ac4:	7891      	ldrb	r1, [r2, #2]
 8000ac6:	4a1c      	ldr	r2, [pc, #112]	@ (8000b38 <Petit_TxRTU+0xdc>)
 8000ac8:	54d1      	strb	r1, [r2, r3]
        Petit_CRC16(Petit_Tx_Data.DataBuf[Petit_Tx_Current], &Petit_Tx_CRC16);
 8000aca:	4b1c      	ldr	r3, [pc, #112]	@ (8000b3c <Petit_TxRTU+0xe0>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a19      	ldr	r2, [pc, #100]	@ (8000b34 <Petit_TxRTU+0xd8>)
 8000ad0:	4413      	add	r3, r2
 8000ad2:	789b      	ldrb	r3, [r3, #2]
 8000ad4:	4915      	ldr	r1, [pc, #84]	@ (8000b2c <Petit_TxRTU+0xd0>)
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f7ff fcee 	bl	80004b8 <Petit_CRC16>
    for(Petit_Tx_Current=0; Petit_Tx_Current < Petit_Tx_Data.DataLen; Petit_Tx_Current++)
 8000adc:	4b17      	ldr	r3, [pc, #92]	@ (8000b3c <Petit_TxRTU+0xe0>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	4a16      	ldr	r2, [pc, #88]	@ (8000b3c <Petit_TxRTU+0xe0>)
 8000ae4:	6013      	str	r3, [r2, #0]
 8000ae6:	4b13      	ldr	r3, [pc, #76]	@ (8000b34 <Petit_TxRTU+0xd8>)
 8000ae8:	8b9b      	ldrh	r3, [r3, #28]
 8000aea:	461a      	mov	r2, r3
 8000aec:	4b13      	ldr	r3, [pc, #76]	@ (8000b3c <Petit_TxRTU+0xe0>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	429a      	cmp	r2, r3
 8000af2:	d8de      	bhi.n	8000ab2 <Petit_TxRTU+0x56>
    }
    
    Petit_Tx_Buf[Petit_Tx_Buf_Size++] = Petit_Tx_CRC16 & 0x00FF;
 8000af4:	4b0d      	ldr	r3, [pc, #52]	@ (8000b2c <Petit_TxRTU+0xd0>)
 8000af6:	6818      	ldr	r0, [r3, #0]
 8000af8:	4b0d      	ldr	r3, [pc, #52]	@ (8000b30 <Petit_TxRTU+0xd4>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	1c5a      	adds	r2, r3, #1
 8000afe:	490c      	ldr	r1, [pc, #48]	@ (8000b30 <Petit_TxRTU+0xd4>)
 8000b00:	600a      	str	r2, [r1, #0]
 8000b02:	b2c1      	uxtb	r1, r0
 8000b04:	4a0c      	ldr	r2, [pc, #48]	@ (8000b38 <Petit_TxRTU+0xdc>)
 8000b06:	54d1      	strb	r1, [r2, r3]
    Petit_Tx_Buf[Petit_Tx_Buf_Size++] =(Petit_Tx_CRC16 & 0xFF00) >> 8;
 8000b08:	4b08      	ldr	r3, [pc, #32]	@ (8000b2c <Petit_TxRTU+0xd0>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	0a18      	lsrs	r0, r3, #8
 8000b0e:	4b08      	ldr	r3, [pc, #32]	@ (8000b30 <Petit_TxRTU+0xd4>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	1c5a      	adds	r2, r3, #1
 8000b14:	4906      	ldr	r1, [pc, #24]	@ (8000b30 <Petit_TxRTU+0xd4>)
 8000b16:	600a      	str	r2, [r1, #0]
 8000b18:	b2c1      	uxtb	r1, r0
 8000b1a:	4a07      	ldr	r2, [pc, #28]	@ (8000b38 <Petit_TxRTU+0xdc>)
 8000b1c:	54d1      	strb	r1, [r2, r3]

    Petit_DoSlaveTX();
 8000b1e:	f7ff fcfd 	bl	800051c <Petit_DoSlaveTX>

    Petit_Tx_State    =PETIT_RXTX_IDLE;
 8000b22:	4b07      	ldr	r3, [pc, #28]	@ (8000b40 <Petit_TxRTU+0xe4>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	701a      	strb	r2, [r3, #0]
}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20000004 	.word	0x20000004
 8000b30:	20000078 	.word	0x20000078
 8000b34:	20000034 	.word	0x20000034
 8000b38:	2000005c 	.word	0x2000005c
 8000b3c:	20000054 	.word	0x20000054
 8000b40:	20000058 	.word	0x20000058

08000b44 <ProcessPetitModbus>:
/*
 * Function Name        : ProcessModbus
 * @How to use          : ModBus main core! Call this function into main!
 */
void ProcessPetitModbus(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
	if (Petit_Tx_State != PETIT_RXTX_IDLE)                                      // If answer is ready, send it!
 8000b48:	4b16      	ldr	r3, [pc, #88]	@ (8000ba4 <ProcessPetitModbus+0x60>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <ProcessPetitModbus+0x10>
        Petit_TxRTU();
 8000b50:	f7ff ff84 	bl	8000a5c <Petit_TxRTU>

    Petit_RxRTU();                                                              // Call this function every cycle
 8000b54:	f7ff feec 	bl	8000930 <Petit_RxRTU>

    if (Petit_RxDataAvailable())                                                // If data is ready enter this!
 8000b58:	f7ff fe5a 	bl	8000810 <Petit_RxDataAvailable>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d01d      	beq.n	8000b9e <ProcessPetitModbus+0x5a>
    {
        if (Petit_Rx_Data.Address == PETITMODBUS_SLAVE_ADDRESS)                 // Is Data for us?
 8000b62:	4b11      	ldr	r3, [pc, #68]	@ (8000ba8 <ProcessPetitModbus+0x64>)
 8000b64:	781a      	ldrb	r2, [r3, #0]
 8000b66:	4b11      	ldr	r3, [pc, #68]	@ (8000bac <ProcessPetitModbus+0x68>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	429a      	cmp	r2, r3
 8000b6c:	d117      	bne.n	8000b9e <ProcessPetitModbus+0x5a>
        {
            switch (Petit_Rx_Data.Function)                                     // Data is for us but which function?
 8000b6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba8 <ProcessPetitModbus+0x64>)
 8000b70:	785b      	ldrb	r3, [r3, #1]
 8000b72:	2b10      	cmp	r3, #16
 8000b74:	d00c      	beq.n	8000b90 <ProcessPetitModbus+0x4c>
 8000b76:	2b10      	cmp	r3, #16
 8000b78:	dc0d      	bgt.n	8000b96 <ProcessPetitModbus+0x52>
 8000b7a:	2b03      	cmp	r3, #3
 8000b7c:	d002      	beq.n	8000b84 <ProcessPetitModbus+0x40>
 8000b7e:	2b06      	cmp	r3, #6
 8000b80:	d003      	beq.n	8000b8a <ProcessPetitModbus+0x46>
 8000b82:	e008      	b.n	8000b96 <ProcessPetitModbus+0x52>
            {
                #if PETITMODBUS_READ_HOLDING_REGISTERS_ENABLED > 0
                case PETITMODBUS_READ_HOLDING_REGISTERS:    {   HandlePetitModbusReadHoldingRegisters();        break;  }
 8000b84:	f7ff fd1a 	bl	80005bc <HandlePetitModbusReadHoldingRegisters>
 8000b88:	e009      	b.n	8000b9e <ProcessPetitModbus+0x5a>
                #endif
                #if PETITMODBUSWRITE_SINGLE_REGISTER_ENABLED > 0
                case PETITMODBUS_WRITE_SINGLE_REGISTER:     {   HandlePetitModbusWriteSingleRegister();         break;  }
 8000b8a:	f7ff fd83 	bl	8000694 <HandlePetitModbusWriteSingleRegister>
 8000b8e:	e006      	b.n	8000b9e <ProcessPetitModbus+0x5a>
                #endif
                #if PETITMODBUS_WRITE_MULTIPLE_REGISTERS_ENABLED > 0
                case PETITMODBUS_WRITE_MULTIPLE_REGISTERS:  {   HandleMPetitodbusWriteMultipleRegisters();      break;  }
 8000b90:	f7ff fdce 	bl	8000730 <HandleMPetitodbusWriteMultipleRegisters>
 8000b94:	e003      	b.n	8000b9e <ProcessPetitModbus+0x5a>
                #endif
                default:                                    {   HandlePetitModbusError(PETIT_ERROR_CODE_01);    break;  }
 8000b96:	2001      	movs	r0, #1
 8000b98:	f7ff fcee 	bl	8000578 <HandlePetitModbusError>
 8000b9c:	bf00      	nop
            }
        }
    }
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000058 	.word	0x20000058
 8000ba8:	2000007c 	.word	0x2000007c
 8000bac:	20000000 	.word	0x20000000

08000bb0 <InitPetitModbus>:
/*
 * Function Name        : InitPetitModbus
 * @How to use          : Petite ModBus slave initialize
 */
void InitPetitModbus(unsigned char PetitModbusSlaveAddress)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	71fb      	strb	r3, [r7, #7]
    PETITMODBUS_SLAVE_ADDRESS    =PetitModbusSlaveAddress;
 8000bba:	4a04      	ldr	r2, [pc, #16]	@ (8000bcc <InitPetitModbus+0x1c>)
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	7013      	strb	r3, [r2, #0]
    
    //PetitModBus_UART_Initialise();
    //PetitModBus_TIMER_Initialise();
}
 8000bc0:	bf00      	nop
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	20000000 	.word	0x20000000

08000bd0 <ReceiveInterrupt>:

/*************************Interrupt Fonction Slave*****************************/
// Call this function into your UART Interrupt. Collect data from it!
// Better to use DMA
void ReceiveInterrupt(unsigned char Data)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	71fb      	strb	r3, [r7, #7]
    PetitReceiveBuffer[PetitReceiveCounter]   =Data;
 8000bda:	4b0f      	ldr	r3, [pc, #60]	@ (8000c18 <ReceiveInterrupt+0x48>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	4619      	mov	r1, r3
 8000be2:	4a0e      	ldr	r2, [pc, #56]	@ (8000c1c <ReceiveInterrupt+0x4c>)
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	5453      	strb	r3, [r2, r1]
    PetitReceiveCounter++;
 8000be8:	4b0b      	ldr	r3, [pc, #44]	@ (8000c18 <ReceiveInterrupt+0x48>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	3301      	adds	r3, #1
 8000bf0:	b2da      	uxtb	r2, r3
 8000bf2:	4b09      	ldr	r3, [pc, #36]	@ (8000c18 <ReceiveInterrupt+0x48>)
 8000bf4:	701a      	strb	r2, [r3, #0]

    if(PetitReceiveCounter>PETITMODBUS_RECEIVE_BUFFER_SIZE)  
 8000bf6:	4b08      	ldr	r3, [pc, #32]	@ (8000c18 <ReceiveInterrupt+0x48>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	2b19      	cmp	r3, #25
 8000bfe:	d902      	bls.n	8000c06 <ReceiveInterrupt+0x36>
        PetitReceiveCounter=0;
 8000c00:	4b05      	ldr	r3, [pc, #20]	@ (8000c18 <ReceiveInterrupt+0x48>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	701a      	strb	r2, [r3, #0]

    PetitModbusTimerValue=0;
 8000c06:	4b06      	ldr	r3, [pc, #24]	@ (8000c20 <ReceiveInterrupt+0x50>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	801a      	strh	r2, [r3, #0]
}
 8000c0c:	bf00      	nop
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	200000b9 	.word	0x200000b9
 8000c1c:	200000a0 	.word	0x200000a0
 8000c20:	2000009c 	.word	0x2000009c

08000c24 <PetitModBus_TimerValues>:

// Call this function into 1ms Interrupt or Event!
void PetitModBus_TimerValues(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
    PetitModbusTimerValue++;
 8000c28:	4b05      	ldr	r3, [pc, #20]	@ (8000c40 <PetitModBus_TimerValues+0x1c>)
 8000c2a:	881b      	ldrh	r3, [r3, #0]
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	3301      	adds	r3, #1
 8000c30:	b29a      	uxth	r2, r3
 8000c32:	4b03      	ldr	r3, [pc, #12]	@ (8000c40 <PetitModBus_TimerValues+0x1c>)
 8000c34:	801a      	strh	r2, [r3, #0]
}
 8000c36:	bf00      	nop
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	2000009c 	.word	0x2000009c

08000c44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c48:	f000 fb9a 	bl	8001380 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c4c:	f000 f820 	bl	8000c90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c50:	f000 f94e 	bl	8000ef0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c54:	f000 f924 	bl	8000ea0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000c58:	f000 f8f8 	bl	8000e4c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000c5c:	f000 f882 	bl	8000d64 <MX_TIM1_Init>
  MX_TIM10_Init();
 8000c60:	f000 f8d0 	bl	8000e04 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim10);
 8000c64:	4807      	ldr	r0, [pc, #28]	@ (8000c84 <main+0x40>)
 8000c66:	f001 ff6f 	bl	8002b48 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_DMA(&huart2, (uint8_t *)&rx_putch , 1);
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	4906      	ldr	r1, [pc, #24]	@ (8000c88 <main+0x44>)
 8000c6e:	4807      	ldr	r0, [pc, #28]	@ (8000c8c <main+0x48>)
 8000c70:	f002 fc50 	bl	8003514 <HAL_UART_Receive_DMA>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  InitPetitModbus(1);
 8000c74:	2001      	movs	r0, #1
 8000c76:	f7ff ff9b 	bl	8000bb0 <InitPetitModbus>
	  ProcessPetitModbus();
 8000c7a:	f7ff ff63 	bl	8000b44 <ProcessPetitModbus>
  {
 8000c7e:	bf00      	nop
 8000c80:	e7f8      	b.n	8000c74 <main+0x30>
 8000c82:	bf00      	nop
 8000c84:	2000011c 	.word	0x2000011c
 8000c88:	200000d0 	.word	0x200000d0
 8000c8c:	20000164 	.word	0x20000164

08000c90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b094      	sub	sp, #80	@ 0x50
 8000c94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c96:	f107 0320 	add.w	r3, r7, #32
 8000c9a:	2230      	movs	r2, #48	@ 0x30
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f003 fd52 	bl	8004748 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ca4:	f107 030c 	add.w	r3, r7, #12
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	60bb      	str	r3, [r7, #8]
 8000cb8:	4b28      	ldr	r3, [pc, #160]	@ (8000d5c <SystemClock_Config+0xcc>)
 8000cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cbc:	4a27      	ldr	r2, [pc, #156]	@ (8000d5c <SystemClock_Config+0xcc>)
 8000cbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cc2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cc4:	4b25      	ldr	r3, [pc, #148]	@ (8000d5c <SystemClock_Config+0xcc>)
 8000cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ccc:	60bb      	str	r3, [r7, #8]
 8000cce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	607b      	str	r3, [r7, #4]
 8000cd4:	4b22      	ldr	r3, [pc, #136]	@ (8000d60 <SystemClock_Config+0xd0>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a21      	ldr	r2, [pc, #132]	@ (8000d60 <SystemClock_Config+0xd0>)
 8000cda:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cde:	6013      	str	r3, [r2, #0]
 8000ce0:	4b1f      	ldr	r3, [pc, #124]	@ (8000d60 <SystemClock_Config+0xd0>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ce8:	607b      	str	r3, [r7, #4]
 8000cea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cec:	2302      	movs	r3, #2
 8000cee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cf4:	2310      	movs	r3, #16
 8000cf6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d00:	2308      	movs	r3, #8
 8000d02:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000d04:	23a8      	movs	r3, #168	@ 0xa8
 8000d06:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d0c:	2304      	movs	r3, #4
 8000d0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d10:	f107 0320 	add.w	r3, r7, #32
 8000d14:	4618      	mov	r0, r3
 8000d16:	f001 fa6f 	bl	80021f8 <HAL_RCC_OscConfig>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d20:	f000 f96e 	bl	8001000 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d24:	230f      	movs	r3, #15
 8000d26:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d30:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000d34:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d3a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d3c:	f107 030c 	add.w	r3, r7, #12
 8000d40:	2105      	movs	r1, #5
 8000d42:	4618      	mov	r0, r3
 8000d44:	f001 fcd0 	bl	80026e8 <HAL_RCC_ClockConfig>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000d4e:	f000 f957 	bl	8001000 <Error_Handler>
  }
}
 8000d52:	bf00      	nop
 8000d54:	3750      	adds	r7, #80	@ 0x50
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40023800 	.word	0x40023800
 8000d60:	40007000 	.word	0x40007000

08000d64 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d6a:	f107 0308 	add.w	r3, r7, #8
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	605a      	str	r2, [r3, #4]
 8000d74:	609a      	str	r2, [r3, #8]
 8000d76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d78:	463b      	mov	r3, r7
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d80:	4b1e      	ldr	r3, [pc, #120]	@ (8000dfc <MX_TIM1_Init+0x98>)
 8000d82:	4a1f      	ldr	r2, [pc, #124]	@ (8000e00 <MX_TIM1_Init+0x9c>)
 8000d84:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000d86:	4b1d      	ldr	r3, [pc, #116]	@ (8000dfc <MX_TIM1_Init+0x98>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d8c:	4b1b      	ldr	r3, [pc, #108]	@ (8000dfc <MX_TIM1_Init+0x98>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000d92:	4b1a      	ldr	r3, [pc, #104]	@ (8000dfc <MX_TIM1_Init+0x98>)
 8000d94:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d98:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d9a:	4b18      	ldr	r3, [pc, #96]	@ (8000dfc <MX_TIM1_Init+0x98>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000da0:	4b16      	ldr	r3, [pc, #88]	@ (8000dfc <MX_TIM1_Init+0x98>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000da6:	4b15      	ldr	r3, [pc, #84]	@ (8000dfc <MX_TIM1_Init+0x98>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000dac:	4813      	ldr	r0, [pc, #76]	@ (8000dfc <MX_TIM1_Init+0x98>)
 8000dae:	f001 fe7b 	bl	8002aa8 <HAL_TIM_Base_Init>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000db8:	f000 f922 	bl	8001000 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dbc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dc0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000dc2:	f107 0308 	add.w	r3, r7, #8
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	480c      	ldr	r0, [pc, #48]	@ (8000dfc <MX_TIM1_Init+0x98>)
 8000dca:	f002 f81d 	bl	8002e08 <HAL_TIM_ConfigClockSource>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000dd4:	f000 f914 	bl	8001000 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000de0:	463b      	mov	r3, r7
 8000de2:	4619      	mov	r1, r3
 8000de4:	4805      	ldr	r0, [pc, #20]	@ (8000dfc <MX_TIM1_Init+0x98>)
 8000de6:	f002 fa45 	bl	8003274 <HAL_TIMEx_MasterConfigSynchronization>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000df0:	f000 f906 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000df4:	bf00      	nop
 8000df6:	3718      	adds	r7, #24
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	200000d4 	.word	0x200000d4
 8000e00:	40010000 	.word	0x40010000

08000e04 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000e08:	4b0e      	ldr	r3, [pc, #56]	@ (8000e44 <MX_TIM10_Init+0x40>)
 8000e0a:	4a0f      	ldr	r2, [pc, #60]	@ (8000e48 <MX_TIM10_Init+0x44>)
 8000e0c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 16800;
 8000e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000e44 <MX_TIM10_Init+0x40>)
 8000e10:	f244 12a0 	movw	r2, #16800	@ 0x41a0
 8000e14:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e16:	4b0b      	ldr	r3, [pc, #44]	@ (8000e44 <MX_TIM10_Init+0x40>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000;
 8000e1c:	4b09      	ldr	r3, [pc, #36]	@ (8000e44 <MX_TIM10_Init+0x40>)
 8000e1e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000e22:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e24:	4b07      	ldr	r3, [pc, #28]	@ (8000e44 <MX_TIM10_Init+0x40>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e2a:	4b06      	ldr	r3, [pc, #24]	@ (8000e44 <MX_TIM10_Init+0x40>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000e30:	4804      	ldr	r0, [pc, #16]	@ (8000e44 <MX_TIM10_Init+0x40>)
 8000e32:	f001 fe39 	bl	8002aa8 <HAL_TIM_Base_Init>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8000e3c:	f000 f8e0 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000e40:	bf00      	nop
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	2000011c 	.word	0x2000011c
 8000e48:	40014400 	.word	0x40014400

08000e4c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e50:	4b11      	ldr	r3, [pc, #68]	@ (8000e98 <MX_USART2_UART_Init+0x4c>)
 8000e52:	4a12      	ldr	r2, [pc, #72]	@ (8000e9c <MX_USART2_UART_Init+0x50>)
 8000e54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e56:	4b10      	ldr	r3, [pc, #64]	@ (8000e98 <MX_USART2_UART_Init+0x4c>)
 8000e58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e98 <MX_USART2_UART_Init+0x4c>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e64:	4b0c      	ldr	r3, [pc, #48]	@ (8000e98 <MX_USART2_UART_Init+0x4c>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e98 <MX_USART2_UART_Init+0x4c>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e70:	4b09      	ldr	r3, [pc, #36]	@ (8000e98 <MX_USART2_UART_Init+0x4c>)
 8000e72:	220c      	movs	r2, #12
 8000e74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e76:	4b08      	ldr	r3, [pc, #32]	@ (8000e98 <MX_USART2_UART_Init+0x4c>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e7c:	4b06      	ldr	r3, [pc, #24]	@ (8000e98 <MX_USART2_UART_Init+0x4c>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e82:	4805      	ldr	r0, [pc, #20]	@ (8000e98 <MX_USART2_UART_Init+0x4c>)
 8000e84:	f002 fa86 	bl	8003394 <HAL_UART_Init>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e8e:	f000 f8b7 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	20000164 	.word	0x20000164
 8000e9c:	40004400 	.word	0x40004400

08000ea0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	607b      	str	r3, [r7, #4]
 8000eaa:	4b10      	ldr	r3, [pc, #64]	@ (8000eec <MX_DMA_Init+0x4c>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eae:	4a0f      	ldr	r2, [pc, #60]	@ (8000eec <MX_DMA_Init+0x4c>)
 8000eb0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000eb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8000eec <MX_DMA_Init+0x4c>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	2010      	movs	r0, #16
 8000ec8:	f000 fba7 	bl	800161a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000ecc:	2010      	movs	r0, #16
 8000ece:	f000 fbc0 	bl	8001652 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	2011      	movs	r0, #17
 8000ed8:	f000 fb9f 	bl	800161a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000edc:	2011      	movs	r0, #17
 8000ede:	f000 fbb8 	bl	8001652 <HAL_NVIC_EnableIRQ>

}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40023800 	.word	0x40023800

08000ef0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08a      	sub	sp, #40	@ 0x28
 8000ef4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef6:	f107 0314 	add.w	r3, r7, #20
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	605a      	str	r2, [r3, #4]
 8000f00:	609a      	str	r2, [r3, #8]
 8000f02:	60da      	str	r2, [r3, #12]
 8000f04:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	613b      	str	r3, [r7, #16]
 8000f0a:	4b27      	ldr	r3, [pc, #156]	@ (8000fa8 <MX_GPIO_Init+0xb8>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0e:	4a26      	ldr	r2, [pc, #152]	@ (8000fa8 <MX_GPIO_Init+0xb8>)
 8000f10:	f043 0304 	orr.w	r3, r3, #4
 8000f14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f16:	4b24      	ldr	r3, [pc, #144]	@ (8000fa8 <MX_GPIO_Init+0xb8>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1a:	f003 0304 	and.w	r3, r3, #4
 8000f1e:	613b      	str	r3, [r7, #16]
 8000f20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	4b20      	ldr	r3, [pc, #128]	@ (8000fa8 <MX_GPIO_Init+0xb8>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2a:	4a1f      	ldr	r2, [pc, #124]	@ (8000fa8 <MX_GPIO_Init+0xb8>)
 8000f2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f32:	4b1d      	ldr	r3, [pc, #116]	@ (8000fa8 <MX_GPIO_Init+0xb8>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60bb      	str	r3, [r7, #8]
 8000f42:	4b19      	ldr	r3, [pc, #100]	@ (8000fa8 <MX_GPIO_Init+0xb8>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f46:	4a18      	ldr	r2, [pc, #96]	@ (8000fa8 <MX_GPIO_Init+0xb8>)
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f4e:	4b16      	ldr	r3, [pc, #88]	@ (8000fa8 <MX_GPIO_Init+0xb8>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	60bb      	str	r3, [r7, #8]
 8000f58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	607b      	str	r3, [r7, #4]
 8000f5e:	4b12      	ldr	r3, [pc, #72]	@ (8000fa8 <MX_GPIO_Init+0xb8>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f62:	4a11      	ldr	r2, [pc, #68]	@ (8000fa8 <MX_GPIO_Init+0xb8>)
 8000f64:	f043 0308 	orr.w	r3, r3, #8
 8000f68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa8 <MX_GPIO_Init+0xb8>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6e:	f003 0308 	and.w	r3, r3, #8
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 8000f76:	2200      	movs	r2, #0
 8000f78:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000f7c:	480b      	ldr	r0, [pc, #44]	@ (8000fac <MX_GPIO_Init+0xbc>)
 8000f7e:	f001 f921 	bl	80021c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin;
 8000f82:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000f86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f90:	2300      	movs	r3, #0
 8000f92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4804      	ldr	r0, [pc, #16]	@ (8000fac <MX_GPIO_Init+0xbc>)
 8000f9c:	f000 ff76 	bl	8001e8c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fa0:	bf00      	nop
 8000fa2:	3728      	adds	r7, #40	@ 0x28
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40023800 	.word	0x40023800
 8000fac:	40020c00 	.word	0x40020c00

08000fb0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART2)  // Eğer kesme USART1'den geliyorsa
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a08      	ldr	r2, [pc, #32]	@ (8000fe0 <HAL_UART_RxCpltCallback+0x30>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d109      	bne.n	8000fd6 <HAL_UART_RxCpltCallback+0x26>
	    {
		HAL_UART_Receive_DMA(&huart2, (uint8_t *)&rx_putch , 1);
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	4907      	ldr	r1, [pc, #28]	@ (8000fe4 <HAL_UART_RxCpltCallback+0x34>)
 8000fc6:	4808      	ldr	r0, [pc, #32]	@ (8000fe8 <HAL_UART_RxCpltCallback+0x38>)
 8000fc8:	f002 faa4 	bl	8003514 <HAL_UART_Receive_DMA>
		ReceiveInterrupt(rx_putch);
 8000fcc:	4b05      	ldr	r3, [pc, #20]	@ (8000fe4 <HAL_UART_RxCpltCallback+0x34>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff fdfd 	bl	8000bd0 <ReceiveInterrupt>

	    }

}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40004400 	.word	0x40004400
 8000fe4:	200000d0 	.word	0x200000d0
 8000fe8:	20000164 	.word	0x20000164

08000fec <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
	PetitModBus_TimerValues();
 8000ff4:	f7ff fe16 	bl	8000c24 <PetitModBus_TimerValues>
}
 8000ff8:	bf00      	nop
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001004:	b672      	cpsid	i
}
 8001006:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001008:	bf00      	nop
 800100a:	e7fd      	b.n	8001008 <Error_Handler+0x8>

0800100c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	607b      	str	r3, [r7, #4]
 8001016:	4b10      	ldr	r3, [pc, #64]	@ (8001058 <HAL_MspInit+0x4c>)
 8001018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800101a:	4a0f      	ldr	r2, [pc, #60]	@ (8001058 <HAL_MspInit+0x4c>)
 800101c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001020:	6453      	str	r3, [r2, #68]	@ 0x44
 8001022:	4b0d      	ldr	r3, [pc, #52]	@ (8001058 <HAL_MspInit+0x4c>)
 8001024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001026:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	603b      	str	r3, [r7, #0]
 8001032:	4b09      	ldr	r3, [pc, #36]	@ (8001058 <HAL_MspInit+0x4c>)
 8001034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001036:	4a08      	ldr	r2, [pc, #32]	@ (8001058 <HAL_MspInit+0x4c>)
 8001038:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800103c:	6413      	str	r3, [r2, #64]	@ 0x40
 800103e:	4b06      	ldr	r3, [pc, #24]	@ (8001058 <HAL_MspInit+0x4c>)
 8001040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001042:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001046:	603b      	str	r3, [r7, #0]
 8001048:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	40023800 	.word	0x40023800

0800105c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a1c      	ldr	r2, [pc, #112]	@ (80010dc <HAL_TIM_Base_MspInit+0x80>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d116      	bne.n	800109c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	4b1b      	ldr	r3, [pc, #108]	@ (80010e0 <HAL_TIM_Base_MspInit+0x84>)
 8001074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001076:	4a1a      	ldr	r2, [pc, #104]	@ (80010e0 <HAL_TIM_Base_MspInit+0x84>)
 8001078:	f043 0301 	orr.w	r3, r3, #1
 800107c:	6453      	str	r3, [r2, #68]	@ 0x44
 800107e:	4b18      	ldr	r3, [pc, #96]	@ (80010e0 <HAL_TIM_Base_MspInit+0x84>)
 8001080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800108a:	2200      	movs	r2, #0
 800108c:	2100      	movs	r1, #0
 800108e:	2019      	movs	r0, #25
 8001090:	f000 fac3 	bl	800161a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001094:	2019      	movs	r0, #25
 8001096:	f000 fadc 	bl	8001652 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 800109a:	e01a      	b.n	80010d2 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM10)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a10      	ldr	r2, [pc, #64]	@ (80010e4 <HAL_TIM_Base_MspInit+0x88>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d115      	bne.n	80010d2 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	60bb      	str	r3, [r7, #8]
 80010aa:	4b0d      	ldr	r3, [pc, #52]	@ (80010e0 <HAL_TIM_Base_MspInit+0x84>)
 80010ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ae:	4a0c      	ldr	r2, [pc, #48]	@ (80010e0 <HAL_TIM_Base_MspInit+0x84>)
 80010b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80010b6:	4b0a      	ldr	r3, [pc, #40]	@ (80010e0 <HAL_TIM_Base_MspInit+0x84>)
 80010b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010be:	60bb      	str	r3, [r7, #8]
 80010c0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80010c2:	2200      	movs	r2, #0
 80010c4:	2100      	movs	r1, #0
 80010c6:	2019      	movs	r0, #25
 80010c8:	f000 faa7 	bl	800161a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80010cc:	2019      	movs	r0, #25
 80010ce:	f000 fac0 	bl	8001652 <HAL_NVIC_EnableIRQ>
}
 80010d2:	bf00      	nop
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40010000 	.word	0x40010000
 80010e0:	40023800 	.word	0x40023800
 80010e4:	40014400 	.word	0x40014400

080010e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08a      	sub	sp, #40	@ 0x28
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a4b      	ldr	r2, [pc, #300]	@ (8001234 <HAL_UART_MspInit+0x14c>)
 8001106:	4293      	cmp	r3, r2
 8001108:	f040 8090 	bne.w	800122c <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800110c:	2300      	movs	r3, #0
 800110e:	613b      	str	r3, [r7, #16]
 8001110:	4b49      	ldr	r3, [pc, #292]	@ (8001238 <HAL_UART_MspInit+0x150>)
 8001112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001114:	4a48      	ldr	r2, [pc, #288]	@ (8001238 <HAL_UART_MspInit+0x150>)
 8001116:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800111a:	6413      	str	r3, [r2, #64]	@ 0x40
 800111c:	4b46      	ldr	r3, [pc, #280]	@ (8001238 <HAL_UART_MspInit+0x150>)
 800111e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001120:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001124:	613b      	str	r3, [r7, #16]
 8001126:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001128:	2300      	movs	r3, #0
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	4b42      	ldr	r3, [pc, #264]	@ (8001238 <HAL_UART_MspInit+0x150>)
 800112e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001130:	4a41      	ldr	r2, [pc, #260]	@ (8001238 <HAL_UART_MspInit+0x150>)
 8001132:	f043 0301 	orr.w	r3, r3, #1
 8001136:	6313      	str	r3, [r2, #48]	@ 0x30
 8001138:	4b3f      	ldr	r3, [pc, #252]	@ (8001238 <HAL_UART_MspInit+0x150>)
 800113a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113c:	f003 0301 	and.w	r3, r3, #1
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001144:	230c      	movs	r3, #12
 8001146:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001148:	2302      	movs	r3, #2
 800114a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001150:	2303      	movs	r3, #3
 8001152:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001154:	2307      	movs	r3, #7
 8001156:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	4619      	mov	r1, r3
 800115e:	4837      	ldr	r0, [pc, #220]	@ (800123c <HAL_UART_MspInit+0x154>)
 8001160:	f000 fe94 	bl	8001e8c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001164:	4b36      	ldr	r3, [pc, #216]	@ (8001240 <HAL_UART_MspInit+0x158>)
 8001166:	4a37      	ldr	r2, [pc, #220]	@ (8001244 <HAL_UART_MspInit+0x15c>)
 8001168:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800116a:	4b35      	ldr	r3, [pc, #212]	@ (8001240 <HAL_UART_MspInit+0x158>)
 800116c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001170:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001172:	4b33      	ldr	r3, [pc, #204]	@ (8001240 <HAL_UART_MspInit+0x158>)
 8001174:	2200      	movs	r2, #0
 8001176:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001178:	4b31      	ldr	r3, [pc, #196]	@ (8001240 <HAL_UART_MspInit+0x158>)
 800117a:	2200      	movs	r2, #0
 800117c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800117e:	4b30      	ldr	r3, [pc, #192]	@ (8001240 <HAL_UART_MspInit+0x158>)
 8001180:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001184:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001186:	4b2e      	ldr	r3, [pc, #184]	@ (8001240 <HAL_UART_MspInit+0x158>)
 8001188:	2200      	movs	r2, #0
 800118a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800118c:	4b2c      	ldr	r3, [pc, #176]	@ (8001240 <HAL_UART_MspInit+0x158>)
 800118e:	2200      	movs	r2, #0
 8001190:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001192:	4b2b      	ldr	r3, [pc, #172]	@ (8001240 <HAL_UART_MspInit+0x158>)
 8001194:	2200      	movs	r2, #0
 8001196:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001198:	4b29      	ldr	r3, [pc, #164]	@ (8001240 <HAL_UART_MspInit+0x158>)
 800119a:	2200      	movs	r2, #0
 800119c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800119e:	4b28      	ldr	r3, [pc, #160]	@ (8001240 <HAL_UART_MspInit+0x158>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80011a4:	4826      	ldr	r0, [pc, #152]	@ (8001240 <HAL_UART_MspInit+0x158>)
 80011a6:	f000 fa6f 	bl	8001688 <HAL_DMA_Init>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80011b0:	f7ff ff26 	bl	8001000 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4a22      	ldr	r2, [pc, #136]	@ (8001240 <HAL_UART_MspInit+0x158>)
 80011b8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80011ba:	4a21      	ldr	r2, [pc, #132]	@ (8001240 <HAL_UART_MspInit+0x158>)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80011c0:	4b21      	ldr	r3, [pc, #132]	@ (8001248 <HAL_UART_MspInit+0x160>)
 80011c2:	4a22      	ldr	r2, [pc, #136]	@ (800124c <HAL_UART_MspInit+0x164>)
 80011c4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80011c6:	4b20      	ldr	r3, [pc, #128]	@ (8001248 <HAL_UART_MspInit+0x160>)
 80011c8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80011cc:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001248 <HAL_UART_MspInit+0x160>)
 80011d0:	2240      	movs	r2, #64	@ 0x40
 80011d2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011d4:	4b1c      	ldr	r3, [pc, #112]	@ (8001248 <HAL_UART_MspInit+0x160>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011da:	4b1b      	ldr	r3, [pc, #108]	@ (8001248 <HAL_UART_MspInit+0x160>)
 80011dc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011e0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011e2:	4b19      	ldr	r3, [pc, #100]	@ (8001248 <HAL_UART_MspInit+0x160>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011e8:	4b17      	ldr	r3, [pc, #92]	@ (8001248 <HAL_UART_MspInit+0x160>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80011ee:	4b16      	ldr	r3, [pc, #88]	@ (8001248 <HAL_UART_MspInit+0x160>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80011f4:	4b14      	ldr	r3, [pc, #80]	@ (8001248 <HAL_UART_MspInit+0x160>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011fa:	4b13      	ldr	r3, [pc, #76]	@ (8001248 <HAL_UART_MspInit+0x160>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001200:	4811      	ldr	r0, [pc, #68]	@ (8001248 <HAL_UART_MspInit+0x160>)
 8001202:	f000 fa41 	bl	8001688 <HAL_DMA_Init>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 800120c:	f7ff fef8 	bl	8001000 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	4a0d      	ldr	r2, [pc, #52]	@ (8001248 <HAL_UART_MspInit+0x160>)
 8001214:	639a      	str	r2, [r3, #56]	@ 0x38
 8001216:	4a0c      	ldr	r2, [pc, #48]	@ (8001248 <HAL_UART_MspInit+0x160>)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800121c:	2200      	movs	r2, #0
 800121e:	2100      	movs	r1, #0
 8001220:	2026      	movs	r0, #38	@ 0x26
 8001222:	f000 f9fa 	bl	800161a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001226:	2026      	movs	r0, #38	@ 0x26
 8001228:	f000 fa13 	bl	8001652 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800122c:	bf00      	nop
 800122e:	3728      	adds	r7, #40	@ 0x28
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40004400 	.word	0x40004400
 8001238:	40023800 	.word	0x40023800
 800123c:	40020000 	.word	0x40020000
 8001240:	200001ac 	.word	0x200001ac
 8001244:	40026088 	.word	0x40026088
 8001248:	2000020c 	.word	0x2000020c
 800124c:	400260a0 	.word	0x400260a0

08001250 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001254:	bf00      	nop
 8001256:	e7fd      	b.n	8001254 <NMI_Handler+0x4>

08001258 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800125c:	bf00      	nop
 800125e:	e7fd      	b.n	800125c <HardFault_Handler+0x4>

08001260 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001264:	bf00      	nop
 8001266:	e7fd      	b.n	8001264 <MemManage_Handler+0x4>

08001268 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800126c:	bf00      	nop
 800126e:	e7fd      	b.n	800126c <BusFault_Handler+0x4>

08001270 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001274:	bf00      	nop
 8001276:	e7fd      	b.n	8001274 <UsageFault_Handler+0x4>

08001278 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr

08001286 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001286:	b480      	push	{r7}
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr

080012a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012a6:	f000 f8bd 	bl	8001424 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
	...

080012b0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80012b4:	4802      	ldr	r0, [pc, #8]	@ (80012c0 <DMA1_Stream5_IRQHandler+0x10>)
 80012b6:	f000 fb7f 	bl	80019b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	200001ac 	.word	0x200001ac

080012c4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80012c8:	4802      	ldr	r0, [pc, #8]	@ (80012d4 <DMA1_Stream6_IRQHandler+0x10>)
 80012ca:	f000 fb75 	bl	80019b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	2000020c 	.word	0x2000020c

080012d8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012dc:	4803      	ldr	r0, [pc, #12]	@ (80012ec <TIM1_UP_TIM10_IRQHandler+0x14>)
 80012de:	f001 fca3 	bl	8002c28 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80012e2:	4803      	ldr	r0, [pc, #12]	@ (80012f0 <TIM1_UP_TIM10_IRQHandler+0x18>)
 80012e4:	f001 fca0 	bl	8002c28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	200000d4 	.word	0x200000d4
 80012f0:	2000011c 	.word	0x2000011c

080012f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012f8:	4802      	ldr	r0, [pc, #8]	@ (8001304 <USART2_IRQHandler+0x10>)
 80012fa:	f002 f931 	bl	8003560 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000164 	.word	0x20000164

08001308 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800130c:	4b06      	ldr	r3, [pc, #24]	@ (8001328 <SystemInit+0x20>)
 800130e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001312:	4a05      	ldr	r2, [pc, #20]	@ (8001328 <SystemInit+0x20>)
 8001314:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001318:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	e000ed00 	.word	0xe000ed00

0800132c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800132c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001364 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001330:	f7ff ffea 	bl	8001308 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001334:	480c      	ldr	r0, [pc, #48]	@ (8001368 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001336:	490d      	ldr	r1, [pc, #52]	@ (800136c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001338:	4a0d      	ldr	r2, [pc, #52]	@ (8001370 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800133a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800133c:	e002      	b.n	8001344 <LoopCopyDataInit>

0800133e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800133e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001340:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001342:	3304      	adds	r3, #4

08001344 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001344:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001346:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001348:	d3f9      	bcc.n	800133e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800134a:	4a0a      	ldr	r2, [pc, #40]	@ (8001374 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800134c:	4c0a      	ldr	r4, [pc, #40]	@ (8001378 <LoopFillZerobss+0x22>)
  movs r3, #0
 800134e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001350:	e001      	b.n	8001356 <LoopFillZerobss>

08001352 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001352:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001354:	3204      	adds	r2, #4

08001356 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001356:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001358:	d3fb      	bcc.n	8001352 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800135a:	f003 f9fd 	bl	8004758 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800135e:	f7ff fc71 	bl	8000c44 <main>
  bx  lr    
 8001362:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001364:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001368:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800136c:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001370:	080047e8 	.word	0x080047e8
  ldr r2, =_sbss
 8001374:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001378:	20000270 	.word	0x20000270

0800137c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800137c:	e7fe      	b.n	800137c <ADC_IRQHandler>
	...

08001380 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001384:	4b0e      	ldr	r3, [pc, #56]	@ (80013c0 <HAL_Init+0x40>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a0d      	ldr	r2, [pc, #52]	@ (80013c0 <HAL_Init+0x40>)
 800138a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800138e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001390:	4b0b      	ldr	r3, [pc, #44]	@ (80013c0 <HAL_Init+0x40>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a0a      	ldr	r2, [pc, #40]	@ (80013c0 <HAL_Init+0x40>)
 8001396:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800139a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800139c:	4b08      	ldr	r3, [pc, #32]	@ (80013c0 <HAL_Init+0x40>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a07      	ldr	r2, [pc, #28]	@ (80013c0 <HAL_Init+0x40>)
 80013a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013a8:	2003      	movs	r0, #3
 80013aa:	f000 f92b 	bl	8001604 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ae:	200f      	movs	r0, #15
 80013b0:	f000 f808 	bl	80013c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013b4:	f7ff fe2a 	bl	800100c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40023c00 	.word	0x40023c00

080013c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013cc:	4b12      	ldr	r3, [pc, #72]	@ (8001418 <HAL_InitTick+0x54>)
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	4b12      	ldr	r3, [pc, #72]	@ (800141c <HAL_InitTick+0x58>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	4619      	mov	r1, r3
 80013d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013da:	fbb3 f3f1 	udiv	r3, r3, r1
 80013de:	fbb2 f3f3 	udiv	r3, r2, r3
 80013e2:	4618      	mov	r0, r3
 80013e4:	f000 f943 	bl	800166e <HAL_SYSTICK_Config>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e00e      	b.n	8001410 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2b0f      	cmp	r3, #15
 80013f6:	d80a      	bhi.n	800140e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013f8:	2200      	movs	r2, #0
 80013fa:	6879      	ldr	r1, [r7, #4]
 80013fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001400:	f000 f90b 	bl	800161a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001404:	4a06      	ldr	r2, [pc, #24]	@ (8001420 <HAL_InitTick+0x5c>)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800140a:	2300      	movs	r3, #0
 800140c:	e000      	b.n	8001410 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
}
 8001410:	4618      	mov	r0, r3
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	2000000c 	.word	0x2000000c
 800141c:	20000014 	.word	0x20000014
 8001420:	20000010 	.word	0x20000010

08001424 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001428:	4b06      	ldr	r3, [pc, #24]	@ (8001444 <HAL_IncTick+0x20>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	461a      	mov	r2, r3
 800142e:	4b06      	ldr	r3, [pc, #24]	@ (8001448 <HAL_IncTick+0x24>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4413      	add	r3, r2
 8001434:	4a04      	ldr	r2, [pc, #16]	@ (8001448 <HAL_IncTick+0x24>)
 8001436:	6013      	str	r3, [r2, #0]
}
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	20000014 	.word	0x20000014
 8001448:	2000026c 	.word	0x2000026c

0800144c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  return uwTick;
 8001450:	4b03      	ldr	r3, [pc, #12]	@ (8001460 <HAL_GetTick+0x14>)
 8001452:	681b      	ldr	r3, [r3, #0]
}
 8001454:	4618      	mov	r0, r3
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	2000026c 	.word	0x2000026c

08001464 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f003 0307 	and.w	r3, r3, #7
 8001472:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001474:	4b0c      	ldr	r3, [pc, #48]	@ (80014a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800147a:	68ba      	ldr	r2, [r7, #8]
 800147c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001480:	4013      	ands	r3, r2
 8001482:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800148c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001490:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001494:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001496:	4a04      	ldr	r2, [pc, #16]	@ (80014a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	60d3      	str	r3, [r2, #12]
}
 800149c:	bf00      	nop
 800149e:	3714      	adds	r7, #20
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	e000ed00 	.word	0xe000ed00

080014ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014b0:	4b04      	ldr	r3, [pc, #16]	@ (80014c4 <__NVIC_GetPriorityGrouping+0x18>)
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	0a1b      	lsrs	r3, r3, #8
 80014b6:	f003 0307 	and.w	r3, r3, #7
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	e000ed00 	.word	0xe000ed00

080014c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	db0b      	blt.n	80014f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	f003 021f 	and.w	r2, r3, #31
 80014e0:	4907      	ldr	r1, [pc, #28]	@ (8001500 <__NVIC_EnableIRQ+0x38>)
 80014e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e6:	095b      	lsrs	r3, r3, #5
 80014e8:	2001      	movs	r0, #1
 80014ea:	fa00 f202 	lsl.w	r2, r0, r2
 80014ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	e000e100 	.word	0xe000e100

08001504 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	6039      	str	r1, [r7, #0]
 800150e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001514:	2b00      	cmp	r3, #0
 8001516:	db0a      	blt.n	800152e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	b2da      	uxtb	r2, r3
 800151c:	490c      	ldr	r1, [pc, #48]	@ (8001550 <__NVIC_SetPriority+0x4c>)
 800151e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001522:	0112      	lsls	r2, r2, #4
 8001524:	b2d2      	uxtb	r2, r2
 8001526:	440b      	add	r3, r1
 8001528:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800152c:	e00a      	b.n	8001544 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	b2da      	uxtb	r2, r3
 8001532:	4908      	ldr	r1, [pc, #32]	@ (8001554 <__NVIC_SetPriority+0x50>)
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	f003 030f 	and.w	r3, r3, #15
 800153a:	3b04      	subs	r3, #4
 800153c:	0112      	lsls	r2, r2, #4
 800153e:	b2d2      	uxtb	r2, r2
 8001540:	440b      	add	r3, r1
 8001542:	761a      	strb	r2, [r3, #24]
}
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr
 8001550:	e000e100 	.word	0xe000e100
 8001554:	e000ed00 	.word	0xe000ed00

08001558 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001558:	b480      	push	{r7}
 800155a:	b089      	sub	sp, #36	@ 0x24
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f003 0307 	and.w	r3, r3, #7
 800156a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	f1c3 0307 	rsb	r3, r3, #7
 8001572:	2b04      	cmp	r3, #4
 8001574:	bf28      	it	cs
 8001576:	2304      	movcs	r3, #4
 8001578:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	3304      	adds	r3, #4
 800157e:	2b06      	cmp	r3, #6
 8001580:	d902      	bls.n	8001588 <NVIC_EncodePriority+0x30>
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	3b03      	subs	r3, #3
 8001586:	e000      	b.n	800158a <NVIC_EncodePriority+0x32>
 8001588:	2300      	movs	r3, #0
 800158a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800158c:	f04f 32ff 	mov.w	r2, #4294967295
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	43da      	mvns	r2, r3
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	401a      	ands	r2, r3
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015a0:	f04f 31ff 	mov.w	r1, #4294967295
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	fa01 f303 	lsl.w	r3, r1, r3
 80015aa:	43d9      	mvns	r1, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b0:	4313      	orrs	r3, r2
         );
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3724      	adds	r7, #36	@ 0x24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
	...

080015c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	3b01      	subs	r3, #1
 80015cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015d0:	d301      	bcc.n	80015d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015d2:	2301      	movs	r3, #1
 80015d4:	e00f      	b.n	80015f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001600 <SysTick_Config+0x40>)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	3b01      	subs	r3, #1
 80015dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015de:	210f      	movs	r1, #15
 80015e0:	f04f 30ff 	mov.w	r0, #4294967295
 80015e4:	f7ff ff8e 	bl	8001504 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015e8:	4b05      	ldr	r3, [pc, #20]	@ (8001600 <SysTick_Config+0x40>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ee:	4b04      	ldr	r3, [pc, #16]	@ (8001600 <SysTick_Config+0x40>)
 80015f0:	2207      	movs	r2, #7
 80015f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	e000e010 	.word	0xe000e010

08001604 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f7ff ff29 	bl	8001464 <__NVIC_SetPriorityGrouping>
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800161a:	b580      	push	{r7, lr}
 800161c:	b086      	sub	sp, #24
 800161e:	af00      	add	r7, sp, #0
 8001620:	4603      	mov	r3, r0
 8001622:	60b9      	str	r1, [r7, #8]
 8001624:	607a      	str	r2, [r7, #4]
 8001626:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001628:	2300      	movs	r3, #0
 800162a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800162c:	f7ff ff3e 	bl	80014ac <__NVIC_GetPriorityGrouping>
 8001630:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	68b9      	ldr	r1, [r7, #8]
 8001636:	6978      	ldr	r0, [r7, #20]
 8001638:	f7ff ff8e 	bl	8001558 <NVIC_EncodePriority>
 800163c:	4602      	mov	r2, r0
 800163e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001642:	4611      	mov	r1, r2
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff ff5d 	bl	8001504 <__NVIC_SetPriority>
}
 800164a:	bf00      	nop
 800164c:	3718      	adds	r7, #24
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b082      	sub	sp, #8
 8001656:	af00      	add	r7, sp, #0
 8001658:	4603      	mov	r3, r0
 800165a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800165c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff ff31 	bl	80014c8 <__NVIC_EnableIRQ>
}
 8001666:	bf00      	nop
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	b082      	sub	sp, #8
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f7ff ffa2 	bl	80015c0 <SysTick_Config>
 800167c:	4603      	mov	r3, r0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
	...

08001688 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001694:	f7ff feda 	bl	800144c <HAL_GetTick>
 8001698:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d101      	bne.n	80016a4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e099      	b.n	80017d8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2202      	movs	r2, #2
 80016a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f022 0201 	bic.w	r2, r2, #1
 80016c2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016c4:	e00f      	b.n	80016e6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016c6:	f7ff fec1 	bl	800144c <HAL_GetTick>
 80016ca:	4602      	mov	r2, r0
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	2b05      	cmp	r3, #5
 80016d2:	d908      	bls.n	80016e6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2220      	movs	r2, #32
 80016d8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2203      	movs	r2, #3
 80016de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e078      	b.n	80017d8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0301 	and.w	r3, r3, #1
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d1e8      	bne.n	80016c6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80016fc:	697a      	ldr	r2, [r7, #20]
 80016fe:	4b38      	ldr	r3, [pc, #224]	@ (80017e0 <HAL_DMA_Init+0x158>)
 8001700:	4013      	ands	r3, r2
 8001702:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685a      	ldr	r2, [r3, #4]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001712:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	691b      	ldr	r3, [r3, #16]
 8001718:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800171e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800172a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6a1b      	ldr	r3, [r3, #32]
 8001730:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001732:	697a      	ldr	r2, [r7, #20]
 8001734:	4313      	orrs	r3, r2
 8001736:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800173c:	2b04      	cmp	r3, #4
 800173e:	d107      	bne.n	8001750 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001748:	4313      	orrs	r3, r2
 800174a:	697a      	ldr	r2, [r7, #20]
 800174c:	4313      	orrs	r3, r2
 800174e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	697a      	ldr	r2, [r7, #20]
 8001756:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	695b      	ldr	r3, [r3, #20]
 800175e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	f023 0307 	bic.w	r3, r3, #7
 8001766:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800176c:	697a      	ldr	r2, [r7, #20]
 800176e:	4313      	orrs	r3, r2
 8001770:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001776:	2b04      	cmp	r3, #4
 8001778:	d117      	bne.n	80017aa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800177e:	697a      	ldr	r2, [r7, #20]
 8001780:	4313      	orrs	r3, r2
 8001782:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001788:	2b00      	cmp	r3, #0
 800178a:	d00e      	beq.n	80017aa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f000 fb01 	bl	8001d94 <DMA_CheckFifoParam>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d008      	beq.n	80017aa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2240      	movs	r2, #64	@ 0x40
 800179c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2201      	movs	r2, #1
 80017a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80017a6:	2301      	movs	r3, #1
 80017a8:	e016      	b.n	80017d8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	697a      	ldr	r2, [r7, #20]
 80017b0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f000 fab8 	bl	8001d28 <DMA_CalcBaseAndBitshift>
 80017b8:	4603      	mov	r3, r0
 80017ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017c0:	223f      	movs	r2, #63	@ 0x3f
 80017c2:	409a      	lsls	r2, r3
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2201      	movs	r2, #1
 80017d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80017d6:	2300      	movs	r3, #0
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3718      	adds	r7, #24
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	f010803f 	.word	0xf010803f

080017e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b086      	sub	sp, #24
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
 80017f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80017f2:	2300      	movs	r3, #0
 80017f4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017fa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001802:	2b01      	cmp	r3, #1
 8001804:	d101      	bne.n	800180a <HAL_DMA_Start_IT+0x26>
 8001806:	2302      	movs	r3, #2
 8001808:	e040      	b.n	800188c <HAL_DMA_Start_IT+0xa8>
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	2201      	movs	r2, #1
 800180e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001818:	b2db      	uxtb	r3, r3
 800181a:	2b01      	cmp	r3, #1
 800181c:	d12f      	bne.n	800187e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	2202      	movs	r2, #2
 8001822:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2200      	movs	r2, #0
 800182a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	68b9      	ldr	r1, [r7, #8]
 8001832:	68f8      	ldr	r0, [r7, #12]
 8001834:	f000 fa4a 	bl	8001ccc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800183c:	223f      	movs	r2, #63	@ 0x3f
 800183e:	409a      	lsls	r2, r3
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f042 0216 	orr.w	r2, r2, #22
 8001852:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001858:	2b00      	cmp	r3, #0
 800185a:	d007      	beq.n	800186c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f042 0208 	orr.w	r2, r2, #8
 800186a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f042 0201 	orr.w	r2, r2, #1
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	e005      	b.n	800188a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2200      	movs	r2, #0
 8001882:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001886:	2302      	movs	r3, #2
 8001888:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800188a:	7dfb      	ldrb	r3, [r7, #23]
}
 800188c:	4618      	mov	r0, r3
 800188e:	3718      	adds	r7, #24
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018a0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80018a2:	f7ff fdd3 	bl	800144c <HAL_GetTick>
 80018a6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d008      	beq.n	80018c6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2280      	movs	r2, #128	@ 0x80
 80018b8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e052      	b.n	800196c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f022 0216 	bic.w	r2, r2, #22
 80018d4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	695a      	ldr	r2, [r3, #20]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80018e4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d103      	bne.n	80018f6 <HAL_DMA_Abort+0x62>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d007      	beq.n	8001906 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f022 0208 	bic.w	r2, r2, #8
 8001904:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f022 0201 	bic.w	r2, r2, #1
 8001914:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001916:	e013      	b.n	8001940 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001918:	f7ff fd98 	bl	800144c <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b05      	cmp	r3, #5
 8001924:	d90c      	bls.n	8001940 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2220      	movs	r2, #32
 800192a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2203      	movs	r2, #3
 8001930:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e015      	b.n	800196c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1e4      	bne.n	8001918 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001952:	223f      	movs	r2, #63	@ 0x3f
 8001954:	409a      	lsls	r2, r3
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2201      	movs	r2, #1
 800195e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800196a:	2300      	movs	r3, #0
}
 800196c:	4618      	mov	r0, r3
 800196e:	3710      	adds	r7, #16
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001982:	b2db      	uxtb	r3, r3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d004      	beq.n	8001992 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2280      	movs	r2, #128	@ 0x80
 800198c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e00c      	b.n	80019ac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2205      	movs	r2, #5
 8001996:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f022 0201 	bic.w	r2, r2, #1
 80019a8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80019aa:	2300      	movs	r3, #0
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80019c0:	2300      	movs	r3, #0
 80019c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80019c4:	4b8e      	ldr	r3, [pc, #568]	@ (8001c00 <HAL_DMA_IRQHandler+0x248>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a8e      	ldr	r2, [pc, #568]	@ (8001c04 <HAL_DMA_IRQHandler+0x24c>)
 80019ca:	fba2 2303 	umull	r2, r3, r2, r3
 80019ce:	0a9b      	lsrs	r3, r3, #10
 80019d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019e2:	2208      	movs	r2, #8
 80019e4:	409a      	lsls	r2, r3
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	4013      	ands	r3, r2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d01a      	beq.n	8001a24 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0304 	and.w	r3, r3, #4
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d013      	beq.n	8001a24 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f022 0204 	bic.w	r2, r2, #4
 8001a0a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a10:	2208      	movs	r2, #8
 8001a12:	409a      	lsls	r2, r3
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a1c:	f043 0201 	orr.w	r2, r3, #1
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a28:	2201      	movs	r2, #1
 8001a2a:	409a      	lsls	r2, r3
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d012      	beq.n	8001a5a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	695b      	ldr	r3, [r3, #20]
 8001a3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d00b      	beq.n	8001a5a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a46:	2201      	movs	r2, #1
 8001a48:	409a      	lsls	r2, r3
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a52:	f043 0202 	orr.w	r2, r3, #2
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a5e:	2204      	movs	r2, #4
 8001a60:	409a      	lsls	r2, r3
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	4013      	ands	r3, r2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d012      	beq.n	8001a90 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0302 	and.w	r3, r3, #2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d00b      	beq.n	8001a90 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a7c:	2204      	movs	r2, #4
 8001a7e:	409a      	lsls	r2, r3
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a88:	f043 0204 	orr.w	r2, r3, #4
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a94:	2210      	movs	r2, #16
 8001a96:	409a      	lsls	r2, r3
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d043      	beq.n	8001b28 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0308 	and.w	r3, r3, #8
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d03c      	beq.n	8001b28 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ab2:	2210      	movs	r2, #16
 8001ab4:	409a      	lsls	r2, r3
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d018      	beq.n	8001afa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d108      	bne.n	8001ae8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d024      	beq.n	8001b28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	4798      	blx	r3
 8001ae6:	e01f      	b.n	8001b28 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d01b      	beq.n	8001b28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	4798      	blx	r3
 8001af8:	e016      	b.n	8001b28 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d107      	bne.n	8001b18 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f022 0208 	bic.w	r2, r2, #8
 8001b16:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d003      	beq.n	8001b28 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b2c:	2220      	movs	r2, #32
 8001b2e:	409a      	lsls	r2, r3
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	4013      	ands	r3, r2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	f000 808f 	beq.w	8001c58 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0310 	and.w	r3, r3, #16
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	f000 8087 	beq.w	8001c58 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b4e:	2220      	movs	r2, #32
 8001b50:	409a      	lsls	r2, r3
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	2b05      	cmp	r3, #5
 8001b60:	d136      	bne.n	8001bd0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f022 0216 	bic.w	r2, r2, #22
 8001b70:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	695a      	ldr	r2, [r3, #20]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b80:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d103      	bne.n	8001b92 <HAL_DMA_IRQHandler+0x1da>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d007      	beq.n	8001ba2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f022 0208 	bic.w	r2, r2, #8
 8001ba0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ba6:	223f      	movs	r2, #63	@ 0x3f
 8001ba8:	409a      	lsls	r2, r3
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d07e      	beq.n	8001cc4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	4798      	blx	r3
        }
        return;
 8001bce:	e079      	b.n	8001cc4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d01d      	beq.n	8001c1a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d10d      	bne.n	8001c08 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d031      	beq.n	8001c58 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	4798      	blx	r3
 8001bfc:	e02c      	b.n	8001c58 <HAL_DMA_IRQHandler+0x2a0>
 8001bfe:	bf00      	nop
 8001c00:	2000000c 	.word	0x2000000c
 8001c04:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d023      	beq.n	8001c58 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	4798      	blx	r3
 8001c18:	e01e      	b.n	8001c58 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d10f      	bne.n	8001c48 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f022 0210 	bic.w	r2, r2, #16
 8001c36:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d003      	beq.n	8001c58 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d032      	beq.n	8001cc6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c64:	f003 0301 	and.w	r3, r3, #1
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d022      	beq.n	8001cb2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2205      	movs	r2, #5
 8001c70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f022 0201 	bic.w	r2, r2, #1
 8001c82:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	3301      	adds	r3, #1
 8001c88:	60bb      	str	r3, [r7, #8]
 8001c8a:	697a      	ldr	r2, [r7, #20]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d307      	bcc.n	8001ca0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1f2      	bne.n	8001c84 <HAL_DMA_IRQHandler+0x2cc>
 8001c9e:	e000      	b.n	8001ca2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001ca0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d005      	beq.n	8001cc6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	4798      	blx	r3
 8001cc2:	e000      	b.n	8001cc6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001cc4:	bf00      	nop
    }
  }
}
 8001cc6:	3718      	adds	r7, #24
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	60b9      	str	r1, [r7, #8]
 8001cd6:	607a      	str	r2, [r7, #4]
 8001cd8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001ce8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	683a      	ldr	r2, [r7, #0]
 8001cf0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	2b40      	cmp	r3, #64	@ 0x40
 8001cf8:	d108      	bne.n	8001d0c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	68ba      	ldr	r2, [r7, #8]
 8001d08:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001d0a:	e007      	b.n	8001d1c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	68ba      	ldr	r2, [r7, #8]
 8001d12:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	60da      	str	r2, [r3, #12]
}
 8001d1c:	bf00      	nop
 8001d1e:	3714      	adds	r7, #20
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	3b10      	subs	r3, #16
 8001d38:	4a14      	ldr	r2, [pc, #80]	@ (8001d8c <DMA_CalcBaseAndBitshift+0x64>)
 8001d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d3e:	091b      	lsrs	r3, r3, #4
 8001d40:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d42:	4a13      	ldr	r2, [pc, #76]	@ (8001d90 <DMA_CalcBaseAndBitshift+0x68>)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	4413      	add	r3, r2
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2b03      	cmp	r3, #3
 8001d54:	d909      	bls.n	8001d6a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001d5e:	f023 0303 	bic.w	r3, r3, #3
 8001d62:	1d1a      	adds	r2, r3, #4
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	659a      	str	r2, [r3, #88]	@ 0x58
 8001d68:	e007      	b.n	8001d7a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001d72:	f023 0303 	bic.w	r3, r3, #3
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3714      	adds	r7, #20
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	aaaaaaab 	.word	0xaaaaaaab
 8001d90:	080047d0 	.word	0x080047d0

08001d94 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001da4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d11f      	bne.n	8001dee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	2b03      	cmp	r3, #3
 8001db2:	d856      	bhi.n	8001e62 <DMA_CheckFifoParam+0xce>
 8001db4:	a201      	add	r2, pc, #4	@ (adr r2, 8001dbc <DMA_CheckFifoParam+0x28>)
 8001db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dba:	bf00      	nop
 8001dbc:	08001dcd 	.word	0x08001dcd
 8001dc0:	08001ddf 	.word	0x08001ddf
 8001dc4:	08001dcd 	.word	0x08001dcd
 8001dc8:	08001e63 	.word	0x08001e63
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dd0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d046      	beq.n	8001e66 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ddc:	e043      	b.n	8001e66 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001de2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001de6:	d140      	bne.n	8001e6a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001dec:	e03d      	b.n	8001e6a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001df6:	d121      	bne.n	8001e3c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	2b03      	cmp	r3, #3
 8001dfc:	d837      	bhi.n	8001e6e <DMA_CheckFifoParam+0xda>
 8001dfe:	a201      	add	r2, pc, #4	@ (adr r2, 8001e04 <DMA_CheckFifoParam+0x70>)
 8001e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e04:	08001e15 	.word	0x08001e15
 8001e08:	08001e1b 	.word	0x08001e1b
 8001e0c:	08001e15 	.word	0x08001e15
 8001e10:	08001e2d 	.word	0x08001e2d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	73fb      	strb	r3, [r7, #15]
      break;
 8001e18:	e030      	b.n	8001e7c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e1e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d025      	beq.n	8001e72 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e2a:	e022      	b.n	8001e72 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e30:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001e34:	d11f      	bne.n	8001e76 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001e3a:	e01c      	b.n	8001e76 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d903      	bls.n	8001e4a <DMA_CheckFifoParam+0xb6>
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	2b03      	cmp	r3, #3
 8001e46:	d003      	beq.n	8001e50 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001e48:	e018      	b.n	8001e7c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	73fb      	strb	r3, [r7, #15]
      break;
 8001e4e:	e015      	b.n	8001e7c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e54:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d00e      	beq.n	8001e7a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	73fb      	strb	r3, [r7, #15]
      break;
 8001e60:	e00b      	b.n	8001e7a <DMA_CheckFifoParam+0xe6>
      break;
 8001e62:	bf00      	nop
 8001e64:	e00a      	b.n	8001e7c <DMA_CheckFifoParam+0xe8>
      break;
 8001e66:	bf00      	nop
 8001e68:	e008      	b.n	8001e7c <DMA_CheckFifoParam+0xe8>
      break;
 8001e6a:	bf00      	nop
 8001e6c:	e006      	b.n	8001e7c <DMA_CheckFifoParam+0xe8>
      break;
 8001e6e:	bf00      	nop
 8001e70:	e004      	b.n	8001e7c <DMA_CheckFifoParam+0xe8>
      break;
 8001e72:	bf00      	nop
 8001e74:	e002      	b.n	8001e7c <DMA_CheckFifoParam+0xe8>
      break;   
 8001e76:	bf00      	nop
 8001e78:	e000      	b.n	8001e7c <DMA_CheckFifoParam+0xe8>
      break;
 8001e7a:	bf00      	nop
    }
  } 
  
  return status; 
 8001e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3714      	adds	r7, #20
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop

08001e8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b089      	sub	sp, #36	@ 0x24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e96:	2300      	movs	r3, #0
 8001e98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	61fb      	str	r3, [r7, #28]
 8001ea6:	e16b      	b.n	8002180 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	697a      	ldr	r2, [r7, #20]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	f040 815a 	bne.w	800217a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f003 0303 	and.w	r3, r3, #3
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d005      	beq.n	8001ede <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d130      	bne.n	8001f40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	2203      	movs	r2, #3
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	43db      	mvns	r3, r3
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	68da      	ldr	r2, [r3, #12]
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f14:	2201      	movs	r2, #1
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	4013      	ands	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	091b      	lsrs	r3, r3, #4
 8001f2a:	f003 0201 	and.w	r2, r3, #1
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f003 0303 	and.w	r3, r3, #3
 8001f48:	2b03      	cmp	r3, #3
 8001f4a:	d017      	beq.n	8001f7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	2203      	movs	r2, #3
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	4013      	ands	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	689a      	ldr	r2, [r3, #8]
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f003 0303 	and.w	r3, r3, #3
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d123      	bne.n	8001fd0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	08da      	lsrs	r2, r3, #3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	3208      	adds	r2, #8
 8001f90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	f003 0307 	and.w	r3, r3, #7
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	220f      	movs	r2, #15
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	691a      	ldr	r2, [r3, #16]
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	f003 0307 	and.w	r3, r3, #7
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	08da      	lsrs	r2, r3, #3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	3208      	adds	r2, #8
 8001fca:	69b9      	ldr	r1, [r7, #24]
 8001fcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	2203      	movs	r2, #3
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f003 0203 	and.w	r2, r3, #3
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800200c:	2b00      	cmp	r3, #0
 800200e:	f000 80b4 	beq.w	800217a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	60fb      	str	r3, [r7, #12]
 8002016:	4b60      	ldr	r3, [pc, #384]	@ (8002198 <HAL_GPIO_Init+0x30c>)
 8002018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800201a:	4a5f      	ldr	r2, [pc, #380]	@ (8002198 <HAL_GPIO_Init+0x30c>)
 800201c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002020:	6453      	str	r3, [r2, #68]	@ 0x44
 8002022:	4b5d      	ldr	r3, [pc, #372]	@ (8002198 <HAL_GPIO_Init+0x30c>)
 8002024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002026:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800202e:	4a5b      	ldr	r2, [pc, #364]	@ (800219c <HAL_GPIO_Init+0x310>)
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	089b      	lsrs	r3, r3, #2
 8002034:	3302      	adds	r3, #2
 8002036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800203a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	f003 0303 	and.w	r3, r3, #3
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	220f      	movs	r2, #15
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	43db      	mvns	r3, r3
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	4013      	ands	r3, r2
 8002050:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a52      	ldr	r2, [pc, #328]	@ (80021a0 <HAL_GPIO_Init+0x314>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d02b      	beq.n	80020b2 <HAL_GPIO_Init+0x226>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a51      	ldr	r2, [pc, #324]	@ (80021a4 <HAL_GPIO_Init+0x318>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d025      	beq.n	80020ae <HAL_GPIO_Init+0x222>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a50      	ldr	r2, [pc, #320]	@ (80021a8 <HAL_GPIO_Init+0x31c>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d01f      	beq.n	80020aa <HAL_GPIO_Init+0x21e>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a4f      	ldr	r2, [pc, #316]	@ (80021ac <HAL_GPIO_Init+0x320>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d019      	beq.n	80020a6 <HAL_GPIO_Init+0x21a>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a4e      	ldr	r2, [pc, #312]	@ (80021b0 <HAL_GPIO_Init+0x324>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d013      	beq.n	80020a2 <HAL_GPIO_Init+0x216>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a4d      	ldr	r2, [pc, #308]	@ (80021b4 <HAL_GPIO_Init+0x328>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d00d      	beq.n	800209e <HAL_GPIO_Init+0x212>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a4c      	ldr	r2, [pc, #304]	@ (80021b8 <HAL_GPIO_Init+0x32c>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d007      	beq.n	800209a <HAL_GPIO_Init+0x20e>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a4b      	ldr	r2, [pc, #300]	@ (80021bc <HAL_GPIO_Init+0x330>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d101      	bne.n	8002096 <HAL_GPIO_Init+0x20a>
 8002092:	2307      	movs	r3, #7
 8002094:	e00e      	b.n	80020b4 <HAL_GPIO_Init+0x228>
 8002096:	2308      	movs	r3, #8
 8002098:	e00c      	b.n	80020b4 <HAL_GPIO_Init+0x228>
 800209a:	2306      	movs	r3, #6
 800209c:	e00a      	b.n	80020b4 <HAL_GPIO_Init+0x228>
 800209e:	2305      	movs	r3, #5
 80020a0:	e008      	b.n	80020b4 <HAL_GPIO_Init+0x228>
 80020a2:	2304      	movs	r3, #4
 80020a4:	e006      	b.n	80020b4 <HAL_GPIO_Init+0x228>
 80020a6:	2303      	movs	r3, #3
 80020a8:	e004      	b.n	80020b4 <HAL_GPIO_Init+0x228>
 80020aa:	2302      	movs	r3, #2
 80020ac:	e002      	b.n	80020b4 <HAL_GPIO_Init+0x228>
 80020ae:	2301      	movs	r3, #1
 80020b0:	e000      	b.n	80020b4 <HAL_GPIO_Init+0x228>
 80020b2:	2300      	movs	r3, #0
 80020b4:	69fa      	ldr	r2, [r7, #28]
 80020b6:	f002 0203 	and.w	r2, r2, #3
 80020ba:	0092      	lsls	r2, r2, #2
 80020bc:	4093      	lsls	r3, r2
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020c4:	4935      	ldr	r1, [pc, #212]	@ (800219c <HAL_GPIO_Init+0x310>)
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	089b      	lsrs	r3, r3, #2
 80020ca:	3302      	adds	r3, #2
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020d2:	4b3b      	ldr	r3, [pc, #236]	@ (80021c0 <HAL_GPIO_Init+0x334>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	43db      	mvns	r3, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4013      	ands	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d003      	beq.n	80020f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020f6:	4a32      	ldr	r2, [pc, #200]	@ (80021c0 <HAL_GPIO_Init+0x334>)
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020fc:	4b30      	ldr	r3, [pc, #192]	@ (80021c0 <HAL_GPIO_Init+0x334>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	43db      	mvns	r3, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4013      	ands	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d003      	beq.n	8002120 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	4313      	orrs	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002120:	4a27      	ldr	r2, [pc, #156]	@ (80021c0 <HAL_GPIO_Init+0x334>)
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002126:	4b26      	ldr	r3, [pc, #152]	@ (80021c0 <HAL_GPIO_Init+0x334>)
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	43db      	mvns	r3, r3
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	4013      	ands	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d003      	beq.n	800214a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	4313      	orrs	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800214a:	4a1d      	ldr	r2, [pc, #116]	@ (80021c0 <HAL_GPIO_Init+0x334>)
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002150:	4b1b      	ldr	r3, [pc, #108]	@ (80021c0 <HAL_GPIO_Init+0x334>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	43db      	mvns	r3, r3
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	4013      	ands	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d003      	beq.n	8002174 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	4313      	orrs	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002174:	4a12      	ldr	r2, [pc, #72]	@ (80021c0 <HAL_GPIO_Init+0x334>)
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	3301      	adds	r3, #1
 800217e:	61fb      	str	r3, [r7, #28]
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	2b0f      	cmp	r3, #15
 8002184:	f67f ae90 	bls.w	8001ea8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002188:	bf00      	nop
 800218a:	bf00      	nop
 800218c:	3724      	adds	r7, #36	@ 0x24
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	40023800 	.word	0x40023800
 800219c:	40013800 	.word	0x40013800
 80021a0:	40020000 	.word	0x40020000
 80021a4:	40020400 	.word	0x40020400
 80021a8:	40020800 	.word	0x40020800
 80021ac:	40020c00 	.word	0x40020c00
 80021b0:	40021000 	.word	0x40021000
 80021b4:	40021400 	.word	0x40021400
 80021b8:	40021800 	.word	0x40021800
 80021bc:	40021c00 	.word	0x40021c00
 80021c0:	40013c00 	.word	0x40013c00

080021c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	460b      	mov	r3, r1
 80021ce:	807b      	strh	r3, [r7, #2]
 80021d0:	4613      	mov	r3, r2
 80021d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021d4:	787b      	ldrb	r3, [r7, #1]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d003      	beq.n	80021e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021da:	887a      	ldrh	r2, [r7, #2]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021e0:	e003      	b.n	80021ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021e2:	887b      	ldrh	r3, [r7, #2]
 80021e4:	041a      	lsls	r2, r3, #16
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	619a      	str	r2, [r3, #24]
}
 80021ea:	bf00      	nop
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
	...

080021f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d101      	bne.n	800220a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e267      	b.n	80026da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b00      	cmp	r3, #0
 8002214:	d075      	beq.n	8002302 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002216:	4b88      	ldr	r3, [pc, #544]	@ (8002438 <HAL_RCC_OscConfig+0x240>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f003 030c 	and.w	r3, r3, #12
 800221e:	2b04      	cmp	r3, #4
 8002220:	d00c      	beq.n	800223c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002222:	4b85      	ldr	r3, [pc, #532]	@ (8002438 <HAL_RCC_OscConfig+0x240>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800222a:	2b08      	cmp	r3, #8
 800222c:	d112      	bne.n	8002254 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800222e:	4b82      	ldr	r3, [pc, #520]	@ (8002438 <HAL_RCC_OscConfig+0x240>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002236:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800223a:	d10b      	bne.n	8002254 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800223c:	4b7e      	ldr	r3, [pc, #504]	@ (8002438 <HAL_RCC_OscConfig+0x240>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d05b      	beq.n	8002300 <HAL_RCC_OscConfig+0x108>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d157      	bne.n	8002300 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e242      	b.n	80026da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800225c:	d106      	bne.n	800226c <HAL_RCC_OscConfig+0x74>
 800225e:	4b76      	ldr	r3, [pc, #472]	@ (8002438 <HAL_RCC_OscConfig+0x240>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a75      	ldr	r2, [pc, #468]	@ (8002438 <HAL_RCC_OscConfig+0x240>)
 8002264:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002268:	6013      	str	r3, [r2, #0]
 800226a:	e01d      	b.n	80022a8 <HAL_RCC_OscConfig+0xb0>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002274:	d10c      	bne.n	8002290 <HAL_RCC_OscConfig+0x98>
 8002276:	4b70      	ldr	r3, [pc, #448]	@ (8002438 <HAL_RCC_OscConfig+0x240>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a6f      	ldr	r2, [pc, #444]	@ (8002438 <HAL_RCC_OscConfig+0x240>)
 800227c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002280:	6013      	str	r3, [r2, #0]
 8002282:	4b6d      	ldr	r3, [pc, #436]	@ (8002438 <HAL_RCC_OscConfig+0x240>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a6c      	ldr	r2, [pc, #432]	@ (8002438 <HAL_RCC_OscConfig+0x240>)
 8002288:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800228c:	6013      	str	r3, [r2, #0]
 800228e:	e00b      	b.n	80022a8 <HAL_RCC_OscConfig+0xb0>
 8002290:	4b69      	ldr	r3, [pc, #420]	@ (8002438 <HAL_RCC_OscConfig+0x240>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a68      	ldr	r2, [pc, #416]	@ (8002438 <HAL_RCC_OscConfig+0x240>)
 8002296:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800229a:	6013      	str	r3, [r2, #0]
 800229c:	4b66      	ldr	r3, [pc, #408]	@ (8002438 <HAL_RCC_OscConfig+0x240>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a65      	ldr	r2, [pc, #404]	@ (8002438 <HAL_RCC_OscConfig+0x240>)
 80022a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d013      	beq.n	80022d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b0:	f7ff f8cc 	bl	800144c <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022b6:	e008      	b.n	80022ca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022b8:	f7ff f8c8 	bl	800144c <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b64      	cmp	r3, #100	@ 0x64
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e207      	b.n	80026da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ca:	4b5b      	ldr	r3, [pc, #364]	@ (8002438 <HAL_RCC_OscConfig+0x240>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d0f0      	beq.n	80022b8 <HAL_RCC_OscConfig+0xc0>
 80022d6:	e014      	b.n	8002302 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d8:	f7ff f8b8 	bl	800144c <HAL_GetTick>
 80022dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022de:	e008      	b.n	80022f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022e0:	f7ff f8b4 	bl	800144c <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b64      	cmp	r3, #100	@ 0x64
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e1f3      	b.n	80026da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022f2:	4b51      	ldr	r3, [pc, #324]	@ (8002438 <HAL_RCC_OscConfig+0x240>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1f0      	bne.n	80022e0 <HAL_RCC_OscConfig+0xe8>
 80022fe:	e000      	b.n	8002302 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002300:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d063      	beq.n	80023d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800230e:	4b4a      	ldr	r3, [pc, #296]	@ (8002438 <HAL_RCC_OscConfig+0x240>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f003 030c 	and.w	r3, r3, #12
 8002316:	2b00      	cmp	r3, #0
 8002318:	d00b      	beq.n	8002332 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800231a:	4b47      	ldr	r3, [pc, #284]	@ (8002438 <HAL_RCC_OscConfig+0x240>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002322:	2b08      	cmp	r3, #8
 8002324:	d11c      	bne.n	8002360 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002326:	4b44      	ldr	r3, [pc, #272]	@ (8002438 <HAL_RCC_OscConfig+0x240>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d116      	bne.n	8002360 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002332:	4b41      	ldr	r3, [pc, #260]	@ (8002438 <HAL_RCC_OscConfig+0x240>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d005      	beq.n	800234a <HAL_RCC_OscConfig+0x152>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d001      	beq.n	800234a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e1c7      	b.n	80026da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800234a:	4b3b      	ldr	r3, [pc, #236]	@ (8002438 <HAL_RCC_OscConfig+0x240>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	4937      	ldr	r1, [pc, #220]	@ (8002438 <HAL_RCC_OscConfig+0x240>)
 800235a:	4313      	orrs	r3, r2
 800235c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800235e:	e03a      	b.n	80023d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d020      	beq.n	80023aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002368:	4b34      	ldr	r3, [pc, #208]	@ (800243c <HAL_RCC_OscConfig+0x244>)
 800236a:	2201      	movs	r2, #1
 800236c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800236e:	f7ff f86d 	bl	800144c <HAL_GetTick>
 8002372:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002374:	e008      	b.n	8002388 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002376:	f7ff f869 	bl	800144c <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	2b02      	cmp	r3, #2
 8002382:	d901      	bls.n	8002388 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e1a8      	b.n	80026da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002388:	4b2b      	ldr	r3, [pc, #172]	@ (8002438 <HAL_RCC_OscConfig+0x240>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d0f0      	beq.n	8002376 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002394:	4b28      	ldr	r3, [pc, #160]	@ (8002438 <HAL_RCC_OscConfig+0x240>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	691b      	ldr	r3, [r3, #16]
 80023a0:	00db      	lsls	r3, r3, #3
 80023a2:	4925      	ldr	r1, [pc, #148]	@ (8002438 <HAL_RCC_OscConfig+0x240>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	600b      	str	r3, [r1, #0]
 80023a8:	e015      	b.n	80023d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023aa:	4b24      	ldr	r3, [pc, #144]	@ (800243c <HAL_RCC_OscConfig+0x244>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b0:	f7ff f84c 	bl	800144c <HAL_GetTick>
 80023b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023b6:	e008      	b.n	80023ca <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023b8:	f7ff f848 	bl	800144c <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e187      	b.n	80026da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ca:	4b1b      	ldr	r3, [pc, #108]	@ (8002438 <HAL_RCC_OscConfig+0x240>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d1f0      	bne.n	80023b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0308 	and.w	r3, r3, #8
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d036      	beq.n	8002450 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	695b      	ldr	r3, [r3, #20]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d016      	beq.n	8002418 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023ea:	4b15      	ldr	r3, [pc, #84]	@ (8002440 <HAL_RCC_OscConfig+0x248>)
 80023ec:	2201      	movs	r2, #1
 80023ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023f0:	f7ff f82c 	bl	800144c <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023f6:	e008      	b.n	800240a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023f8:	f7ff f828 	bl	800144c <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b02      	cmp	r3, #2
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e167      	b.n	80026da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800240a:	4b0b      	ldr	r3, [pc, #44]	@ (8002438 <HAL_RCC_OscConfig+0x240>)
 800240c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d0f0      	beq.n	80023f8 <HAL_RCC_OscConfig+0x200>
 8002416:	e01b      	b.n	8002450 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002418:	4b09      	ldr	r3, [pc, #36]	@ (8002440 <HAL_RCC_OscConfig+0x248>)
 800241a:	2200      	movs	r2, #0
 800241c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800241e:	f7ff f815 	bl	800144c <HAL_GetTick>
 8002422:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002424:	e00e      	b.n	8002444 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002426:	f7ff f811 	bl	800144c <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	2b02      	cmp	r3, #2
 8002432:	d907      	bls.n	8002444 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e150      	b.n	80026da <HAL_RCC_OscConfig+0x4e2>
 8002438:	40023800 	.word	0x40023800
 800243c:	42470000 	.word	0x42470000
 8002440:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002444:	4b88      	ldr	r3, [pc, #544]	@ (8002668 <HAL_RCC_OscConfig+0x470>)
 8002446:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d1ea      	bne.n	8002426 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0304 	and.w	r3, r3, #4
 8002458:	2b00      	cmp	r3, #0
 800245a:	f000 8097 	beq.w	800258c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800245e:	2300      	movs	r3, #0
 8002460:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002462:	4b81      	ldr	r3, [pc, #516]	@ (8002668 <HAL_RCC_OscConfig+0x470>)
 8002464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002466:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d10f      	bne.n	800248e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800246e:	2300      	movs	r3, #0
 8002470:	60bb      	str	r3, [r7, #8]
 8002472:	4b7d      	ldr	r3, [pc, #500]	@ (8002668 <HAL_RCC_OscConfig+0x470>)
 8002474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002476:	4a7c      	ldr	r2, [pc, #496]	@ (8002668 <HAL_RCC_OscConfig+0x470>)
 8002478:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800247c:	6413      	str	r3, [r2, #64]	@ 0x40
 800247e:	4b7a      	ldr	r3, [pc, #488]	@ (8002668 <HAL_RCC_OscConfig+0x470>)
 8002480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002482:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002486:	60bb      	str	r3, [r7, #8]
 8002488:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800248a:	2301      	movs	r3, #1
 800248c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800248e:	4b77      	ldr	r3, [pc, #476]	@ (800266c <HAL_RCC_OscConfig+0x474>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002496:	2b00      	cmp	r3, #0
 8002498:	d118      	bne.n	80024cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800249a:	4b74      	ldr	r3, [pc, #464]	@ (800266c <HAL_RCC_OscConfig+0x474>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a73      	ldr	r2, [pc, #460]	@ (800266c <HAL_RCC_OscConfig+0x474>)
 80024a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024a6:	f7fe ffd1 	bl	800144c <HAL_GetTick>
 80024aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ac:	e008      	b.n	80024c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024ae:	f7fe ffcd 	bl	800144c <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d901      	bls.n	80024c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e10c      	b.n	80026da <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c0:	4b6a      	ldr	r3, [pc, #424]	@ (800266c <HAL_RCC_OscConfig+0x474>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d0f0      	beq.n	80024ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d106      	bne.n	80024e2 <HAL_RCC_OscConfig+0x2ea>
 80024d4:	4b64      	ldr	r3, [pc, #400]	@ (8002668 <HAL_RCC_OscConfig+0x470>)
 80024d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024d8:	4a63      	ldr	r2, [pc, #396]	@ (8002668 <HAL_RCC_OscConfig+0x470>)
 80024da:	f043 0301 	orr.w	r3, r3, #1
 80024de:	6713      	str	r3, [r2, #112]	@ 0x70
 80024e0:	e01c      	b.n	800251c <HAL_RCC_OscConfig+0x324>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	2b05      	cmp	r3, #5
 80024e8:	d10c      	bne.n	8002504 <HAL_RCC_OscConfig+0x30c>
 80024ea:	4b5f      	ldr	r3, [pc, #380]	@ (8002668 <HAL_RCC_OscConfig+0x470>)
 80024ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024ee:	4a5e      	ldr	r2, [pc, #376]	@ (8002668 <HAL_RCC_OscConfig+0x470>)
 80024f0:	f043 0304 	orr.w	r3, r3, #4
 80024f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80024f6:	4b5c      	ldr	r3, [pc, #368]	@ (8002668 <HAL_RCC_OscConfig+0x470>)
 80024f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024fa:	4a5b      	ldr	r2, [pc, #364]	@ (8002668 <HAL_RCC_OscConfig+0x470>)
 80024fc:	f043 0301 	orr.w	r3, r3, #1
 8002500:	6713      	str	r3, [r2, #112]	@ 0x70
 8002502:	e00b      	b.n	800251c <HAL_RCC_OscConfig+0x324>
 8002504:	4b58      	ldr	r3, [pc, #352]	@ (8002668 <HAL_RCC_OscConfig+0x470>)
 8002506:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002508:	4a57      	ldr	r2, [pc, #348]	@ (8002668 <HAL_RCC_OscConfig+0x470>)
 800250a:	f023 0301 	bic.w	r3, r3, #1
 800250e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002510:	4b55      	ldr	r3, [pc, #340]	@ (8002668 <HAL_RCC_OscConfig+0x470>)
 8002512:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002514:	4a54      	ldr	r2, [pc, #336]	@ (8002668 <HAL_RCC_OscConfig+0x470>)
 8002516:	f023 0304 	bic.w	r3, r3, #4
 800251a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d015      	beq.n	8002550 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002524:	f7fe ff92 	bl	800144c <HAL_GetTick>
 8002528:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800252a:	e00a      	b.n	8002542 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800252c:	f7fe ff8e 	bl	800144c <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	f241 3288 	movw	r2, #5000	@ 0x1388
 800253a:	4293      	cmp	r3, r2
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e0cb      	b.n	80026da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002542:	4b49      	ldr	r3, [pc, #292]	@ (8002668 <HAL_RCC_OscConfig+0x470>)
 8002544:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d0ee      	beq.n	800252c <HAL_RCC_OscConfig+0x334>
 800254e:	e014      	b.n	800257a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002550:	f7fe ff7c 	bl	800144c <HAL_GetTick>
 8002554:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002556:	e00a      	b.n	800256e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002558:	f7fe ff78 	bl	800144c <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002566:	4293      	cmp	r3, r2
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e0b5      	b.n	80026da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800256e:	4b3e      	ldr	r3, [pc, #248]	@ (8002668 <HAL_RCC_OscConfig+0x470>)
 8002570:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d1ee      	bne.n	8002558 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800257a:	7dfb      	ldrb	r3, [r7, #23]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d105      	bne.n	800258c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002580:	4b39      	ldr	r3, [pc, #228]	@ (8002668 <HAL_RCC_OscConfig+0x470>)
 8002582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002584:	4a38      	ldr	r2, [pc, #224]	@ (8002668 <HAL_RCC_OscConfig+0x470>)
 8002586:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800258a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	2b00      	cmp	r3, #0
 8002592:	f000 80a1 	beq.w	80026d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002596:	4b34      	ldr	r3, [pc, #208]	@ (8002668 <HAL_RCC_OscConfig+0x470>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f003 030c 	and.w	r3, r3, #12
 800259e:	2b08      	cmp	r3, #8
 80025a0:	d05c      	beq.n	800265c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d141      	bne.n	800262e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025aa:	4b31      	ldr	r3, [pc, #196]	@ (8002670 <HAL_RCC_OscConfig+0x478>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b0:	f7fe ff4c 	bl	800144c <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025b8:	f7fe ff48 	bl	800144c <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e087      	b.n	80026da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ca:	4b27      	ldr	r3, [pc, #156]	@ (8002668 <HAL_RCC_OscConfig+0x470>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1f0      	bne.n	80025b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	69da      	ldr	r2, [r3, #28]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a1b      	ldr	r3, [r3, #32]
 80025de:	431a      	orrs	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e4:	019b      	lsls	r3, r3, #6
 80025e6:	431a      	orrs	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ec:	085b      	lsrs	r3, r3, #1
 80025ee:	3b01      	subs	r3, #1
 80025f0:	041b      	lsls	r3, r3, #16
 80025f2:	431a      	orrs	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025f8:	061b      	lsls	r3, r3, #24
 80025fa:	491b      	ldr	r1, [pc, #108]	@ (8002668 <HAL_RCC_OscConfig+0x470>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002600:	4b1b      	ldr	r3, [pc, #108]	@ (8002670 <HAL_RCC_OscConfig+0x478>)
 8002602:	2201      	movs	r2, #1
 8002604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002606:	f7fe ff21 	bl	800144c <HAL_GetTick>
 800260a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800260c:	e008      	b.n	8002620 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800260e:	f7fe ff1d 	bl	800144c <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e05c      	b.n	80026da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002620:	4b11      	ldr	r3, [pc, #68]	@ (8002668 <HAL_RCC_OscConfig+0x470>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d0f0      	beq.n	800260e <HAL_RCC_OscConfig+0x416>
 800262c:	e054      	b.n	80026d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800262e:	4b10      	ldr	r3, [pc, #64]	@ (8002670 <HAL_RCC_OscConfig+0x478>)
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002634:	f7fe ff0a 	bl	800144c <HAL_GetTick>
 8002638:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800263a:	e008      	b.n	800264e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800263c:	f7fe ff06 	bl	800144c <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e045      	b.n	80026da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800264e:	4b06      	ldr	r3, [pc, #24]	@ (8002668 <HAL_RCC_OscConfig+0x470>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1f0      	bne.n	800263c <HAL_RCC_OscConfig+0x444>
 800265a:	e03d      	b.n	80026d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d107      	bne.n	8002674 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e038      	b.n	80026da <HAL_RCC_OscConfig+0x4e2>
 8002668:	40023800 	.word	0x40023800
 800266c:	40007000 	.word	0x40007000
 8002670:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002674:	4b1b      	ldr	r3, [pc, #108]	@ (80026e4 <HAL_RCC_OscConfig+0x4ec>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	699b      	ldr	r3, [r3, #24]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d028      	beq.n	80026d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800268c:	429a      	cmp	r2, r3
 800268e:	d121      	bne.n	80026d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800269a:	429a      	cmp	r2, r3
 800269c:	d11a      	bne.n	80026d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80026a4:	4013      	ands	r3, r2
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80026aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d111      	bne.n	80026d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ba:	085b      	lsrs	r3, r3, #1
 80026bc:	3b01      	subs	r3, #1
 80026be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d107      	bne.n	80026d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d001      	beq.n	80026d8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e000      	b.n	80026da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3718      	adds	r7, #24
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	40023800 	.word	0x40023800

080026e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d101      	bne.n	80026fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e0cc      	b.n	8002896 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026fc:	4b68      	ldr	r3, [pc, #416]	@ (80028a0 <HAL_RCC_ClockConfig+0x1b8>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0307 	and.w	r3, r3, #7
 8002704:	683a      	ldr	r2, [r7, #0]
 8002706:	429a      	cmp	r2, r3
 8002708:	d90c      	bls.n	8002724 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800270a:	4b65      	ldr	r3, [pc, #404]	@ (80028a0 <HAL_RCC_ClockConfig+0x1b8>)
 800270c:	683a      	ldr	r2, [r7, #0]
 800270e:	b2d2      	uxtb	r2, r2
 8002710:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002712:	4b63      	ldr	r3, [pc, #396]	@ (80028a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0307 	and.w	r3, r3, #7
 800271a:	683a      	ldr	r2, [r7, #0]
 800271c:	429a      	cmp	r2, r3
 800271e:	d001      	beq.n	8002724 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e0b8      	b.n	8002896 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0302 	and.w	r3, r3, #2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d020      	beq.n	8002772 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0304 	and.w	r3, r3, #4
 8002738:	2b00      	cmp	r3, #0
 800273a:	d005      	beq.n	8002748 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800273c:	4b59      	ldr	r3, [pc, #356]	@ (80028a4 <HAL_RCC_ClockConfig+0x1bc>)
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	4a58      	ldr	r2, [pc, #352]	@ (80028a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002742:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002746:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0308 	and.w	r3, r3, #8
 8002750:	2b00      	cmp	r3, #0
 8002752:	d005      	beq.n	8002760 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002754:	4b53      	ldr	r3, [pc, #332]	@ (80028a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	4a52      	ldr	r2, [pc, #328]	@ (80028a4 <HAL_RCC_ClockConfig+0x1bc>)
 800275a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800275e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002760:	4b50      	ldr	r3, [pc, #320]	@ (80028a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	494d      	ldr	r1, [pc, #308]	@ (80028a4 <HAL_RCC_ClockConfig+0x1bc>)
 800276e:	4313      	orrs	r3, r2
 8002770:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	2b00      	cmp	r3, #0
 800277c:	d044      	beq.n	8002808 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	2b01      	cmp	r3, #1
 8002784:	d107      	bne.n	8002796 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002786:	4b47      	ldr	r3, [pc, #284]	@ (80028a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d119      	bne.n	80027c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e07f      	b.n	8002896 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	2b02      	cmp	r3, #2
 800279c:	d003      	beq.n	80027a6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027a2:	2b03      	cmp	r3, #3
 80027a4:	d107      	bne.n	80027b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027a6:	4b3f      	ldr	r3, [pc, #252]	@ (80028a4 <HAL_RCC_ClockConfig+0x1bc>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d109      	bne.n	80027c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e06f      	b.n	8002896 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027b6:	4b3b      	ldr	r3, [pc, #236]	@ (80028a4 <HAL_RCC_ClockConfig+0x1bc>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d101      	bne.n	80027c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e067      	b.n	8002896 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027c6:	4b37      	ldr	r3, [pc, #220]	@ (80028a4 <HAL_RCC_ClockConfig+0x1bc>)
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f023 0203 	bic.w	r2, r3, #3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	4934      	ldr	r1, [pc, #208]	@ (80028a4 <HAL_RCC_ClockConfig+0x1bc>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027d8:	f7fe fe38 	bl	800144c <HAL_GetTick>
 80027dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027de:	e00a      	b.n	80027f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027e0:	f7fe fe34 	bl	800144c <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e04f      	b.n	8002896 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027f6:	4b2b      	ldr	r3, [pc, #172]	@ (80028a4 <HAL_RCC_ClockConfig+0x1bc>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f003 020c 	and.w	r2, r3, #12
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	429a      	cmp	r2, r3
 8002806:	d1eb      	bne.n	80027e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002808:	4b25      	ldr	r3, [pc, #148]	@ (80028a0 <HAL_RCC_ClockConfig+0x1b8>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0307 	and.w	r3, r3, #7
 8002810:	683a      	ldr	r2, [r7, #0]
 8002812:	429a      	cmp	r2, r3
 8002814:	d20c      	bcs.n	8002830 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002816:	4b22      	ldr	r3, [pc, #136]	@ (80028a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	b2d2      	uxtb	r2, r2
 800281c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800281e:	4b20      	ldr	r3, [pc, #128]	@ (80028a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0307 	and.w	r3, r3, #7
 8002826:	683a      	ldr	r2, [r7, #0]
 8002828:	429a      	cmp	r2, r3
 800282a:	d001      	beq.n	8002830 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e032      	b.n	8002896 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0304 	and.w	r3, r3, #4
 8002838:	2b00      	cmp	r3, #0
 800283a:	d008      	beq.n	800284e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800283c:	4b19      	ldr	r3, [pc, #100]	@ (80028a4 <HAL_RCC_ClockConfig+0x1bc>)
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	4916      	ldr	r1, [pc, #88]	@ (80028a4 <HAL_RCC_ClockConfig+0x1bc>)
 800284a:	4313      	orrs	r3, r2
 800284c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0308 	and.w	r3, r3, #8
 8002856:	2b00      	cmp	r3, #0
 8002858:	d009      	beq.n	800286e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800285a:	4b12      	ldr	r3, [pc, #72]	@ (80028a4 <HAL_RCC_ClockConfig+0x1bc>)
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	00db      	lsls	r3, r3, #3
 8002868:	490e      	ldr	r1, [pc, #56]	@ (80028a4 <HAL_RCC_ClockConfig+0x1bc>)
 800286a:	4313      	orrs	r3, r2
 800286c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800286e:	f000 f821 	bl	80028b4 <HAL_RCC_GetSysClockFreq>
 8002872:	4602      	mov	r2, r0
 8002874:	4b0b      	ldr	r3, [pc, #44]	@ (80028a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	091b      	lsrs	r3, r3, #4
 800287a:	f003 030f 	and.w	r3, r3, #15
 800287e:	490a      	ldr	r1, [pc, #40]	@ (80028a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002880:	5ccb      	ldrb	r3, [r1, r3]
 8002882:	fa22 f303 	lsr.w	r3, r2, r3
 8002886:	4a09      	ldr	r2, [pc, #36]	@ (80028ac <HAL_RCC_ClockConfig+0x1c4>)
 8002888:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800288a:	4b09      	ldr	r3, [pc, #36]	@ (80028b0 <HAL_RCC_ClockConfig+0x1c8>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4618      	mov	r0, r3
 8002890:	f7fe fd98 	bl	80013c4 <HAL_InitTick>

  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	40023c00 	.word	0x40023c00
 80028a4:	40023800 	.word	0x40023800
 80028a8:	080047b8 	.word	0x080047b8
 80028ac:	2000000c 	.word	0x2000000c
 80028b0:	20000010 	.word	0x20000010

080028b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028b8:	b090      	sub	sp, #64	@ 0x40
 80028ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80028bc:	2300      	movs	r3, #0
 80028be:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80028c0:	2300      	movs	r3, #0
 80028c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80028c4:	2300      	movs	r3, #0
 80028c6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80028c8:	2300      	movs	r3, #0
 80028ca:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028cc:	4b59      	ldr	r3, [pc, #356]	@ (8002a34 <HAL_RCC_GetSysClockFreq+0x180>)
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f003 030c 	and.w	r3, r3, #12
 80028d4:	2b08      	cmp	r3, #8
 80028d6:	d00d      	beq.n	80028f4 <HAL_RCC_GetSysClockFreq+0x40>
 80028d8:	2b08      	cmp	r3, #8
 80028da:	f200 80a1 	bhi.w	8002a20 <HAL_RCC_GetSysClockFreq+0x16c>
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d002      	beq.n	80028e8 <HAL_RCC_GetSysClockFreq+0x34>
 80028e2:	2b04      	cmp	r3, #4
 80028e4:	d003      	beq.n	80028ee <HAL_RCC_GetSysClockFreq+0x3a>
 80028e6:	e09b      	b.n	8002a20 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028e8:	4b53      	ldr	r3, [pc, #332]	@ (8002a38 <HAL_RCC_GetSysClockFreq+0x184>)
 80028ea:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80028ec:	e09b      	b.n	8002a26 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028ee:	4b53      	ldr	r3, [pc, #332]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0x188>)
 80028f0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80028f2:	e098      	b.n	8002a26 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028f4:	4b4f      	ldr	r3, [pc, #316]	@ (8002a34 <HAL_RCC_GetSysClockFreq+0x180>)
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80028fc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028fe:	4b4d      	ldr	r3, [pc, #308]	@ (8002a34 <HAL_RCC_GetSysClockFreq+0x180>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d028      	beq.n	800295c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800290a:	4b4a      	ldr	r3, [pc, #296]	@ (8002a34 <HAL_RCC_GetSysClockFreq+0x180>)
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	099b      	lsrs	r3, r3, #6
 8002910:	2200      	movs	r2, #0
 8002912:	623b      	str	r3, [r7, #32]
 8002914:	627a      	str	r2, [r7, #36]	@ 0x24
 8002916:	6a3b      	ldr	r3, [r7, #32]
 8002918:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800291c:	2100      	movs	r1, #0
 800291e:	4b47      	ldr	r3, [pc, #284]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0x188>)
 8002920:	fb03 f201 	mul.w	r2, r3, r1
 8002924:	2300      	movs	r3, #0
 8002926:	fb00 f303 	mul.w	r3, r0, r3
 800292a:	4413      	add	r3, r2
 800292c:	4a43      	ldr	r2, [pc, #268]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0x188>)
 800292e:	fba0 1202 	umull	r1, r2, r0, r2
 8002932:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002934:	460a      	mov	r2, r1
 8002936:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002938:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800293a:	4413      	add	r3, r2
 800293c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800293e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002940:	2200      	movs	r2, #0
 8002942:	61bb      	str	r3, [r7, #24]
 8002944:	61fa      	str	r2, [r7, #28]
 8002946:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800294a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800294e:	f7fd fc3b 	bl	80001c8 <__aeabi_uldivmod>
 8002952:	4602      	mov	r2, r0
 8002954:	460b      	mov	r3, r1
 8002956:	4613      	mov	r3, r2
 8002958:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800295a:	e053      	b.n	8002a04 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800295c:	4b35      	ldr	r3, [pc, #212]	@ (8002a34 <HAL_RCC_GetSysClockFreq+0x180>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	099b      	lsrs	r3, r3, #6
 8002962:	2200      	movs	r2, #0
 8002964:	613b      	str	r3, [r7, #16]
 8002966:	617a      	str	r2, [r7, #20]
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800296e:	f04f 0b00 	mov.w	fp, #0
 8002972:	4652      	mov	r2, sl
 8002974:	465b      	mov	r3, fp
 8002976:	f04f 0000 	mov.w	r0, #0
 800297a:	f04f 0100 	mov.w	r1, #0
 800297e:	0159      	lsls	r1, r3, #5
 8002980:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002984:	0150      	lsls	r0, r2, #5
 8002986:	4602      	mov	r2, r0
 8002988:	460b      	mov	r3, r1
 800298a:	ebb2 080a 	subs.w	r8, r2, sl
 800298e:	eb63 090b 	sbc.w	r9, r3, fp
 8002992:	f04f 0200 	mov.w	r2, #0
 8002996:	f04f 0300 	mov.w	r3, #0
 800299a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800299e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80029a2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80029a6:	ebb2 0408 	subs.w	r4, r2, r8
 80029aa:	eb63 0509 	sbc.w	r5, r3, r9
 80029ae:	f04f 0200 	mov.w	r2, #0
 80029b2:	f04f 0300 	mov.w	r3, #0
 80029b6:	00eb      	lsls	r3, r5, #3
 80029b8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029bc:	00e2      	lsls	r2, r4, #3
 80029be:	4614      	mov	r4, r2
 80029c0:	461d      	mov	r5, r3
 80029c2:	eb14 030a 	adds.w	r3, r4, sl
 80029c6:	603b      	str	r3, [r7, #0]
 80029c8:	eb45 030b 	adc.w	r3, r5, fp
 80029cc:	607b      	str	r3, [r7, #4]
 80029ce:	f04f 0200 	mov.w	r2, #0
 80029d2:	f04f 0300 	mov.w	r3, #0
 80029d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029da:	4629      	mov	r1, r5
 80029dc:	028b      	lsls	r3, r1, #10
 80029de:	4621      	mov	r1, r4
 80029e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029e4:	4621      	mov	r1, r4
 80029e6:	028a      	lsls	r2, r1, #10
 80029e8:	4610      	mov	r0, r2
 80029ea:	4619      	mov	r1, r3
 80029ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029ee:	2200      	movs	r2, #0
 80029f0:	60bb      	str	r3, [r7, #8]
 80029f2:	60fa      	str	r2, [r7, #12]
 80029f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029f8:	f7fd fbe6 	bl	80001c8 <__aeabi_uldivmod>
 80029fc:	4602      	mov	r2, r0
 80029fe:	460b      	mov	r3, r1
 8002a00:	4613      	mov	r3, r2
 8002a02:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002a04:	4b0b      	ldr	r3, [pc, #44]	@ (8002a34 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	0c1b      	lsrs	r3, r3, #16
 8002a0a:	f003 0303 	and.w	r3, r3, #3
 8002a0e:	3301      	adds	r3, #1
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002a14:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a1c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a1e:	e002      	b.n	8002a26 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a20:	4b05      	ldr	r3, [pc, #20]	@ (8002a38 <HAL_RCC_GetSysClockFreq+0x184>)
 8002a22:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3740      	adds	r7, #64	@ 0x40
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a32:	bf00      	nop
 8002a34:	40023800 	.word	0x40023800
 8002a38:	00f42400 	.word	0x00f42400
 8002a3c:	017d7840 	.word	0x017d7840

08002a40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a44:	4b03      	ldr	r3, [pc, #12]	@ (8002a54 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a46:	681b      	ldr	r3, [r3, #0]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	2000000c 	.word	0x2000000c

08002a58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a5c:	f7ff fff0 	bl	8002a40 <HAL_RCC_GetHCLKFreq>
 8002a60:	4602      	mov	r2, r0
 8002a62:	4b05      	ldr	r3, [pc, #20]	@ (8002a78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	0a9b      	lsrs	r3, r3, #10
 8002a68:	f003 0307 	and.w	r3, r3, #7
 8002a6c:	4903      	ldr	r1, [pc, #12]	@ (8002a7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a6e:	5ccb      	ldrb	r3, [r1, r3]
 8002a70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	40023800 	.word	0x40023800
 8002a7c:	080047c8 	.word	0x080047c8

08002a80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a84:	f7ff ffdc 	bl	8002a40 <HAL_RCC_GetHCLKFreq>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	4b05      	ldr	r3, [pc, #20]	@ (8002aa0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	0b5b      	lsrs	r3, r3, #13
 8002a90:	f003 0307 	and.w	r3, r3, #7
 8002a94:	4903      	ldr	r1, [pc, #12]	@ (8002aa4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a96:	5ccb      	ldrb	r3, [r1, r3]
 8002a98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	080047c8 	.word	0x080047c8

08002aa8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e041      	b.n	8002b3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d106      	bne.n	8002ad4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f7fe fac4 	bl	800105c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	3304      	adds	r3, #4
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	4610      	mov	r0, r2
 8002ae8:	f000 fa7e 	bl	8002fe8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
	...

08002b48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d001      	beq.n	8002b60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e04e      	b.n	8002bfe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2202      	movs	r2, #2
 8002b64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68da      	ldr	r2, [r3, #12]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f042 0201 	orr.w	r2, r2, #1
 8002b76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a23      	ldr	r2, [pc, #140]	@ (8002c0c <HAL_TIM_Base_Start_IT+0xc4>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d022      	beq.n	8002bc8 <HAL_TIM_Base_Start_IT+0x80>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b8a:	d01d      	beq.n	8002bc8 <HAL_TIM_Base_Start_IT+0x80>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a1f      	ldr	r2, [pc, #124]	@ (8002c10 <HAL_TIM_Base_Start_IT+0xc8>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d018      	beq.n	8002bc8 <HAL_TIM_Base_Start_IT+0x80>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a1e      	ldr	r2, [pc, #120]	@ (8002c14 <HAL_TIM_Base_Start_IT+0xcc>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d013      	beq.n	8002bc8 <HAL_TIM_Base_Start_IT+0x80>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a1c      	ldr	r2, [pc, #112]	@ (8002c18 <HAL_TIM_Base_Start_IT+0xd0>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d00e      	beq.n	8002bc8 <HAL_TIM_Base_Start_IT+0x80>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a1b      	ldr	r2, [pc, #108]	@ (8002c1c <HAL_TIM_Base_Start_IT+0xd4>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d009      	beq.n	8002bc8 <HAL_TIM_Base_Start_IT+0x80>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a19      	ldr	r2, [pc, #100]	@ (8002c20 <HAL_TIM_Base_Start_IT+0xd8>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d004      	beq.n	8002bc8 <HAL_TIM_Base_Start_IT+0x80>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a18      	ldr	r2, [pc, #96]	@ (8002c24 <HAL_TIM_Base_Start_IT+0xdc>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d111      	bne.n	8002bec <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f003 0307 	and.w	r3, r3, #7
 8002bd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2b06      	cmp	r3, #6
 8002bd8:	d010      	beq.n	8002bfc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f042 0201 	orr.w	r2, r2, #1
 8002be8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bea:	e007      	b.n	8002bfc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f042 0201 	orr.w	r2, r2, #1
 8002bfa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3714      	adds	r7, #20
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	40010000 	.word	0x40010000
 8002c10:	40000400 	.word	0x40000400
 8002c14:	40000800 	.word	0x40000800
 8002c18:	40000c00 	.word	0x40000c00
 8002c1c:	40010400 	.word	0x40010400
 8002c20:	40014000 	.word	0x40014000
 8002c24:	40001800 	.word	0x40001800

08002c28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d020      	beq.n	8002c8c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f003 0302 	and.w	r3, r3, #2
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d01b      	beq.n	8002c8c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f06f 0202 	mvn.w	r2, #2
 8002c5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2201      	movs	r2, #1
 8002c62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	f003 0303 	and.w	r3, r3, #3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d003      	beq.n	8002c7a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 f999 	bl	8002faa <HAL_TIM_IC_CaptureCallback>
 8002c78:	e005      	b.n	8002c86 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 f98b 	bl	8002f96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 f99c 	bl	8002fbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	f003 0304 	and.w	r3, r3, #4
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d020      	beq.n	8002cd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f003 0304 	and.w	r3, r3, #4
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d01b      	beq.n	8002cd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f06f 0204 	mvn.w	r2, #4
 8002ca8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2202      	movs	r2, #2
 8002cae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d003      	beq.n	8002cc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 f973 	bl	8002faa <HAL_TIM_IC_CaptureCallback>
 8002cc4:	e005      	b.n	8002cd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 f965 	bl	8002f96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f000 f976 	bl	8002fbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	f003 0308 	and.w	r3, r3, #8
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d020      	beq.n	8002d24 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f003 0308 	and.w	r3, r3, #8
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d01b      	beq.n	8002d24 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f06f 0208 	mvn.w	r2, #8
 8002cf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2204      	movs	r2, #4
 8002cfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	69db      	ldr	r3, [r3, #28]
 8002d02:	f003 0303 	and.w	r3, r3, #3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d003      	beq.n	8002d12 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 f94d 	bl	8002faa <HAL_TIM_IC_CaptureCallback>
 8002d10:	e005      	b.n	8002d1e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 f93f 	bl	8002f96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f000 f950 	bl	8002fbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	f003 0310 	and.w	r3, r3, #16
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d020      	beq.n	8002d70 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f003 0310 	and.w	r3, r3, #16
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d01b      	beq.n	8002d70 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f06f 0210 	mvn.w	r2, #16
 8002d40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2208      	movs	r2, #8
 8002d46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	69db      	ldr	r3, [r3, #28]
 8002d4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d003      	beq.n	8002d5e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 f927 	bl	8002faa <HAL_TIM_IC_CaptureCallback>
 8002d5c:	e005      	b.n	8002d6a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 f919 	bl	8002f96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 f92a 	bl	8002fbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00c      	beq.n	8002d94 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f003 0301 	and.w	r3, r3, #1
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d007      	beq.n	8002d94 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f06f 0201 	mvn.w	r2, #1
 8002d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f7fe f92c 	bl	8000fec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00c      	beq.n	8002db8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d007      	beq.n	8002db8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002db0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 fae4 	bl	8003380 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00c      	beq.n	8002ddc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d007      	beq.n	8002ddc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002dd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 f8fb 	bl	8002fd2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	f003 0320 	and.w	r3, r3, #32
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00c      	beq.n	8002e00 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f003 0320 	and.w	r3, r3, #32
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d007      	beq.n	8002e00 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f06f 0220 	mvn.w	r2, #32
 8002df8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 fab6 	bl	800336c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e00:	bf00      	nop
 8002e02:	3710      	adds	r7, #16
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e12:	2300      	movs	r3, #0
 8002e14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d101      	bne.n	8002e24 <HAL_TIM_ConfigClockSource+0x1c>
 8002e20:	2302      	movs	r3, #2
 8002e22:	e0b4      	b.n	8002f8e <HAL_TIM_ConfigClockSource+0x186>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2202      	movs	r2, #2
 8002e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002e42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002e4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	68ba      	ldr	r2, [r7, #8]
 8002e52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e5c:	d03e      	beq.n	8002edc <HAL_TIM_ConfigClockSource+0xd4>
 8002e5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e62:	f200 8087 	bhi.w	8002f74 <HAL_TIM_ConfigClockSource+0x16c>
 8002e66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e6a:	f000 8086 	beq.w	8002f7a <HAL_TIM_ConfigClockSource+0x172>
 8002e6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e72:	d87f      	bhi.n	8002f74 <HAL_TIM_ConfigClockSource+0x16c>
 8002e74:	2b70      	cmp	r3, #112	@ 0x70
 8002e76:	d01a      	beq.n	8002eae <HAL_TIM_ConfigClockSource+0xa6>
 8002e78:	2b70      	cmp	r3, #112	@ 0x70
 8002e7a:	d87b      	bhi.n	8002f74 <HAL_TIM_ConfigClockSource+0x16c>
 8002e7c:	2b60      	cmp	r3, #96	@ 0x60
 8002e7e:	d050      	beq.n	8002f22 <HAL_TIM_ConfigClockSource+0x11a>
 8002e80:	2b60      	cmp	r3, #96	@ 0x60
 8002e82:	d877      	bhi.n	8002f74 <HAL_TIM_ConfigClockSource+0x16c>
 8002e84:	2b50      	cmp	r3, #80	@ 0x50
 8002e86:	d03c      	beq.n	8002f02 <HAL_TIM_ConfigClockSource+0xfa>
 8002e88:	2b50      	cmp	r3, #80	@ 0x50
 8002e8a:	d873      	bhi.n	8002f74 <HAL_TIM_ConfigClockSource+0x16c>
 8002e8c:	2b40      	cmp	r3, #64	@ 0x40
 8002e8e:	d058      	beq.n	8002f42 <HAL_TIM_ConfigClockSource+0x13a>
 8002e90:	2b40      	cmp	r3, #64	@ 0x40
 8002e92:	d86f      	bhi.n	8002f74 <HAL_TIM_ConfigClockSource+0x16c>
 8002e94:	2b30      	cmp	r3, #48	@ 0x30
 8002e96:	d064      	beq.n	8002f62 <HAL_TIM_ConfigClockSource+0x15a>
 8002e98:	2b30      	cmp	r3, #48	@ 0x30
 8002e9a:	d86b      	bhi.n	8002f74 <HAL_TIM_ConfigClockSource+0x16c>
 8002e9c:	2b20      	cmp	r3, #32
 8002e9e:	d060      	beq.n	8002f62 <HAL_TIM_ConfigClockSource+0x15a>
 8002ea0:	2b20      	cmp	r3, #32
 8002ea2:	d867      	bhi.n	8002f74 <HAL_TIM_ConfigClockSource+0x16c>
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d05c      	beq.n	8002f62 <HAL_TIM_ConfigClockSource+0x15a>
 8002ea8:	2b10      	cmp	r3, #16
 8002eaa:	d05a      	beq.n	8002f62 <HAL_TIM_ConfigClockSource+0x15a>
 8002eac:	e062      	b.n	8002f74 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ebe:	f000 f9b9 	bl	8003234 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002ed0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68ba      	ldr	r2, [r7, #8]
 8002ed8:	609a      	str	r2, [r3, #8]
      break;
 8002eda:	e04f      	b.n	8002f7c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002eec:	f000 f9a2 	bl	8003234 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689a      	ldr	r2, [r3, #8]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002efe:	609a      	str	r2, [r3, #8]
      break;
 8002f00:	e03c      	b.n	8002f7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f0e:	461a      	mov	r2, r3
 8002f10:	f000 f916 	bl	8003140 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2150      	movs	r1, #80	@ 0x50
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f000 f96f 	bl	80031fe <TIM_ITRx_SetConfig>
      break;
 8002f20:	e02c      	b.n	8002f7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f2e:	461a      	mov	r2, r3
 8002f30:	f000 f935 	bl	800319e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2160      	movs	r1, #96	@ 0x60
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f000 f95f 	bl	80031fe <TIM_ITRx_SetConfig>
      break;
 8002f40:	e01c      	b.n	8002f7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f4e:	461a      	mov	r2, r3
 8002f50:	f000 f8f6 	bl	8003140 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2140      	movs	r1, #64	@ 0x40
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f000 f94f 	bl	80031fe <TIM_ITRx_SetConfig>
      break;
 8002f60:	e00c      	b.n	8002f7c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	4610      	mov	r0, r2
 8002f6e:	f000 f946 	bl	80031fe <TIM_ITRx_SetConfig>
      break;
 8002f72:	e003      	b.n	8002f7c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	73fb      	strb	r3, [r7, #15]
      break;
 8002f78:	e000      	b.n	8002f7c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002f7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f96:	b480      	push	{r7}
 8002f98:	b083      	sub	sp, #12
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f9e:	bf00      	nop
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr

08002faa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002faa:	b480      	push	{r7}
 8002fac:	b083      	sub	sp, #12
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002fb2:	bf00      	nop
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr

08002fbe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	b083      	sub	sp, #12
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002fc6:	bf00      	nop
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr

08002fd2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b083      	sub	sp, #12
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002fda:	bf00      	nop
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
	...

08002fe8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b085      	sub	sp, #20
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a46      	ldr	r2, [pc, #280]	@ (8003114 <TIM_Base_SetConfig+0x12c>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d013      	beq.n	8003028 <TIM_Base_SetConfig+0x40>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003006:	d00f      	beq.n	8003028 <TIM_Base_SetConfig+0x40>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a43      	ldr	r2, [pc, #268]	@ (8003118 <TIM_Base_SetConfig+0x130>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d00b      	beq.n	8003028 <TIM_Base_SetConfig+0x40>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a42      	ldr	r2, [pc, #264]	@ (800311c <TIM_Base_SetConfig+0x134>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d007      	beq.n	8003028 <TIM_Base_SetConfig+0x40>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a41      	ldr	r2, [pc, #260]	@ (8003120 <TIM_Base_SetConfig+0x138>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d003      	beq.n	8003028 <TIM_Base_SetConfig+0x40>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a40      	ldr	r2, [pc, #256]	@ (8003124 <TIM_Base_SetConfig+0x13c>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d108      	bne.n	800303a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800302e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	68fa      	ldr	r2, [r7, #12]
 8003036:	4313      	orrs	r3, r2
 8003038:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a35      	ldr	r2, [pc, #212]	@ (8003114 <TIM_Base_SetConfig+0x12c>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d02b      	beq.n	800309a <TIM_Base_SetConfig+0xb2>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003048:	d027      	beq.n	800309a <TIM_Base_SetConfig+0xb2>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a32      	ldr	r2, [pc, #200]	@ (8003118 <TIM_Base_SetConfig+0x130>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d023      	beq.n	800309a <TIM_Base_SetConfig+0xb2>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a31      	ldr	r2, [pc, #196]	@ (800311c <TIM_Base_SetConfig+0x134>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d01f      	beq.n	800309a <TIM_Base_SetConfig+0xb2>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a30      	ldr	r2, [pc, #192]	@ (8003120 <TIM_Base_SetConfig+0x138>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d01b      	beq.n	800309a <TIM_Base_SetConfig+0xb2>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a2f      	ldr	r2, [pc, #188]	@ (8003124 <TIM_Base_SetConfig+0x13c>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d017      	beq.n	800309a <TIM_Base_SetConfig+0xb2>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a2e      	ldr	r2, [pc, #184]	@ (8003128 <TIM_Base_SetConfig+0x140>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d013      	beq.n	800309a <TIM_Base_SetConfig+0xb2>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a2d      	ldr	r2, [pc, #180]	@ (800312c <TIM_Base_SetConfig+0x144>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d00f      	beq.n	800309a <TIM_Base_SetConfig+0xb2>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a2c      	ldr	r2, [pc, #176]	@ (8003130 <TIM_Base_SetConfig+0x148>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d00b      	beq.n	800309a <TIM_Base_SetConfig+0xb2>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a2b      	ldr	r2, [pc, #172]	@ (8003134 <TIM_Base_SetConfig+0x14c>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d007      	beq.n	800309a <TIM_Base_SetConfig+0xb2>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a2a      	ldr	r2, [pc, #168]	@ (8003138 <TIM_Base_SetConfig+0x150>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d003      	beq.n	800309a <TIM_Base_SetConfig+0xb2>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a29      	ldr	r2, [pc, #164]	@ (800313c <TIM_Base_SetConfig+0x154>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d108      	bne.n	80030ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	68fa      	ldr	r2, [r7, #12]
 80030be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	689a      	ldr	r2, [r3, #8]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a10      	ldr	r2, [pc, #64]	@ (8003114 <TIM_Base_SetConfig+0x12c>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d003      	beq.n	80030e0 <TIM_Base_SetConfig+0xf8>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4a12      	ldr	r2, [pc, #72]	@ (8003124 <TIM_Base_SetConfig+0x13c>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d103      	bne.n	80030e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	691a      	ldr	r2, [r3, #16]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d105      	bne.n	8003106 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	f023 0201 	bic.w	r2, r3, #1
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	611a      	str	r2, [r3, #16]
  }
}
 8003106:	bf00      	nop
 8003108:	3714      	adds	r7, #20
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	40010000 	.word	0x40010000
 8003118:	40000400 	.word	0x40000400
 800311c:	40000800 	.word	0x40000800
 8003120:	40000c00 	.word	0x40000c00
 8003124:	40010400 	.word	0x40010400
 8003128:	40014000 	.word	0x40014000
 800312c:	40014400 	.word	0x40014400
 8003130:	40014800 	.word	0x40014800
 8003134:	40001800 	.word	0x40001800
 8003138:	40001c00 	.word	0x40001c00
 800313c:	40002000 	.word	0x40002000

08003140 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003140:	b480      	push	{r7}
 8003142:	b087      	sub	sp, #28
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6a1b      	ldr	r3, [r3, #32]
 8003150:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6a1b      	ldr	r3, [r3, #32]
 8003156:	f023 0201 	bic.w	r2, r3, #1
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800316a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	011b      	lsls	r3, r3, #4
 8003170:	693a      	ldr	r2, [r7, #16]
 8003172:	4313      	orrs	r3, r2
 8003174:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	f023 030a 	bic.w	r3, r3, #10
 800317c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	4313      	orrs	r3, r2
 8003184:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	621a      	str	r2, [r3, #32]
}
 8003192:	bf00      	nop
 8003194:	371c      	adds	r7, #28
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800319e:	b480      	push	{r7}
 80031a0:	b087      	sub	sp, #28
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	60f8      	str	r0, [r7, #12]
 80031a6:	60b9      	str	r1, [r7, #8]
 80031a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6a1b      	ldr	r3, [r3, #32]
 80031ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	f023 0210 	bic.w	r2, r3, #16
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80031c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	031b      	lsls	r3, r3, #12
 80031ce:	693a      	ldr	r2, [r7, #16]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80031da:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	011b      	lsls	r3, r3, #4
 80031e0:	697a      	ldr	r2, [r7, #20]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	693a      	ldr	r2, [r7, #16]
 80031ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	697a      	ldr	r2, [r7, #20]
 80031f0:	621a      	str	r2, [r3, #32]
}
 80031f2:	bf00      	nop
 80031f4:	371c      	adds	r7, #28
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr

080031fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80031fe:	b480      	push	{r7}
 8003200:	b085      	sub	sp, #20
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
 8003206:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003214:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003216:	683a      	ldr	r2, [r7, #0]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	4313      	orrs	r3, r2
 800321c:	f043 0307 	orr.w	r3, r3, #7
 8003220:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	68fa      	ldr	r2, [r7, #12]
 8003226:	609a      	str	r2, [r3, #8]
}
 8003228:	bf00      	nop
 800322a:	3714      	adds	r7, #20
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003234:	b480      	push	{r7}
 8003236:	b087      	sub	sp, #28
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]
 8003240:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800324e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	021a      	lsls	r2, r3, #8
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	431a      	orrs	r2, r3
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	4313      	orrs	r3, r2
 800325c:	697a      	ldr	r2, [r7, #20]
 800325e:	4313      	orrs	r3, r2
 8003260:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	697a      	ldr	r2, [r7, #20]
 8003266:	609a      	str	r2, [r3, #8]
}
 8003268:	bf00      	nop
 800326a:	371c      	adds	r7, #28
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003284:	2b01      	cmp	r3, #1
 8003286:	d101      	bne.n	800328c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003288:	2302      	movs	r3, #2
 800328a:	e05a      	b.n	8003342 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2202      	movs	r2, #2
 8003298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a21      	ldr	r2, [pc, #132]	@ (8003350 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d022      	beq.n	8003316 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032d8:	d01d      	beq.n	8003316 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a1d      	ldr	r2, [pc, #116]	@ (8003354 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d018      	beq.n	8003316 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a1b      	ldr	r2, [pc, #108]	@ (8003358 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d013      	beq.n	8003316 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a1a      	ldr	r2, [pc, #104]	@ (800335c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d00e      	beq.n	8003316 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a18      	ldr	r2, [pc, #96]	@ (8003360 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d009      	beq.n	8003316 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a17      	ldr	r2, [pc, #92]	@ (8003364 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d004      	beq.n	8003316 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a15      	ldr	r2, [pc, #84]	@ (8003368 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d10c      	bne.n	8003330 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800331c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	68ba      	ldr	r2, [r7, #8]
 8003324:	4313      	orrs	r3, r2
 8003326:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68ba      	ldr	r2, [r7, #8]
 800332e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3714      	adds	r7, #20
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	40010000 	.word	0x40010000
 8003354:	40000400 	.word	0x40000400
 8003358:	40000800 	.word	0x40000800
 800335c:	40000c00 	.word	0x40000c00
 8003360:	40010400 	.word	0x40010400
 8003364:	40014000 	.word	0x40014000
 8003368:	40001800 	.word	0x40001800

0800336c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e042      	b.n	800342c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d106      	bne.n	80033c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f7fd fe94 	bl	80010e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2224      	movs	r2, #36	@ 0x24
 80033c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68da      	ldr	r2, [r3, #12]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80033d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f000 ff41 	bl	8004260 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	691a      	ldr	r2, [r3, #16]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80033ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	695a      	ldr	r2, [r3, #20]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80033fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68da      	ldr	r2, [r3, #12]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800340c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2220      	movs	r2, #32
 8003418:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2220      	movs	r2, #32
 8003420:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800342a:	2300      	movs	r3, #0
}
 800342c:	4618      	mov	r0, r3
 800342e:	3708      	adds	r7, #8
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b08c      	sub	sp, #48	@ 0x30
 8003438:	af00      	add	r7, sp, #0
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	4613      	mov	r3, r2
 8003440:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b20      	cmp	r3, #32
 800344c:	d156      	bne.n	80034fc <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d002      	beq.n	800345a <HAL_UART_Transmit_DMA+0x26>
 8003454:	88fb      	ldrh	r3, [r7, #6]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d101      	bne.n	800345e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e04f      	b.n	80034fe <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800345e:	68ba      	ldr	r2, [r7, #8]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	88fa      	ldrh	r2, [r7, #6]
 8003468:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	88fa      	ldrh	r2, [r7, #6]
 800346e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2200      	movs	r2, #0
 8003474:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2221      	movs	r2, #33	@ 0x21
 800347a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003482:	4a21      	ldr	r2, [pc, #132]	@ (8003508 <HAL_UART_Transmit_DMA+0xd4>)
 8003484:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800348a:	4a20      	ldr	r2, [pc, #128]	@ (800350c <HAL_UART_Transmit_DMA+0xd8>)
 800348c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003492:	4a1f      	ldr	r2, [pc, #124]	@ (8003510 <HAL_UART_Transmit_DMA+0xdc>)
 8003494:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800349a:	2200      	movs	r2, #0
 800349c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800349e:	f107 0308 	add.w	r3, r7, #8
 80034a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80034a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034aa:	6819      	ldr	r1, [r3, #0]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	3304      	adds	r3, #4
 80034b2:	461a      	mov	r2, r3
 80034b4:	88fb      	ldrh	r3, [r7, #6]
 80034b6:	f7fe f995 	bl	80017e4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80034c2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	3314      	adds	r3, #20
 80034ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	e853 3f00 	ldrex	r3, [r3]
 80034d2:	617b      	str	r3, [r7, #20]
   return(result);
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	3314      	adds	r3, #20
 80034e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034e4:	627a      	str	r2, [r7, #36]	@ 0x24
 80034e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e8:	6a39      	ldr	r1, [r7, #32]
 80034ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034ec:	e841 2300 	strex	r3, r2, [r1]
 80034f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1e5      	bne.n	80034c4 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80034f8:	2300      	movs	r3, #0
 80034fa:	e000      	b.n	80034fe <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80034fc:	2302      	movs	r3, #2
  }
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3730      	adds	r7, #48	@ 0x30
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	08003aed 	.word	0x08003aed
 800350c:	08003b87 	.word	0x08003b87
 8003510:	08003d0b 	.word	0x08003d0b

08003514 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	4613      	mov	r3, r2
 8003520:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b20      	cmp	r3, #32
 800352c:	d112      	bne.n	8003554 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d002      	beq.n	800353a <HAL_UART_Receive_DMA+0x26>
 8003534:	88fb      	ldrh	r3, [r7, #6]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d101      	bne.n	800353e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e00b      	b.n	8003556 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2200      	movs	r2, #0
 8003542:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003544:	88fb      	ldrh	r3, [r7, #6]
 8003546:	461a      	mov	r2, r3
 8003548:	68b9      	ldr	r1, [r7, #8]
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f000 fc28 	bl	8003da0 <UART_Start_Receive_DMA>
 8003550:	4603      	mov	r3, r0
 8003552:	e000      	b.n	8003556 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003554:	2302      	movs	r3, #2
  }
}
 8003556:	4618      	mov	r0, r3
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
	...

08003560 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b0ba      	sub	sp, #232	@ 0xe8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003586:	2300      	movs	r3, #0
 8003588:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800358c:	2300      	movs	r3, #0
 800358e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003596:	f003 030f 	and.w	r3, r3, #15
 800359a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800359e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d10f      	bne.n	80035c6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035aa:	f003 0320 	and.w	r3, r3, #32
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d009      	beq.n	80035c6 <HAL_UART_IRQHandler+0x66>
 80035b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035b6:	f003 0320 	and.w	r3, r3, #32
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d003      	beq.n	80035c6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 fd8f 	bl	80040e2 <UART_Receive_IT>
      return;
 80035c4:	e25b      	b.n	8003a7e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80035c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	f000 80de 	beq.w	800378c <HAL_UART_IRQHandler+0x22c>
 80035d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80035d4:	f003 0301 	and.w	r3, r3, #1
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d106      	bne.n	80035ea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80035dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035e0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f000 80d1 	beq.w	800378c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80035ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00b      	beq.n	800360e <HAL_UART_IRQHandler+0xae>
 80035f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d005      	beq.n	800360e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003606:	f043 0201 	orr.w	r2, r3, #1
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800360e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003612:	f003 0304 	and.w	r3, r3, #4
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00b      	beq.n	8003632 <HAL_UART_IRQHandler+0xd2>
 800361a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	2b00      	cmp	r3, #0
 8003624:	d005      	beq.n	8003632 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800362a:	f043 0202 	orr.w	r2, r3, #2
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00b      	beq.n	8003656 <HAL_UART_IRQHandler+0xf6>
 800363e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	2b00      	cmp	r3, #0
 8003648:	d005      	beq.n	8003656 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800364e:	f043 0204 	orr.w	r2, r3, #4
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800365a:	f003 0308 	and.w	r3, r3, #8
 800365e:	2b00      	cmp	r3, #0
 8003660:	d011      	beq.n	8003686 <HAL_UART_IRQHandler+0x126>
 8003662:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003666:	f003 0320 	and.w	r3, r3, #32
 800366a:	2b00      	cmp	r3, #0
 800366c:	d105      	bne.n	800367a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800366e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	2b00      	cmp	r3, #0
 8003678:	d005      	beq.n	8003686 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800367e:	f043 0208 	orr.w	r2, r3, #8
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800368a:	2b00      	cmp	r3, #0
 800368c:	f000 81f2 	beq.w	8003a74 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003694:	f003 0320 	and.w	r3, r3, #32
 8003698:	2b00      	cmp	r3, #0
 800369a:	d008      	beq.n	80036ae <HAL_UART_IRQHandler+0x14e>
 800369c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036a0:	f003 0320 	and.w	r3, r3, #32
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d002      	beq.n	80036ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 fd1a 	bl	80040e2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	695b      	ldr	r3, [r3, #20]
 80036b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036b8:	2b40      	cmp	r3, #64	@ 0x40
 80036ba:	bf0c      	ite	eq
 80036bc:	2301      	moveq	r3, #1
 80036be:	2300      	movne	r3, #0
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ca:	f003 0308 	and.w	r3, r3, #8
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d103      	bne.n	80036da <HAL_UART_IRQHandler+0x17a>
 80036d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d04f      	beq.n	800377a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 fc22 	bl	8003f24 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036ea:	2b40      	cmp	r3, #64	@ 0x40
 80036ec:	d141      	bne.n	8003772 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	3314      	adds	r3, #20
 80036f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80036fc:	e853 3f00 	ldrex	r3, [r3]
 8003700:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003704:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003708:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800370c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	3314      	adds	r3, #20
 8003716:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800371a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800371e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003722:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003726:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800372a:	e841 2300 	strex	r3, r2, [r1]
 800372e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003732:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1d9      	bne.n	80036ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800373e:	2b00      	cmp	r3, #0
 8003740:	d013      	beq.n	800376a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003746:	4a7e      	ldr	r2, [pc, #504]	@ (8003940 <HAL_UART_IRQHandler+0x3e0>)
 8003748:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800374e:	4618      	mov	r0, r3
 8003750:	f7fe f910 	bl	8001974 <HAL_DMA_Abort_IT>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d016      	beq.n	8003788 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800375e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003764:	4610      	mov	r0, r2
 8003766:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003768:	e00e      	b.n	8003788 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 f9a8 	bl	8003ac0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003770:	e00a      	b.n	8003788 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 f9a4 	bl	8003ac0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003778:	e006      	b.n	8003788 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 f9a0 	bl	8003ac0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003786:	e175      	b.n	8003a74 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003788:	bf00      	nop
    return;
 800378a:	e173      	b.n	8003a74 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003790:	2b01      	cmp	r3, #1
 8003792:	f040 814f 	bne.w	8003a34 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003796:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800379a:	f003 0310 	and.w	r3, r3, #16
 800379e:	2b00      	cmp	r3, #0
 80037a0:	f000 8148 	beq.w	8003a34 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80037a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037a8:	f003 0310 	and.w	r3, r3, #16
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	f000 8141 	beq.w	8003a34 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80037b2:	2300      	movs	r3, #0
 80037b4:	60bb      	str	r3, [r7, #8]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	60bb      	str	r3, [r7, #8]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	60bb      	str	r3, [r7, #8]
 80037c6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037d2:	2b40      	cmp	r3, #64	@ 0x40
 80037d4:	f040 80b6 	bne.w	8003944 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80037e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f000 8145 	beq.w	8003a78 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80037f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80037f6:	429a      	cmp	r2, r3
 80037f8:	f080 813e 	bcs.w	8003a78 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003802:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003808:	69db      	ldr	r3, [r3, #28]
 800380a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800380e:	f000 8088 	beq.w	8003922 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	330c      	adds	r3, #12
 8003818:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800381c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003820:	e853 3f00 	ldrex	r3, [r3]
 8003824:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003828:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800382c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003830:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	330c      	adds	r3, #12
 800383a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800383e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003842:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003846:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800384a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800384e:	e841 2300 	strex	r3, r2, [r1]
 8003852:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003856:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1d9      	bne.n	8003812 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	3314      	adds	r3, #20
 8003864:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003866:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003868:	e853 3f00 	ldrex	r3, [r3]
 800386c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800386e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003870:	f023 0301 	bic.w	r3, r3, #1
 8003874:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	3314      	adds	r3, #20
 800387e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003882:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003886:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003888:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800388a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800388e:	e841 2300 	strex	r3, r2, [r1]
 8003892:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003894:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1e1      	bne.n	800385e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	3314      	adds	r3, #20
 80038a0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80038a4:	e853 3f00 	ldrex	r3, [r3]
 80038a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80038aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80038ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80038b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	3314      	adds	r3, #20
 80038ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80038be:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80038c0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80038c4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80038c6:	e841 2300 	strex	r3, r2, [r1]
 80038ca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80038cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1e3      	bne.n	800389a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2220      	movs	r2, #32
 80038d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	330c      	adds	r3, #12
 80038e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038ea:	e853 3f00 	ldrex	r3, [r3]
 80038ee:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80038f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038f2:	f023 0310 	bic.w	r3, r3, #16
 80038f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	330c      	adds	r3, #12
 8003900:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003904:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003906:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003908:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800390a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800390c:	e841 2300 	strex	r3, r2, [r1]
 8003910:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003912:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003914:	2b00      	cmp	r3, #0
 8003916:	d1e3      	bne.n	80038e0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800391c:	4618      	mov	r0, r3
 800391e:	f7fd ffb9 	bl	8001894 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2202      	movs	r2, #2
 8003926:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003930:	b29b      	uxth	r3, r3
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	b29b      	uxth	r3, r3
 8003936:	4619      	mov	r1, r3
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f000 f8cb 	bl	8003ad4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800393e:	e09b      	b.n	8003a78 <HAL_UART_IRQHandler+0x518>
 8003940:	08003feb 	.word	0x08003feb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800394c:	b29b      	uxth	r3, r3
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003958:	b29b      	uxth	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	f000 808e 	beq.w	8003a7c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003960:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003964:	2b00      	cmp	r3, #0
 8003966:	f000 8089 	beq.w	8003a7c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	330c      	adds	r3, #12
 8003970:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003974:	e853 3f00 	ldrex	r3, [r3]
 8003978:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800397a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800397c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003980:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	330c      	adds	r3, #12
 800398a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800398e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003990:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003992:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003994:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003996:	e841 2300 	strex	r3, r2, [r1]
 800399a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800399c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1e3      	bne.n	800396a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	3314      	adds	r3, #20
 80039a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ac:	e853 3f00 	ldrex	r3, [r3]
 80039b0:	623b      	str	r3, [r7, #32]
   return(result);
 80039b2:	6a3b      	ldr	r3, [r7, #32]
 80039b4:	f023 0301 	bic.w	r3, r3, #1
 80039b8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	3314      	adds	r3, #20
 80039c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80039c6:	633a      	str	r2, [r7, #48]	@ 0x30
 80039c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80039cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039ce:	e841 2300 	strex	r3, r2, [r1]
 80039d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80039d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1e3      	bne.n	80039a2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2220      	movs	r2, #32
 80039de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	330c      	adds	r3, #12
 80039ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	e853 3f00 	ldrex	r3, [r3]
 80039f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f023 0310 	bic.w	r3, r3, #16
 80039fe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	330c      	adds	r3, #12
 8003a08:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003a0c:	61fa      	str	r2, [r7, #28]
 8003a0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a10:	69b9      	ldr	r1, [r7, #24]
 8003a12:	69fa      	ldr	r2, [r7, #28]
 8003a14:	e841 2300 	strex	r3, r2, [r1]
 8003a18:	617b      	str	r3, [r7, #20]
   return(result);
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d1e3      	bne.n	80039e8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2202      	movs	r2, #2
 8003a24:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a26:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f000 f851 	bl	8003ad4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a32:	e023      	b.n	8003a7c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003a34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d009      	beq.n	8003a54 <HAL_UART_IRQHandler+0x4f4>
 8003a40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d003      	beq.n	8003a54 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 fae0 	bl	8004012 <UART_Transmit_IT>
    return;
 8003a52:	e014      	b.n	8003a7e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003a54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d00e      	beq.n	8003a7e <HAL_UART_IRQHandler+0x51e>
 8003a60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d008      	beq.n	8003a7e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f000 fb20 	bl	80040b2 <UART_EndTransmit_IT>
    return;
 8003a72:	e004      	b.n	8003a7e <HAL_UART_IRQHandler+0x51e>
    return;
 8003a74:	bf00      	nop
 8003a76:	e002      	b.n	8003a7e <HAL_UART_IRQHandler+0x51e>
      return;
 8003a78:	bf00      	nop
 8003a7a:	e000      	b.n	8003a7e <HAL_UART_IRQHandler+0x51e>
      return;
 8003a7c:	bf00      	nop
  }
}
 8003a7e:	37e8      	adds	r7, #232	@ 0xe8
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003a8c:	bf00      	nop
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003aa0:	bf00      	nop
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	460b      	mov	r3, r1
 8003ade:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ae0:	bf00      	nop
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b090      	sub	sp, #64	@ 0x40
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003af8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d137      	bne.n	8003b78 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8003b08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003b0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	3314      	adds	r3, #20
 8003b14:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b18:	e853 3f00 	ldrex	r3, [r3]
 8003b1c:	623b      	str	r3, [r7, #32]
   return(result);
 8003b1e:	6a3b      	ldr	r3, [r7, #32]
 8003b20:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b24:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	3314      	adds	r3, #20
 8003b2c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003b2e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b36:	e841 2300 	strex	r3, r2, [r1]
 8003b3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1e5      	bne.n	8003b0e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003b42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	330c      	adds	r3, #12
 8003b48:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	e853 3f00 	ldrex	r3, [r3]
 8003b50:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b58:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	330c      	adds	r3, #12
 8003b60:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003b62:	61fa      	str	r2, [r7, #28]
 8003b64:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b66:	69b9      	ldr	r1, [r7, #24]
 8003b68:	69fa      	ldr	r2, [r7, #28]
 8003b6a:	e841 2300 	strex	r3, r2, [r1]
 8003b6e:	617b      	str	r3, [r7, #20]
   return(result);
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1e5      	bne.n	8003b42 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003b76:	e002      	b.n	8003b7e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8003b78:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003b7a:	f7ff ff83 	bl	8003a84 <HAL_UART_TxCpltCallback>
}
 8003b7e:	bf00      	nop
 8003b80:	3740      	adds	r7, #64	@ 0x40
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b084      	sub	sp, #16
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b92:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003b94:	68f8      	ldr	r0, [r7, #12]
 8003b96:	f7ff ff7f 	bl	8003a98 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b9a:	bf00      	nop
 8003b9c:	3710      	adds	r7, #16
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	b09c      	sub	sp, #112	@ 0x70
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bae:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d172      	bne.n	8003ca4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003bbe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	330c      	adds	r3, #12
 8003bca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bcc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003bce:	e853 3f00 	ldrex	r3, [r3]
 8003bd2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003bd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003bd6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003bda:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003bdc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	330c      	adds	r3, #12
 8003be2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003be4:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003be6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003bea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003bec:	e841 2300 	strex	r3, r2, [r1]
 8003bf0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003bf2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d1e5      	bne.n	8003bc4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bf8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	3314      	adds	r3, #20
 8003bfe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c02:	e853 3f00 	ldrex	r3, [r3]
 8003c06:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003c08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c0a:	f023 0301 	bic.w	r3, r3, #1
 8003c0e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003c10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	3314      	adds	r3, #20
 8003c16:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003c18:	647a      	str	r2, [r7, #68]	@ 0x44
 8003c1a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c1c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003c1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c20:	e841 2300 	strex	r3, r2, [r1]
 8003c24:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003c26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1e5      	bne.n	8003bf8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	3314      	adds	r3, #20
 8003c32:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c36:	e853 3f00 	ldrex	r3, [r3]
 8003c3a:	623b      	str	r3, [r7, #32]
   return(result);
 8003c3c:	6a3b      	ldr	r3, [r7, #32]
 8003c3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c42:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	3314      	adds	r3, #20
 8003c4a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003c4c:	633a      	str	r2, [r7, #48]	@ 0x30
 8003c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c50:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c54:	e841 2300 	strex	r3, r2, [r1]
 8003c58:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d1e5      	bne.n	8003c2c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003c60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c62:	2220      	movs	r2, #32
 8003c64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d119      	bne.n	8003ca4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	330c      	adds	r3, #12
 8003c76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	e853 3f00 	ldrex	r3, [r3]
 8003c7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f023 0310 	bic.w	r3, r3, #16
 8003c86:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	330c      	adds	r3, #12
 8003c8e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003c90:	61fa      	str	r2, [r7, #28]
 8003c92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c94:	69b9      	ldr	r1, [r7, #24]
 8003c96:	69fa      	ldr	r2, [r7, #28]
 8003c98:	e841 2300 	strex	r3, r2, [r1]
 8003c9c:	617b      	str	r3, [r7, #20]
   return(result);
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d1e5      	bne.n	8003c70 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ca4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003caa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d106      	bne.n	8003cc0 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003cb2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003cb4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003cba:	f7ff ff0b 	bl	8003ad4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003cbe:	e002      	b.n	8003cc6 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003cc0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003cc2:	f7fd f975 	bl	8000fb0 <HAL_UART_RxCpltCallback>
}
 8003cc6:	bf00      	nop
 8003cc8:	3770      	adds	r7, #112	@ 0x70
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}

08003cce <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003cce:	b580      	push	{r7, lr}
 8003cd0:	b084      	sub	sp, #16
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cda:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d108      	bne.n	8003cfc <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003cee:	085b      	lsrs	r3, r3, #1
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	68f8      	ldr	r0, [r7, #12]
 8003cf6:	f7ff feed 	bl	8003ad4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003cfa:	e002      	b.n	8003d02 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003cfc:	68f8      	ldr	r0, [r7, #12]
 8003cfe:	f7ff fed5 	bl	8003aac <HAL_UART_RxHalfCpltCallback>
}
 8003d02:	bf00      	nop
 8003d04:	3710      	adds	r7, #16
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	b084      	sub	sp, #16
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003d12:	2300      	movs	r3, #0
 8003d14:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d1a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d26:	2b80      	cmp	r3, #128	@ 0x80
 8003d28:	bf0c      	ite	eq
 8003d2a:	2301      	moveq	r3, #1
 8003d2c:	2300      	movne	r3, #0
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	2b21      	cmp	r3, #33	@ 0x21
 8003d3c:	d108      	bne.n	8003d50 <UART_DMAError+0x46>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d005      	beq.n	8003d50 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	2200      	movs	r2, #0
 8003d48:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8003d4a:	68b8      	ldr	r0, [r7, #8]
 8003d4c:	f000 f8c2 	bl	8003ed4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	695b      	ldr	r3, [r3, #20]
 8003d56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d5a:	2b40      	cmp	r3, #64	@ 0x40
 8003d5c:	bf0c      	ite	eq
 8003d5e:	2301      	moveq	r3, #1
 8003d60:	2300      	movne	r3, #0
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	2b22      	cmp	r3, #34	@ 0x22
 8003d70:	d108      	bne.n	8003d84 <UART_DMAError+0x7a>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d005      	beq.n	8003d84 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8003d7e:	68b8      	ldr	r0, [r7, #8]
 8003d80:	f000 f8d0 	bl	8003f24 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d88:	f043 0210 	orr.w	r2, r3, #16
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d90:	68b8      	ldr	r0, [r7, #8]
 8003d92:	f7ff fe95 	bl	8003ac0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d96:	bf00      	nop
 8003d98:	3710      	adds	r7, #16
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
	...

08003da0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b098      	sub	sp, #96	@ 0x60
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	4613      	mov	r3, r2
 8003dac:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003dae:	68ba      	ldr	r2, [r7, #8]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	88fa      	ldrh	r2, [r7, #6]
 8003db8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2222      	movs	r2, #34	@ 0x22
 8003dc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dcc:	4a3e      	ldr	r2, [pc, #248]	@ (8003ec8 <UART_Start_Receive_DMA+0x128>)
 8003dce:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dd4:	4a3d      	ldr	r2, [pc, #244]	@ (8003ecc <UART_Start_Receive_DMA+0x12c>)
 8003dd6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ddc:	4a3c      	ldr	r2, [pc, #240]	@ (8003ed0 <UART_Start_Receive_DMA+0x130>)
 8003dde:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003de4:	2200      	movs	r2, #0
 8003de6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003de8:	f107 0308 	add.w	r3, r7, #8
 8003dec:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	3304      	adds	r3, #4
 8003df8:	4619      	mov	r1, r3
 8003dfa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	88fb      	ldrh	r3, [r7, #6]
 8003e00:	f7fd fcf0 	bl	80017e4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003e04:	2300      	movs	r3, #0
 8003e06:	613b      	str	r3, [r7, #16]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	613b      	str	r3, [r7, #16]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	613b      	str	r3, [r7, #16]
 8003e18:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d019      	beq.n	8003e56 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	330c      	adds	r3, #12
 8003e28:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e2c:	e853 3f00 	ldrex	r3, [r3]
 8003e30:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003e32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e38:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	330c      	adds	r3, #12
 8003e40:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003e42:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003e44:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e46:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003e48:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003e4a:	e841 2300 	strex	r3, r2, [r1]
 8003e4e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003e50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d1e5      	bne.n	8003e22 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	3314      	adds	r3, #20
 8003e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e60:	e853 3f00 	ldrex	r3, [r3]
 8003e64:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e68:	f043 0301 	orr.w	r3, r3, #1
 8003e6c:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	3314      	adds	r3, #20
 8003e74:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003e76:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003e78:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e7a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003e7c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003e7e:	e841 2300 	strex	r3, r2, [r1]
 8003e82:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1e5      	bne.n	8003e56 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	3314      	adds	r3, #20
 8003e90:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	e853 3f00 	ldrex	r3, [r3]
 8003e98:	617b      	str	r3, [r7, #20]
   return(result);
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ea0:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	3314      	adds	r3, #20
 8003ea8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003eaa:	627a      	str	r2, [r7, #36]	@ 0x24
 8003eac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eae:	6a39      	ldr	r1, [r7, #32]
 8003eb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003eb2:	e841 2300 	strex	r3, r2, [r1]
 8003eb6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1e5      	bne.n	8003e8a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8003ebe:	2300      	movs	r3, #0
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3760      	adds	r7, #96	@ 0x60
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	08003ba3 	.word	0x08003ba3
 8003ecc:	08003ccf 	.word	0x08003ccf
 8003ed0:	08003d0b 	.word	0x08003d0b

08003ed4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b089      	sub	sp, #36	@ 0x24
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	330c      	adds	r3, #12
 8003ee2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	e853 3f00 	ldrex	r3, [r3]
 8003eea:	60bb      	str	r3, [r7, #8]
   return(result);
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003ef2:	61fb      	str	r3, [r7, #28]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	330c      	adds	r3, #12
 8003efa:	69fa      	ldr	r2, [r7, #28]
 8003efc:	61ba      	str	r2, [r7, #24]
 8003efe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f00:	6979      	ldr	r1, [r7, #20]
 8003f02:	69ba      	ldr	r2, [r7, #24]
 8003f04:	e841 2300 	strex	r3, r2, [r1]
 8003f08:	613b      	str	r3, [r7, #16]
   return(result);
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d1e5      	bne.n	8003edc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2220      	movs	r2, #32
 8003f14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8003f18:	bf00      	nop
 8003f1a:	3724      	adds	r7, #36	@ 0x24
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b095      	sub	sp, #84	@ 0x54
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	330c      	adds	r3, #12
 8003f32:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f36:	e853 3f00 	ldrex	r3, [r3]
 8003f3a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f3e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	330c      	adds	r3, #12
 8003f4a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003f4c:	643a      	str	r2, [r7, #64]	@ 0x40
 8003f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f50:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003f52:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003f54:	e841 2300 	strex	r3, r2, [r1]
 8003f58:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d1e5      	bne.n	8003f2c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	3314      	adds	r3, #20
 8003f66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f68:	6a3b      	ldr	r3, [r7, #32]
 8003f6a:	e853 3f00 	ldrex	r3, [r3]
 8003f6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	f023 0301 	bic.w	r3, r3, #1
 8003f76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	3314      	adds	r3, #20
 8003f7e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f80:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f82:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f88:	e841 2300 	strex	r3, r2, [r1]
 8003f8c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d1e5      	bne.n	8003f60 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d119      	bne.n	8003fd0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	330c      	adds	r3, #12
 8003fa2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	e853 3f00 	ldrex	r3, [r3]
 8003faa:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	f023 0310 	bic.w	r3, r3, #16
 8003fb2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	330c      	adds	r3, #12
 8003fba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003fbc:	61ba      	str	r2, [r7, #24]
 8003fbe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc0:	6979      	ldr	r1, [r7, #20]
 8003fc2:	69ba      	ldr	r2, [r7, #24]
 8003fc4:	e841 2300 	strex	r3, r2, [r1]
 8003fc8:	613b      	str	r3, [r7, #16]
   return(result);
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1e5      	bne.n	8003f9c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2220      	movs	r2, #32
 8003fd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003fde:	bf00      	nop
 8003fe0:	3754      	adds	r7, #84	@ 0x54
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr

08003fea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003fea:	b580      	push	{r7, lr}
 8003fec:	b084      	sub	sp, #16
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ff6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2200      	movs	r2, #0
 8004002:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004004:	68f8      	ldr	r0, [r7, #12]
 8004006:	f7ff fd5b 	bl	8003ac0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800400a:	bf00      	nop
 800400c:	3710      	adds	r7, #16
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}

08004012 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004012:	b480      	push	{r7}
 8004014:	b085      	sub	sp, #20
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004020:	b2db      	uxtb	r3, r3
 8004022:	2b21      	cmp	r3, #33	@ 0x21
 8004024:	d13e      	bne.n	80040a4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800402e:	d114      	bne.n	800405a <UART_Transmit_IT+0x48>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	691b      	ldr	r3, [r3, #16]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d110      	bne.n	800405a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6a1b      	ldr	r3, [r3, #32]
 800403c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	881b      	ldrh	r3, [r3, #0]
 8004042:	461a      	mov	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800404c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a1b      	ldr	r3, [r3, #32]
 8004052:	1c9a      	adds	r2, r3, #2
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	621a      	str	r2, [r3, #32]
 8004058:	e008      	b.n	800406c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a1b      	ldr	r3, [r3, #32]
 800405e:	1c59      	adds	r1, r3, #1
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	6211      	str	r1, [r2, #32]
 8004064:	781a      	ldrb	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004070:	b29b      	uxth	r3, r3
 8004072:	3b01      	subs	r3, #1
 8004074:	b29b      	uxth	r3, r3
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	4619      	mov	r1, r3
 800407a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800407c:	2b00      	cmp	r3, #0
 800407e:	d10f      	bne.n	80040a0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68da      	ldr	r2, [r3, #12]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800408e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68da      	ldr	r2, [r3, #12]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800409e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80040a0:	2300      	movs	r3, #0
 80040a2:	e000      	b.n	80040a6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80040a4:	2302      	movs	r3, #2
  }
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3714      	adds	r7, #20
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr

080040b2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b082      	sub	sp, #8
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68da      	ldr	r2, [r3, #12]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040c8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2220      	movs	r2, #32
 80040ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f7ff fcd6 	bl	8003a84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3708      	adds	r7, #8
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}

080040e2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80040e2:	b580      	push	{r7, lr}
 80040e4:	b08c      	sub	sp, #48	@ 0x30
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	2b22      	cmp	r3, #34	@ 0x22
 80040f4:	f040 80ae 	bne.w	8004254 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004100:	d117      	bne.n	8004132 <UART_Receive_IT+0x50>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d113      	bne.n	8004132 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800410a:	2300      	movs	r3, #0
 800410c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004112:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	b29b      	uxth	r3, r3
 800411c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004120:	b29a      	uxth	r2, r3
 8004122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004124:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800412a:	1c9a      	adds	r2, r3, #2
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004130:	e026      	b.n	8004180 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004136:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004138:	2300      	movs	r3, #0
 800413a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004144:	d007      	beq.n	8004156 <UART_Receive_IT+0x74>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d10a      	bne.n	8004164 <UART_Receive_IT+0x82>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d106      	bne.n	8004164 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	b2da      	uxtb	r2, r3
 800415e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004160:	701a      	strb	r2, [r3, #0]
 8004162:	e008      	b.n	8004176 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	b2db      	uxtb	r3, r3
 800416c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004170:	b2da      	uxtb	r2, r3
 8004172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004174:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800417a:	1c5a      	adds	r2, r3, #1
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004184:	b29b      	uxth	r3, r3
 8004186:	3b01      	subs	r3, #1
 8004188:	b29b      	uxth	r3, r3
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	4619      	mov	r1, r3
 800418e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004190:	2b00      	cmp	r3, #0
 8004192:	d15d      	bne.n	8004250 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68da      	ldr	r2, [r3, #12]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f022 0220 	bic.w	r2, r2, #32
 80041a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68da      	ldr	r2, [r3, #12]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80041b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	695a      	ldr	r2, [r3, #20]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f022 0201 	bic.w	r2, r2, #1
 80041c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2220      	movs	r2, #32
 80041c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d135      	bne.n	8004246 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	330c      	adds	r3, #12
 80041e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	e853 3f00 	ldrex	r3, [r3]
 80041ee:	613b      	str	r3, [r7, #16]
   return(result);
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	f023 0310 	bic.w	r3, r3, #16
 80041f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	330c      	adds	r3, #12
 80041fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004200:	623a      	str	r2, [r7, #32]
 8004202:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004204:	69f9      	ldr	r1, [r7, #28]
 8004206:	6a3a      	ldr	r2, [r7, #32]
 8004208:	e841 2300 	strex	r3, r2, [r1]
 800420c:	61bb      	str	r3, [r7, #24]
   return(result);
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d1e5      	bne.n	80041e0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0310 	and.w	r3, r3, #16
 800421e:	2b10      	cmp	r3, #16
 8004220:	d10a      	bne.n	8004238 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004222:	2300      	movs	r3, #0
 8004224:	60fb      	str	r3, [r7, #12]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	60fb      	str	r3, [r7, #12]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	60fb      	str	r3, [r7, #12]
 8004236:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800423c:	4619      	mov	r1, r3
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f7ff fc48 	bl	8003ad4 <HAL_UARTEx_RxEventCallback>
 8004244:	e002      	b.n	800424c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f7fc feb2 	bl	8000fb0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800424c:	2300      	movs	r3, #0
 800424e:	e002      	b.n	8004256 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004250:	2300      	movs	r3, #0
 8004252:	e000      	b.n	8004256 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004254:	2302      	movs	r3, #2
  }
}
 8004256:	4618      	mov	r0, r3
 8004258:	3730      	adds	r7, #48	@ 0x30
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
	...

08004260 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004260:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004264:	b0c0      	sub	sp, #256	@ 0x100
 8004266:	af00      	add	r7, sp, #0
 8004268:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800426c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800427c:	68d9      	ldr	r1, [r3, #12]
 800427e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	ea40 0301 	orr.w	r3, r0, r1
 8004288:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800428a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800428e:	689a      	ldr	r2, [r3, #8]
 8004290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	431a      	orrs	r2, r3
 8004298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	431a      	orrs	r2, r3
 80042a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042a4:	69db      	ldr	r3, [r3, #28]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80042ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80042b8:	f021 010c 	bic.w	r1, r1, #12
 80042bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80042c6:	430b      	orrs	r3, r1
 80042c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	695b      	ldr	r3, [r3, #20]
 80042d2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80042d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042da:	6999      	ldr	r1, [r3, #24]
 80042dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	ea40 0301 	orr.w	r3, r0, r1
 80042e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80042e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	4b8f      	ldr	r3, [pc, #572]	@ (800452c <UART_SetConfig+0x2cc>)
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d005      	beq.n	8004300 <UART_SetConfig+0xa0>
 80042f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	4b8d      	ldr	r3, [pc, #564]	@ (8004530 <UART_SetConfig+0x2d0>)
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d104      	bne.n	800430a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004300:	f7fe fbbe 	bl	8002a80 <HAL_RCC_GetPCLK2Freq>
 8004304:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004308:	e003      	b.n	8004312 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800430a:	f7fe fba5 	bl	8002a58 <HAL_RCC_GetPCLK1Freq>
 800430e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004316:	69db      	ldr	r3, [r3, #28]
 8004318:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800431c:	f040 810c 	bne.w	8004538 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004320:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004324:	2200      	movs	r2, #0
 8004326:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800432a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800432e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004332:	4622      	mov	r2, r4
 8004334:	462b      	mov	r3, r5
 8004336:	1891      	adds	r1, r2, r2
 8004338:	65b9      	str	r1, [r7, #88]	@ 0x58
 800433a:	415b      	adcs	r3, r3
 800433c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800433e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004342:	4621      	mov	r1, r4
 8004344:	eb12 0801 	adds.w	r8, r2, r1
 8004348:	4629      	mov	r1, r5
 800434a:	eb43 0901 	adc.w	r9, r3, r1
 800434e:	f04f 0200 	mov.w	r2, #0
 8004352:	f04f 0300 	mov.w	r3, #0
 8004356:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800435a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800435e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004362:	4690      	mov	r8, r2
 8004364:	4699      	mov	r9, r3
 8004366:	4623      	mov	r3, r4
 8004368:	eb18 0303 	adds.w	r3, r8, r3
 800436c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004370:	462b      	mov	r3, r5
 8004372:	eb49 0303 	adc.w	r3, r9, r3
 8004376:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800437a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004386:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800438a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800438e:	460b      	mov	r3, r1
 8004390:	18db      	adds	r3, r3, r3
 8004392:	653b      	str	r3, [r7, #80]	@ 0x50
 8004394:	4613      	mov	r3, r2
 8004396:	eb42 0303 	adc.w	r3, r2, r3
 800439a:	657b      	str	r3, [r7, #84]	@ 0x54
 800439c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80043a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80043a4:	f7fb ff10 	bl	80001c8 <__aeabi_uldivmod>
 80043a8:	4602      	mov	r2, r0
 80043aa:	460b      	mov	r3, r1
 80043ac:	4b61      	ldr	r3, [pc, #388]	@ (8004534 <UART_SetConfig+0x2d4>)
 80043ae:	fba3 2302 	umull	r2, r3, r3, r2
 80043b2:	095b      	lsrs	r3, r3, #5
 80043b4:	011c      	lsls	r4, r3, #4
 80043b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043ba:	2200      	movs	r2, #0
 80043bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80043c0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80043c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80043c8:	4642      	mov	r2, r8
 80043ca:	464b      	mov	r3, r9
 80043cc:	1891      	adds	r1, r2, r2
 80043ce:	64b9      	str	r1, [r7, #72]	@ 0x48
 80043d0:	415b      	adcs	r3, r3
 80043d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80043d8:	4641      	mov	r1, r8
 80043da:	eb12 0a01 	adds.w	sl, r2, r1
 80043de:	4649      	mov	r1, r9
 80043e0:	eb43 0b01 	adc.w	fp, r3, r1
 80043e4:	f04f 0200 	mov.w	r2, #0
 80043e8:	f04f 0300 	mov.w	r3, #0
 80043ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80043f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80043f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043f8:	4692      	mov	sl, r2
 80043fa:	469b      	mov	fp, r3
 80043fc:	4643      	mov	r3, r8
 80043fe:	eb1a 0303 	adds.w	r3, sl, r3
 8004402:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004406:	464b      	mov	r3, r9
 8004408:	eb4b 0303 	adc.w	r3, fp, r3
 800440c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800441c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004420:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004424:	460b      	mov	r3, r1
 8004426:	18db      	adds	r3, r3, r3
 8004428:	643b      	str	r3, [r7, #64]	@ 0x40
 800442a:	4613      	mov	r3, r2
 800442c:	eb42 0303 	adc.w	r3, r2, r3
 8004430:	647b      	str	r3, [r7, #68]	@ 0x44
 8004432:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004436:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800443a:	f7fb fec5 	bl	80001c8 <__aeabi_uldivmod>
 800443e:	4602      	mov	r2, r0
 8004440:	460b      	mov	r3, r1
 8004442:	4611      	mov	r1, r2
 8004444:	4b3b      	ldr	r3, [pc, #236]	@ (8004534 <UART_SetConfig+0x2d4>)
 8004446:	fba3 2301 	umull	r2, r3, r3, r1
 800444a:	095b      	lsrs	r3, r3, #5
 800444c:	2264      	movs	r2, #100	@ 0x64
 800444e:	fb02 f303 	mul.w	r3, r2, r3
 8004452:	1acb      	subs	r3, r1, r3
 8004454:	00db      	lsls	r3, r3, #3
 8004456:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800445a:	4b36      	ldr	r3, [pc, #216]	@ (8004534 <UART_SetConfig+0x2d4>)
 800445c:	fba3 2302 	umull	r2, r3, r3, r2
 8004460:	095b      	lsrs	r3, r3, #5
 8004462:	005b      	lsls	r3, r3, #1
 8004464:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004468:	441c      	add	r4, r3
 800446a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800446e:	2200      	movs	r2, #0
 8004470:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004474:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004478:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800447c:	4642      	mov	r2, r8
 800447e:	464b      	mov	r3, r9
 8004480:	1891      	adds	r1, r2, r2
 8004482:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004484:	415b      	adcs	r3, r3
 8004486:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004488:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800448c:	4641      	mov	r1, r8
 800448e:	1851      	adds	r1, r2, r1
 8004490:	6339      	str	r1, [r7, #48]	@ 0x30
 8004492:	4649      	mov	r1, r9
 8004494:	414b      	adcs	r3, r1
 8004496:	637b      	str	r3, [r7, #52]	@ 0x34
 8004498:	f04f 0200 	mov.w	r2, #0
 800449c:	f04f 0300 	mov.w	r3, #0
 80044a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80044a4:	4659      	mov	r1, fp
 80044a6:	00cb      	lsls	r3, r1, #3
 80044a8:	4651      	mov	r1, sl
 80044aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044ae:	4651      	mov	r1, sl
 80044b0:	00ca      	lsls	r2, r1, #3
 80044b2:	4610      	mov	r0, r2
 80044b4:	4619      	mov	r1, r3
 80044b6:	4603      	mov	r3, r0
 80044b8:	4642      	mov	r2, r8
 80044ba:	189b      	adds	r3, r3, r2
 80044bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80044c0:	464b      	mov	r3, r9
 80044c2:	460a      	mov	r2, r1
 80044c4:	eb42 0303 	adc.w	r3, r2, r3
 80044c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80044cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80044d8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80044dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80044e0:	460b      	mov	r3, r1
 80044e2:	18db      	adds	r3, r3, r3
 80044e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80044e6:	4613      	mov	r3, r2
 80044e8:	eb42 0303 	adc.w	r3, r2, r3
 80044ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80044f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80044f6:	f7fb fe67 	bl	80001c8 <__aeabi_uldivmod>
 80044fa:	4602      	mov	r2, r0
 80044fc:	460b      	mov	r3, r1
 80044fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004534 <UART_SetConfig+0x2d4>)
 8004500:	fba3 1302 	umull	r1, r3, r3, r2
 8004504:	095b      	lsrs	r3, r3, #5
 8004506:	2164      	movs	r1, #100	@ 0x64
 8004508:	fb01 f303 	mul.w	r3, r1, r3
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	00db      	lsls	r3, r3, #3
 8004510:	3332      	adds	r3, #50	@ 0x32
 8004512:	4a08      	ldr	r2, [pc, #32]	@ (8004534 <UART_SetConfig+0x2d4>)
 8004514:	fba2 2303 	umull	r2, r3, r2, r3
 8004518:	095b      	lsrs	r3, r3, #5
 800451a:	f003 0207 	and.w	r2, r3, #7
 800451e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4422      	add	r2, r4
 8004526:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004528:	e106      	b.n	8004738 <UART_SetConfig+0x4d8>
 800452a:	bf00      	nop
 800452c:	40011000 	.word	0x40011000
 8004530:	40011400 	.word	0x40011400
 8004534:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004538:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800453c:	2200      	movs	r2, #0
 800453e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004542:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004546:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800454a:	4642      	mov	r2, r8
 800454c:	464b      	mov	r3, r9
 800454e:	1891      	adds	r1, r2, r2
 8004550:	6239      	str	r1, [r7, #32]
 8004552:	415b      	adcs	r3, r3
 8004554:	627b      	str	r3, [r7, #36]	@ 0x24
 8004556:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800455a:	4641      	mov	r1, r8
 800455c:	1854      	adds	r4, r2, r1
 800455e:	4649      	mov	r1, r9
 8004560:	eb43 0501 	adc.w	r5, r3, r1
 8004564:	f04f 0200 	mov.w	r2, #0
 8004568:	f04f 0300 	mov.w	r3, #0
 800456c:	00eb      	lsls	r3, r5, #3
 800456e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004572:	00e2      	lsls	r2, r4, #3
 8004574:	4614      	mov	r4, r2
 8004576:	461d      	mov	r5, r3
 8004578:	4643      	mov	r3, r8
 800457a:	18e3      	adds	r3, r4, r3
 800457c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004580:	464b      	mov	r3, r9
 8004582:	eb45 0303 	adc.w	r3, r5, r3
 8004586:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800458a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004596:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800459a:	f04f 0200 	mov.w	r2, #0
 800459e:	f04f 0300 	mov.w	r3, #0
 80045a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80045a6:	4629      	mov	r1, r5
 80045a8:	008b      	lsls	r3, r1, #2
 80045aa:	4621      	mov	r1, r4
 80045ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045b0:	4621      	mov	r1, r4
 80045b2:	008a      	lsls	r2, r1, #2
 80045b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80045b8:	f7fb fe06 	bl	80001c8 <__aeabi_uldivmod>
 80045bc:	4602      	mov	r2, r0
 80045be:	460b      	mov	r3, r1
 80045c0:	4b60      	ldr	r3, [pc, #384]	@ (8004744 <UART_SetConfig+0x4e4>)
 80045c2:	fba3 2302 	umull	r2, r3, r3, r2
 80045c6:	095b      	lsrs	r3, r3, #5
 80045c8:	011c      	lsls	r4, r3, #4
 80045ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045ce:	2200      	movs	r2, #0
 80045d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80045d4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80045d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80045dc:	4642      	mov	r2, r8
 80045de:	464b      	mov	r3, r9
 80045e0:	1891      	adds	r1, r2, r2
 80045e2:	61b9      	str	r1, [r7, #24]
 80045e4:	415b      	adcs	r3, r3
 80045e6:	61fb      	str	r3, [r7, #28]
 80045e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045ec:	4641      	mov	r1, r8
 80045ee:	1851      	adds	r1, r2, r1
 80045f0:	6139      	str	r1, [r7, #16]
 80045f2:	4649      	mov	r1, r9
 80045f4:	414b      	adcs	r3, r1
 80045f6:	617b      	str	r3, [r7, #20]
 80045f8:	f04f 0200 	mov.w	r2, #0
 80045fc:	f04f 0300 	mov.w	r3, #0
 8004600:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004604:	4659      	mov	r1, fp
 8004606:	00cb      	lsls	r3, r1, #3
 8004608:	4651      	mov	r1, sl
 800460a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800460e:	4651      	mov	r1, sl
 8004610:	00ca      	lsls	r2, r1, #3
 8004612:	4610      	mov	r0, r2
 8004614:	4619      	mov	r1, r3
 8004616:	4603      	mov	r3, r0
 8004618:	4642      	mov	r2, r8
 800461a:	189b      	adds	r3, r3, r2
 800461c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004620:	464b      	mov	r3, r9
 8004622:	460a      	mov	r2, r1
 8004624:	eb42 0303 	adc.w	r3, r2, r3
 8004628:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800462c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004636:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004638:	f04f 0200 	mov.w	r2, #0
 800463c:	f04f 0300 	mov.w	r3, #0
 8004640:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004644:	4649      	mov	r1, r9
 8004646:	008b      	lsls	r3, r1, #2
 8004648:	4641      	mov	r1, r8
 800464a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800464e:	4641      	mov	r1, r8
 8004650:	008a      	lsls	r2, r1, #2
 8004652:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004656:	f7fb fdb7 	bl	80001c8 <__aeabi_uldivmod>
 800465a:	4602      	mov	r2, r0
 800465c:	460b      	mov	r3, r1
 800465e:	4611      	mov	r1, r2
 8004660:	4b38      	ldr	r3, [pc, #224]	@ (8004744 <UART_SetConfig+0x4e4>)
 8004662:	fba3 2301 	umull	r2, r3, r3, r1
 8004666:	095b      	lsrs	r3, r3, #5
 8004668:	2264      	movs	r2, #100	@ 0x64
 800466a:	fb02 f303 	mul.w	r3, r2, r3
 800466e:	1acb      	subs	r3, r1, r3
 8004670:	011b      	lsls	r3, r3, #4
 8004672:	3332      	adds	r3, #50	@ 0x32
 8004674:	4a33      	ldr	r2, [pc, #204]	@ (8004744 <UART_SetConfig+0x4e4>)
 8004676:	fba2 2303 	umull	r2, r3, r2, r3
 800467a:	095b      	lsrs	r3, r3, #5
 800467c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004680:	441c      	add	r4, r3
 8004682:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004686:	2200      	movs	r2, #0
 8004688:	673b      	str	r3, [r7, #112]	@ 0x70
 800468a:	677a      	str	r2, [r7, #116]	@ 0x74
 800468c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004690:	4642      	mov	r2, r8
 8004692:	464b      	mov	r3, r9
 8004694:	1891      	adds	r1, r2, r2
 8004696:	60b9      	str	r1, [r7, #8]
 8004698:	415b      	adcs	r3, r3
 800469a:	60fb      	str	r3, [r7, #12]
 800469c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046a0:	4641      	mov	r1, r8
 80046a2:	1851      	adds	r1, r2, r1
 80046a4:	6039      	str	r1, [r7, #0]
 80046a6:	4649      	mov	r1, r9
 80046a8:	414b      	adcs	r3, r1
 80046aa:	607b      	str	r3, [r7, #4]
 80046ac:	f04f 0200 	mov.w	r2, #0
 80046b0:	f04f 0300 	mov.w	r3, #0
 80046b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80046b8:	4659      	mov	r1, fp
 80046ba:	00cb      	lsls	r3, r1, #3
 80046bc:	4651      	mov	r1, sl
 80046be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046c2:	4651      	mov	r1, sl
 80046c4:	00ca      	lsls	r2, r1, #3
 80046c6:	4610      	mov	r0, r2
 80046c8:	4619      	mov	r1, r3
 80046ca:	4603      	mov	r3, r0
 80046cc:	4642      	mov	r2, r8
 80046ce:	189b      	adds	r3, r3, r2
 80046d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80046d2:	464b      	mov	r3, r9
 80046d4:	460a      	mov	r2, r1
 80046d6:	eb42 0303 	adc.w	r3, r2, r3
 80046da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80046dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	663b      	str	r3, [r7, #96]	@ 0x60
 80046e6:	667a      	str	r2, [r7, #100]	@ 0x64
 80046e8:	f04f 0200 	mov.w	r2, #0
 80046ec:	f04f 0300 	mov.w	r3, #0
 80046f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80046f4:	4649      	mov	r1, r9
 80046f6:	008b      	lsls	r3, r1, #2
 80046f8:	4641      	mov	r1, r8
 80046fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046fe:	4641      	mov	r1, r8
 8004700:	008a      	lsls	r2, r1, #2
 8004702:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004706:	f7fb fd5f 	bl	80001c8 <__aeabi_uldivmod>
 800470a:	4602      	mov	r2, r0
 800470c:	460b      	mov	r3, r1
 800470e:	4b0d      	ldr	r3, [pc, #52]	@ (8004744 <UART_SetConfig+0x4e4>)
 8004710:	fba3 1302 	umull	r1, r3, r3, r2
 8004714:	095b      	lsrs	r3, r3, #5
 8004716:	2164      	movs	r1, #100	@ 0x64
 8004718:	fb01 f303 	mul.w	r3, r1, r3
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	011b      	lsls	r3, r3, #4
 8004720:	3332      	adds	r3, #50	@ 0x32
 8004722:	4a08      	ldr	r2, [pc, #32]	@ (8004744 <UART_SetConfig+0x4e4>)
 8004724:	fba2 2303 	umull	r2, r3, r2, r3
 8004728:	095b      	lsrs	r3, r3, #5
 800472a:	f003 020f 	and.w	r2, r3, #15
 800472e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4422      	add	r2, r4
 8004736:	609a      	str	r2, [r3, #8]
}
 8004738:	bf00      	nop
 800473a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800473e:	46bd      	mov	sp, r7
 8004740:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004744:	51eb851f 	.word	0x51eb851f

08004748 <memset>:
 8004748:	4402      	add	r2, r0
 800474a:	4603      	mov	r3, r0
 800474c:	4293      	cmp	r3, r2
 800474e:	d100      	bne.n	8004752 <memset+0xa>
 8004750:	4770      	bx	lr
 8004752:	f803 1b01 	strb.w	r1, [r3], #1
 8004756:	e7f9      	b.n	800474c <memset+0x4>

08004758 <__libc_init_array>:
 8004758:	b570      	push	{r4, r5, r6, lr}
 800475a:	4d0d      	ldr	r5, [pc, #52]	@ (8004790 <__libc_init_array+0x38>)
 800475c:	4c0d      	ldr	r4, [pc, #52]	@ (8004794 <__libc_init_array+0x3c>)
 800475e:	1b64      	subs	r4, r4, r5
 8004760:	10a4      	asrs	r4, r4, #2
 8004762:	2600      	movs	r6, #0
 8004764:	42a6      	cmp	r6, r4
 8004766:	d109      	bne.n	800477c <__libc_init_array+0x24>
 8004768:	4d0b      	ldr	r5, [pc, #44]	@ (8004798 <__libc_init_array+0x40>)
 800476a:	4c0c      	ldr	r4, [pc, #48]	@ (800479c <__libc_init_array+0x44>)
 800476c:	f000 f818 	bl	80047a0 <_init>
 8004770:	1b64      	subs	r4, r4, r5
 8004772:	10a4      	asrs	r4, r4, #2
 8004774:	2600      	movs	r6, #0
 8004776:	42a6      	cmp	r6, r4
 8004778:	d105      	bne.n	8004786 <__libc_init_array+0x2e>
 800477a:	bd70      	pop	{r4, r5, r6, pc}
 800477c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004780:	4798      	blx	r3
 8004782:	3601      	adds	r6, #1
 8004784:	e7ee      	b.n	8004764 <__libc_init_array+0xc>
 8004786:	f855 3b04 	ldr.w	r3, [r5], #4
 800478a:	4798      	blx	r3
 800478c:	3601      	adds	r6, #1
 800478e:	e7f2      	b.n	8004776 <__libc_init_array+0x1e>
 8004790:	080047e0 	.word	0x080047e0
 8004794:	080047e0 	.word	0x080047e0
 8004798:	080047e0 	.word	0x080047e0
 800479c:	080047e4 	.word	0x080047e4

080047a0 <_init>:
 80047a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047a2:	bf00      	nop
 80047a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047a6:	bc08      	pop	{r3}
 80047a8:	469e      	mov	lr, r3
 80047aa:	4770      	bx	lr

080047ac <_fini>:
 80047ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ae:	bf00      	nop
 80047b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047b2:	bc08      	pop	{r3}
 80047b4:	469e      	mov	lr, r3
 80047b6:	4770      	bx	lr
