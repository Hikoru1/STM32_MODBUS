
017_PETIT_MODBUS_LIB_IMPORT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000549c  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005674  08005674  00006674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056b4  080056b4  00007018  2**0
                  CONTENTS
  4 .ARM          00000008  080056b4  080056b4  000066b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056bc  080056bc  00007018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056bc  080056bc  000066bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080056c0  080056c0  000066c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  080056c4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ac  20000018  080056dc  00007018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  080056dc  000072c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007018  2**0
                  CONTENTS, READONLY
 12 .debug_info   000138db  00000000  00000000  00007048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000292f  00000000  00000000  0001a923  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001150  00000000  00000000  0001d258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d73  00000000  00000000  0001e3a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025afb  00000000  00000000  0001f11b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013ec8  00000000  00000000  00044c16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f85d4  00000000  00000000  00058ade  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001510b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048c0  00000000  00000000  001510f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  001559b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000018 	.word	0x20000018
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800565c 	.word	0x0800565c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000001c 	.word	0x2000001c
 8000214:	0800565c 	.word	0x0800565c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <Petit_CRC16>:
 * @param[in]           : Data  - Data to Calculate CRC
 * @param[in/out]       : CRC   - Anlik CRC degeri
 * @How to use          : First initial data has to be 0xFFFF.
 */
void Petit_CRC16(const unsigned char Data_Petit, unsigned int* CRC_Petit)
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	6039      	str	r1, [r7, #0]
 8000512:	71fb      	strb	r3, [r7, #7]
    unsigned int i;

    *CRC_Petit = *CRC_Petit ^(unsigned int) Data_Petit;
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	681a      	ldr	r2, [r3, #0]
 8000518:	79fb      	ldrb	r3, [r7, #7]
 800051a:	405a      	eors	r2, r3
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	601a      	str	r2, [r3, #0]
    for (i = 8; i > 0; i--)
 8000520:	2308      	movs	r3, #8
 8000522:	60fb      	str	r3, [r7, #12]
 8000524:	e017      	b.n	8000556 <Petit_CRC16+0x4e>
    {
        if (*CRC_Petit & 0x0001)
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	f003 0301 	and.w	r3, r3, #1
 800052e:	2b00      	cmp	r3, #0
 8000530:	d009      	beq.n	8000546 <Petit_CRC16+0x3e>
            *CRC_Petit = (*CRC_Petit >> 1) ^ 0xA001;
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	085b      	lsrs	r3, r3, #1
 8000538:	f483 4320 	eor.w	r3, r3, #40960	@ 0xa000
 800053c:	f083 0301 	eor.w	r3, r3, #1
 8000540:	683a      	ldr	r2, [r7, #0]
 8000542:	6013      	str	r3, [r2, #0]
 8000544:	e004      	b.n	8000550 <Petit_CRC16+0x48>
        else
            *CRC_Petit >>= 1;
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	085a      	lsrs	r2, r3, #1
 800054c:	683b      	ldr	r3, [r7, #0]
 800054e:	601a      	str	r2, [r3, #0]
    for (i = 8; i > 0; i--)
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	3b01      	subs	r3, #1
 8000554:	60fb      	str	r3, [r7, #12]
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	2b00      	cmp	r3, #0
 800055a:	d1e4      	bne.n	8000526 <Petit_CRC16+0x1e>
    }
}
 800055c:	bf00      	nop
 800055e:	bf00      	nop
 8000560:	3714      	adds	r7, #20
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
	...

0800056c <Petit_DoSlaveTX>:
 * Function Name        : DoTx
 * @param[out]          : TRUE
 * @How to use          : It is used for send data package over physical layer
 */
unsigned char Petit_DoSlaveTX(void)
{  
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0

    HAL_UART_Transmit_DMA(&huart2, Petit_Tx_Buf, Petit_Tx_Buf_Size);
 8000570:	4b06      	ldr	r3, [pc, #24]	@ (800058c <Petit_DoSlaveTX+0x20>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	b29b      	uxth	r3, r3
 8000576:	461a      	mov	r2, r3
 8000578:	4905      	ldr	r1, [pc, #20]	@ (8000590 <Petit_DoSlaveTX+0x24>)
 800057a:	4806      	ldr	r0, [pc, #24]	@ (8000594 <Petit_DoSlaveTX+0x28>)
 800057c:	f003 fb4a 	bl	8003c14 <HAL_UART_Transmit_DMA>

    Petit_Tx_Buf_Size = 0;
 8000580:	4b02      	ldr	r3, [pc, #8]	@ (800058c <Petit_DoSlaveTX+0x20>)
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
    return TRUE;
 8000586:	2301      	movs	r3, #1
}
 8000588:	4618      	mov	r0, r3
 800058a:	bd80      	pop	{r7, pc}
 800058c:	20000078 	.word	0x20000078
 8000590:	2000005c 	.word	0x2000005c
 8000594:	2000016c 	.word	0x2000016c

08000598 <PetitSendMessage>:
 * Function Name        : SendMessage
 * @param[out]          : TRUE/FALSE
 * @How to use          : This function start to sending messages
 */
unsigned char PetitSendMessage(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
    if (Petit_Tx_State != PETIT_RXTX_IDLE)
 800059c:	4b08      	ldr	r3, [pc, #32]	@ (80005c0 <PetitSendMessage+0x28>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <PetitSendMessage+0x10>
        return FALSE;
 80005a4:	2300      	movs	r3, #0
 80005a6:	e006      	b.n	80005b6 <PetitSendMessage+0x1e>

    Petit_Tx_Current  =0;
 80005a8:	4b06      	ldr	r3, [pc, #24]	@ (80005c4 <PetitSendMessage+0x2c>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
    Petit_Tx_State    =PETIT_RXTX_START;
 80005ae:	4b04      	ldr	r3, [pc, #16]	@ (80005c0 <PetitSendMessage+0x28>)
 80005b0:	2201      	movs	r2, #1
 80005b2:	701a      	strb	r2, [r3, #0]

    return TRUE;
 80005b4:	2301      	movs	r3, #1
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr
 80005c0:	20000058 	.word	0x20000058
 80005c4:	20000054 	.word	0x20000054

080005c8 <HandlePetitModbusError>:
/*
 * Function Name        : HandleModbusError
 * @How to use          : This function generated errors to Modbus Master
 */
void HandlePetitModbusError(char ErrorCode)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	71fb      	strb	r3, [r7, #7]
    // Initialise the output buffer. The first byte in the buffer says how many registers we have read
    Petit_Tx_Data.Function    = Petit_Rx_Data.Function | 0x80;
 80005d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000600 <HandlePetitModbusError+0x38>)
 80005d4:	785b      	ldrb	r3, [r3, #1]
 80005d6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80005da:	b2da      	uxtb	r2, r3
 80005dc:	4b09      	ldr	r3, [pc, #36]	@ (8000604 <HandlePetitModbusError+0x3c>)
 80005de:	705a      	strb	r2, [r3, #1]
    Petit_Tx_Data.Address     = PETITMODBUS_SLAVE_ADDRESS;
 80005e0:	4b09      	ldr	r3, [pc, #36]	@ (8000608 <HandlePetitModbusError+0x40>)
 80005e2:	781a      	ldrb	r2, [r3, #0]
 80005e4:	4b07      	ldr	r3, [pc, #28]	@ (8000604 <HandlePetitModbusError+0x3c>)
 80005e6:	701a      	strb	r2, [r3, #0]
    Petit_Tx_Data.DataLen     = 1;
 80005e8:	4b06      	ldr	r3, [pc, #24]	@ (8000604 <HandlePetitModbusError+0x3c>)
 80005ea:	2201      	movs	r2, #1
 80005ec:	839a      	strh	r2, [r3, #28]
    Petit_Tx_Data.DataBuf[0]  = ErrorCode;
 80005ee:	4a05      	ldr	r2, [pc, #20]	@ (8000604 <HandlePetitModbusError+0x3c>)
 80005f0:	79fb      	ldrb	r3, [r7, #7]
 80005f2:	7093      	strb	r3, [r2, #2]
    PetitSendMessage();
 80005f4:	f7ff ffd0 	bl	8000598 <PetitSendMessage>
}
 80005f8:	bf00      	nop
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	2000007c 	.word	0x2000007c
 8000604:	20000034 	.word	0x20000034
 8000608:	20000000 	.word	0x20000000

0800060c <HandlePetitModbusReadHoldingRegisters>:
 * Function Name        : HandleModbusReadHoldingRegisters
 * @How to use          : Modbus function 03 - Read holding registers
 */
#if PETITMODBUS_READ_HOLDING_REGISTERS_ENABLED > 0
void HandlePetitModbusReadHoldingRegisters(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
    // Holding registers are effectively numerical outputs that can be written to by the host.
    // They can be control registers or analogue outputs.
    // We potientially have one - the pwm output value
    unsigned int    Petit_StartAddress        = 0;
 8000612:	2300      	movs	r3, #0
 8000614:	60bb      	str	r3, [r7, #8]
    unsigned int    Petit_NumberOfRegisters   = 0;
 8000616:	2300      	movs	r3, #0
 8000618:	607b      	str	r3, [r7, #4]
    unsigned int    Petit_i                   = 0;
 800061a:	2300      	movs	r3, #0
 800061c:	60fb      	str	r3, [r7, #12]

    // The message contains the requested start address and number of registers
    Petit_StartAddress        = ((unsigned int) (Petit_Rx_Data.DataBuf[0]) << 8) + (unsigned int) (Petit_Rx_Data.DataBuf[1]);
 800061e:	4b2d      	ldr	r3, [pc, #180]	@ (80006d4 <HandlePetitModbusReadHoldingRegisters+0xc8>)
 8000620:	789b      	ldrb	r3, [r3, #2]
 8000622:	021b      	lsls	r3, r3, #8
 8000624:	4a2b      	ldr	r2, [pc, #172]	@ (80006d4 <HandlePetitModbusReadHoldingRegisters+0xc8>)
 8000626:	78d2      	ldrb	r2, [r2, #3]
 8000628:	4413      	add	r3, r2
 800062a:	60bb      	str	r3, [r7, #8]
    Petit_NumberOfRegisters   = ((unsigned int) (Petit_Rx_Data.DataBuf[2]) << 8) + (unsigned int) (Petit_Rx_Data.DataBuf[3]);
 800062c:	4b29      	ldr	r3, [pc, #164]	@ (80006d4 <HandlePetitModbusReadHoldingRegisters+0xc8>)
 800062e:	791b      	ldrb	r3, [r3, #4]
 8000630:	021b      	lsls	r3, r3, #8
 8000632:	4a28      	ldr	r2, [pc, #160]	@ (80006d4 <HandlePetitModbusReadHoldingRegisters+0xc8>)
 8000634:	7952      	ldrb	r2, [r2, #5]
 8000636:	4413      	add	r3, r2
 8000638:	607b      	str	r3, [r7, #4]

    // If it is bigger than RegisterNumber return error to Modbus Master
    if((Petit_StartAddress+Petit_NumberOfRegisters)>NUMBER_OF_OUTPUT_PETITREGISTERS)
 800063a:	68ba      	ldr	r2, [r7, #8]
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	4413      	add	r3, r2
 8000640:	2b0a      	cmp	r3, #10
 8000642:	d903      	bls.n	800064c <HandlePetitModbusReadHoldingRegisters+0x40>
        HandlePetitModbusError(PETIT_ERROR_CODE_02);
 8000644:	2002      	movs	r0, #2
 8000646:	f7ff ffbf 	bl	80005c8 <HandlePetitModbusError>
            Petit_Tx_Data.DataBuf[0]                      = Petit_Tx_Data.DataLen - 1;
        }

        PetitSendMessage();
    }
}
 800064a:	e03f      	b.n	80006cc <HandlePetitModbusReadHoldingRegisters+0xc0>
        Petit_Tx_Data.Function    = PETITMODBUS_READ_HOLDING_REGISTERS;
 800064c:	4b22      	ldr	r3, [pc, #136]	@ (80006d8 <HandlePetitModbusReadHoldingRegisters+0xcc>)
 800064e:	2203      	movs	r2, #3
 8000650:	705a      	strb	r2, [r3, #1]
        Petit_Tx_Data.Address     = PETITMODBUS_SLAVE_ADDRESS;
 8000652:	4b22      	ldr	r3, [pc, #136]	@ (80006dc <HandlePetitModbusReadHoldingRegisters+0xd0>)
 8000654:	781a      	ldrb	r2, [r3, #0]
 8000656:	4b20      	ldr	r3, [pc, #128]	@ (80006d8 <HandlePetitModbusReadHoldingRegisters+0xcc>)
 8000658:	701a      	strb	r2, [r3, #0]
        Petit_Tx_Data.DataLen     = 1;
 800065a:	4b1f      	ldr	r3, [pc, #124]	@ (80006d8 <HandlePetitModbusReadHoldingRegisters+0xcc>)
 800065c:	2201      	movs	r2, #1
 800065e:	839a      	strh	r2, [r3, #28]
        Petit_Tx_Data.DataBuf[0]  = 0;
 8000660:	4b1d      	ldr	r3, [pc, #116]	@ (80006d8 <HandlePetitModbusReadHoldingRegisters+0xcc>)
 8000662:	2200      	movs	r2, #0
 8000664:	709a      	strb	r2, [r3, #2]
        for (Petit_i = 0; Petit_i < Petit_NumberOfRegisters; Petit_i++)
 8000666:	2300      	movs	r3, #0
 8000668:	60fb      	str	r3, [r7, #12]
 800066a:	e029      	b.n	80006c0 <HandlePetitModbusReadHoldingRegisters+0xb4>
            unsigned short Petit_CurrentData = PetitRegisters[Petit_StartAddress+Petit_i].ActValue;
 800066c:	68ba      	ldr	r2, [r7, #8]
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	4413      	add	r3, r2
 8000672:	4a1b      	ldr	r2, [pc, #108]	@ (80006e0 <HandlePetitModbusReadHoldingRegisters+0xd4>)
 8000674:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000678:	807b      	strh	r3, [r7, #2]
            Petit_Tx_Data.DataBuf[Petit_Tx_Data.DataLen]        = (unsigned char) ((Petit_CurrentData & 0xFF00) >> 8);
 800067a:	887b      	ldrh	r3, [r7, #2]
 800067c:	0a1b      	lsrs	r3, r3, #8
 800067e:	b29a      	uxth	r2, r3
 8000680:	4b15      	ldr	r3, [pc, #84]	@ (80006d8 <HandlePetitModbusReadHoldingRegisters+0xcc>)
 8000682:	8b9b      	ldrh	r3, [r3, #28]
 8000684:	4619      	mov	r1, r3
 8000686:	b2d2      	uxtb	r2, r2
 8000688:	4b13      	ldr	r3, [pc, #76]	@ (80006d8 <HandlePetitModbusReadHoldingRegisters+0xcc>)
 800068a:	440b      	add	r3, r1
 800068c:	709a      	strb	r2, [r3, #2]
            Petit_Tx_Data.DataBuf[Petit_Tx_Data.DataLen + 1]    = (unsigned char) (Petit_CurrentData & 0xFF);
 800068e:	4b12      	ldr	r3, [pc, #72]	@ (80006d8 <HandlePetitModbusReadHoldingRegisters+0xcc>)
 8000690:	8b9b      	ldrh	r3, [r3, #28]
 8000692:	3301      	adds	r3, #1
 8000694:	887a      	ldrh	r2, [r7, #2]
 8000696:	b2d1      	uxtb	r1, r2
 8000698:	4a0f      	ldr	r2, [pc, #60]	@ (80006d8 <HandlePetitModbusReadHoldingRegisters+0xcc>)
 800069a:	4413      	add	r3, r2
 800069c:	460a      	mov	r2, r1
 800069e:	709a      	strb	r2, [r3, #2]
            Petit_Tx_Data.DataLen                        += 2;
 80006a0:	4b0d      	ldr	r3, [pc, #52]	@ (80006d8 <HandlePetitModbusReadHoldingRegisters+0xcc>)
 80006a2:	8b9b      	ldrh	r3, [r3, #28]
 80006a4:	3302      	adds	r3, #2
 80006a6:	b29a      	uxth	r2, r3
 80006a8:	4b0b      	ldr	r3, [pc, #44]	@ (80006d8 <HandlePetitModbusReadHoldingRegisters+0xcc>)
 80006aa:	839a      	strh	r2, [r3, #28]
            Petit_Tx_Data.DataBuf[0]                      = Petit_Tx_Data.DataLen - 1;
 80006ac:	4b0a      	ldr	r3, [pc, #40]	@ (80006d8 <HandlePetitModbusReadHoldingRegisters+0xcc>)
 80006ae:	8b9b      	ldrh	r3, [r3, #28]
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	3b01      	subs	r3, #1
 80006b4:	b2da      	uxtb	r2, r3
 80006b6:	4b08      	ldr	r3, [pc, #32]	@ (80006d8 <HandlePetitModbusReadHoldingRegisters+0xcc>)
 80006b8:	709a      	strb	r2, [r3, #2]
        for (Petit_i = 0; Petit_i < Petit_NumberOfRegisters; Petit_i++)
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	3301      	adds	r3, #1
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	68fa      	ldr	r2, [r7, #12]
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	429a      	cmp	r2, r3
 80006c6:	d3d1      	bcc.n	800066c <HandlePetitModbusReadHoldingRegisters+0x60>
        PetitSendMessage();
 80006c8:	f7ff ff66 	bl	8000598 <PetitSendMessage>
}
 80006cc:	bf00      	nop
 80006ce:	3710      	adds	r7, #16
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	2000007c 	.word	0x2000007c
 80006d8:	20000034 	.word	0x20000034
 80006dc:	20000000 	.word	0x20000000
 80006e0:	200000bc 	.word	0x200000bc

080006e4 <HandlePetitModbusWriteSingleRegister>:
 * Function Name        : HandleModbusReadInputRegisters
 * @How to use          : Modbus function 06 - Write single register
 */
#if PETITMODBUSWRITE_SINGLE_REGISTER_ENABLED > 0
void HandlePetitModbusWriteSingleRegister(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
    // Write single numerical output
    unsigned int    Petit_Address   = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	60bb      	str	r3, [r7, #8]
    unsigned int    Petit_Value     = 0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	607b      	str	r3, [r7, #4]
    unsigned char   Petit_i         = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	73fb      	strb	r3, [r7, #15]

    // The message contains the requested start address and number of registers
    Petit_Address   = ((unsigned int) (Petit_Rx_Data.DataBuf[0]) << 8) + (unsigned int) (Petit_Rx_Data.DataBuf[1]);
 80006f6:	4b1e      	ldr	r3, [pc, #120]	@ (8000770 <HandlePetitModbusWriteSingleRegister+0x8c>)
 80006f8:	789b      	ldrb	r3, [r3, #2]
 80006fa:	021b      	lsls	r3, r3, #8
 80006fc:	4a1c      	ldr	r2, [pc, #112]	@ (8000770 <HandlePetitModbusWriteSingleRegister+0x8c>)
 80006fe:	78d2      	ldrb	r2, [r2, #3]
 8000700:	4413      	add	r3, r2
 8000702:	60bb      	str	r3, [r7, #8]
    Petit_Value     = ((unsigned int) (Petit_Rx_Data.DataBuf[2]) << 8) + (unsigned int) (Petit_Rx_Data.DataBuf[3]);
 8000704:	4b1a      	ldr	r3, [pc, #104]	@ (8000770 <HandlePetitModbusWriteSingleRegister+0x8c>)
 8000706:	791b      	ldrb	r3, [r3, #4]
 8000708:	021b      	lsls	r3, r3, #8
 800070a:	4a19      	ldr	r2, [pc, #100]	@ (8000770 <HandlePetitModbusWriteSingleRegister+0x8c>)
 800070c:	7952      	ldrb	r2, [r2, #5]
 800070e:	4413      	add	r3, r2
 8000710:	607b      	str	r3, [r7, #4]

    // Initialise the output buffer. The first byte in the buffer says how many registers we have read
    Petit_Tx_Data.Function    = PETITMODBUS_WRITE_SINGLE_REGISTER;
 8000712:	4b18      	ldr	r3, [pc, #96]	@ (8000774 <HandlePetitModbusWriteSingleRegister+0x90>)
 8000714:	2206      	movs	r2, #6
 8000716:	705a      	strb	r2, [r3, #1]
    Petit_Tx_Data.Address     = PETITMODBUS_SLAVE_ADDRESS;
 8000718:	4b17      	ldr	r3, [pc, #92]	@ (8000778 <HandlePetitModbusWriteSingleRegister+0x94>)
 800071a:	781a      	ldrb	r2, [r3, #0]
 800071c:	4b15      	ldr	r3, [pc, #84]	@ (8000774 <HandlePetitModbusWriteSingleRegister+0x90>)
 800071e:	701a      	strb	r2, [r3, #0]
    Petit_Tx_Data.DataLen     = 4;
 8000720:	4b14      	ldr	r3, [pc, #80]	@ (8000774 <HandlePetitModbusWriteSingleRegister+0x90>)
 8000722:	2204      	movs	r2, #4
 8000724:	839a      	strh	r2, [r3, #28]

    if(Petit_Address>=NUMBER_OF_OUTPUT_PETITREGISTERS)
 8000726:	68bb      	ldr	r3, [r7, #8]
 8000728:	2b09      	cmp	r3, #9
 800072a:	d903      	bls.n	8000734 <HandlePetitModbusWriteSingleRegister+0x50>
        HandlePetitModbusError(PETIT_ERROR_CODE_02);
 800072c:	2002      	movs	r0, #2
 800072e:	f7ff ff4b 	bl	80005c8 <HandlePetitModbusError>
 8000732:	e017      	b.n	8000764 <HandlePetitModbusWriteSingleRegister+0x80>
    else
    {
        PetitRegisters[Petit_Address].ActValue=Petit_Value;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	b219      	sxth	r1, r3
 8000738:	4a10      	ldr	r2, [pc, #64]	@ (800077c <HandlePetitModbusWriteSingleRegister+0x98>)
 800073a:	68bb      	ldr	r3, [r7, #8]
 800073c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        // Output data buffer is exact copy of input buffer
        for (Petit_i = 0; Petit_i < 4; ++Petit_i)
 8000740:	2300      	movs	r3, #0
 8000742:	73fb      	strb	r3, [r7, #15]
 8000744:	e00b      	b.n	800075e <HandlePetitModbusWriteSingleRegister+0x7a>
            Petit_Tx_Data.DataBuf[Petit_i] = Petit_Rx_Data.DataBuf[Petit_i];
 8000746:	7bfa      	ldrb	r2, [r7, #15]
 8000748:	7bfb      	ldrb	r3, [r7, #15]
 800074a:	4909      	ldr	r1, [pc, #36]	@ (8000770 <HandlePetitModbusWriteSingleRegister+0x8c>)
 800074c:	440a      	add	r2, r1
 800074e:	7891      	ldrb	r1, [r2, #2]
 8000750:	4a08      	ldr	r2, [pc, #32]	@ (8000774 <HandlePetitModbusWriteSingleRegister+0x90>)
 8000752:	4413      	add	r3, r2
 8000754:	460a      	mov	r2, r1
 8000756:	709a      	strb	r2, [r3, #2]
        for (Petit_i = 0; Petit_i < 4; ++Petit_i)
 8000758:	7bfb      	ldrb	r3, [r7, #15]
 800075a:	3301      	adds	r3, #1
 800075c:	73fb      	strb	r3, [r7, #15]
 800075e:	7bfb      	ldrb	r3, [r7, #15]
 8000760:	2b03      	cmp	r3, #3
 8000762:	d9f0      	bls.n	8000746 <HandlePetitModbusWriteSingleRegister+0x62>
    }

    PetitSendMessage();
 8000764:	f7ff ff18 	bl	8000598 <PetitSendMessage>
}
 8000768:	bf00      	nop
 800076a:	3710      	adds	r7, #16
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	2000007c 	.word	0x2000007c
 8000774:	20000034 	.word	0x20000034
 8000778:	20000000 	.word	0x20000000
 800077c:	200000bc 	.word	0x200000bc

08000780 <HandleMPetitodbusWriteMultipleRegisters>:
 * Function Name        : HandleModbusWriteMultipleRegisters
 * @How to use          : Modbus function 16 - Write multiple registers
 */
#if PETITMODBUS_WRITE_MULTIPLE_REGISTERS_ENABLED > 0
void HandleMPetitodbusWriteMultipleRegisters(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b086      	sub	sp, #24
 8000784:	af00      	add	r7, sp, #0
    // Write single numerical output
    unsigned int    Petit_StartAddress            =0;
 8000786:	2300      	movs	r3, #0
 8000788:	613b      	str	r3, [r7, #16]
    unsigned char   Petit_ByteCount               =0;
 800078a:	2300      	movs	r3, #0
 800078c:	73fb      	strb	r3, [r7, #15]
    unsigned int    Petit_NumberOfRegisters       =0;
 800078e:	2300      	movs	r3, #0
 8000790:	60bb      	str	r3, [r7, #8]
    unsigned char   Petit_i                       =0;
 8000792:	2300      	movs	r3, #0
 8000794:	75fb      	strb	r3, [r7, #23]
    unsigned int	Petit_Value                   =0;
 8000796:	2300      	movs	r3, #0
 8000798:	607b      	str	r3, [r7, #4]

    // The message contains the requested start address and number of registers
    Petit_StartAddress        = ((unsigned int) (Petit_Rx_Data.DataBuf[0]) << 8) + (unsigned int) (Petit_Rx_Data.DataBuf[1]);
 800079a:	4b2d      	ldr	r3, [pc, #180]	@ (8000850 <HandleMPetitodbusWriteMultipleRegisters+0xd0>)
 800079c:	789b      	ldrb	r3, [r3, #2]
 800079e:	021b      	lsls	r3, r3, #8
 80007a0:	4a2b      	ldr	r2, [pc, #172]	@ (8000850 <HandleMPetitodbusWriteMultipleRegisters+0xd0>)
 80007a2:	78d2      	ldrb	r2, [r2, #3]
 80007a4:	4413      	add	r3, r2
 80007a6:	613b      	str	r3, [r7, #16]
    Petit_NumberOfRegisters   = ((unsigned int) (Petit_Rx_Data.DataBuf[2]) << 8) + (unsigned int) (Petit_Rx_Data.DataBuf[3]);
 80007a8:	4b29      	ldr	r3, [pc, #164]	@ (8000850 <HandleMPetitodbusWriteMultipleRegisters+0xd0>)
 80007aa:	791b      	ldrb	r3, [r3, #4]
 80007ac:	021b      	lsls	r3, r3, #8
 80007ae:	4a28      	ldr	r2, [pc, #160]	@ (8000850 <HandleMPetitodbusWriteMultipleRegisters+0xd0>)
 80007b0:	7952      	ldrb	r2, [r2, #5]
 80007b2:	4413      	add	r3, r2
 80007b4:	60bb      	str	r3, [r7, #8]
    Petit_ByteCount           = Petit_Rx_Data.DataBuf[4];
 80007b6:	4b26      	ldr	r3, [pc, #152]	@ (8000850 <HandleMPetitodbusWriteMultipleRegisters+0xd0>)
 80007b8:	799b      	ldrb	r3, [r3, #6]
 80007ba:	73fb      	strb	r3, [r7, #15]

    // If it is bigger than RegisterNumber return error to Modbus Master
    if((Petit_StartAddress+Petit_NumberOfRegisters)>NUMBER_OF_OUTPUT_PETITREGISTERS)
 80007bc:	693a      	ldr	r2, [r7, #16]
 80007be:	68bb      	ldr	r3, [r7, #8]
 80007c0:	4413      	add	r3, r2
 80007c2:	2b0a      	cmp	r3, #10
 80007c4:	d903      	bls.n	80007ce <HandleMPetitodbusWriteMultipleRegisters+0x4e>
        HandlePetitModbusError(PETIT_ERROR_CODE_02);
 80007c6:	2002      	movs	r0, #2
 80007c8:	f7ff fefe 	bl	80005c8 <HandlePetitModbusError>
            PetitRegisters[Petit_StartAddress+Petit_i].ActValue=Petit_Value;
        }

        PetitSendMessage();
    }
}
 80007cc:	e03c      	b.n	8000848 <HandleMPetitodbusWriteMultipleRegisters+0xc8>
        Petit_Tx_Data.Function    = PETITMODBUS_WRITE_MULTIPLE_REGISTERS;
 80007ce:	4b21      	ldr	r3, [pc, #132]	@ (8000854 <HandleMPetitodbusWriteMultipleRegisters+0xd4>)
 80007d0:	2210      	movs	r2, #16
 80007d2:	705a      	strb	r2, [r3, #1]
        Petit_Tx_Data.Address     = PETITMODBUS_SLAVE_ADDRESS;
 80007d4:	4b20      	ldr	r3, [pc, #128]	@ (8000858 <HandleMPetitodbusWriteMultipleRegisters+0xd8>)
 80007d6:	781a      	ldrb	r2, [r3, #0]
 80007d8:	4b1e      	ldr	r3, [pc, #120]	@ (8000854 <HandleMPetitodbusWriteMultipleRegisters+0xd4>)
 80007da:	701a      	strb	r2, [r3, #0]
        Petit_Tx_Data.DataLen     = 4;
 80007dc:	4b1d      	ldr	r3, [pc, #116]	@ (8000854 <HandleMPetitodbusWriteMultipleRegisters+0xd4>)
 80007de:	2204      	movs	r2, #4
 80007e0:	839a      	strh	r2, [r3, #28]
        Petit_Tx_Data.DataBuf[0]  = Petit_Rx_Data.DataBuf[0];
 80007e2:	4b1b      	ldr	r3, [pc, #108]	@ (8000850 <HandleMPetitodbusWriteMultipleRegisters+0xd0>)
 80007e4:	789a      	ldrb	r2, [r3, #2]
 80007e6:	4b1b      	ldr	r3, [pc, #108]	@ (8000854 <HandleMPetitodbusWriteMultipleRegisters+0xd4>)
 80007e8:	709a      	strb	r2, [r3, #2]
        Petit_Tx_Data.DataBuf[1]  = Petit_Rx_Data.DataBuf[1];
 80007ea:	4b19      	ldr	r3, [pc, #100]	@ (8000850 <HandleMPetitodbusWriteMultipleRegisters+0xd0>)
 80007ec:	78da      	ldrb	r2, [r3, #3]
 80007ee:	4b19      	ldr	r3, [pc, #100]	@ (8000854 <HandleMPetitodbusWriteMultipleRegisters+0xd4>)
 80007f0:	70da      	strb	r2, [r3, #3]
        Petit_Tx_Data.DataBuf[2]  = Petit_Rx_Data.DataBuf[2];
 80007f2:	4b17      	ldr	r3, [pc, #92]	@ (8000850 <HandleMPetitodbusWriteMultipleRegisters+0xd0>)
 80007f4:	791a      	ldrb	r2, [r3, #4]
 80007f6:	4b17      	ldr	r3, [pc, #92]	@ (8000854 <HandleMPetitodbusWriteMultipleRegisters+0xd4>)
 80007f8:	711a      	strb	r2, [r3, #4]
        Petit_Tx_Data.DataBuf[3]  = Petit_Rx_Data.DataBuf[3];
 80007fa:	4b15      	ldr	r3, [pc, #84]	@ (8000850 <HandleMPetitodbusWriteMultipleRegisters+0xd0>)
 80007fc:	795a      	ldrb	r2, [r3, #5]
 80007fe:	4b15      	ldr	r3, [pc, #84]	@ (8000854 <HandleMPetitodbusWriteMultipleRegisters+0xd4>)
 8000800:	715a      	strb	r2, [r3, #5]
        for (Petit_i = 0; Petit_i <Petit_NumberOfRegisters; Petit_i++)
 8000802:	2300      	movs	r3, #0
 8000804:	75fb      	strb	r3, [r7, #23]
 8000806:	e019      	b.n	800083c <HandleMPetitodbusWriteMultipleRegisters+0xbc>
            Petit_Value=(Petit_Rx_Data.DataBuf[5+2*Petit_i]<<8)+(Petit_Rx_Data.DataBuf[6+2*Petit_i]);
 8000808:	7dfb      	ldrb	r3, [r7, #23]
 800080a:	005b      	lsls	r3, r3, #1
 800080c:	3305      	adds	r3, #5
 800080e:	4a10      	ldr	r2, [pc, #64]	@ (8000850 <HandleMPetitodbusWriteMultipleRegisters+0xd0>)
 8000810:	4413      	add	r3, r2
 8000812:	789b      	ldrb	r3, [r3, #2]
 8000814:	021b      	lsls	r3, r3, #8
 8000816:	7dfa      	ldrb	r2, [r7, #23]
 8000818:	3203      	adds	r2, #3
 800081a:	0052      	lsls	r2, r2, #1
 800081c:	490c      	ldr	r1, [pc, #48]	@ (8000850 <HandleMPetitodbusWriteMultipleRegisters+0xd0>)
 800081e:	440a      	add	r2, r1
 8000820:	7892      	ldrb	r2, [r2, #2]
 8000822:	4413      	add	r3, r2
 8000824:	607b      	str	r3, [r7, #4]
            PetitRegisters[Petit_StartAddress+Petit_i].ActValue=Petit_Value;
 8000826:	7dfa      	ldrb	r2, [r7, #23]
 8000828:	693b      	ldr	r3, [r7, #16]
 800082a:	4413      	add	r3, r2
 800082c:	687a      	ldr	r2, [r7, #4]
 800082e:	b211      	sxth	r1, r2
 8000830:	4a0a      	ldr	r2, [pc, #40]	@ (800085c <HandleMPetitodbusWriteMultipleRegisters+0xdc>)
 8000832:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (Petit_i = 0; Petit_i <Petit_NumberOfRegisters; Petit_i++)
 8000836:	7dfb      	ldrb	r3, [r7, #23]
 8000838:	3301      	adds	r3, #1
 800083a:	75fb      	strb	r3, [r7, #23]
 800083c:	7dfb      	ldrb	r3, [r7, #23]
 800083e:	68ba      	ldr	r2, [r7, #8]
 8000840:	429a      	cmp	r2, r3
 8000842:	d8e1      	bhi.n	8000808 <HandleMPetitodbusWriteMultipleRegisters+0x88>
        PetitSendMessage();
 8000844:	f7ff fea8 	bl	8000598 <PetitSendMessage>
}
 8000848:	bf00      	nop
 800084a:	3718      	adds	r7, #24
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	2000007c 	.word	0x2000007c
 8000854:	20000034 	.word	0x20000034
 8000858:	20000000 	.word	0x20000000
 800085c:	200000bc 	.word	0x200000bc

08000860 <Petit_RxDataAvailable>:
 * Function Name        : RxDataAvailable
 * @return              : If Data is Ready, Return TRUE
 *                        If Data is not Ready, Return FALSE
 */
unsigned char Petit_RxDataAvailable(void)
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
    unsigned char Result    = Petit_Rx_Data_Available;
 8000866:	4b06      	ldr	r3, [pc, #24]	@ (8000880 <Petit_RxDataAvailable+0x20>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	71fb      	strb	r3, [r7, #7]
    
    Petit_Rx_Data_Available       = FALSE;
 800086c:	4b04      	ldr	r3, [pc, #16]	@ (8000880 <Petit_RxDataAvailable+0x20>)
 800086e:	2200      	movs	r2, #0
 8000870:	701a      	strb	r2, [r3, #0]

    return Result;
 8000872:	79fb      	ldrb	r3, [r7, #7]
}
 8000874:	4618      	mov	r0, r3
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr
 8000880:	2000009b 	.word	0x2000009b

08000884 <Petit_CheckRxTimeout>:
 * Function Name        : CheckRxTimeout
 * @return              : If Time is out return TRUE
 *                        If Time is not out return FALSE
 */
unsigned char Petit_CheckRxTimeout(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
    // A return value of true indicates there is a timeout    
    if (PetitModbusTimerValue>= PETITMODBUS_TIMEOUTTIMER)
 8000888:	4b09      	ldr	r3, [pc, #36]	@ (80008b0 <Petit_CheckRxTimeout+0x2c>)
 800088a:	881b      	ldrh	r3, [r3, #0]
 800088c:	b29b      	uxth	r3, r3
 800088e:	2bf9      	cmp	r3, #249	@ 0xf9
 8000890:	d907      	bls.n	80008a2 <Petit_CheckRxTimeout+0x1e>
    {
        PetitModbusTimerValue   =0;
 8000892:	4b07      	ldr	r3, [pc, #28]	@ (80008b0 <Petit_CheckRxTimeout+0x2c>)
 8000894:	2200      	movs	r2, #0
 8000896:	801a      	strh	r2, [r3, #0]
        PetitReceiveCounter     =0;
 8000898:	4b06      	ldr	r3, [pc, #24]	@ (80008b4 <Petit_CheckRxTimeout+0x30>)
 800089a:	2200      	movs	r2, #0
 800089c:	701a      	strb	r2, [r3, #0]
        return TRUE;
 800089e:	2301      	movs	r3, #1
 80008a0:	e000      	b.n	80008a4 <Petit_CheckRxTimeout+0x20>
    }

    return FALSE;
 80008a2:	2300      	movs	r3, #0
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	2000009c 	.word	0x2000009c
 80008b4:	200000b9 	.word	0x200000b9

080008b8 <CheckPetitModbusBufferComplete>:
 *                        If slave address is wrong, return     FALSE_SLAVE_ADDRESS
 *                        If data is not ready, return          DATA_NOT_READY
 *                        If functions is wrong, return         FALSE_FUNCTION
 */
unsigned char CheckPetitModbusBufferComplete(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
    int PetitExpectedReceiveCount=0;
 80008be:	2300      	movs	r3, #0
 80008c0:	607b      	str	r3, [r7, #4]

    if(PetitReceiveCounter>4)
 80008c2:	4b2c      	ldr	r3, [pc, #176]	@ (8000974 <CheckPetitModbusBufferComplete+0xbc>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	2b04      	cmp	r3, #4
 80008ca:	d941      	bls.n	8000950 <CheckPetitModbusBufferComplete+0x98>
    {
        if(PetitReceiveBuffer[0]==PETITMODBUS_SLAVE_ADDRESS)
 80008cc:	4b2a      	ldr	r3, [pc, #168]	@ (8000978 <CheckPetitModbusBufferComplete+0xc0>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	b2da      	uxtb	r2, r3
 80008d2:	4b2a      	ldr	r3, [pc, #168]	@ (800097c <CheckPetitModbusBufferComplete+0xc4>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	429a      	cmp	r2, r3
 80008d8:	d135      	bne.n	8000946 <CheckPetitModbusBufferComplete+0x8e>
        {
            if(PetitReceiveBuffer[1]==0x01 || PetitReceiveBuffer[1]==0x02 || PetitReceiveBuffer[1]==0x03 || PetitReceiveBuffer[1]==0x04 || PetitReceiveBuffer[1]==0x05 || PetitReceiveBuffer[1]==0x06)  // RHR
 80008da:	4b27      	ldr	r3, [pc, #156]	@ (8000978 <CheckPetitModbusBufferComplete+0xc0>)
 80008dc:	785b      	ldrb	r3, [r3, #1]
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d018      	beq.n	8000916 <CheckPetitModbusBufferComplete+0x5e>
 80008e4:	4b24      	ldr	r3, [pc, #144]	@ (8000978 <CheckPetitModbusBufferComplete+0xc0>)
 80008e6:	785b      	ldrb	r3, [r3, #1]
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	2b02      	cmp	r3, #2
 80008ec:	d013      	beq.n	8000916 <CheckPetitModbusBufferComplete+0x5e>
 80008ee:	4b22      	ldr	r3, [pc, #136]	@ (8000978 <CheckPetitModbusBufferComplete+0xc0>)
 80008f0:	785b      	ldrb	r3, [r3, #1]
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	2b03      	cmp	r3, #3
 80008f6:	d00e      	beq.n	8000916 <CheckPetitModbusBufferComplete+0x5e>
 80008f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000978 <CheckPetitModbusBufferComplete+0xc0>)
 80008fa:	785b      	ldrb	r3, [r3, #1]
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	2b04      	cmp	r3, #4
 8000900:	d009      	beq.n	8000916 <CheckPetitModbusBufferComplete+0x5e>
 8000902:	4b1d      	ldr	r3, [pc, #116]	@ (8000978 <CheckPetitModbusBufferComplete+0xc0>)
 8000904:	785b      	ldrb	r3, [r3, #1]
 8000906:	b2db      	uxtb	r3, r3
 8000908:	2b05      	cmp	r3, #5
 800090a:	d004      	beq.n	8000916 <CheckPetitModbusBufferComplete+0x5e>
 800090c:	4b1a      	ldr	r3, [pc, #104]	@ (8000978 <CheckPetitModbusBufferComplete+0xc0>)
 800090e:	785b      	ldrb	r3, [r3, #1]
 8000910:	b2db      	uxtb	r3, r3
 8000912:	2b06      	cmp	r3, #6
 8000914:	d102      	bne.n	800091c <CheckPetitModbusBufferComplete+0x64>
            {
                PetitExpectedReceiveCount    =8;
 8000916:	2308      	movs	r3, #8
 8000918:	607b      	str	r3, [r7, #4]
 800091a:	e01b      	b.n	8000954 <CheckPetitModbusBufferComplete+0x9c>
            }
            else if(PetitReceiveBuffer[1]==0x0F || PetitReceiveBuffer[1]==0x10)
 800091c:	4b16      	ldr	r3, [pc, #88]	@ (8000978 <CheckPetitModbusBufferComplete+0xc0>)
 800091e:	785b      	ldrb	r3, [r3, #1]
 8000920:	b2db      	uxtb	r3, r3
 8000922:	2b0f      	cmp	r3, #15
 8000924:	d004      	beq.n	8000930 <CheckPetitModbusBufferComplete+0x78>
 8000926:	4b14      	ldr	r3, [pc, #80]	@ (8000978 <CheckPetitModbusBufferComplete+0xc0>)
 8000928:	785b      	ldrb	r3, [r3, #1]
 800092a:	b2db      	uxtb	r3, r3
 800092c:	2b10      	cmp	r3, #16
 800092e:	d105      	bne.n	800093c <CheckPetitModbusBufferComplete+0x84>
            {
                PetitExpectedReceiveCount=PetitReceiveBuffer[6]+9;
 8000930:	4b11      	ldr	r3, [pc, #68]	@ (8000978 <CheckPetitModbusBufferComplete+0xc0>)
 8000932:	799b      	ldrb	r3, [r3, #6]
 8000934:	b2db      	uxtb	r3, r3
 8000936:	3309      	adds	r3, #9
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	e00b      	b.n	8000954 <CheckPetitModbusBufferComplete+0x9c>
            }
            else
            {
                PetitReceiveCounter=0;
 800093c:	4b0d      	ldr	r3, [pc, #52]	@ (8000974 <CheckPetitModbusBufferComplete+0xbc>)
 800093e:	2200      	movs	r2, #0
 8000940:	701a      	strb	r2, [r3, #0]
                return PETIT_FALSE_FUNCTION;
 8000942:	2300      	movs	r3, #0
 8000944:	e010      	b.n	8000968 <CheckPetitModbusBufferComplete+0xb0>
            }
        }
        else
        {
            PetitReceiveCounter=0;
 8000946:	4b0b      	ldr	r3, [pc, #44]	@ (8000974 <CheckPetitModbusBufferComplete+0xbc>)
 8000948:	2200      	movs	r2, #0
 800094a:	701a      	strb	r2, [r3, #0]
            return PETIT_FALSE_SLAVE_ADDRESS;
 800094c:	2301      	movs	r3, #1
 800094e:	e00b      	b.n	8000968 <CheckPetitModbusBufferComplete+0xb0>
        }
    }
    else
        return PETIT_DATA_NOT_READY;
 8000950:	2302      	movs	r3, #2
 8000952:	e009      	b.n	8000968 <CheckPetitModbusBufferComplete+0xb0>

    if(PetitReceiveCounter==PetitExpectedReceiveCount)
 8000954:	4b07      	ldr	r3, [pc, #28]	@ (8000974 <CheckPetitModbusBufferComplete+0xbc>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	b2db      	uxtb	r3, r3
 800095a:	461a      	mov	r2, r3
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	4293      	cmp	r3, r2
 8000960:	d101      	bne.n	8000966 <CheckPetitModbusBufferComplete+0xae>
    {
        return PETIT_DATA_READY;
 8000962:	2303      	movs	r3, #3
 8000964:	e000      	b.n	8000968 <CheckPetitModbusBufferComplete+0xb0>
    }

    return PETIT_DATA_NOT_READY;
 8000966:	2302      	movs	r3, #2
}
 8000968:	4618      	mov	r0, r3
 800096a:	370c      	adds	r7, #12
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr
 8000974:	200000b9 	.word	0x200000b9
 8000978:	200000a0 	.word	0x200000a0
 800097c:	20000000 	.word	0x20000000

08000980 <Petit_RxRTU>:
/*
 * Function Name        : RxRTU
 * @How to use          : Check for data ready, if it is good return answer
 */
void Petit_RxRTU(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
    unsigned char   Petit_i;
    unsigned char   Petit_ReceiveBufferControl=0;
 8000986:	2300      	movs	r3, #0
 8000988:	71bb      	strb	r3, [r7, #6]

    Petit_ReceiveBufferControl    =CheckPetitModbusBufferComplete();
 800098a:	f7ff ff95 	bl	80008b8 <CheckPetitModbusBufferComplete>
 800098e:	4603      	mov	r3, r0
 8000990:	71bb      	strb	r3, [r7, #6]

    if(Petit_ReceiveBufferControl==PETIT_DATA_READY)
 8000992:	79bb      	ldrb	r3, [r7, #6]
 8000994:	2b03      	cmp	r3, #3
 8000996:	d13c      	bne.n	8000a12 <Petit_RxRTU+0x92>
    {
        Petit_Rx_Data.Address               =PetitReceiveBuffer[0];
 8000998:	4b3e      	ldr	r3, [pc, #248]	@ (8000a94 <Petit_RxRTU+0x114>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	b2da      	uxtb	r2, r3
 800099e:	4b3e      	ldr	r3, [pc, #248]	@ (8000a98 <Petit_RxRTU+0x118>)
 80009a0:	701a      	strb	r2, [r3, #0]
        Petit_Rx_CRC16                      = 0xffff;
 80009a2:	4b3e      	ldr	r3, [pc, #248]	@ (8000a9c <Petit_RxRTU+0x11c>)
 80009a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009a8:	601a      	str	r2, [r3, #0]
        Petit_CRC16(Petit_Rx_Data.Address, &Petit_Rx_CRC16);
 80009aa:	4b3b      	ldr	r3, [pc, #236]	@ (8000a98 <Petit_RxRTU+0x118>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	493b      	ldr	r1, [pc, #236]	@ (8000a9c <Petit_RxRTU+0x11c>)
 80009b0:	4618      	mov	r0, r3
 80009b2:	f7ff fda9 	bl	8000508 <Petit_CRC16>
        Petit_Rx_Data.Function              =PetitReceiveBuffer[1];
 80009b6:	4b37      	ldr	r3, [pc, #220]	@ (8000a94 <Petit_RxRTU+0x114>)
 80009b8:	785b      	ldrb	r3, [r3, #1]
 80009ba:	b2da      	uxtb	r2, r3
 80009bc:	4b36      	ldr	r3, [pc, #216]	@ (8000a98 <Petit_RxRTU+0x118>)
 80009be:	705a      	strb	r2, [r3, #1]
        Petit_CRC16(Petit_Rx_Data.Function, &Petit_Rx_CRC16);
 80009c0:	4b35      	ldr	r3, [pc, #212]	@ (8000a98 <Petit_RxRTU+0x118>)
 80009c2:	785b      	ldrb	r3, [r3, #1]
 80009c4:	4935      	ldr	r1, [pc, #212]	@ (8000a9c <Petit_RxRTU+0x11c>)
 80009c6:	4618      	mov	r0, r3
 80009c8:	f7ff fd9e 	bl	8000508 <Petit_CRC16>

        Petit_Rx_Data.DataLen=0;
 80009cc:	4b32      	ldr	r3, [pc, #200]	@ (8000a98 <Petit_RxRTU+0x118>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	839a      	strh	r2, [r3, #28]

        for(Petit_i=2;Petit_i<PetitReceiveCounter;Petit_i++)
 80009d2:	2302      	movs	r3, #2
 80009d4:	71fb      	strb	r3, [r7, #7]
 80009d6:	e010      	b.n	80009fa <Petit_RxRTU+0x7a>
            Petit_Rx_Data.DataBuf[Petit_Rx_Data.DataLen++]=PetitReceiveBuffer[Petit_i];
 80009d8:	79fa      	ldrb	r2, [r7, #7]
 80009da:	4b2f      	ldr	r3, [pc, #188]	@ (8000a98 <Petit_RxRTU+0x118>)
 80009dc:	8b9b      	ldrh	r3, [r3, #28]
 80009de:	1c59      	adds	r1, r3, #1
 80009e0:	b288      	uxth	r0, r1
 80009e2:	492d      	ldr	r1, [pc, #180]	@ (8000a98 <Petit_RxRTU+0x118>)
 80009e4:	8388      	strh	r0, [r1, #28]
 80009e6:	4619      	mov	r1, r3
 80009e8:	4b2a      	ldr	r3, [pc, #168]	@ (8000a94 <Petit_RxRTU+0x114>)
 80009ea:	5c9b      	ldrb	r3, [r3, r2]
 80009ec:	b2da      	uxtb	r2, r3
 80009ee:	4b2a      	ldr	r3, [pc, #168]	@ (8000a98 <Petit_RxRTU+0x118>)
 80009f0:	440b      	add	r3, r1
 80009f2:	709a      	strb	r2, [r3, #2]
        for(Petit_i=2;Petit_i<PetitReceiveCounter;Petit_i++)
 80009f4:	79fb      	ldrb	r3, [r7, #7]
 80009f6:	3301      	adds	r3, #1
 80009f8:	71fb      	strb	r3, [r7, #7]
 80009fa:	4b29      	ldr	r3, [pc, #164]	@ (8000aa0 <Petit_RxRTU+0x120>)
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	79fa      	ldrb	r2, [r7, #7]
 8000a02:	429a      	cmp	r2, r3
 8000a04:	d3e8      	bcc.n	80009d8 <Petit_RxRTU+0x58>

        Petit_Rx_State =PETIT_RXTX_DATABUF;
 8000a06:	4b27      	ldr	r3, [pc, #156]	@ (8000aa4 <Petit_RxRTU+0x124>)
 8000a08:	2202      	movs	r2, #2
 8000a0a:	701a      	strb	r2, [r3, #0]

        PetitReceiveCounter=0;
 8000a0c:	4b24      	ldr	r3, [pc, #144]	@ (8000aa0 <Petit_RxRTU+0x120>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	701a      	strb	r2, [r3, #0]
    }

    Petit_CheckRxTimeout();
 8000a12:	f7ff ff37 	bl	8000884 <Petit_CheckRxTimeout>

    if ((Petit_Rx_State == PETIT_RXTX_DATABUF) && (Petit_Rx_Data.DataLen >= 2))
 8000a16:	4b23      	ldr	r3, [pc, #140]	@ (8000aa4 <Petit_RxRTU+0x124>)
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	2b02      	cmp	r3, #2
 8000a1c:	d136      	bne.n	8000a8c <Petit_RxRTU+0x10c>
 8000a1e:	4b1e      	ldr	r3, [pc, #120]	@ (8000a98 <Petit_RxRTU+0x118>)
 8000a20:	8b9b      	ldrh	r3, [r3, #28]
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	d932      	bls.n	8000a8c <Petit_RxRTU+0x10c>
    {
        // Finish off our CRC check
        Petit_Rx_Data.DataLen -= 2;
 8000a26:	4b1c      	ldr	r3, [pc, #112]	@ (8000a98 <Petit_RxRTU+0x118>)
 8000a28:	8b9b      	ldrh	r3, [r3, #28]
 8000a2a:	3b02      	subs	r3, #2
 8000a2c:	b29a      	uxth	r2, r3
 8000a2e:	4b1a      	ldr	r3, [pc, #104]	@ (8000a98 <Petit_RxRTU+0x118>)
 8000a30:	839a      	strh	r2, [r3, #28]
        for (Petit_i = 0; Petit_i < Petit_Rx_Data.DataLen; ++Petit_i)
 8000a32:	2300      	movs	r3, #0
 8000a34:	71fb      	strb	r3, [r7, #7]
 8000a36:	e00a      	b.n	8000a4e <Petit_RxRTU+0xce>
        {
            Petit_CRC16(Petit_Rx_Data.DataBuf[Petit_i], &Petit_Rx_CRC16);
 8000a38:	79fb      	ldrb	r3, [r7, #7]
 8000a3a:	4a17      	ldr	r2, [pc, #92]	@ (8000a98 <Petit_RxRTU+0x118>)
 8000a3c:	4413      	add	r3, r2
 8000a3e:	789b      	ldrb	r3, [r3, #2]
 8000a40:	4916      	ldr	r1, [pc, #88]	@ (8000a9c <Petit_RxRTU+0x11c>)
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff fd60 	bl	8000508 <Petit_CRC16>
        for (Petit_i = 0; Petit_i < Petit_Rx_Data.DataLen; ++Petit_i)
 8000a48:	79fb      	ldrb	r3, [r7, #7]
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	71fb      	strb	r3, [r7, #7]
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	b29a      	uxth	r2, r3
 8000a52:	4b11      	ldr	r3, [pc, #68]	@ (8000a98 <Petit_RxRTU+0x118>)
 8000a54:	8b9b      	ldrh	r3, [r3, #28]
 8000a56:	429a      	cmp	r2, r3
 8000a58:	d3ee      	bcc.n	8000a38 <Petit_RxRTU+0xb8>
        }
        
        if (((unsigned int) Petit_Rx_Data.DataBuf[Petit_Rx_Data.DataLen] + ((unsigned int) Petit_Rx_Data.DataBuf[Petit_Rx_Data.DataLen + 1] << 8)) == Petit_Rx_CRC16)
 8000a5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a98 <Petit_RxRTU+0x118>)
 8000a5c:	8b9b      	ldrh	r3, [r3, #28]
 8000a5e:	461a      	mov	r2, r3
 8000a60:	4b0d      	ldr	r3, [pc, #52]	@ (8000a98 <Petit_RxRTU+0x118>)
 8000a62:	4413      	add	r3, r2
 8000a64:	789b      	ldrb	r3, [r3, #2]
 8000a66:	4619      	mov	r1, r3
 8000a68:	4b0b      	ldr	r3, [pc, #44]	@ (8000a98 <Petit_RxRTU+0x118>)
 8000a6a:	8b9b      	ldrh	r3, [r3, #28]
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a98 <Petit_RxRTU+0x118>)
 8000a70:	4413      	add	r3, r2
 8000a72:	789b      	ldrb	r3, [r3, #2]
 8000a74:	021b      	lsls	r3, r3, #8
 8000a76:	18ca      	adds	r2, r1, r3
 8000a78:	4b08      	ldr	r3, [pc, #32]	@ (8000a9c <Petit_RxRTU+0x11c>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	d102      	bne.n	8000a86 <Petit_RxRTU+0x106>
        {
            // Valid message!
            Petit_Rx_Data_Available = TRUE;
 8000a80:	4b09      	ldr	r3, [pc, #36]	@ (8000aa8 <Petit_RxRTU+0x128>)
 8000a82:	2201      	movs	r2, #1
 8000a84:	701a      	strb	r2, [r3, #0]
        }

        Petit_Rx_State = PETIT_RXTX_IDLE;
 8000a86:	4b07      	ldr	r3, [pc, #28]	@ (8000aa4 <Petit_RxRTU+0x124>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	701a      	strb	r2, [r3, #0]
    }
}
 8000a8c:	bf00      	nop
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	200000a0 	.word	0x200000a0
 8000a98:	2000007c 	.word	0x2000007c
 8000a9c:	20000008 	.word	0x20000008
 8000aa0:	200000b9 	.word	0x200000b9
 8000aa4:	2000009a 	.word	0x2000009a
 8000aa8:	2000009b 	.word	0x2000009b

08000aac <Petit_TxRTU>:
/*
 * Function Name        : TxRTU
 * @How to use          : If it is ready send answers!
 */
void Petit_TxRTU(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
    Petit_Tx_CRC16                =0xFFFF;
 8000ab0:	4b32      	ldr	r3, [pc, #200]	@ (8000b7c <Petit_TxRTU+0xd0>)
 8000ab2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ab6:	601a      	str	r2, [r3, #0]
    Petit_Tx_Buf_Size             =0;
 8000ab8:	4b31      	ldr	r3, [pc, #196]	@ (8000b80 <Petit_TxRTU+0xd4>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
    Petit_Tx_Buf[Petit_Tx_Buf_Size++]   =Petit_Tx_Data.Address;
 8000abe:	4b30      	ldr	r3, [pc, #192]	@ (8000b80 <Petit_TxRTU+0xd4>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	1c5a      	adds	r2, r3, #1
 8000ac4:	492e      	ldr	r1, [pc, #184]	@ (8000b80 <Petit_TxRTU+0xd4>)
 8000ac6:	600a      	str	r2, [r1, #0]
 8000ac8:	4a2e      	ldr	r2, [pc, #184]	@ (8000b84 <Petit_TxRTU+0xd8>)
 8000aca:	7811      	ldrb	r1, [r2, #0]
 8000acc:	4a2e      	ldr	r2, [pc, #184]	@ (8000b88 <Petit_TxRTU+0xdc>)
 8000ace:	54d1      	strb	r1, [r2, r3]
    Petit_CRC16(Petit_Tx_Data.Address, &Petit_Tx_CRC16);
 8000ad0:	4b2c      	ldr	r3, [pc, #176]	@ (8000b84 <Petit_TxRTU+0xd8>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	4929      	ldr	r1, [pc, #164]	@ (8000b7c <Petit_TxRTU+0xd0>)
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f7ff fd16 	bl	8000508 <Petit_CRC16>
    Petit_Tx_Buf[Petit_Tx_Buf_Size++]   =Petit_Tx_Data.Function;
 8000adc:	4b28      	ldr	r3, [pc, #160]	@ (8000b80 <Petit_TxRTU+0xd4>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	1c5a      	adds	r2, r3, #1
 8000ae2:	4927      	ldr	r1, [pc, #156]	@ (8000b80 <Petit_TxRTU+0xd4>)
 8000ae4:	600a      	str	r2, [r1, #0]
 8000ae6:	4a27      	ldr	r2, [pc, #156]	@ (8000b84 <Petit_TxRTU+0xd8>)
 8000ae8:	7851      	ldrb	r1, [r2, #1]
 8000aea:	4a27      	ldr	r2, [pc, #156]	@ (8000b88 <Petit_TxRTU+0xdc>)
 8000aec:	54d1      	strb	r1, [r2, r3]
    Petit_CRC16(Petit_Tx_Data.Function, &Petit_Tx_CRC16);
 8000aee:	4b25      	ldr	r3, [pc, #148]	@ (8000b84 <Petit_TxRTU+0xd8>)
 8000af0:	785b      	ldrb	r3, [r3, #1]
 8000af2:	4922      	ldr	r1, [pc, #136]	@ (8000b7c <Petit_TxRTU+0xd0>)
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff fd07 	bl	8000508 <Petit_CRC16>

    for(Petit_Tx_Current=0; Petit_Tx_Current < Petit_Tx_Data.DataLen; Petit_Tx_Current++)
 8000afa:	4b24      	ldr	r3, [pc, #144]	@ (8000b8c <Petit_TxRTU+0xe0>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	e019      	b.n	8000b36 <Petit_TxRTU+0x8a>
    {
        Petit_Tx_Buf[Petit_Tx_Buf_Size++]=Petit_Tx_Data.DataBuf[Petit_Tx_Current];
 8000b02:	4b22      	ldr	r3, [pc, #136]	@ (8000b8c <Petit_TxRTU+0xe0>)
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	4b1e      	ldr	r3, [pc, #120]	@ (8000b80 <Petit_TxRTU+0xd4>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	1c59      	adds	r1, r3, #1
 8000b0c:	481c      	ldr	r0, [pc, #112]	@ (8000b80 <Petit_TxRTU+0xd4>)
 8000b0e:	6001      	str	r1, [r0, #0]
 8000b10:	491c      	ldr	r1, [pc, #112]	@ (8000b84 <Petit_TxRTU+0xd8>)
 8000b12:	440a      	add	r2, r1
 8000b14:	7891      	ldrb	r1, [r2, #2]
 8000b16:	4a1c      	ldr	r2, [pc, #112]	@ (8000b88 <Petit_TxRTU+0xdc>)
 8000b18:	54d1      	strb	r1, [r2, r3]
        Petit_CRC16(Petit_Tx_Data.DataBuf[Petit_Tx_Current], &Petit_Tx_CRC16);
 8000b1a:	4b1c      	ldr	r3, [pc, #112]	@ (8000b8c <Petit_TxRTU+0xe0>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4a19      	ldr	r2, [pc, #100]	@ (8000b84 <Petit_TxRTU+0xd8>)
 8000b20:	4413      	add	r3, r2
 8000b22:	789b      	ldrb	r3, [r3, #2]
 8000b24:	4915      	ldr	r1, [pc, #84]	@ (8000b7c <Petit_TxRTU+0xd0>)
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff fcee 	bl	8000508 <Petit_CRC16>
    for(Petit_Tx_Current=0; Petit_Tx_Current < Petit_Tx_Data.DataLen; Petit_Tx_Current++)
 8000b2c:	4b17      	ldr	r3, [pc, #92]	@ (8000b8c <Petit_TxRTU+0xe0>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	3301      	adds	r3, #1
 8000b32:	4a16      	ldr	r2, [pc, #88]	@ (8000b8c <Petit_TxRTU+0xe0>)
 8000b34:	6013      	str	r3, [r2, #0]
 8000b36:	4b13      	ldr	r3, [pc, #76]	@ (8000b84 <Petit_TxRTU+0xd8>)
 8000b38:	8b9b      	ldrh	r3, [r3, #28]
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	4b13      	ldr	r3, [pc, #76]	@ (8000b8c <Petit_TxRTU+0xe0>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d8de      	bhi.n	8000b02 <Petit_TxRTU+0x56>
    }
    
    Petit_Tx_Buf[Petit_Tx_Buf_Size++] = Petit_Tx_CRC16 & 0x00FF;
 8000b44:	4b0d      	ldr	r3, [pc, #52]	@ (8000b7c <Petit_TxRTU+0xd0>)
 8000b46:	6818      	ldr	r0, [r3, #0]
 8000b48:	4b0d      	ldr	r3, [pc, #52]	@ (8000b80 <Petit_TxRTU+0xd4>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	1c5a      	adds	r2, r3, #1
 8000b4e:	490c      	ldr	r1, [pc, #48]	@ (8000b80 <Petit_TxRTU+0xd4>)
 8000b50:	600a      	str	r2, [r1, #0]
 8000b52:	b2c1      	uxtb	r1, r0
 8000b54:	4a0c      	ldr	r2, [pc, #48]	@ (8000b88 <Petit_TxRTU+0xdc>)
 8000b56:	54d1      	strb	r1, [r2, r3]
    Petit_Tx_Buf[Petit_Tx_Buf_Size++] =(Petit_Tx_CRC16 & 0xFF00) >> 8;
 8000b58:	4b08      	ldr	r3, [pc, #32]	@ (8000b7c <Petit_TxRTU+0xd0>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	0a18      	lsrs	r0, r3, #8
 8000b5e:	4b08      	ldr	r3, [pc, #32]	@ (8000b80 <Petit_TxRTU+0xd4>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	1c5a      	adds	r2, r3, #1
 8000b64:	4906      	ldr	r1, [pc, #24]	@ (8000b80 <Petit_TxRTU+0xd4>)
 8000b66:	600a      	str	r2, [r1, #0]
 8000b68:	b2c1      	uxtb	r1, r0
 8000b6a:	4a07      	ldr	r2, [pc, #28]	@ (8000b88 <Petit_TxRTU+0xdc>)
 8000b6c:	54d1      	strb	r1, [r2, r3]

    Petit_DoSlaveTX();
 8000b6e:	f7ff fcfd 	bl	800056c <Petit_DoSlaveTX>

    Petit_Tx_State    =PETIT_RXTX_IDLE;
 8000b72:	4b07      	ldr	r3, [pc, #28]	@ (8000b90 <Petit_TxRTU+0xe4>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	701a      	strb	r2, [r3, #0]
}
 8000b78:	bf00      	nop
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20000004 	.word	0x20000004
 8000b80:	20000078 	.word	0x20000078
 8000b84:	20000034 	.word	0x20000034
 8000b88:	2000005c 	.word	0x2000005c
 8000b8c:	20000054 	.word	0x20000054
 8000b90:	20000058 	.word	0x20000058

08000b94 <ProcessPetitModbus>:
/*
 * Function Name        : ProcessModbus
 * @How to use          : ModBus main core! Call this function into main!
 */
void ProcessPetitModbus(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
    if (Petit_Tx_State != PETIT_RXTX_IDLE)                                      // If answer is ready, send it!
 8000b98:	4b16      	ldr	r3, [pc, #88]	@ (8000bf4 <ProcessPetitModbus+0x60>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <ProcessPetitModbus+0x10>
        Petit_TxRTU();
 8000ba0:	f7ff ff84 	bl	8000aac <Petit_TxRTU>

    Petit_RxRTU();                                                              // Call this function every cycle
 8000ba4:	f7ff feec 	bl	8000980 <Petit_RxRTU>

    if (Petit_RxDataAvailable())                                                // If data is ready enter this!
 8000ba8:	f7ff fe5a 	bl	8000860 <Petit_RxDataAvailable>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d01d      	beq.n	8000bee <ProcessPetitModbus+0x5a>
    {
        if (Petit_Rx_Data.Address == PETITMODBUS_SLAVE_ADDRESS)                 // Is Data for us?
 8000bb2:	4b11      	ldr	r3, [pc, #68]	@ (8000bf8 <ProcessPetitModbus+0x64>)
 8000bb4:	781a      	ldrb	r2, [r3, #0]
 8000bb6:	4b11      	ldr	r3, [pc, #68]	@ (8000bfc <ProcessPetitModbus+0x68>)
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	429a      	cmp	r2, r3
 8000bbc:	d117      	bne.n	8000bee <ProcessPetitModbus+0x5a>
        {
            switch (Petit_Rx_Data.Function)                                     // Data is for us but which function?
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf8 <ProcessPetitModbus+0x64>)
 8000bc0:	785b      	ldrb	r3, [r3, #1]
 8000bc2:	2b10      	cmp	r3, #16
 8000bc4:	d00c      	beq.n	8000be0 <ProcessPetitModbus+0x4c>
 8000bc6:	2b10      	cmp	r3, #16
 8000bc8:	dc0d      	bgt.n	8000be6 <ProcessPetitModbus+0x52>
 8000bca:	2b03      	cmp	r3, #3
 8000bcc:	d002      	beq.n	8000bd4 <ProcessPetitModbus+0x40>
 8000bce:	2b06      	cmp	r3, #6
 8000bd0:	d003      	beq.n	8000bda <ProcessPetitModbus+0x46>
 8000bd2:	e008      	b.n	8000be6 <ProcessPetitModbus+0x52>
            {
                #if PETITMODBUS_READ_HOLDING_REGISTERS_ENABLED > 0
                case PETITMODBUS_READ_HOLDING_REGISTERS:    {   HandlePetitModbusReadHoldingRegisters();        break;  }
 8000bd4:	f7ff fd1a 	bl	800060c <HandlePetitModbusReadHoldingRegisters>
 8000bd8:	e009      	b.n	8000bee <ProcessPetitModbus+0x5a>
                #endif
                #if PETITMODBUSWRITE_SINGLE_REGISTER_ENABLED > 0
                case PETITMODBUS_WRITE_SINGLE_REGISTER:     {   HandlePetitModbusWriteSingleRegister();         break;  }
 8000bda:	f7ff fd83 	bl	80006e4 <HandlePetitModbusWriteSingleRegister>
 8000bde:	e006      	b.n	8000bee <ProcessPetitModbus+0x5a>
                #endif
                #if PETITMODBUS_WRITE_MULTIPLE_REGISTERS_ENABLED > 0
                case PETITMODBUS_WRITE_MULTIPLE_REGISTERS:  {   HandleMPetitodbusWriteMultipleRegisters();      break;  }
 8000be0:	f7ff fdce 	bl	8000780 <HandleMPetitodbusWriteMultipleRegisters>
 8000be4:	e003      	b.n	8000bee <ProcessPetitModbus+0x5a>
                #endif
                default:                                    {   HandlePetitModbusError(PETIT_ERROR_CODE_01);    break;  }
 8000be6:	2001      	movs	r0, #1
 8000be8:	f7ff fcee 	bl	80005c8 <HandlePetitModbusError>
 8000bec:	bf00      	nop
            }
        }
    }
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000058 	.word	0x20000058
 8000bf8:	2000007c 	.word	0x2000007c
 8000bfc:	20000000 	.word	0x20000000

08000c00 <InitPetitModbus>:
/*
 * Function Name        : InitPetitModbus
 * @How to use          : Petite ModBus slave initialize
 */
void InitPetitModbus(unsigned char PetitModbusSlaveAddress)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	71fb      	strb	r3, [r7, #7]
    PETITMODBUS_SLAVE_ADDRESS    =PetitModbusSlaveAddress;
 8000c0a:	4a04      	ldr	r2, [pc, #16]	@ (8000c1c <InitPetitModbus+0x1c>)
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
 8000c0e:	7013      	strb	r3, [r2, #0]
    
    //PetitModBus_UART_Initialise();
    //PetitModBus_TIMER_Initialise();
}
 8000c10:	bf00      	nop
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	20000000 	.word	0x20000000

08000c20 <ReceiveInterrupt>:

/*************************Interrupt Fonction Slave*****************************/
// Call this function into your UART Interrupt. Collect data from it!
// Better to use DMA
void ReceiveInterrupt(unsigned char Data)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	71fb      	strb	r3, [r7, #7]
    PetitReceiveBuffer[PetitReceiveCounter]   =Data;
 8000c2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c68 <ReceiveInterrupt+0x48>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	4619      	mov	r1, r3
 8000c32:	4a0e      	ldr	r2, [pc, #56]	@ (8000c6c <ReceiveInterrupt+0x4c>)
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	5453      	strb	r3, [r2, r1]
    PetitReceiveCounter++;
 8000c38:	4b0b      	ldr	r3, [pc, #44]	@ (8000c68 <ReceiveInterrupt+0x48>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	3301      	adds	r3, #1
 8000c40:	b2da      	uxtb	r2, r3
 8000c42:	4b09      	ldr	r3, [pc, #36]	@ (8000c68 <ReceiveInterrupt+0x48>)
 8000c44:	701a      	strb	r2, [r3, #0]

    if(PetitReceiveCounter>PETITMODBUS_RECEIVE_BUFFER_SIZE)  
 8000c46:	4b08      	ldr	r3, [pc, #32]	@ (8000c68 <ReceiveInterrupt+0x48>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	2b19      	cmp	r3, #25
 8000c4e:	d902      	bls.n	8000c56 <ReceiveInterrupt+0x36>
        PetitReceiveCounter=0;
 8000c50:	4b05      	ldr	r3, [pc, #20]	@ (8000c68 <ReceiveInterrupt+0x48>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	701a      	strb	r2, [r3, #0]

    PetitModbusTimerValue=0;
 8000c56:	4b06      	ldr	r3, [pc, #24]	@ (8000c70 <ReceiveInterrupt+0x50>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	801a      	strh	r2, [r3, #0]
}
 8000c5c:	bf00      	nop
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	200000b9 	.word	0x200000b9
 8000c6c:	200000a0 	.word	0x200000a0
 8000c70:	2000009c 	.word	0x2000009c

08000c74 <PetitModBus_TimerValues>:

// Call this function into 1ms Interrupt or Event!
void PetitModBus_TimerValues(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
    PetitModbusTimerValue++;
 8000c78:	4b05      	ldr	r3, [pc, #20]	@ (8000c90 <PetitModBus_TimerValues+0x1c>)
 8000c7a:	881b      	ldrh	r3, [r3, #0]
 8000c7c:	b29b      	uxth	r3, r3
 8000c7e:	3301      	adds	r3, #1
 8000c80:	b29a      	uxth	r2, r3
 8000c82:	4b03      	ldr	r3, [pc, #12]	@ (8000c90 <PetitModBus_TimerValues+0x1c>)
 8000c84:	801a      	strh	r2, [r3, #0]
}
 8000c86:	bf00      	nop
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	2000009c 	.word	0x2000009c

08000c94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c98:	f000 fb7d 	bl	8001396 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c9c:	f000 f820 	bl	8000ce0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ca0:	f000 f962 	bl	8000f68 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ca4:	f000 f92e 	bl	8000f04 <MX_DMA_Init>
  MX_TIM1_Init();
 8000ca8:	f000 f866 	bl	8000d78 <MX_TIM1_Init>
  MX_TIM16_Init();
 8000cac:	f000 f8b8 	bl	8000e20 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 8000cb0:	f000 f8dc 	bl	8000e6c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim16);
 8000cb4:	4807      	ldr	r0, [pc, #28]	@ (8000cd4 <main+0x40>)
 8000cb6:	f002 fa2b 	bl	8003110 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_DMA(&huart2, (uint8_t *)&rx_putch , 1);
 8000cba:	2201      	movs	r2, #1
 8000cbc:	4906      	ldr	r1, [pc, #24]	@ (8000cd8 <main+0x44>)
 8000cbe:	4807      	ldr	r0, [pc, #28]	@ (8000cdc <main+0x48>)
 8000cc0:	f003 f828 	bl	8003d14 <HAL_UART_Receive_DMA>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  InitPetitModbus(1);
 8000cc4:	2001      	movs	r0, #1
 8000cc6:	f7ff ff9b 	bl	8000c00 <InitPetitModbus>
	  ProcessPetitModbus();
 8000cca:	f7ff ff63 	bl	8000b94 <ProcessPetitModbus>
  {
 8000cce:	bf00      	nop
 8000cd0:	e7f8      	b.n	8000cc4 <main+0x30>
 8000cd2:	bf00      	nop
 8000cd4:	20000120 	.word	0x20000120
 8000cd8:	200000d0 	.word	0x200000d0
 8000cdc:	2000016c 	.word	0x2000016c

08000ce0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b094      	sub	sp, #80	@ 0x50
 8000ce4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ce6:	f107 0318 	add.w	r3, r7, #24
 8000cea:	2238      	movs	r2, #56	@ 0x38
 8000cec:	2100      	movs	r1, #0
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f004 fc88 	bl	8005604 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cf4:	1d3b      	adds	r3, r7, #4
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	605a      	str	r2, [r3, #4]
 8000cfc:	609a      	str	r2, [r3, #8]
 8000cfe:	60da      	str	r2, [r3, #12]
 8000d00:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000d02:	2000      	movs	r0, #0
 8000d04:	f001 f97c 	bl	8002000 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d0c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d10:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d12:	2340      	movs	r3, #64	@ 0x40
 8000d14:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d16:	2302      	movs	r3, #2
 8000d18:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000d1e:	2304      	movs	r3, #4
 8000d20:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000d22:	2355      	movs	r3, #85	@ 0x55
 8000d24:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d26:	2302      	movs	r3, #2
 8000d28:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d32:	f107 0318 	add.w	r3, r7, #24
 8000d36:	4618      	mov	r0, r3
 8000d38:	f001 fa16 	bl	8002168 <HAL_RCC_OscConfig>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000d42:	f000 f969 	bl	8001018 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d46:	230f      	movs	r3, #15
 8000d48:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d52:	2300      	movs	r3, #0
 8000d54:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d56:	2300      	movs	r3, #0
 8000d58:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d5a:	1d3b      	adds	r3, r7, #4
 8000d5c:	2104      	movs	r1, #4
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f001 fd14 	bl	800278c <HAL_RCC_ClockConfig>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000d6a:	f000 f955 	bl	8001018 <Error_Handler>
  }
}
 8000d6e:	bf00      	nop
 8000d70:	3750      	adds	r7, #80	@ 0x50
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
	...

08000d78 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b088      	sub	sp, #32
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d7e:	f107 0310 	add.w	r3, r7, #16
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	605a      	str	r2, [r3, #4]
 8000d88:	609a      	str	r2, [r3, #8]
 8000d8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d8c:	1d3b      	adds	r3, r7, #4
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	605a      	str	r2, [r3, #4]
 8000d94:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d96:	4b20      	ldr	r3, [pc, #128]	@ (8000e18 <MX_TIM1_Init+0xa0>)
 8000d98:	4a20      	ldr	r2, [pc, #128]	@ (8000e1c <MX_TIM1_Init+0xa4>)
 8000d9a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000d9c:	4b1e      	ldr	r3, [pc, #120]	@ (8000e18 <MX_TIM1_Init+0xa0>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da2:	4b1d      	ldr	r3, [pc, #116]	@ (8000e18 <MX_TIM1_Init+0xa0>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000da8:	4b1b      	ldr	r3, [pc, #108]	@ (8000e18 <MX_TIM1_Init+0xa0>)
 8000daa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000dae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000db0:	4b19      	ldr	r3, [pc, #100]	@ (8000e18 <MX_TIM1_Init+0xa0>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000db6:	4b18      	ldr	r3, [pc, #96]	@ (8000e18 <MX_TIM1_Init+0xa0>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dbc:	4b16      	ldr	r3, [pc, #88]	@ (8000e18 <MX_TIM1_Init+0xa0>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000dc2:	4815      	ldr	r0, [pc, #84]	@ (8000e18 <MX_TIM1_Init+0xa0>)
 8000dc4:	f002 f94c 	bl	8003060 <HAL_TIM_Base_Init>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000dce:	f000 f923 	bl	8001018 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dd2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dd6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000dd8:	f107 0310 	add.w	r3, r7, #16
 8000ddc:	4619      	mov	r1, r3
 8000dde:	480e      	ldr	r0, [pc, #56]	@ (8000e18 <MX_TIM1_Init+0xa0>)
 8000de0:	f002 fb5e 	bl	80034a0 <HAL_TIM_ConfigClockSource>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000dea:	f000 f915 	bl	8001018 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dee:	2300      	movs	r3, #0
 8000df0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000df2:	2300      	movs	r3, #0
 8000df4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df6:	2300      	movs	r3, #0
 8000df8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000dfa:	1d3b      	adds	r3, r7, #4
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4806      	ldr	r0, [pc, #24]	@ (8000e18 <MX_TIM1_Init+0xa0>)
 8000e00:	f002 fddc 	bl	80039bc <HAL_TIMEx_MasterConfigSynchronization>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000e0a:	f000 f905 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e0e:	bf00      	nop
 8000e10:	3720      	adds	r7, #32
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	200000d4 	.word	0x200000d4
 8000e1c:	40012c00 	.word	0x40012c00

08000e20 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000e24:	4b0f      	ldr	r3, [pc, #60]	@ (8000e64 <MX_TIM16_Init+0x44>)
 8000e26:	4a10      	ldr	r2, [pc, #64]	@ (8000e68 <MX_TIM16_Init+0x48>)
 8000e28:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 17000;
 8000e2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e64 <MX_TIM16_Init+0x44>)
 8000e2c:	f244 2268 	movw	r2, #17000	@ 0x4268
 8000e30:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e32:	4b0c      	ldr	r3, [pc, #48]	@ (8000e64 <MX_TIM16_Init+0x44>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10;
 8000e38:	4b0a      	ldr	r3, [pc, #40]	@ (8000e64 <MX_TIM16_Init+0x44>)
 8000e3a:	220a      	movs	r2, #10
 8000e3c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e3e:	4b09      	ldr	r3, [pc, #36]	@ (8000e64 <MX_TIM16_Init+0x44>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000e44:	4b07      	ldr	r3, [pc, #28]	@ (8000e64 <MX_TIM16_Init+0x44>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e4a:	4b06      	ldr	r3, [pc, #24]	@ (8000e64 <MX_TIM16_Init+0x44>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000e50:	4804      	ldr	r0, [pc, #16]	@ (8000e64 <MX_TIM16_Init+0x44>)
 8000e52:	f002 f905 	bl	8003060 <HAL_TIM_Base_Init>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000e5c:	f000 f8dc 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20000120 	.word	0x20000120
 8000e68:	40014400 	.word	0x40014400

08000e6c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e70:	4b22      	ldr	r3, [pc, #136]	@ (8000efc <MX_USART2_UART_Init+0x90>)
 8000e72:	4a23      	ldr	r2, [pc, #140]	@ (8000f00 <MX_USART2_UART_Init+0x94>)
 8000e74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e76:	4b21      	ldr	r3, [pc, #132]	@ (8000efc <MX_USART2_UART_Init+0x90>)
 8000e78:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e7e:	4b1f      	ldr	r3, [pc, #124]	@ (8000efc <MX_USART2_UART_Init+0x90>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e84:	4b1d      	ldr	r3, [pc, #116]	@ (8000efc <MX_USART2_UART_Init+0x90>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000efc <MX_USART2_UART_Init+0x90>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e90:	4b1a      	ldr	r3, [pc, #104]	@ (8000efc <MX_USART2_UART_Init+0x90>)
 8000e92:	220c      	movs	r2, #12
 8000e94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e96:	4b19      	ldr	r3, [pc, #100]	@ (8000efc <MX_USART2_UART_Init+0x90>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e9c:	4b17      	ldr	r3, [pc, #92]	@ (8000efc <MX_USART2_UART_Init+0x90>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ea2:	4b16      	ldr	r3, [pc, #88]	@ (8000efc <MX_USART2_UART_Init+0x90>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ea8:	4b14      	ldr	r3, [pc, #80]	@ (8000efc <MX_USART2_UART_Init+0x90>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000eae:	4b13      	ldr	r3, [pc, #76]	@ (8000efc <MX_USART2_UART_Init+0x90>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000eb4:	4811      	ldr	r0, [pc, #68]	@ (8000efc <MX_USART2_UART_Init+0x90>)
 8000eb6:	f002 fe5d 	bl	8003b74 <HAL_UART_Init>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000ec0:	f000 f8aa 	bl	8001018 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	480d      	ldr	r0, [pc, #52]	@ (8000efc <MX_USART2_UART_Init+0x90>)
 8000ec8:	f004 fad1 	bl	800546e <HAL_UARTEx_SetTxFifoThreshold>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000ed2:	f000 f8a1 	bl	8001018 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	4808      	ldr	r0, [pc, #32]	@ (8000efc <MX_USART2_UART_Init+0x90>)
 8000eda:	f004 fb06 	bl	80054ea <HAL_UARTEx_SetRxFifoThreshold>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000ee4:	f000 f898 	bl	8001018 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000ee8:	4804      	ldr	r0, [pc, #16]	@ (8000efc <MX_USART2_UART_Init+0x90>)
 8000eea:	f004 fa87 	bl	80053fc <HAL_UARTEx_DisableFifoMode>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000ef4:	f000 f890 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	2000016c 	.word	0x2000016c
 8000f00:	40004400 	.word	0x40004400

08000f04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000f0a:	4b16      	ldr	r3, [pc, #88]	@ (8000f64 <MX_DMA_Init+0x60>)
 8000f0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f0e:	4a15      	ldr	r2, [pc, #84]	@ (8000f64 <MX_DMA_Init+0x60>)
 8000f10:	f043 0304 	orr.w	r3, r3, #4
 8000f14:	6493      	str	r3, [r2, #72]	@ 0x48
 8000f16:	4b13      	ldr	r3, [pc, #76]	@ (8000f64 <MX_DMA_Init+0x60>)
 8000f18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f1a:	f003 0304 	and.w	r3, r3, #4
 8000f1e:	607b      	str	r3, [r7, #4]
 8000f20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f22:	4b10      	ldr	r3, [pc, #64]	@ (8000f64 <MX_DMA_Init+0x60>)
 8000f24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f26:	4a0f      	ldr	r2, [pc, #60]	@ (8000f64 <MX_DMA_Init+0x60>)
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8000f64 <MX_DMA_Init+0x60>)
 8000f30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	603b      	str	r3, [r7, #0]
 8000f38:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	200b      	movs	r0, #11
 8000f40:	f000 fb75 	bl	800162e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f44:	200b      	movs	r0, #11
 8000f46:	f000 fb8c 	bl	8001662 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	200c      	movs	r0, #12
 8000f50:	f000 fb6d 	bl	800162e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000f54:	200c      	movs	r0, #12
 8000f56:	f000 fb84 	bl	8001662 <HAL_NVIC_EnableIRQ>

}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40021000 	.word	0x40021000

08000f68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f6e:	4b15      	ldr	r3, [pc, #84]	@ (8000fc4 <MX_GPIO_Init+0x5c>)
 8000f70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f72:	4a14      	ldr	r2, [pc, #80]	@ (8000fc4 <MX_GPIO_Init+0x5c>)
 8000f74:	f043 0304 	orr.w	r3, r3, #4
 8000f78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f7a:	4b12      	ldr	r3, [pc, #72]	@ (8000fc4 <MX_GPIO_Init+0x5c>)
 8000f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f7e:	f003 0304 	and.w	r3, r3, #4
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f86:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc4 <MX_GPIO_Init+0x5c>)
 8000f88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f8a:	4a0e      	ldr	r2, [pc, #56]	@ (8000fc4 <MX_GPIO_Init+0x5c>)
 8000f8c:	f043 0320 	orr.w	r3, r3, #32
 8000f90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f92:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc4 <MX_GPIO_Init+0x5c>)
 8000f94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f96:	f003 0320 	and.w	r3, r3, #32
 8000f9a:	60bb      	str	r3, [r7, #8]
 8000f9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9e:	4b09      	ldr	r3, [pc, #36]	@ (8000fc4 <MX_GPIO_Init+0x5c>)
 8000fa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fa2:	4a08      	ldr	r2, [pc, #32]	@ (8000fc4 <MX_GPIO_Init+0x5c>)
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000faa:	4b06      	ldr	r3, [pc, #24]	@ (8000fc4 <MX_GPIO_Init+0x5c>)
 8000fac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fb6:	bf00      	nop
 8000fb8:	3714      	adds	r7, #20
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	40021000 	.word	0x40021000

08000fc8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART2)  // Eğer kesme USART1'den geliyorsa
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a08      	ldr	r2, [pc, #32]	@ (8000ff8 <HAL_UART_RxCpltCallback+0x30>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d109      	bne.n	8000fee <HAL_UART_RxCpltCallback+0x26>
	    {
		HAL_UART_Receive_DMA(&huart2, (uint8_t *)&rx_putch , 1);
 8000fda:	2201      	movs	r2, #1
 8000fdc:	4907      	ldr	r1, [pc, #28]	@ (8000ffc <HAL_UART_RxCpltCallback+0x34>)
 8000fde:	4808      	ldr	r0, [pc, #32]	@ (8001000 <HAL_UART_RxCpltCallback+0x38>)
 8000fe0:	f002 fe98 	bl	8003d14 <HAL_UART_Receive_DMA>
		ReceiveInterrupt(rx_putch);
 8000fe4:	4b05      	ldr	r3, [pc, #20]	@ (8000ffc <HAL_UART_RxCpltCallback+0x34>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff fe19 	bl	8000c20 <ReceiveInterrupt>

	    }

}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40004400 	.word	0x40004400
 8000ffc:	200000d0 	.word	0x200000d0
 8001000:	2000016c 	.word	0x2000016c

08001004 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
	PetitModBus_TimerValues();
 800100c:	f7ff fe32 	bl	8000c74 <PetitModBus_TimerValues>
}
 8001010:	bf00      	nop
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800101c:	b672      	cpsid	i
}
 800101e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001020:	bf00      	nop
 8001022:	e7fd      	b.n	8001020 <Error_Handler+0x8>

08001024 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800102a:	4b0f      	ldr	r3, [pc, #60]	@ (8001068 <HAL_MspInit+0x44>)
 800102c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800102e:	4a0e      	ldr	r2, [pc, #56]	@ (8001068 <HAL_MspInit+0x44>)
 8001030:	f043 0301 	orr.w	r3, r3, #1
 8001034:	6613      	str	r3, [r2, #96]	@ 0x60
 8001036:	4b0c      	ldr	r3, [pc, #48]	@ (8001068 <HAL_MspInit+0x44>)
 8001038:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	607b      	str	r3, [r7, #4]
 8001040:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001042:	4b09      	ldr	r3, [pc, #36]	@ (8001068 <HAL_MspInit+0x44>)
 8001044:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001046:	4a08      	ldr	r2, [pc, #32]	@ (8001068 <HAL_MspInit+0x44>)
 8001048:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800104c:	6593      	str	r3, [r2, #88]	@ 0x58
 800104e:	4b06      	ldr	r3, [pc, #24]	@ (8001068 <HAL_MspInit+0x44>)
 8001050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001052:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001056:	603b      	str	r3, [r7, #0]
 8001058:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800105a:	f001 f875 	bl	8002148 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40021000 	.word	0x40021000

0800106c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a1a      	ldr	r2, [pc, #104]	@ (80010e4 <HAL_TIM_Base_MspInit+0x78>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d114      	bne.n	80010a8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800107e:	4b1a      	ldr	r3, [pc, #104]	@ (80010e8 <HAL_TIM_Base_MspInit+0x7c>)
 8001080:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001082:	4a19      	ldr	r2, [pc, #100]	@ (80010e8 <HAL_TIM_Base_MspInit+0x7c>)
 8001084:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001088:	6613      	str	r3, [r2, #96]	@ 0x60
 800108a:	4b17      	ldr	r3, [pc, #92]	@ (80010e8 <HAL_TIM_Base_MspInit+0x7c>)
 800108c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800108e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001096:	2200      	movs	r2, #0
 8001098:	2100      	movs	r1, #0
 800109a:	2019      	movs	r0, #25
 800109c:	f000 fac7 	bl	800162e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80010a0:	2019      	movs	r0, #25
 80010a2:	f000 fade 	bl	8001662 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80010a6:	e018      	b.n	80010da <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM16)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a0f      	ldr	r2, [pc, #60]	@ (80010ec <HAL_TIM_Base_MspInit+0x80>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d113      	bne.n	80010da <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80010b2:	4b0d      	ldr	r3, [pc, #52]	@ (80010e8 <HAL_TIM_Base_MspInit+0x7c>)
 80010b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010b6:	4a0c      	ldr	r2, [pc, #48]	@ (80010e8 <HAL_TIM_Base_MspInit+0x7c>)
 80010b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80010be:	4b0a      	ldr	r3, [pc, #40]	@ (80010e8 <HAL_TIM_Base_MspInit+0x7c>)
 80010c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010c6:	60bb      	str	r3, [r7, #8]
 80010c8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80010ca:	2200      	movs	r2, #0
 80010cc:	2100      	movs	r1, #0
 80010ce:	2019      	movs	r0, #25
 80010d0:	f000 faad 	bl	800162e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80010d4:	2019      	movs	r0, #25
 80010d6:	f000 fac4 	bl	8001662 <HAL_NVIC_EnableIRQ>
}
 80010da:	bf00      	nop
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40012c00 	.word	0x40012c00
 80010e8:	40021000 	.word	0x40021000
 80010ec:	40014400 	.word	0x40014400

080010f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b09e      	sub	sp, #120	@ 0x78
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001108:	f107 0310 	add.w	r3, r7, #16
 800110c:	2254      	movs	r2, #84	@ 0x54
 800110e:	2100      	movs	r1, #0
 8001110:	4618      	mov	r0, r3
 8001112:	f004 fa77 	bl	8005604 <memset>
  if(huart->Instance==USART2)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a4d      	ldr	r2, [pc, #308]	@ (8001250 <HAL_UART_MspInit+0x160>)
 800111c:	4293      	cmp	r3, r2
 800111e:	f040 8092 	bne.w	8001246 <HAL_UART_MspInit+0x156>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001122:	2302      	movs	r3, #2
 8001124:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001126:	2300      	movs	r3, #0
 8001128:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800112a:	f107 0310 	add.w	r3, r7, #16
 800112e:	4618      	mov	r0, r3
 8001130:	f001 fd48 	bl	8002bc4 <HAL_RCCEx_PeriphCLKConfig>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800113a:	f7ff ff6d 	bl	8001018 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800113e:	4b45      	ldr	r3, [pc, #276]	@ (8001254 <HAL_UART_MspInit+0x164>)
 8001140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001142:	4a44      	ldr	r2, [pc, #272]	@ (8001254 <HAL_UART_MspInit+0x164>)
 8001144:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001148:	6593      	str	r3, [r2, #88]	@ 0x58
 800114a:	4b42      	ldr	r3, [pc, #264]	@ (8001254 <HAL_UART_MspInit+0x164>)
 800114c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800114e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001156:	4b3f      	ldr	r3, [pc, #252]	@ (8001254 <HAL_UART_MspInit+0x164>)
 8001158:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800115a:	4a3e      	ldr	r2, [pc, #248]	@ (8001254 <HAL_UART_MspInit+0x164>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001162:	4b3c      	ldr	r3, [pc, #240]	@ (8001254 <HAL_UART_MspInit+0x164>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800116e:	230c      	movs	r3, #12
 8001170:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001172:	2302      	movs	r3, #2
 8001174:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117a:	2300      	movs	r3, #0
 800117c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800117e:	2307      	movs	r3, #7
 8001180:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001182:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001186:	4619      	mov	r1, r3
 8001188:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800118c:	f000 fdb6 	bl	8001cfc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8001190:	4b31      	ldr	r3, [pc, #196]	@ (8001258 <HAL_UART_MspInit+0x168>)
 8001192:	4a32      	ldr	r2, [pc, #200]	@ (800125c <HAL_UART_MspInit+0x16c>)
 8001194:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001196:	4b30      	ldr	r3, [pc, #192]	@ (8001258 <HAL_UART_MspInit+0x168>)
 8001198:	221a      	movs	r2, #26
 800119a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800119c:	4b2e      	ldr	r3, [pc, #184]	@ (8001258 <HAL_UART_MspInit+0x168>)
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011a2:	4b2d      	ldr	r3, [pc, #180]	@ (8001258 <HAL_UART_MspInit+0x168>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011a8:	4b2b      	ldr	r3, [pc, #172]	@ (8001258 <HAL_UART_MspInit+0x168>)
 80011aa:	2280      	movs	r2, #128	@ 0x80
 80011ac:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011ae:	4b2a      	ldr	r3, [pc, #168]	@ (8001258 <HAL_UART_MspInit+0x168>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011b4:	4b28      	ldr	r3, [pc, #160]	@ (8001258 <HAL_UART_MspInit+0x168>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80011ba:	4b27      	ldr	r3, [pc, #156]	@ (8001258 <HAL_UART_MspInit+0x168>)
 80011bc:	2200      	movs	r2, #0
 80011be:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011c0:	4b25      	ldr	r3, [pc, #148]	@ (8001258 <HAL_UART_MspInit+0x168>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80011c6:	4824      	ldr	r0, [pc, #144]	@ (8001258 <HAL_UART_MspInit+0x168>)
 80011c8:	f000 fa66 	bl	8001698 <HAL_DMA_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 80011d2:	f7ff ff21 	bl	8001018 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a1f      	ldr	r2, [pc, #124]	@ (8001258 <HAL_UART_MspInit+0x168>)
 80011da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80011de:	4a1e      	ldr	r2, [pc, #120]	@ (8001258 <HAL_UART_MspInit+0x168>)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel2;
 80011e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001260 <HAL_UART_MspInit+0x170>)
 80011e6:	4a1f      	ldr	r2, [pc, #124]	@ (8001264 <HAL_UART_MspInit+0x174>)
 80011e8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80011ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001260 <HAL_UART_MspInit+0x170>)
 80011ec:	221b      	movs	r2, #27
 80011ee:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001260 <HAL_UART_MspInit+0x170>)
 80011f2:	2210      	movs	r2, #16
 80011f4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001260 <HAL_UART_MspInit+0x170>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011fc:	4b18      	ldr	r3, [pc, #96]	@ (8001260 <HAL_UART_MspInit+0x170>)
 80011fe:	2280      	movs	r2, #128	@ 0x80
 8001200:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001202:	4b17      	ldr	r3, [pc, #92]	@ (8001260 <HAL_UART_MspInit+0x170>)
 8001204:	2200      	movs	r2, #0
 8001206:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001208:	4b15      	ldr	r3, [pc, #84]	@ (8001260 <HAL_UART_MspInit+0x170>)
 800120a:	2200      	movs	r2, #0
 800120c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800120e:	4b14      	ldr	r3, [pc, #80]	@ (8001260 <HAL_UART_MspInit+0x170>)
 8001210:	2200      	movs	r2, #0
 8001212:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001214:	4b12      	ldr	r3, [pc, #72]	@ (8001260 <HAL_UART_MspInit+0x170>)
 8001216:	2200      	movs	r2, #0
 8001218:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800121a:	4811      	ldr	r0, [pc, #68]	@ (8001260 <HAL_UART_MspInit+0x170>)
 800121c:	f000 fa3c 	bl	8001698 <HAL_DMA_Init>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8001226:	f7ff fef7 	bl	8001018 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a0c      	ldr	r2, [pc, #48]	@ (8001260 <HAL_UART_MspInit+0x170>)
 800122e:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001230:	4a0b      	ldr	r2, [pc, #44]	@ (8001260 <HAL_UART_MspInit+0x170>)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001236:	2200      	movs	r2, #0
 8001238:	2100      	movs	r1, #0
 800123a:	2026      	movs	r0, #38	@ 0x26
 800123c:	f000 f9f7 	bl	800162e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001240:	2026      	movs	r0, #38	@ 0x26
 8001242:	f000 fa0e 	bl	8001662 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001246:	bf00      	nop
 8001248:	3778      	adds	r7, #120	@ 0x78
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40004400 	.word	0x40004400
 8001254:	40021000 	.word	0x40021000
 8001258:	20000200 	.word	0x20000200
 800125c:	40020008 	.word	0x40020008
 8001260:	20000260 	.word	0x20000260
 8001264:	4002001c 	.word	0x4002001c

08001268 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800126c:	bf00      	nop
 800126e:	e7fd      	b.n	800126c <NMI_Handler+0x4>

08001270 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001274:	bf00      	nop
 8001276:	e7fd      	b.n	8001274 <HardFault_Handler+0x4>

08001278 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800127c:	bf00      	nop
 800127e:	e7fd      	b.n	800127c <MemManage_Handler+0x4>

08001280 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001284:	bf00      	nop
 8001286:	e7fd      	b.n	8001284 <BusFault_Handler+0x4>

08001288 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800128c:	bf00      	nop
 800128e:	e7fd      	b.n	800128c <UsageFault_Handler+0x4>

08001290 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr

0800129e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800129e:	b480      	push	{r7}
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr

080012ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012be:	f000 f8bd 	bl	800143c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
	...

080012c8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80012cc:	4802      	ldr	r0, [pc, #8]	@ (80012d8 <DMA1_Channel1_IRQHandler+0x10>)
 80012ce:	f000 fbc6 	bl	8001a5e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000200 	.word	0x20000200

080012dc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80012e0:	4802      	ldr	r0, [pc, #8]	@ (80012ec <DMA1_Channel2_IRQHandler+0x10>)
 80012e2:	f000 fbbc 	bl	8001a5e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000260 	.word	0x20000260

080012f0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012f4:	4803      	ldr	r0, [pc, #12]	@ (8001304 <TIM1_UP_TIM16_IRQHandler+0x14>)
 80012f6:	f001 ff83 	bl	8003200 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80012fa:	4803      	ldr	r0, [pc, #12]	@ (8001308 <TIM1_UP_TIM16_IRQHandler+0x18>)
 80012fc:	f001 ff80 	bl	8003200 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001300:	bf00      	nop
 8001302:	bd80      	pop	{r7, pc}
 8001304:	200000d4 	.word	0x200000d4
 8001308:	20000120 	.word	0x20000120

0800130c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001310:	4802      	ldr	r0, [pc, #8]	@ (800131c <USART2_IRQHandler+0x10>)
 8001312:	f002 fd4b 	bl	8003dac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	2000016c 	.word	0x2000016c

08001320 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001324:	4b06      	ldr	r3, [pc, #24]	@ (8001340 <SystemInit+0x20>)
 8001326:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800132a:	4a05      	ldr	r2, [pc, #20]	@ (8001340 <SystemInit+0x20>)
 800132c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001330:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001344:	480d      	ldr	r0, [pc, #52]	@ (800137c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001346:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001348:	f7ff ffea 	bl	8001320 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800134c:	480c      	ldr	r0, [pc, #48]	@ (8001380 <LoopForever+0x6>)
  ldr r1, =_edata
 800134e:	490d      	ldr	r1, [pc, #52]	@ (8001384 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001350:	4a0d      	ldr	r2, [pc, #52]	@ (8001388 <LoopForever+0xe>)
  movs r3, #0
 8001352:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001354:	e002      	b.n	800135c <LoopCopyDataInit>

08001356 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001356:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001358:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800135a:	3304      	adds	r3, #4

0800135c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800135c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800135e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001360:	d3f9      	bcc.n	8001356 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001362:	4a0a      	ldr	r2, [pc, #40]	@ (800138c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001364:	4c0a      	ldr	r4, [pc, #40]	@ (8001390 <LoopForever+0x16>)
  movs r3, #0
 8001366:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001368:	e001      	b.n	800136e <LoopFillZerobss>

0800136a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800136a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800136c:	3204      	adds	r2, #4

0800136e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800136e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001370:	d3fb      	bcc.n	800136a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001372:	f004 f94f 	bl	8005614 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001376:	f7ff fc8d 	bl	8000c94 <main>

0800137a <LoopForever>:

LoopForever:
    b LoopForever
 800137a:	e7fe      	b.n	800137a <LoopForever>
  ldr   r0, =_estack
 800137c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001380:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001384:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001388:	080056c4 	.word	0x080056c4
  ldr r2, =_sbss
 800138c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001390:	200002c4 	.word	0x200002c4

08001394 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001394:	e7fe      	b.n	8001394 <ADC1_2_IRQHandler>

08001396 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b082      	sub	sp, #8
 800139a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800139c:	2300      	movs	r3, #0
 800139e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013a0:	2003      	movs	r0, #3
 80013a2:	f000 f939 	bl	8001618 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013a6:	2000      	movs	r0, #0
 80013a8:	f000 f80e 	bl	80013c8 <HAL_InitTick>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d002      	beq.n	80013b8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	71fb      	strb	r3, [r7, #7]
 80013b6:	e001      	b.n	80013bc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013b8:	f7ff fe34 	bl	8001024 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013bc:	79fb      	ldrb	r3, [r7, #7]

}
 80013be:	4618      	mov	r0, r3
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
	...

080013c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013d0:	2300      	movs	r3, #0
 80013d2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80013d4:	4b16      	ldr	r3, [pc, #88]	@ (8001430 <HAL_InitTick+0x68>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d022      	beq.n	8001422 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80013dc:	4b15      	ldr	r3, [pc, #84]	@ (8001434 <HAL_InitTick+0x6c>)
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	4b13      	ldr	r3, [pc, #76]	@ (8001430 <HAL_InitTick+0x68>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80013e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80013ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80013f0:	4618      	mov	r0, r3
 80013f2:	f000 f944 	bl	800167e <HAL_SYSTICK_Config>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d10f      	bne.n	800141c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2b0f      	cmp	r3, #15
 8001400:	d809      	bhi.n	8001416 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001402:	2200      	movs	r2, #0
 8001404:	6879      	ldr	r1, [r7, #4]
 8001406:	f04f 30ff 	mov.w	r0, #4294967295
 800140a:	f000 f910 	bl	800162e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800140e:	4a0a      	ldr	r2, [pc, #40]	@ (8001438 <HAL_InitTick+0x70>)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6013      	str	r3, [r2, #0]
 8001414:	e007      	b.n	8001426 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	73fb      	strb	r3, [r7, #15]
 800141a:	e004      	b.n	8001426 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	73fb      	strb	r3, [r7, #15]
 8001420:	e001      	b.n	8001426 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001426:	7bfb      	ldrb	r3, [r7, #15]
}
 8001428:	4618      	mov	r0, r3
 800142a:	3710      	adds	r7, #16
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20000014 	.word	0x20000014
 8001434:	2000000c 	.word	0x2000000c
 8001438:	20000010 	.word	0x20000010

0800143c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001440:	4b05      	ldr	r3, [pc, #20]	@ (8001458 <HAL_IncTick+0x1c>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	4b05      	ldr	r3, [pc, #20]	@ (800145c <HAL_IncTick+0x20>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4413      	add	r3, r2
 800144a:	4a03      	ldr	r2, [pc, #12]	@ (8001458 <HAL_IncTick+0x1c>)
 800144c:	6013      	str	r3, [r2, #0]
}
 800144e:	bf00      	nop
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	200002c0 	.word	0x200002c0
 800145c:	20000014 	.word	0x20000014

08001460 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  return uwTick;
 8001464:	4b03      	ldr	r3, [pc, #12]	@ (8001474 <HAL_GetTick+0x14>)
 8001466:	681b      	ldr	r3, [r3, #0]
}
 8001468:	4618      	mov	r0, r3
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	200002c0 	.word	0x200002c0

08001478 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f003 0307 	and.w	r3, r3, #7
 8001486:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001488:	4b0c      	ldr	r3, [pc, #48]	@ (80014bc <__NVIC_SetPriorityGrouping+0x44>)
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800148e:	68ba      	ldr	r2, [r7, #8]
 8001490:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001494:	4013      	ands	r3, r2
 8001496:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014aa:	4a04      	ldr	r2, [pc, #16]	@ (80014bc <__NVIC_SetPriorityGrouping+0x44>)
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	60d3      	str	r3, [r2, #12]
}
 80014b0:	bf00      	nop
 80014b2:	3714      	adds	r7, #20
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014c4:	4b04      	ldr	r3, [pc, #16]	@ (80014d8 <__NVIC_GetPriorityGrouping+0x18>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	0a1b      	lsrs	r3, r3, #8
 80014ca:	f003 0307 	and.w	r3, r3, #7
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	db0b      	blt.n	8001506 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	f003 021f 	and.w	r2, r3, #31
 80014f4:	4907      	ldr	r1, [pc, #28]	@ (8001514 <__NVIC_EnableIRQ+0x38>)
 80014f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fa:	095b      	lsrs	r3, r3, #5
 80014fc:	2001      	movs	r0, #1
 80014fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	e000e100 	.word	0xe000e100

08001518 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	6039      	str	r1, [r7, #0]
 8001522:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001528:	2b00      	cmp	r3, #0
 800152a:	db0a      	blt.n	8001542 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	b2da      	uxtb	r2, r3
 8001530:	490c      	ldr	r1, [pc, #48]	@ (8001564 <__NVIC_SetPriority+0x4c>)
 8001532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001536:	0112      	lsls	r2, r2, #4
 8001538:	b2d2      	uxtb	r2, r2
 800153a:	440b      	add	r3, r1
 800153c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001540:	e00a      	b.n	8001558 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	b2da      	uxtb	r2, r3
 8001546:	4908      	ldr	r1, [pc, #32]	@ (8001568 <__NVIC_SetPriority+0x50>)
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	f003 030f 	and.w	r3, r3, #15
 800154e:	3b04      	subs	r3, #4
 8001550:	0112      	lsls	r2, r2, #4
 8001552:	b2d2      	uxtb	r2, r2
 8001554:	440b      	add	r3, r1
 8001556:	761a      	strb	r2, [r3, #24]
}
 8001558:	bf00      	nop
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	e000e100 	.word	0xe000e100
 8001568:	e000ed00 	.word	0xe000ed00

0800156c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800156c:	b480      	push	{r7}
 800156e:	b089      	sub	sp, #36	@ 0x24
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f003 0307 	and.w	r3, r3, #7
 800157e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	f1c3 0307 	rsb	r3, r3, #7
 8001586:	2b04      	cmp	r3, #4
 8001588:	bf28      	it	cs
 800158a:	2304      	movcs	r3, #4
 800158c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	3304      	adds	r3, #4
 8001592:	2b06      	cmp	r3, #6
 8001594:	d902      	bls.n	800159c <NVIC_EncodePriority+0x30>
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	3b03      	subs	r3, #3
 800159a:	e000      	b.n	800159e <NVIC_EncodePriority+0x32>
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a0:	f04f 32ff 	mov.w	r2, #4294967295
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	43da      	mvns	r2, r3
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	401a      	ands	r2, r3
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015b4:	f04f 31ff 	mov.w	r1, #4294967295
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	fa01 f303 	lsl.w	r3, r1, r3
 80015be:	43d9      	mvns	r1, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c4:	4313      	orrs	r3, r2
         );
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3724      	adds	r7, #36	@ 0x24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
	...

080015d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3b01      	subs	r3, #1
 80015e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015e4:	d301      	bcc.n	80015ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015e6:	2301      	movs	r3, #1
 80015e8:	e00f      	b.n	800160a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001614 <SysTick_Config+0x40>)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	3b01      	subs	r3, #1
 80015f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015f2:	210f      	movs	r1, #15
 80015f4:	f04f 30ff 	mov.w	r0, #4294967295
 80015f8:	f7ff ff8e 	bl	8001518 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015fc:	4b05      	ldr	r3, [pc, #20]	@ (8001614 <SysTick_Config+0x40>)
 80015fe:	2200      	movs	r2, #0
 8001600:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001602:	4b04      	ldr	r3, [pc, #16]	@ (8001614 <SysTick_Config+0x40>)
 8001604:	2207      	movs	r2, #7
 8001606:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	e000e010 	.word	0xe000e010

08001618 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f7ff ff29 	bl	8001478 <__NVIC_SetPriorityGrouping>
}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b086      	sub	sp, #24
 8001632:	af00      	add	r7, sp, #0
 8001634:	4603      	mov	r3, r0
 8001636:	60b9      	str	r1, [r7, #8]
 8001638:	607a      	str	r2, [r7, #4]
 800163a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800163c:	f7ff ff40 	bl	80014c0 <__NVIC_GetPriorityGrouping>
 8001640:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	68b9      	ldr	r1, [r7, #8]
 8001646:	6978      	ldr	r0, [r7, #20]
 8001648:	f7ff ff90 	bl	800156c <NVIC_EncodePriority>
 800164c:	4602      	mov	r2, r0
 800164e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001652:	4611      	mov	r1, r2
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff ff5f 	bl	8001518 <__NVIC_SetPriority>
}
 800165a:	bf00      	nop
 800165c:	3718      	adds	r7, #24
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b082      	sub	sp, #8
 8001666:	af00      	add	r7, sp, #0
 8001668:	4603      	mov	r3, r0
 800166a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800166c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff ff33 	bl	80014dc <__NVIC_EnableIRQ>
}
 8001676:	bf00      	nop
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b082      	sub	sp, #8
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f7ff ffa4 	bl	80015d4 <SysTick_Config>
 800168c:	4603      	mov	r3, r0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
	...

08001698 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d101      	bne.n	80016aa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e08d      	b.n	80017c6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	461a      	mov	r2, r3
 80016b0:	4b47      	ldr	r3, [pc, #284]	@ (80017d0 <HAL_DMA_Init+0x138>)
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d80f      	bhi.n	80016d6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	461a      	mov	r2, r3
 80016bc:	4b45      	ldr	r3, [pc, #276]	@ (80017d4 <HAL_DMA_Init+0x13c>)
 80016be:	4413      	add	r3, r2
 80016c0:	4a45      	ldr	r2, [pc, #276]	@ (80017d8 <HAL_DMA_Init+0x140>)
 80016c2:	fba2 2303 	umull	r2, r3, r2, r3
 80016c6:	091b      	lsrs	r3, r3, #4
 80016c8:	009a      	lsls	r2, r3, #2
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a42      	ldr	r2, [pc, #264]	@ (80017dc <HAL_DMA_Init+0x144>)
 80016d2:	641a      	str	r2, [r3, #64]	@ 0x40
 80016d4:	e00e      	b.n	80016f4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	461a      	mov	r2, r3
 80016dc:	4b40      	ldr	r3, [pc, #256]	@ (80017e0 <HAL_DMA_Init+0x148>)
 80016de:	4413      	add	r3, r2
 80016e0:	4a3d      	ldr	r2, [pc, #244]	@ (80017d8 <HAL_DMA_Init+0x140>)
 80016e2:	fba2 2303 	umull	r2, r3, r2, r3
 80016e6:	091b      	lsrs	r3, r3, #4
 80016e8:	009a      	lsls	r2, r3, #2
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a3c      	ldr	r2, [pc, #240]	@ (80017e4 <HAL_DMA_Init+0x14c>)
 80016f2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2202      	movs	r2, #2
 80016f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800170a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800170e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001718:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	691b      	ldr	r3, [r3, #16]
 800171e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001724:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	699b      	ldr	r3, [r3, #24]
 800172a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001730:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6a1b      	ldr	r3, [r3, #32]
 8001736:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001738:	68fa      	ldr	r2, [r7, #12]
 800173a:	4313      	orrs	r3, r2
 800173c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	68fa      	ldr	r2, [r7, #12]
 8001744:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f000 fa76 	bl	8001c38 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001754:	d102      	bne.n	800175c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685a      	ldr	r2, [r3, #4]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001764:	b2d2      	uxtb	r2, r2
 8001766:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001770:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d010      	beq.n	800179c <HAL_DMA_Init+0x104>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	2b04      	cmp	r3, #4
 8001780:	d80c      	bhi.n	800179c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f000 fa96 	bl	8001cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	e008      	b.n	80017ae <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2200      	movs	r2, #0
 80017b2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2201      	movs	r2, #1
 80017b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40020407 	.word	0x40020407
 80017d4:	bffdfff8 	.word	0xbffdfff8
 80017d8:	cccccccd 	.word	0xcccccccd
 80017dc:	40020000 	.word	0x40020000
 80017e0:	bffdfbf8 	.word	0xbffdfbf8
 80017e4:	40020400 	.word	0x40020400

080017e8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	607a      	str	r2, [r7, #4]
 80017f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80017f6:	2300      	movs	r3, #0
 80017f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001800:	2b01      	cmp	r3, #1
 8001802:	d101      	bne.n	8001808 <HAL_DMA_Start_IT+0x20>
 8001804:	2302      	movs	r3, #2
 8001806:	e066      	b.n	80018d6 <HAL_DMA_Start_IT+0xee>
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2201      	movs	r2, #1
 800180c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001816:	b2db      	uxtb	r3, r3
 8001818:	2b01      	cmp	r3, #1
 800181a:	d155      	bne.n	80018c8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2202      	movs	r2, #2
 8001820:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2200      	movs	r2, #0
 8001828:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f022 0201 	bic.w	r2, r2, #1
 8001838:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	68b9      	ldr	r1, [r7, #8]
 8001840:	68f8      	ldr	r0, [r7, #12]
 8001842:	f000 f9bb 	bl	8001bbc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184a:	2b00      	cmp	r3, #0
 800184c:	d008      	beq.n	8001860 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f042 020e 	orr.w	r2, r2, #14
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	e00f      	b.n	8001880 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f022 0204 	bic.w	r2, r2, #4
 800186e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f042 020a 	orr.w	r2, r2, #10
 800187e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d007      	beq.n	800189e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001898:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800189c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d007      	beq.n	80018b6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80018b4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f042 0201 	orr.w	r2, r2, #1
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	e005      	b.n	80018d4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	2200      	movs	r2, #0
 80018cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80018d0:	2302      	movs	r3, #2
 80018d2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80018d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3718      	adds	r7, #24
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018de:	b480      	push	{r7}
 80018e0:	b085      	sub	sp, #20
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018e6:	2300      	movs	r3, #0
 80018e8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d005      	beq.n	8001902 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2204      	movs	r2, #4
 80018fa:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	73fb      	strb	r3, [r7, #15]
 8001900:	e037      	b.n	8001972 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f022 020e 	bic.w	r2, r2, #14
 8001910:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800191c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001920:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f022 0201 	bic.w	r2, r2, #1
 8001930:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001936:	f003 021f 	and.w	r2, r3, #31
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193e:	2101      	movs	r1, #1
 8001940:	fa01 f202 	lsl.w	r2, r1, r2
 8001944:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800194e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001954:	2b00      	cmp	r3, #0
 8001956:	d00c      	beq.n	8001972 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001962:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001966:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001970:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2201      	movs	r2, #1
 8001976:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001982:	7bfb      	ldrb	r3, [r7, #15]
}
 8001984:	4618      	mov	r0, r3
 8001986:	3714      	adds	r7, #20
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001998:	2300      	movs	r3, #0
 800199a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d00d      	beq.n	80019c4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2204      	movs	r2, #4
 80019ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2201      	movs	r2, #1
 80019b2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	73fb      	strb	r3, [r7, #15]
 80019c2:	e047      	b.n	8001a54 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f022 020e 	bic.w	r2, r2, #14
 80019d2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f022 0201 	bic.w	r2, r2, #1
 80019e2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019ee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80019f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019f8:	f003 021f 	and.w	r2, r3, #31
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a00:	2101      	movs	r1, #1
 8001a02:	fa01 f202 	lsl.w	r2, r1, r2
 8001a06:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001a10:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d00c      	beq.n	8001a34 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a24:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001a28:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001a32:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2201      	movs	r2, #1
 8001a38:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d003      	beq.n	8001a54 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	4798      	blx	r3
    }
  }
  return status;
 8001a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b084      	sub	sp, #16
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a7a:	f003 031f 	and.w	r3, r3, #31
 8001a7e:	2204      	movs	r2, #4
 8001a80:	409a      	lsls	r2, r3
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	4013      	ands	r3, r2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d026      	beq.n	8001ad8 <HAL_DMA_IRQHandler+0x7a>
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	f003 0304 	and.w	r3, r3, #4
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d021      	beq.n	8001ad8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0320 	and.w	r3, r3, #32
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d107      	bne.n	8001ab2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f022 0204 	bic.w	r2, r2, #4
 8001ab0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ab6:	f003 021f 	and.w	r2, r3, #31
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001abe:	2104      	movs	r1, #4
 8001ac0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ac4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d071      	beq.n	8001bb2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001ad6:	e06c      	b.n	8001bb2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001adc:	f003 031f 	and.w	r3, r3, #31
 8001ae0:	2202      	movs	r2, #2
 8001ae2:	409a      	lsls	r2, r3
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d02e      	beq.n	8001b4a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d029      	beq.n	8001b4a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0320 	and.w	r3, r3, #32
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d10b      	bne.n	8001b1c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f022 020a 	bic.w	r2, r2, #10
 8001b12:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b20:	f003 021f 	and.w	r2, r3, #31
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b28:	2102      	movs	r1, #2
 8001b2a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b2e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d038      	beq.n	8001bb2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001b48:	e033      	b.n	8001bb2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b4e:	f003 031f 	and.w	r3, r3, #31
 8001b52:	2208      	movs	r2, #8
 8001b54:	409a      	lsls	r2, r3
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d02a      	beq.n	8001bb4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	f003 0308 	and.w	r3, r3, #8
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d025      	beq.n	8001bb4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f022 020e 	bic.w	r2, r2, #14
 8001b76:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b7c:	f003 021f 	and.w	r2, r3, #31
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b84:	2101      	movs	r1, #1
 8001b86:	fa01 f202 	lsl.w	r2, r1, r2
 8001b8a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2201      	movs	r2, #1
 8001b96:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d004      	beq.n	8001bb4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001bb2:	bf00      	nop
 8001bb4:	bf00      	nop
}
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
 8001bc8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bce:	68fa      	ldr	r2, [r7, #12]
 8001bd0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001bd2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d004      	beq.n	8001be6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001be0:	68fa      	ldr	r2, [r7, #12]
 8001be2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001be4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bea:	f003 021f 	and.w	r2, r3, #31
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf2:	2101      	movs	r1, #1
 8001bf4:	fa01 f202 	lsl.w	r2, r1, r2
 8001bf8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	683a      	ldr	r2, [r7, #0]
 8001c00:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	2b10      	cmp	r3, #16
 8001c08:	d108      	bne.n	8001c1c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	68ba      	ldr	r2, [r7, #8]
 8001c18:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001c1a:	e007      	b.n	8001c2c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	68ba      	ldr	r2, [r7, #8]
 8001c22:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	60da      	str	r2, [r3, #12]
}
 8001c2c:	bf00      	nop
 8001c2e:	3714      	adds	r7, #20
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b087      	sub	sp, #28
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	461a      	mov	r2, r3
 8001c46:	4b16      	ldr	r3, [pc, #88]	@ (8001ca0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d802      	bhi.n	8001c52 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001c4c:	4b15      	ldr	r3, [pc, #84]	@ (8001ca4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001c4e:	617b      	str	r3, [r7, #20]
 8001c50:	e001      	b.n	8001c56 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001c52:	4b15      	ldr	r3, [pc, #84]	@ (8001ca8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001c54:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	3b08      	subs	r3, #8
 8001c62:	4a12      	ldr	r2, [pc, #72]	@ (8001cac <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001c64:	fba2 2303 	umull	r2, r3, r2, r3
 8001c68:	091b      	lsrs	r3, r3, #4
 8001c6a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c70:	089b      	lsrs	r3, r3, #2
 8001c72:	009a      	lsls	r2, r3, #2
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	4413      	add	r3, r2
 8001c78:	461a      	mov	r2, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a0b      	ldr	r2, [pc, #44]	@ (8001cb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001c82:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f003 031f 	and.w	r3, r3, #31
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	409a      	lsls	r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001c92:	bf00      	nop
 8001c94:	371c      	adds	r7, #28
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	40020407 	.word	0x40020407
 8001ca4:	40020800 	.word	0x40020800
 8001ca8:	40020820 	.word	0x40020820
 8001cac:	cccccccd 	.word	0xcccccccd
 8001cb0:	40020880 	.word	0x40020880

08001cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001cc4:	68fa      	ldr	r2, [r7, #12]
 8001cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8001cf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001cc8:	4413      	add	r3, r2
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	461a      	mov	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a08      	ldr	r2, [pc, #32]	@ (8001cf8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001cd6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	f003 031f 	and.w	r3, r3, #31
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	409a      	lsls	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001ce8:	bf00      	nop
 8001cea:	3714      	adds	r7, #20
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	1000823f 	.word	0x1000823f
 8001cf8:	40020940 	.word	0x40020940

08001cfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b087      	sub	sp, #28
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d06:	2300      	movs	r3, #0
 8001d08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001d0a:	e15a      	b.n	8001fc2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	2101      	movs	r1, #1
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	fa01 f303 	lsl.w	r3, r1, r3
 8001d18:	4013      	ands	r3, r2
 8001d1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	f000 814c 	beq.w	8001fbc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f003 0303 	and.w	r3, r3, #3
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d005      	beq.n	8001d3c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d130      	bne.n	8001d9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	2203      	movs	r2, #3
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	4013      	ands	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	68da      	ldr	r2, [r3, #12]
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d72:	2201      	movs	r2, #1
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	091b      	lsrs	r3, r3, #4
 8001d88:	f003 0201 	and.w	r2, r3, #1
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f003 0303 	and.w	r3, r3, #3
 8001da6:	2b03      	cmp	r3, #3
 8001da8:	d017      	beq.n	8001dda <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	2203      	movs	r2, #3
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	689a      	ldr	r2, [r3, #8]
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f003 0303 	and.w	r3, r3, #3
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d123      	bne.n	8001e2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	08da      	lsrs	r2, r3, #3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	3208      	adds	r2, #8
 8001dee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001df2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	f003 0307 	and.w	r3, r3, #7
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	220f      	movs	r2, #15
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	43db      	mvns	r3, r3
 8001e04:	693a      	ldr	r2, [r7, #16]
 8001e06:	4013      	ands	r3, r2
 8001e08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	691a      	ldr	r2, [r3, #16]
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	f003 0307 	and.w	r3, r3, #7
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	08da      	lsrs	r2, r3, #3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	3208      	adds	r2, #8
 8001e28:	6939      	ldr	r1, [r7, #16]
 8001e2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	2203      	movs	r2, #3
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	4013      	ands	r3, r2
 8001e44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f003 0203 	and.w	r2, r3, #3
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f000 80a6 	beq.w	8001fbc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e70:	4b5b      	ldr	r3, [pc, #364]	@ (8001fe0 <HAL_GPIO_Init+0x2e4>)
 8001e72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e74:	4a5a      	ldr	r2, [pc, #360]	@ (8001fe0 <HAL_GPIO_Init+0x2e4>)
 8001e76:	f043 0301 	orr.w	r3, r3, #1
 8001e7a:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e7c:	4b58      	ldr	r3, [pc, #352]	@ (8001fe0 <HAL_GPIO_Init+0x2e4>)
 8001e7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e80:	f003 0301 	and.w	r3, r3, #1
 8001e84:	60bb      	str	r3, [r7, #8]
 8001e86:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e88:	4a56      	ldr	r2, [pc, #344]	@ (8001fe4 <HAL_GPIO_Init+0x2e8>)
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	089b      	lsrs	r3, r3, #2
 8001e8e:	3302      	adds	r3, #2
 8001e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e94:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	f003 0303 	and.w	r3, r3, #3
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	220f      	movs	r2, #15
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001eb2:	d01f      	beq.n	8001ef4 <HAL_GPIO_Init+0x1f8>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a4c      	ldr	r2, [pc, #304]	@ (8001fe8 <HAL_GPIO_Init+0x2ec>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d019      	beq.n	8001ef0 <HAL_GPIO_Init+0x1f4>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a4b      	ldr	r2, [pc, #300]	@ (8001fec <HAL_GPIO_Init+0x2f0>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d013      	beq.n	8001eec <HAL_GPIO_Init+0x1f0>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a4a      	ldr	r2, [pc, #296]	@ (8001ff0 <HAL_GPIO_Init+0x2f4>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d00d      	beq.n	8001ee8 <HAL_GPIO_Init+0x1ec>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a49      	ldr	r2, [pc, #292]	@ (8001ff4 <HAL_GPIO_Init+0x2f8>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d007      	beq.n	8001ee4 <HAL_GPIO_Init+0x1e8>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a48      	ldr	r2, [pc, #288]	@ (8001ff8 <HAL_GPIO_Init+0x2fc>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d101      	bne.n	8001ee0 <HAL_GPIO_Init+0x1e4>
 8001edc:	2305      	movs	r3, #5
 8001ede:	e00a      	b.n	8001ef6 <HAL_GPIO_Init+0x1fa>
 8001ee0:	2306      	movs	r3, #6
 8001ee2:	e008      	b.n	8001ef6 <HAL_GPIO_Init+0x1fa>
 8001ee4:	2304      	movs	r3, #4
 8001ee6:	e006      	b.n	8001ef6 <HAL_GPIO_Init+0x1fa>
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e004      	b.n	8001ef6 <HAL_GPIO_Init+0x1fa>
 8001eec:	2302      	movs	r3, #2
 8001eee:	e002      	b.n	8001ef6 <HAL_GPIO_Init+0x1fa>
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e000      	b.n	8001ef6 <HAL_GPIO_Init+0x1fa>
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	697a      	ldr	r2, [r7, #20]
 8001ef8:	f002 0203 	and.w	r2, r2, #3
 8001efc:	0092      	lsls	r2, r2, #2
 8001efe:	4093      	lsls	r3, r2
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f06:	4937      	ldr	r1, [pc, #220]	@ (8001fe4 <HAL_GPIO_Init+0x2e8>)
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	089b      	lsrs	r3, r3, #2
 8001f0c:	3302      	adds	r3, #2
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f14:	4b39      	ldr	r3, [pc, #228]	@ (8001ffc <HAL_GPIO_Init+0x300>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	4013      	ands	r3, r2
 8001f22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d003      	beq.n	8001f38 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f38:	4a30      	ldr	r2, [pc, #192]	@ (8001ffc <HAL_GPIO_Init+0x300>)
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f3e:	4b2f      	ldr	r3, [pc, #188]	@ (8001ffc <HAL_GPIO_Init+0x300>)
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	43db      	mvns	r3, r3
 8001f48:	693a      	ldr	r2, [r7, #16]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d003      	beq.n	8001f62 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f62:	4a26      	ldr	r2, [pc, #152]	@ (8001ffc <HAL_GPIO_Init+0x300>)
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001f68:	4b24      	ldr	r3, [pc, #144]	@ (8001ffc <HAL_GPIO_Init+0x300>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	43db      	mvns	r3, r3
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	4013      	ands	r3, r2
 8001f76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d003      	beq.n	8001f8c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f8c:	4a1b      	ldr	r2, [pc, #108]	@ (8001ffc <HAL_GPIO_Init+0x300>)
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001f92:	4b1a      	ldr	r3, [pc, #104]	@ (8001ffc <HAL_GPIO_Init+0x300>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	43db      	mvns	r3, r3
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001fb6:	4a11      	ldr	r2, [pc, #68]	@ (8001ffc <HAL_GPIO_Init+0x300>)
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	f47f ae9d 	bne.w	8001d0c <HAL_GPIO_Init+0x10>
  }
}
 8001fd2:	bf00      	nop
 8001fd4:	bf00      	nop
 8001fd6:	371c      	adds	r7, #28
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	40010000 	.word	0x40010000
 8001fe8:	48000400 	.word	0x48000400
 8001fec:	48000800 	.word	0x48000800
 8001ff0:	48000c00 	.word	0x48000c00
 8001ff4:	48001000 	.word	0x48001000
 8001ff8:	48001400 	.word	0x48001400
 8001ffc:	40010400 	.word	0x40010400

08002000 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d141      	bne.n	8002092 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800200e:	4b4b      	ldr	r3, [pc, #300]	@ (800213c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002016:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800201a:	d131      	bne.n	8002080 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800201c:	4b47      	ldr	r3, [pc, #284]	@ (800213c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800201e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002022:	4a46      	ldr	r2, [pc, #280]	@ (800213c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002024:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002028:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800202c:	4b43      	ldr	r3, [pc, #268]	@ (800213c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002034:	4a41      	ldr	r2, [pc, #260]	@ (800213c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002036:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800203a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800203c:	4b40      	ldr	r3, [pc, #256]	@ (8002140 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2232      	movs	r2, #50	@ 0x32
 8002042:	fb02 f303 	mul.w	r3, r2, r3
 8002046:	4a3f      	ldr	r2, [pc, #252]	@ (8002144 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002048:	fba2 2303 	umull	r2, r3, r2, r3
 800204c:	0c9b      	lsrs	r3, r3, #18
 800204e:	3301      	adds	r3, #1
 8002050:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002052:	e002      	b.n	800205a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	3b01      	subs	r3, #1
 8002058:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800205a:	4b38      	ldr	r3, [pc, #224]	@ (800213c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002062:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002066:	d102      	bne.n	800206e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1f2      	bne.n	8002054 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800206e:	4b33      	ldr	r3, [pc, #204]	@ (800213c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002070:	695b      	ldr	r3, [r3, #20]
 8002072:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002076:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800207a:	d158      	bne.n	800212e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e057      	b.n	8002130 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002080:	4b2e      	ldr	r3, [pc, #184]	@ (800213c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002082:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002086:	4a2d      	ldr	r2, [pc, #180]	@ (800213c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002088:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800208c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002090:	e04d      	b.n	800212e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002098:	d141      	bne.n	800211e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800209a:	4b28      	ldr	r3, [pc, #160]	@ (800213c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80020a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020a6:	d131      	bne.n	800210c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020a8:	4b24      	ldr	r3, [pc, #144]	@ (800213c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80020ae:	4a23      	ldr	r2, [pc, #140]	@ (800213c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020b4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80020b8:	4b20      	ldr	r3, [pc, #128]	@ (800213c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80020c0:	4a1e      	ldr	r2, [pc, #120]	@ (800213c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80020c8:	4b1d      	ldr	r3, [pc, #116]	@ (8002140 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2232      	movs	r2, #50	@ 0x32
 80020ce:	fb02 f303 	mul.w	r3, r2, r3
 80020d2:	4a1c      	ldr	r2, [pc, #112]	@ (8002144 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80020d4:	fba2 2303 	umull	r2, r3, r2, r3
 80020d8:	0c9b      	lsrs	r3, r3, #18
 80020da:	3301      	adds	r3, #1
 80020dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020de:	e002      	b.n	80020e6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	3b01      	subs	r3, #1
 80020e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020e6:	4b15      	ldr	r3, [pc, #84]	@ (800213c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020f2:	d102      	bne.n	80020fa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1f2      	bne.n	80020e0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020fa:	4b10      	ldr	r3, [pc, #64]	@ (800213c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002102:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002106:	d112      	bne.n	800212e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e011      	b.n	8002130 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800210c:	4b0b      	ldr	r3, [pc, #44]	@ (800213c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800210e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002112:	4a0a      	ldr	r2, [pc, #40]	@ (800213c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002114:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002118:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800211c:	e007      	b.n	800212e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800211e:	4b07      	ldr	r3, [pc, #28]	@ (800213c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002126:	4a05      	ldr	r2, [pc, #20]	@ (800213c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002128:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800212c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	3714      	adds	r7, #20
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr
 800213c:	40007000 	.word	0x40007000
 8002140:	2000000c 	.word	0x2000000c
 8002144:	431bde83 	.word	0x431bde83

08002148 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800214c:	4b05      	ldr	r3, [pc, #20]	@ (8002164 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	4a04      	ldr	r2, [pc, #16]	@ (8002164 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002152:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002156:	6093      	str	r3, [r2, #8]
}
 8002158:	bf00      	nop
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	40007000 	.word	0x40007000

08002168 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b088      	sub	sp, #32
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e2fe      	b.n	8002778 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b00      	cmp	r3, #0
 8002184:	d075      	beq.n	8002272 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002186:	4b97      	ldr	r3, [pc, #604]	@ (80023e4 <HAL_RCC_OscConfig+0x27c>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	f003 030c 	and.w	r3, r3, #12
 800218e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002190:	4b94      	ldr	r3, [pc, #592]	@ (80023e4 <HAL_RCC_OscConfig+0x27c>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	f003 0303 	and.w	r3, r3, #3
 8002198:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	2b0c      	cmp	r3, #12
 800219e:	d102      	bne.n	80021a6 <HAL_RCC_OscConfig+0x3e>
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	2b03      	cmp	r3, #3
 80021a4:	d002      	beq.n	80021ac <HAL_RCC_OscConfig+0x44>
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	2b08      	cmp	r3, #8
 80021aa:	d10b      	bne.n	80021c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ac:	4b8d      	ldr	r3, [pc, #564]	@ (80023e4 <HAL_RCC_OscConfig+0x27c>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d05b      	beq.n	8002270 <HAL_RCC_OscConfig+0x108>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d157      	bne.n	8002270 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e2d9      	b.n	8002778 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021cc:	d106      	bne.n	80021dc <HAL_RCC_OscConfig+0x74>
 80021ce:	4b85      	ldr	r3, [pc, #532]	@ (80023e4 <HAL_RCC_OscConfig+0x27c>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a84      	ldr	r2, [pc, #528]	@ (80023e4 <HAL_RCC_OscConfig+0x27c>)
 80021d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021d8:	6013      	str	r3, [r2, #0]
 80021da:	e01d      	b.n	8002218 <HAL_RCC_OscConfig+0xb0>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021e4:	d10c      	bne.n	8002200 <HAL_RCC_OscConfig+0x98>
 80021e6:	4b7f      	ldr	r3, [pc, #508]	@ (80023e4 <HAL_RCC_OscConfig+0x27c>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a7e      	ldr	r2, [pc, #504]	@ (80023e4 <HAL_RCC_OscConfig+0x27c>)
 80021ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021f0:	6013      	str	r3, [r2, #0]
 80021f2:	4b7c      	ldr	r3, [pc, #496]	@ (80023e4 <HAL_RCC_OscConfig+0x27c>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a7b      	ldr	r2, [pc, #492]	@ (80023e4 <HAL_RCC_OscConfig+0x27c>)
 80021f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021fc:	6013      	str	r3, [r2, #0]
 80021fe:	e00b      	b.n	8002218 <HAL_RCC_OscConfig+0xb0>
 8002200:	4b78      	ldr	r3, [pc, #480]	@ (80023e4 <HAL_RCC_OscConfig+0x27c>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a77      	ldr	r2, [pc, #476]	@ (80023e4 <HAL_RCC_OscConfig+0x27c>)
 8002206:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800220a:	6013      	str	r3, [r2, #0]
 800220c:	4b75      	ldr	r3, [pc, #468]	@ (80023e4 <HAL_RCC_OscConfig+0x27c>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a74      	ldr	r2, [pc, #464]	@ (80023e4 <HAL_RCC_OscConfig+0x27c>)
 8002212:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002216:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d013      	beq.n	8002248 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002220:	f7ff f91e 	bl	8001460 <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002226:	e008      	b.n	800223a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002228:	f7ff f91a 	bl	8001460 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b64      	cmp	r3, #100	@ 0x64
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e29e      	b.n	8002778 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800223a:	4b6a      	ldr	r3, [pc, #424]	@ (80023e4 <HAL_RCC_OscConfig+0x27c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d0f0      	beq.n	8002228 <HAL_RCC_OscConfig+0xc0>
 8002246:	e014      	b.n	8002272 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002248:	f7ff f90a 	bl	8001460 <HAL_GetTick>
 800224c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002250:	f7ff f906 	bl	8001460 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b64      	cmp	r3, #100	@ 0x64
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e28a      	b.n	8002778 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002262:	4b60      	ldr	r3, [pc, #384]	@ (80023e4 <HAL_RCC_OscConfig+0x27c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1f0      	bne.n	8002250 <HAL_RCC_OscConfig+0xe8>
 800226e:	e000      	b.n	8002272 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002270:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d075      	beq.n	800236a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800227e:	4b59      	ldr	r3, [pc, #356]	@ (80023e4 <HAL_RCC_OscConfig+0x27c>)
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f003 030c 	and.w	r3, r3, #12
 8002286:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002288:	4b56      	ldr	r3, [pc, #344]	@ (80023e4 <HAL_RCC_OscConfig+0x27c>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	f003 0303 	and.w	r3, r3, #3
 8002290:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	2b0c      	cmp	r3, #12
 8002296:	d102      	bne.n	800229e <HAL_RCC_OscConfig+0x136>
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	2b02      	cmp	r3, #2
 800229c:	d002      	beq.n	80022a4 <HAL_RCC_OscConfig+0x13c>
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	2b04      	cmp	r3, #4
 80022a2:	d11f      	bne.n	80022e4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022a4:	4b4f      	ldr	r3, [pc, #316]	@ (80023e4 <HAL_RCC_OscConfig+0x27c>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d005      	beq.n	80022bc <HAL_RCC_OscConfig+0x154>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d101      	bne.n	80022bc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e25d      	b.n	8002778 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022bc:	4b49      	ldr	r3, [pc, #292]	@ (80023e4 <HAL_RCC_OscConfig+0x27c>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	061b      	lsls	r3, r3, #24
 80022ca:	4946      	ldr	r1, [pc, #280]	@ (80023e4 <HAL_RCC_OscConfig+0x27c>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80022d0:	4b45      	ldr	r3, [pc, #276]	@ (80023e8 <HAL_RCC_OscConfig+0x280>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7ff f877 	bl	80013c8 <HAL_InitTick>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d043      	beq.n	8002368 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e249      	b.n	8002778 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d023      	beq.n	8002334 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022ec:	4b3d      	ldr	r3, [pc, #244]	@ (80023e4 <HAL_RCC_OscConfig+0x27c>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a3c      	ldr	r2, [pc, #240]	@ (80023e4 <HAL_RCC_OscConfig+0x27c>)
 80022f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f8:	f7ff f8b2 	bl	8001460 <HAL_GetTick>
 80022fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022fe:	e008      	b.n	8002312 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002300:	f7ff f8ae 	bl	8001460 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e232      	b.n	8002778 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002312:	4b34      	ldr	r3, [pc, #208]	@ (80023e4 <HAL_RCC_OscConfig+0x27c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800231a:	2b00      	cmp	r3, #0
 800231c:	d0f0      	beq.n	8002300 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800231e:	4b31      	ldr	r3, [pc, #196]	@ (80023e4 <HAL_RCC_OscConfig+0x27c>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	061b      	lsls	r3, r3, #24
 800232c:	492d      	ldr	r1, [pc, #180]	@ (80023e4 <HAL_RCC_OscConfig+0x27c>)
 800232e:	4313      	orrs	r3, r2
 8002330:	604b      	str	r3, [r1, #4]
 8002332:	e01a      	b.n	800236a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002334:	4b2b      	ldr	r3, [pc, #172]	@ (80023e4 <HAL_RCC_OscConfig+0x27c>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a2a      	ldr	r2, [pc, #168]	@ (80023e4 <HAL_RCC_OscConfig+0x27c>)
 800233a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800233e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002340:	f7ff f88e 	bl	8001460 <HAL_GetTick>
 8002344:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002346:	e008      	b.n	800235a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002348:	f7ff f88a 	bl	8001460 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e20e      	b.n	8002778 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800235a:	4b22      	ldr	r3, [pc, #136]	@ (80023e4 <HAL_RCC_OscConfig+0x27c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1f0      	bne.n	8002348 <HAL_RCC_OscConfig+0x1e0>
 8002366:	e000      	b.n	800236a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002368:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0308 	and.w	r3, r3, #8
 8002372:	2b00      	cmp	r3, #0
 8002374:	d041      	beq.n	80023fa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	695b      	ldr	r3, [r3, #20]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d01c      	beq.n	80023b8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800237e:	4b19      	ldr	r3, [pc, #100]	@ (80023e4 <HAL_RCC_OscConfig+0x27c>)
 8002380:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002384:	4a17      	ldr	r2, [pc, #92]	@ (80023e4 <HAL_RCC_OscConfig+0x27c>)
 8002386:	f043 0301 	orr.w	r3, r3, #1
 800238a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800238e:	f7ff f867 	bl	8001460 <HAL_GetTick>
 8002392:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002394:	e008      	b.n	80023a8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002396:	f7ff f863 	bl	8001460 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d901      	bls.n	80023a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e1e7      	b.n	8002778 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023a8:	4b0e      	ldr	r3, [pc, #56]	@ (80023e4 <HAL_RCC_OscConfig+0x27c>)
 80023aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d0ef      	beq.n	8002396 <HAL_RCC_OscConfig+0x22e>
 80023b6:	e020      	b.n	80023fa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023b8:	4b0a      	ldr	r3, [pc, #40]	@ (80023e4 <HAL_RCC_OscConfig+0x27c>)
 80023ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023be:	4a09      	ldr	r2, [pc, #36]	@ (80023e4 <HAL_RCC_OscConfig+0x27c>)
 80023c0:	f023 0301 	bic.w	r3, r3, #1
 80023c4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023c8:	f7ff f84a 	bl	8001460 <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023ce:	e00d      	b.n	80023ec <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023d0:	f7ff f846 	bl	8001460 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d906      	bls.n	80023ec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e1ca      	b.n	8002778 <HAL_RCC_OscConfig+0x610>
 80023e2:	bf00      	nop
 80023e4:	40021000 	.word	0x40021000
 80023e8:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023ec:	4b8c      	ldr	r3, [pc, #560]	@ (8002620 <HAL_RCC_OscConfig+0x4b8>)
 80023ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1ea      	bne.n	80023d0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0304 	and.w	r3, r3, #4
 8002402:	2b00      	cmp	r3, #0
 8002404:	f000 80a6 	beq.w	8002554 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002408:	2300      	movs	r3, #0
 800240a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800240c:	4b84      	ldr	r3, [pc, #528]	@ (8002620 <HAL_RCC_OscConfig+0x4b8>)
 800240e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002410:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d101      	bne.n	800241c <HAL_RCC_OscConfig+0x2b4>
 8002418:	2301      	movs	r3, #1
 800241a:	e000      	b.n	800241e <HAL_RCC_OscConfig+0x2b6>
 800241c:	2300      	movs	r3, #0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d00d      	beq.n	800243e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002422:	4b7f      	ldr	r3, [pc, #508]	@ (8002620 <HAL_RCC_OscConfig+0x4b8>)
 8002424:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002426:	4a7e      	ldr	r2, [pc, #504]	@ (8002620 <HAL_RCC_OscConfig+0x4b8>)
 8002428:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800242c:	6593      	str	r3, [r2, #88]	@ 0x58
 800242e:	4b7c      	ldr	r3, [pc, #496]	@ (8002620 <HAL_RCC_OscConfig+0x4b8>)
 8002430:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002432:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002436:	60fb      	str	r3, [r7, #12]
 8002438:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800243a:	2301      	movs	r3, #1
 800243c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800243e:	4b79      	ldr	r3, [pc, #484]	@ (8002624 <HAL_RCC_OscConfig+0x4bc>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002446:	2b00      	cmp	r3, #0
 8002448:	d118      	bne.n	800247c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800244a:	4b76      	ldr	r3, [pc, #472]	@ (8002624 <HAL_RCC_OscConfig+0x4bc>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a75      	ldr	r2, [pc, #468]	@ (8002624 <HAL_RCC_OscConfig+0x4bc>)
 8002450:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002454:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002456:	f7ff f803 	bl	8001460 <HAL_GetTick>
 800245a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800245c:	e008      	b.n	8002470 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800245e:	f7fe ffff 	bl	8001460 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	2b02      	cmp	r3, #2
 800246a:	d901      	bls.n	8002470 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e183      	b.n	8002778 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002470:	4b6c      	ldr	r3, [pc, #432]	@ (8002624 <HAL_RCC_OscConfig+0x4bc>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002478:	2b00      	cmp	r3, #0
 800247a:	d0f0      	beq.n	800245e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	2b01      	cmp	r3, #1
 8002482:	d108      	bne.n	8002496 <HAL_RCC_OscConfig+0x32e>
 8002484:	4b66      	ldr	r3, [pc, #408]	@ (8002620 <HAL_RCC_OscConfig+0x4b8>)
 8002486:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800248a:	4a65      	ldr	r2, [pc, #404]	@ (8002620 <HAL_RCC_OscConfig+0x4b8>)
 800248c:	f043 0301 	orr.w	r3, r3, #1
 8002490:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002494:	e024      	b.n	80024e0 <HAL_RCC_OscConfig+0x378>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	2b05      	cmp	r3, #5
 800249c:	d110      	bne.n	80024c0 <HAL_RCC_OscConfig+0x358>
 800249e:	4b60      	ldr	r3, [pc, #384]	@ (8002620 <HAL_RCC_OscConfig+0x4b8>)
 80024a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024a4:	4a5e      	ldr	r2, [pc, #376]	@ (8002620 <HAL_RCC_OscConfig+0x4b8>)
 80024a6:	f043 0304 	orr.w	r3, r3, #4
 80024aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80024ae:	4b5c      	ldr	r3, [pc, #368]	@ (8002620 <HAL_RCC_OscConfig+0x4b8>)
 80024b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024b4:	4a5a      	ldr	r2, [pc, #360]	@ (8002620 <HAL_RCC_OscConfig+0x4b8>)
 80024b6:	f043 0301 	orr.w	r3, r3, #1
 80024ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80024be:	e00f      	b.n	80024e0 <HAL_RCC_OscConfig+0x378>
 80024c0:	4b57      	ldr	r3, [pc, #348]	@ (8002620 <HAL_RCC_OscConfig+0x4b8>)
 80024c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024c6:	4a56      	ldr	r2, [pc, #344]	@ (8002620 <HAL_RCC_OscConfig+0x4b8>)
 80024c8:	f023 0301 	bic.w	r3, r3, #1
 80024cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80024d0:	4b53      	ldr	r3, [pc, #332]	@ (8002620 <HAL_RCC_OscConfig+0x4b8>)
 80024d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024d6:	4a52      	ldr	r2, [pc, #328]	@ (8002620 <HAL_RCC_OscConfig+0x4b8>)
 80024d8:	f023 0304 	bic.w	r3, r3, #4
 80024dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d016      	beq.n	8002516 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e8:	f7fe ffba 	bl	8001460 <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024ee:	e00a      	b.n	8002506 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024f0:	f7fe ffb6 	bl	8001460 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024fe:	4293      	cmp	r3, r2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e138      	b.n	8002778 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002506:	4b46      	ldr	r3, [pc, #280]	@ (8002620 <HAL_RCC_OscConfig+0x4b8>)
 8002508:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800250c:	f003 0302 	and.w	r3, r3, #2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d0ed      	beq.n	80024f0 <HAL_RCC_OscConfig+0x388>
 8002514:	e015      	b.n	8002542 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002516:	f7fe ffa3 	bl	8001460 <HAL_GetTick>
 800251a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800251c:	e00a      	b.n	8002534 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800251e:	f7fe ff9f 	bl	8001460 <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	f241 3288 	movw	r2, #5000	@ 0x1388
 800252c:	4293      	cmp	r3, r2
 800252e:	d901      	bls.n	8002534 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e121      	b.n	8002778 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002534:	4b3a      	ldr	r3, [pc, #232]	@ (8002620 <HAL_RCC_OscConfig+0x4b8>)
 8002536:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1ed      	bne.n	800251e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002542:	7ffb      	ldrb	r3, [r7, #31]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d105      	bne.n	8002554 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002548:	4b35      	ldr	r3, [pc, #212]	@ (8002620 <HAL_RCC_OscConfig+0x4b8>)
 800254a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800254c:	4a34      	ldr	r2, [pc, #208]	@ (8002620 <HAL_RCC_OscConfig+0x4b8>)
 800254e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002552:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0320 	and.w	r3, r3, #32
 800255c:	2b00      	cmp	r3, #0
 800255e:	d03c      	beq.n	80025da <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d01c      	beq.n	80025a2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002568:	4b2d      	ldr	r3, [pc, #180]	@ (8002620 <HAL_RCC_OscConfig+0x4b8>)
 800256a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800256e:	4a2c      	ldr	r2, [pc, #176]	@ (8002620 <HAL_RCC_OscConfig+0x4b8>)
 8002570:	f043 0301 	orr.w	r3, r3, #1
 8002574:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002578:	f7fe ff72 	bl	8001460 <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002580:	f7fe ff6e 	bl	8001460 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e0f2      	b.n	8002778 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002592:	4b23      	ldr	r3, [pc, #140]	@ (8002620 <HAL_RCC_OscConfig+0x4b8>)
 8002594:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d0ef      	beq.n	8002580 <HAL_RCC_OscConfig+0x418>
 80025a0:	e01b      	b.n	80025da <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80025a2:	4b1f      	ldr	r3, [pc, #124]	@ (8002620 <HAL_RCC_OscConfig+0x4b8>)
 80025a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80025a8:	4a1d      	ldr	r2, [pc, #116]	@ (8002620 <HAL_RCC_OscConfig+0x4b8>)
 80025aa:	f023 0301 	bic.w	r3, r3, #1
 80025ae:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b2:	f7fe ff55 	bl	8001460 <HAL_GetTick>
 80025b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80025b8:	e008      	b.n	80025cc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025ba:	f7fe ff51 	bl	8001460 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d901      	bls.n	80025cc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e0d5      	b.n	8002778 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80025cc:	4b14      	ldr	r3, [pc, #80]	@ (8002620 <HAL_RCC_OscConfig+0x4b8>)
 80025ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1ef      	bne.n	80025ba <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	69db      	ldr	r3, [r3, #28]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f000 80c9 	beq.w	8002776 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002620 <HAL_RCC_OscConfig+0x4b8>)
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f003 030c 	and.w	r3, r3, #12
 80025ec:	2b0c      	cmp	r3, #12
 80025ee:	f000 8083 	beq.w	80026f8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d15e      	bne.n	80026b8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025fa:	4b09      	ldr	r3, [pc, #36]	@ (8002620 <HAL_RCC_OscConfig+0x4b8>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a08      	ldr	r2, [pc, #32]	@ (8002620 <HAL_RCC_OscConfig+0x4b8>)
 8002600:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002604:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002606:	f7fe ff2b 	bl	8001460 <HAL_GetTick>
 800260a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800260c:	e00c      	b.n	8002628 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800260e:	f7fe ff27 	bl	8001460 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d905      	bls.n	8002628 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e0ab      	b.n	8002778 <HAL_RCC_OscConfig+0x610>
 8002620:	40021000 	.word	0x40021000
 8002624:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002628:	4b55      	ldr	r3, [pc, #340]	@ (8002780 <HAL_RCC_OscConfig+0x618>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d1ec      	bne.n	800260e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002634:	4b52      	ldr	r3, [pc, #328]	@ (8002780 <HAL_RCC_OscConfig+0x618>)
 8002636:	68da      	ldr	r2, [r3, #12]
 8002638:	4b52      	ldr	r3, [pc, #328]	@ (8002784 <HAL_RCC_OscConfig+0x61c>)
 800263a:	4013      	ands	r3, r2
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	6a11      	ldr	r1, [r2, #32]
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002644:	3a01      	subs	r2, #1
 8002646:	0112      	lsls	r2, r2, #4
 8002648:	4311      	orrs	r1, r2
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800264e:	0212      	lsls	r2, r2, #8
 8002650:	4311      	orrs	r1, r2
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002656:	0852      	lsrs	r2, r2, #1
 8002658:	3a01      	subs	r2, #1
 800265a:	0552      	lsls	r2, r2, #21
 800265c:	4311      	orrs	r1, r2
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002662:	0852      	lsrs	r2, r2, #1
 8002664:	3a01      	subs	r2, #1
 8002666:	0652      	lsls	r2, r2, #25
 8002668:	4311      	orrs	r1, r2
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800266e:	06d2      	lsls	r2, r2, #27
 8002670:	430a      	orrs	r2, r1
 8002672:	4943      	ldr	r1, [pc, #268]	@ (8002780 <HAL_RCC_OscConfig+0x618>)
 8002674:	4313      	orrs	r3, r2
 8002676:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002678:	4b41      	ldr	r3, [pc, #260]	@ (8002780 <HAL_RCC_OscConfig+0x618>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a40      	ldr	r2, [pc, #256]	@ (8002780 <HAL_RCC_OscConfig+0x618>)
 800267e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002682:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002684:	4b3e      	ldr	r3, [pc, #248]	@ (8002780 <HAL_RCC_OscConfig+0x618>)
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	4a3d      	ldr	r2, [pc, #244]	@ (8002780 <HAL_RCC_OscConfig+0x618>)
 800268a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800268e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002690:	f7fe fee6 	bl	8001460 <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002698:	f7fe fee2 	bl	8001460 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e066      	b.n	8002778 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026aa:	4b35      	ldr	r3, [pc, #212]	@ (8002780 <HAL_RCC_OscConfig+0x618>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d0f0      	beq.n	8002698 <HAL_RCC_OscConfig+0x530>
 80026b6:	e05e      	b.n	8002776 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026b8:	4b31      	ldr	r3, [pc, #196]	@ (8002780 <HAL_RCC_OscConfig+0x618>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a30      	ldr	r2, [pc, #192]	@ (8002780 <HAL_RCC_OscConfig+0x618>)
 80026be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80026c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c4:	f7fe fecc 	bl	8001460 <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026cc:	f7fe fec8 	bl	8001460 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e04c      	b.n	8002778 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026de:	4b28      	ldr	r3, [pc, #160]	@ (8002780 <HAL_RCC_OscConfig+0x618>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1f0      	bne.n	80026cc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80026ea:	4b25      	ldr	r3, [pc, #148]	@ (8002780 <HAL_RCC_OscConfig+0x618>)
 80026ec:	68da      	ldr	r2, [r3, #12]
 80026ee:	4924      	ldr	r1, [pc, #144]	@ (8002780 <HAL_RCC_OscConfig+0x618>)
 80026f0:	4b25      	ldr	r3, [pc, #148]	@ (8002788 <HAL_RCC_OscConfig+0x620>)
 80026f2:	4013      	ands	r3, r2
 80026f4:	60cb      	str	r3, [r1, #12]
 80026f6:	e03e      	b.n	8002776 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	69db      	ldr	r3, [r3, #28]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d101      	bne.n	8002704 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e039      	b.n	8002778 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002704:	4b1e      	ldr	r3, [pc, #120]	@ (8002780 <HAL_RCC_OscConfig+0x618>)
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	f003 0203 	and.w	r2, r3, #3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	429a      	cmp	r2, r3
 8002716:	d12c      	bne.n	8002772 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002722:	3b01      	subs	r3, #1
 8002724:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002726:	429a      	cmp	r2, r3
 8002728:	d123      	bne.n	8002772 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002734:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002736:	429a      	cmp	r2, r3
 8002738:	d11b      	bne.n	8002772 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002744:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002746:	429a      	cmp	r2, r3
 8002748:	d113      	bne.n	8002772 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002754:	085b      	lsrs	r3, r3, #1
 8002756:	3b01      	subs	r3, #1
 8002758:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800275a:	429a      	cmp	r2, r3
 800275c:	d109      	bne.n	8002772 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002768:	085b      	lsrs	r3, r3, #1
 800276a:	3b01      	subs	r3, #1
 800276c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800276e:	429a      	cmp	r2, r3
 8002770:	d001      	beq.n	8002776 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e000      	b.n	8002778 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002776:	2300      	movs	r3, #0
}
 8002778:	4618      	mov	r0, r3
 800277a:	3720      	adds	r7, #32
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	40021000 	.word	0x40021000
 8002784:	019f800c 	.word	0x019f800c
 8002788:	feeefffc 	.word	0xfeeefffc

0800278c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002796:	2300      	movs	r3, #0
 8002798:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d101      	bne.n	80027a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e11e      	b.n	80029e2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027a4:	4b91      	ldr	r3, [pc, #580]	@ (80029ec <HAL_RCC_ClockConfig+0x260>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 030f 	and.w	r3, r3, #15
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d910      	bls.n	80027d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027b2:	4b8e      	ldr	r3, [pc, #568]	@ (80029ec <HAL_RCC_ClockConfig+0x260>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f023 020f 	bic.w	r2, r3, #15
 80027ba:	498c      	ldr	r1, [pc, #560]	@ (80029ec <HAL_RCC_ClockConfig+0x260>)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	4313      	orrs	r3, r2
 80027c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027c2:	4b8a      	ldr	r3, [pc, #552]	@ (80029ec <HAL_RCC_ClockConfig+0x260>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 030f 	and.w	r3, r3, #15
 80027ca:	683a      	ldr	r2, [r7, #0]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d001      	beq.n	80027d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e106      	b.n	80029e2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0301 	and.w	r3, r3, #1
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d073      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	2b03      	cmp	r3, #3
 80027e6:	d129      	bne.n	800283c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027e8:	4b81      	ldr	r3, [pc, #516]	@ (80029f0 <HAL_RCC_ClockConfig+0x264>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d101      	bne.n	80027f8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e0f4      	b.n	80029e2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80027f8:	f000 f99e 	bl	8002b38 <RCC_GetSysClockFreqFromPLLSource>
 80027fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	4a7c      	ldr	r2, [pc, #496]	@ (80029f4 <HAL_RCC_ClockConfig+0x268>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d93f      	bls.n	8002886 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002806:	4b7a      	ldr	r3, [pc, #488]	@ (80029f0 <HAL_RCC_ClockConfig+0x264>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d009      	beq.n	8002826 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800281a:	2b00      	cmp	r3, #0
 800281c:	d033      	beq.n	8002886 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002822:	2b00      	cmp	r3, #0
 8002824:	d12f      	bne.n	8002886 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002826:	4b72      	ldr	r3, [pc, #456]	@ (80029f0 <HAL_RCC_ClockConfig+0x264>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800282e:	4a70      	ldr	r2, [pc, #448]	@ (80029f0 <HAL_RCC_ClockConfig+0x264>)
 8002830:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002834:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002836:	2380      	movs	r3, #128	@ 0x80
 8002838:	617b      	str	r3, [r7, #20]
 800283a:	e024      	b.n	8002886 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	2b02      	cmp	r3, #2
 8002842:	d107      	bne.n	8002854 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002844:	4b6a      	ldr	r3, [pc, #424]	@ (80029f0 <HAL_RCC_ClockConfig+0x264>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d109      	bne.n	8002864 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e0c6      	b.n	80029e2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002854:	4b66      	ldr	r3, [pc, #408]	@ (80029f0 <HAL_RCC_ClockConfig+0x264>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800285c:	2b00      	cmp	r3, #0
 800285e:	d101      	bne.n	8002864 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e0be      	b.n	80029e2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002864:	f000 f8ce 	bl	8002a04 <HAL_RCC_GetSysClockFreq>
 8002868:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	4a61      	ldr	r2, [pc, #388]	@ (80029f4 <HAL_RCC_ClockConfig+0x268>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d909      	bls.n	8002886 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002872:	4b5f      	ldr	r3, [pc, #380]	@ (80029f0 <HAL_RCC_ClockConfig+0x264>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800287a:	4a5d      	ldr	r2, [pc, #372]	@ (80029f0 <HAL_RCC_ClockConfig+0x264>)
 800287c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002880:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002882:	2380      	movs	r3, #128	@ 0x80
 8002884:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002886:	4b5a      	ldr	r3, [pc, #360]	@ (80029f0 <HAL_RCC_ClockConfig+0x264>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f023 0203 	bic.w	r2, r3, #3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	4957      	ldr	r1, [pc, #348]	@ (80029f0 <HAL_RCC_ClockConfig+0x264>)
 8002894:	4313      	orrs	r3, r2
 8002896:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002898:	f7fe fde2 	bl	8001460 <HAL_GetTick>
 800289c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800289e:	e00a      	b.n	80028b6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028a0:	f7fe fdde 	bl	8001460 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e095      	b.n	80029e2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028b6:	4b4e      	ldr	r3, [pc, #312]	@ (80029f0 <HAL_RCC_ClockConfig+0x264>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f003 020c 	and.w	r2, r3, #12
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d1eb      	bne.n	80028a0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0302 	and.w	r3, r3, #2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d023      	beq.n	800291c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0304 	and.w	r3, r3, #4
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d005      	beq.n	80028ec <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028e0:	4b43      	ldr	r3, [pc, #268]	@ (80029f0 <HAL_RCC_ClockConfig+0x264>)
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	4a42      	ldr	r2, [pc, #264]	@ (80029f0 <HAL_RCC_ClockConfig+0x264>)
 80028e6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80028ea:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0308 	and.w	r3, r3, #8
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d007      	beq.n	8002908 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80028f8:	4b3d      	ldr	r3, [pc, #244]	@ (80029f0 <HAL_RCC_ClockConfig+0x264>)
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002900:	4a3b      	ldr	r2, [pc, #236]	@ (80029f0 <HAL_RCC_ClockConfig+0x264>)
 8002902:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002906:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002908:	4b39      	ldr	r3, [pc, #228]	@ (80029f0 <HAL_RCC_ClockConfig+0x264>)
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	4936      	ldr	r1, [pc, #216]	@ (80029f0 <HAL_RCC_ClockConfig+0x264>)
 8002916:	4313      	orrs	r3, r2
 8002918:	608b      	str	r3, [r1, #8]
 800291a:	e008      	b.n	800292e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	2b80      	cmp	r3, #128	@ 0x80
 8002920:	d105      	bne.n	800292e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002922:	4b33      	ldr	r3, [pc, #204]	@ (80029f0 <HAL_RCC_ClockConfig+0x264>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	4a32      	ldr	r2, [pc, #200]	@ (80029f0 <HAL_RCC_ClockConfig+0x264>)
 8002928:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800292c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800292e:	4b2f      	ldr	r3, [pc, #188]	@ (80029ec <HAL_RCC_ClockConfig+0x260>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 030f 	and.w	r3, r3, #15
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	429a      	cmp	r2, r3
 800293a:	d21d      	bcs.n	8002978 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800293c:	4b2b      	ldr	r3, [pc, #172]	@ (80029ec <HAL_RCC_ClockConfig+0x260>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f023 020f 	bic.w	r2, r3, #15
 8002944:	4929      	ldr	r1, [pc, #164]	@ (80029ec <HAL_RCC_ClockConfig+0x260>)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	4313      	orrs	r3, r2
 800294a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800294c:	f7fe fd88 	bl	8001460 <HAL_GetTick>
 8002950:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002952:	e00a      	b.n	800296a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002954:	f7fe fd84 	bl	8001460 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002962:	4293      	cmp	r3, r2
 8002964:	d901      	bls.n	800296a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e03b      	b.n	80029e2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800296a:	4b20      	ldr	r3, [pc, #128]	@ (80029ec <HAL_RCC_ClockConfig+0x260>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 030f 	and.w	r3, r3, #15
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	429a      	cmp	r2, r3
 8002976:	d1ed      	bne.n	8002954 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0304 	and.w	r3, r3, #4
 8002980:	2b00      	cmp	r3, #0
 8002982:	d008      	beq.n	8002996 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002984:	4b1a      	ldr	r3, [pc, #104]	@ (80029f0 <HAL_RCC_ClockConfig+0x264>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	4917      	ldr	r1, [pc, #92]	@ (80029f0 <HAL_RCC_ClockConfig+0x264>)
 8002992:	4313      	orrs	r3, r2
 8002994:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0308 	and.w	r3, r3, #8
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d009      	beq.n	80029b6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029a2:	4b13      	ldr	r3, [pc, #76]	@ (80029f0 <HAL_RCC_ClockConfig+0x264>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	490f      	ldr	r1, [pc, #60]	@ (80029f0 <HAL_RCC_ClockConfig+0x264>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029b6:	f000 f825 	bl	8002a04 <HAL_RCC_GetSysClockFreq>
 80029ba:	4602      	mov	r2, r0
 80029bc:	4b0c      	ldr	r3, [pc, #48]	@ (80029f0 <HAL_RCC_ClockConfig+0x264>)
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	091b      	lsrs	r3, r3, #4
 80029c2:	f003 030f 	and.w	r3, r3, #15
 80029c6:	490c      	ldr	r1, [pc, #48]	@ (80029f8 <HAL_RCC_ClockConfig+0x26c>)
 80029c8:	5ccb      	ldrb	r3, [r1, r3]
 80029ca:	f003 031f 	and.w	r3, r3, #31
 80029ce:	fa22 f303 	lsr.w	r3, r2, r3
 80029d2:	4a0a      	ldr	r2, [pc, #40]	@ (80029fc <HAL_RCC_ClockConfig+0x270>)
 80029d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80029d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002a00 <HAL_RCC_ClockConfig+0x274>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4618      	mov	r0, r3
 80029dc:	f7fe fcf4 	bl	80013c8 <HAL_InitTick>
 80029e0:	4603      	mov	r3, r0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3718      	adds	r7, #24
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	40022000 	.word	0x40022000
 80029f0:	40021000 	.word	0x40021000
 80029f4:	04c4b400 	.word	0x04c4b400
 80029f8:	08005674 	.word	0x08005674
 80029fc:	2000000c 	.word	0x2000000c
 8002a00:	20000010 	.word	0x20000010

08002a04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b087      	sub	sp, #28
 8002a08:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002a0a:	4b2c      	ldr	r3, [pc, #176]	@ (8002abc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f003 030c 	and.w	r3, r3, #12
 8002a12:	2b04      	cmp	r3, #4
 8002a14:	d102      	bne.n	8002a1c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a16:	4b2a      	ldr	r3, [pc, #168]	@ (8002ac0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a18:	613b      	str	r3, [r7, #16]
 8002a1a:	e047      	b.n	8002aac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002a1c:	4b27      	ldr	r3, [pc, #156]	@ (8002abc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f003 030c 	and.w	r3, r3, #12
 8002a24:	2b08      	cmp	r3, #8
 8002a26:	d102      	bne.n	8002a2e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a28:	4b26      	ldr	r3, [pc, #152]	@ (8002ac4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a2a:	613b      	str	r3, [r7, #16]
 8002a2c:	e03e      	b.n	8002aac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002a2e:	4b23      	ldr	r3, [pc, #140]	@ (8002abc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f003 030c 	and.w	r3, r3, #12
 8002a36:	2b0c      	cmp	r3, #12
 8002a38:	d136      	bne.n	8002aa8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a3a:	4b20      	ldr	r3, [pc, #128]	@ (8002abc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	f003 0303 	and.w	r3, r3, #3
 8002a42:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a44:	4b1d      	ldr	r3, [pc, #116]	@ (8002abc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	091b      	lsrs	r3, r3, #4
 8002a4a:	f003 030f 	and.w	r3, r3, #15
 8002a4e:	3301      	adds	r3, #1
 8002a50:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2b03      	cmp	r3, #3
 8002a56:	d10c      	bne.n	8002a72 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a58:	4a1a      	ldr	r2, [pc, #104]	@ (8002ac4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a60:	4a16      	ldr	r2, [pc, #88]	@ (8002abc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a62:	68d2      	ldr	r2, [r2, #12]
 8002a64:	0a12      	lsrs	r2, r2, #8
 8002a66:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002a6a:	fb02 f303 	mul.w	r3, r2, r3
 8002a6e:	617b      	str	r3, [r7, #20]
      break;
 8002a70:	e00c      	b.n	8002a8c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a72:	4a13      	ldr	r2, [pc, #76]	@ (8002ac0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a7a:	4a10      	ldr	r2, [pc, #64]	@ (8002abc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a7c:	68d2      	ldr	r2, [r2, #12]
 8002a7e:	0a12      	lsrs	r2, r2, #8
 8002a80:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002a84:	fb02 f303 	mul.w	r3, r2, r3
 8002a88:	617b      	str	r3, [r7, #20]
      break;
 8002a8a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002abc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	0e5b      	lsrs	r3, r3, #25
 8002a92:	f003 0303 	and.w	r3, r3, #3
 8002a96:	3301      	adds	r3, #1
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002a9c:	697a      	ldr	r2, [r7, #20]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aa4:	613b      	str	r3, [r7, #16]
 8002aa6:	e001      	b.n	8002aac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002aac:	693b      	ldr	r3, [r7, #16]
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	371c      	adds	r7, #28
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	00f42400 	.word	0x00f42400
 8002ac4:	016e3600 	.word	0x016e3600

08002ac8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002acc:	4b03      	ldr	r3, [pc, #12]	@ (8002adc <HAL_RCC_GetHCLKFreq+0x14>)
 8002ace:	681b      	ldr	r3, [r3, #0]
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	2000000c 	.word	0x2000000c

08002ae0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ae4:	f7ff fff0 	bl	8002ac8 <HAL_RCC_GetHCLKFreq>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	4b06      	ldr	r3, [pc, #24]	@ (8002b04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	0a1b      	lsrs	r3, r3, #8
 8002af0:	f003 0307 	and.w	r3, r3, #7
 8002af4:	4904      	ldr	r1, [pc, #16]	@ (8002b08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002af6:	5ccb      	ldrb	r3, [r1, r3]
 8002af8:	f003 031f 	and.w	r3, r3, #31
 8002afc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	40021000 	.word	0x40021000
 8002b08:	08005684 	.word	0x08005684

08002b0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002b10:	f7ff ffda 	bl	8002ac8 <HAL_RCC_GetHCLKFreq>
 8002b14:	4602      	mov	r2, r0
 8002b16:	4b06      	ldr	r3, [pc, #24]	@ (8002b30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	0adb      	lsrs	r3, r3, #11
 8002b1c:	f003 0307 	and.w	r3, r3, #7
 8002b20:	4904      	ldr	r1, [pc, #16]	@ (8002b34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b22:	5ccb      	ldrb	r3, [r1, r3]
 8002b24:	f003 031f 	and.w	r3, r3, #31
 8002b28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	40021000 	.word	0x40021000
 8002b34:	08005684 	.word	0x08005684

08002b38 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b087      	sub	sp, #28
 8002b3c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b3e:	4b1e      	ldr	r3, [pc, #120]	@ (8002bb8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	f003 0303 	and.w	r3, r3, #3
 8002b46:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b48:	4b1b      	ldr	r3, [pc, #108]	@ (8002bb8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	091b      	lsrs	r3, r3, #4
 8002b4e:	f003 030f 	and.w	r3, r3, #15
 8002b52:	3301      	adds	r3, #1
 8002b54:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	2b03      	cmp	r3, #3
 8002b5a:	d10c      	bne.n	8002b76 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b5c:	4a17      	ldr	r2, [pc, #92]	@ (8002bbc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b64:	4a14      	ldr	r2, [pc, #80]	@ (8002bb8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b66:	68d2      	ldr	r2, [r2, #12]
 8002b68:	0a12      	lsrs	r2, r2, #8
 8002b6a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002b6e:	fb02 f303 	mul.w	r3, r2, r3
 8002b72:	617b      	str	r3, [r7, #20]
    break;
 8002b74:	e00c      	b.n	8002b90 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b76:	4a12      	ldr	r2, [pc, #72]	@ (8002bc0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b7e:	4a0e      	ldr	r2, [pc, #56]	@ (8002bb8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b80:	68d2      	ldr	r2, [r2, #12]
 8002b82:	0a12      	lsrs	r2, r2, #8
 8002b84:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002b88:	fb02 f303 	mul.w	r3, r2, r3
 8002b8c:	617b      	str	r3, [r7, #20]
    break;
 8002b8e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b90:	4b09      	ldr	r3, [pc, #36]	@ (8002bb8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	0e5b      	lsrs	r3, r3, #25
 8002b96:	f003 0303 	and.w	r3, r3, #3
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002ba0:	697a      	ldr	r2, [r7, #20]
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ba8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002baa:	687b      	ldr	r3, [r7, #4]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	371c      	adds	r7, #28
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr
 8002bb8:	40021000 	.word	0x40021000
 8002bbc:	016e3600 	.word	0x016e3600
 8002bc0:	00f42400 	.word	0x00f42400

08002bc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002bcc:	2300      	movs	r3, #0
 8002bce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f000 8098 	beq.w	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002be2:	2300      	movs	r3, #0
 8002be4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002be6:	4b43      	ldr	r3, [pc, #268]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002be8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d10d      	bne.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bf2:	4b40      	ldr	r3, [pc, #256]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bf6:	4a3f      	ldr	r2, [pc, #252]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bfc:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bfe:	4b3d      	ldr	r3, [pc, #244]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c06:	60bb      	str	r3, [r7, #8]
 8002c08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c0e:	4b3a      	ldr	r3, [pc, #232]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a39      	ldr	r2, [pc, #228]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002c14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c18:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c1a:	f7fe fc21 	bl	8001460 <HAL_GetTick>
 8002c1e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c20:	e009      	b.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c22:	f7fe fc1d 	bl	8001460 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d902      	bls.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	74fb      	strb	r3, [r7, #19]
        break;
 8002c34:	e005      	b.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c36:	4b30      	ldr	r3, [pc, #192]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d0ef      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002c42:	7cfb      	ldrb	r3, [r7, #19]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d159      	bne.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c48:	4b2a      	ldr	r3, [pc, #168]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c52:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d01e      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c5e:	697a      	ldr	r2, [r7, #20]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d019      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c64:	4b23      	ldr	r3, [pc, #140]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c6e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c70:	4b20      	ldr	r3, [pc, #128]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c76:	4a1f      	ldr	r2, [pc, #124]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c80:	4b1c      	ldr	r3, [pc, #112]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c86:	4a1b      	ldr	r2, [pc, #108]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c90:	4a18      	ldr	r2, [pc, #96]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d016      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca2:	f7fe fbdd 	bl	8001460 <HAL_GetTick>
 8002ca6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ca8:	e00b      	b.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002caa:	f7fe fbd9 	bl	8001460 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d902      	bls.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	74fb      	strb	r3, [r7, #19]
            break;
 8002cc0:	e006      	b.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cc2:	4b0c      	ldr	r3, [pc, #48]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cc8:	f003 0302 	and.w	r3, r3, #2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d0ec      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002cd0:	7cfb      	ldrb	r3, [r7, #19]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d10b      	bne.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cd6:	4b07      	ldr	r3, [pc, #28]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cdc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ce4:	4903      	ldr	r1, [pc, #12]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002cec:	e008      	b.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002cee:	7cfb      	ldrb	r3, [r7, #19]
 8002cf0:	74bb      	strb	r3, [r7, #18]
 8002cf2:	e005      	b.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cfc:	7cfb      	ldrb	r3, [r7, #19]
 8002cfe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d00:	7c7b      	ldrb	r3, [r7, #17]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d105      	bne.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d06:	4ba7      	ldr	r3, [pc, #668]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d0a:	4aa6      	ldr	r2, [pc, #664]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d0c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d10:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00a      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d1e:	4ba1      	ldr	r3, [pc, #644]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d24:	f023 0203 	bic.w	r2, r3, #3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	499d      	ldr	r1, [pc, #628]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00a      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d40:	4b98      	ldr	r3, [pc, #608]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d46:	f023 020c 	bic.w	r2, r3, #12
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	4995      	ldr	r1, [pc, #596]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0304 	and.w	r3, r3, #4
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00a      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d62:	4b90      	ldr	r3, [pc, #576]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d68:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	498c      	ldr	r1, [pc, #560]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0308 	and.w	r3, r3, #8
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d00a      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d84:	4b87      	ldr	r3, [pc, #540]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d8a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	4984      	ldr	r1, [pc, #528]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0310 	and.w	r3, r3, #16
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00a      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002da6:	4b7f      	ldr	r3, [pc, #508]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	695b      	ldr	r3, [r3, #20]
 8002db4:	497b      	ldr	r1, [pc, #492]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0320 	and.w	r3, r3, #32
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d00a      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002dc8:	4b76      	ldr	r3, [pc, #472]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dce:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	4973      	ldr	r1, [pc, #460]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d00a      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002dea:	4b6e      	ldr	r3, [pc, #440]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002df0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	69db      	ldr	r3, [r3, #28]
 8002df8:	496a      	ldr	r1, [pc, #424]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00a      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e0c:	4b65      	ldr	r3, [pc, #404]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e12:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a1b      	ldr	r3, [r3, #32]
 8002e1a:	4962      	ldr	r1, [pc, #392]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d00a      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e2e:	4b5d      	ldr	r3, [pc, #372]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e34:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e3c:	4959      	ldr	r1, [pc, #356]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00a      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002e50:	4b54      	ldr	r3, [pc, #336]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e52:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002e56:	f023 0203 	bic.w	r2, r3, #3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e5e:	4951      	ldr	r1, [pc, #324]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00a      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e72:	4b4c      	ldr	r3, [pc, #304]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e78:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e80:	4948      	ldr	r1, [pc, #288]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d015      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e94:	4b43      	ldr	r3, [pc, #268]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e9a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea2:	4940      	ldr	r1, [pc, #256]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002eb2:	d105      	bne.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002eb4:	4b3b      	ldr	r3, [pc, #236]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	4a3a      	ldr	r2, [pc, #232]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ebe:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d015      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ecc:	4b35      	ldr	r3, [pc, #212]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ed2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002eda:	4932      	ldr	r1, [pc, #200]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ee6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002eea:	d105      	bne.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002eec:	4b2d      	ldr	r3, [pc, #180]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	4a2c      	ldr	r2, [pc, #176]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ef2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ef6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d015      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002f04:	4b27      	ldr	r3, [pc, #156]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f0a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f12:	4924      	ldr	r1, [pc, #144]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f1e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f22:	d105      	bne.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f24:	4b1f      	ldr	r3, [pc, #124]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	4a1e      	ldr	r2, [pc, #120]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f2e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d015      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f3c:	4b19      	ldr	r3, [pc, #100]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f42:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f4a:	4916      	ldr	r1, [pc, #88]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f56:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f5a:	d105      	bne.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f5c:	4b11      	ldr	r3, [pc, #68]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	4a10      	ldr	r2, [pc, #64]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f66:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d019      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f74:	4b0b      	ldr	r3, [pc, #44]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f7a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f82:	4908      	ldr	r1, [pc, #32]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f92:	d109      	bne.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f94:	4b03      	ldr	r3, [pc, #12]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	4a02      	ldr	r2, [pc, #8]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f9e:	60d3      	str	r3, [r2, #12]
 8002fa0:	e002      	b.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002fa2:	bf00      	nop
 8002fa4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d015      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002fb4:	4b29      	ldr	r3, [pc, #164]	@ (800305c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fba:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fc2:	4926      	ldr	r1, [pc, #152]	@ (800305c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002fd2:	d105      	bne.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002fd4:	4b21      	ldr	r3, [pc, #132]	@ (800305c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	4a20      	ldr	r2, [pc, #128]	@ (800305c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002fda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fde:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d015      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002fec:	4b1b      	ldr	r3, [pc, #108]	@ (800305c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ff2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ffa:	4918      	ldr	r1, [pc, #96]	@ (800305c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003006:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800300a:	d105      	bne.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800300c:	4b13      	ldr	r3, [pc, #76]	@ (800305c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	4a12      	ldr	r2, [pc, #72]	@ (800305c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003012:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003016:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d015      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003024:	4b0d      	ldr	r3, [pc, #52]	@ (800305c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003026:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800302a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003032:	490a      	ldr	r1, [pc, #40]	@ (800305c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003034:	4313      	orrs	r3, r2
 8003036:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800303e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003042:	d105      	bne.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003044:	4b05      	ldr	r3, [pc, #20]	@ (800305c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	4a04      	ldr	r2, [pc, #16]	@ (800305c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800304a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800304e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003050:	7cbb      	ldrb	r3, [r7, #18]
}
 8003052:	4618      	mov	r0, r3
 8003054:	3718      	adds	r7, #24
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	40021000 	.word	0x40021000

08003060 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d101      	bne.n	8003072 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e049      	b.n	8003106 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d106      	bne.n	800308c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f7fd fff0 	bl	800106c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2202      	movs	r2, #2
 8003090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	3304      	adds	r3, #4
 800309c:	4619      	mov	r1, r3
 800309e:	4610      	mov	r0, r2
 80030a0:	f000 fb3c 	bl	800371c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3708      	adds	r7, #8
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
	...

08003110 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003110:	b480      	push	{r7}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800311e:	b2db      	uxtb	r3, r3
 8003120:	2b01      	cmp	r3, #1
 8003122:	d001      	beq.n	8003128 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e054      	b.n	80031d2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2202      	movs	r2, #2
 800312c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68da      	ldr	r2, [r3, #12]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f042 0201 	orr.w	r2, r2, #1
 800313e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a26      	ldr	r2, [pc, #152]	@ (80031e0 <HAL_TIM_Base_Start_IT+0xd0>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d022      	beq.n	8003190 <HAL_TIM_Base_Start_IT+0x80>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003152:	d01d      	beq.n	8003190 <HAL_TIM_Base_Start_IT+0x80>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a22      	ldr	r2, [pc, #136]	@ (80031e4 <HAL_TIM_Base_Start_IT+0xd4>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d018      	beq.n	8003190 <HAL_TIM_Base_Start_IT+0x80>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a21      	ldr	r2, [pc, #132]	@ (80031e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d013      	beq.n	8003190 <HAL_TIM_Base_Start_IT+0x80>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a1f      	ldr	r2, [pc, #124]	@ (80031ec <HAL_TIM_Base_Start_IT+0xdc>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d00e      	beq.n	8003190 <HAL_TIM_Base_Start_IT+0x80>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a1e      	ldr	r2, [pc, #120]	@ (80031f0 <HAL_TIM_Base_Start_IT+0xe0>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d009      	beq.n	8003190 <HAL_TIM_Base_Start_IT+0x80>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a1c      	ldr	r2, [pc, #112]	@ (80031f4 <HAL_TIM_Base_Start_IT+0xe4>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d004      	beq.n	8003190 <HAL_TIM_Base_Start_IT+0x80>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a1b      	ldr	r2, [pc, #108]	@ (80031f8 <HAL_TIM_Base_Start_IT+0xe8>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d115      	bne.n	80031bc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	689a      	ldr	r2, [r3, #8]
 8003196:	4b19      	ldr	r3, [pc, #100]	@ (80031fc <HAL_TIM_Base_Start_IT+0xec>)
 8003198:	4013      	ands	r3, r2
 800319a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2b06      	cmp	r3, #6
 80031a0:	d015      	beq.n	80031ce <HAL_TIM_Base_Start_IT+0xbe>
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031a8:	d011      	beq.n	80031ce <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f042 0201 	orr.w	r2, r2, #1
 80031b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031ba:	e008      	b.n	80031ce <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f042 0201 	orr.w	r2, r2, #1
 80031ca:	601a      	str	r2, [r3, #0]
 80031cc:	e000      	b.n	80031d0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3714      	adds	r7, #20
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	40012c00 	.word	0x40012c00
 80031e4:	40000400 	.word	0x40000400
 80031e8:	40000800 	.word	0x40000800
 80031ec:	40000c00 	.word	0x40000c00
 80031f0:	40013400 	.word	0x40013400
 80031f4:	40014000 	.word	0x40014000
 80031f8:	40015000 	.word	0x40015000
 80031fc:	00010007 	.word	0x00010007

08003200 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	2b00      	cmp	r3, #0
 8003220:	d020      	beq.n	8003264 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d01b      	beq.n	8003264 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f06f 0202 	mvn.w	r2, #2
 8003234:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2201      	movs	r2, #1
 800323a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	f003 0303 	and.w	r3, r3, #3
 8003246:	2b00      	cmp	r3, #0
 8003248:	d003      	beq.n	8003252 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 fa48 	bl	80036e0 <HAL_TIM_IC_CaptureCallback>
 8003250:	e005      	b.n	800325e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 fa3a 	bl	80036cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 fa4b 	bl	80036f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	f003 0304 	and.w	r3, r3, #4
 800326a:	2b00      	cmp	r3, #0
 800326c:	d020      	beq.n	80032b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f003 0304 	and.w	r3, r3, #4
 8003274:	2b00      	cmp	r3, #0
 8003276:	d01b      	beq.n	80032b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f06f 0204 	mvn.w	r2, #4
 8003280:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2202      	movs	r2, #2
 8003286:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	699b      	ldr	r3, [r3, #24]
 800328e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003292:	2b00      	cmp	r3, #0
 8003294:	d003      	beq.n	800329e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 fa22 	bl	80036e0 <HAL_TIM_IC_CaptureCallback>
 800329c:	e005      	b.n	80032aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 fa14 	bl	80036cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f000 fa25 	bl	80036f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	f003 0308 	and.w	r3, r3, #8
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d020      	beq.n	80032fc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f003 0308 	and.w	r3, r3, #8
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d01b      	beq.n	80032fc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f06f 0208 	mvn.w	r2, #8
 80032cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2204      	movs	r2, #4
 80032d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	69db      	ldr	r3, [r3, #28]
 80032da:	f003 0303 	and.w	r3, r3, #3
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d003      	beq.n	80032ea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 f9fc 	bl	80036e0 <HAL_TIM_IC_CaptureCallback>
 80032e8:	e005      	b.n	80032f6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 f9ee 	bl	80036cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f000 f9ff 	bl	80036f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	f003 0310 	and.w	r3, r3, #16
 8003302:	2b00      	cmp	r3, #0
 8003304:	d020      	beq.n	8003348 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f003 0310 	and.w	r3, r3, #16
 800330c:	2b00      	cmp	r3, #0
 800330e:	d01b      	beq.n	8003348 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f06f 0210 	mvn.w	r2, #16
 8003318:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2208      	movs	r2, #8
 800331e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	69db      	ldr	r3, [r3, #28]
 8003326:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800332a:	2b00      	cmp	r3, #0
 800332c:	d003      	beq.n	8003336 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 f9d6 	bl	80036e0 <HAL_TIM_IC_CaptureCallback>
 8003334:	e005      	b.n	8003342 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 f9c8 	bl	80036cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f000 f9d9 	bl	80036f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00c      	beq.n	800336c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f003 0301 	and.w	r3, r3, #1
 8003358:	2b00      	cmp	r3, #0
 800335a:	d007      	beq.n	800336c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f06f 0201 	mvn.w	r2, #1
 8003364:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f7fd fe4c 	bl	8001004 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003372:	2b00      	cmp	r3, #0
 8003374:	d104      	bne.n	8003380 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00c      	beq.n	800339a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003386:	2b00      	cmp	r3, #0
 8003388:	d007      	beq.n	800339a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003392:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f000 fbb1 	bl	8003afc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d00c      	beq.n	80033be <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d007      	beq.n	80033be <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80033b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f000 fba9 	bl	8003b10 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d00c      	beq.n	80033e2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d007      	beq.n	80033e2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80033da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f000 f993 	bl	8003708 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	f003 0320 	and.w	r3, r3, #32
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d00c      	beq.n	8003406 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f003 0320 	and.w	r3, r3, #32
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d007      	beq.n	8003406 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f06f 0220 	mvn.w	r2, #32
 80033fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f000 fb71 	bl	8003ae8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d00c      	beq.n	800342a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d007      	beq.n	800342a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8003422:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f000 fb7d 	bl	8003b24 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00c      	beq.n	800344e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d007      	beq.n	800344e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8003446:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f000 fb75 	bl	8003b38 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003454:	2b00      	cmp	r3, #0
 8003456:	d00c      	beq.n	8003472 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d007      	beq.n	8003472 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800346a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f000 fb6d 	bl	8003b4c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00c      	beq.n	8003496 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d007      	beq.n	8003496 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800348e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 fb65 	bl	8003b60 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003496:	bf00      	nop
 8003498:	3710      	adds	r7, #16
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
	...

080034a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034aa:	2300      	movs	r3, #0
 80034ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d101      	bne.n	80034bc <HAL_TIM_ConfigClockSource+0x1c>
 80034b8:	2302      	movs	r3, #2
 80034ba:	e0f6      	b.n	80036aa <HAL_TIM_ConfigClockSource+0x20a>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2202      	movs	r2, #2
 80034c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80034da:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80034de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80034e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68ba      	ldr	r2, [r7, #8]
 80034ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a6f      	ldr	r2, [pc, #444]	@ (80036b4 <HAL_TIM_ConfigClockSource+0x214>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	f000 80c1 	beq.w	800367e <HAL_TIM_ConfigClockSource+0x1de>
 80034fc:	4a6d      	ldr	r2, [pc, #436]	@ (80036b4 <HAL_TIM_ConfigClockSource+0x214>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	f200 80c6 	bhi.w	8003690 <HAL_TIM_ConfigClockSource+0x1f0>
 8003504:	4a6c      	ldr	r2, [pc, #432]	@ (80036b8 <HAL_TIM_ConfigClockSource+0x218>)
 8003506:	4293      	cmp	r3, r2
 8003508:	f000 80b9 	beq.w	800367e <HAL_TIM_ConfigClockSource+0x1de>
 800350c:	4a6a      	ldr	r2, [pc, #424]	@ (80036b8 <HAL_TIM_ConfigClockSource+0x218>)
 800350e:	4293      	cmp	r3, r2
 8003510:	f200 80be 	bhi.w	8003690 <HAL_TIM_ConfigClockSource+0x1f0>
 8003514:	4a69      	ldr	r2, [pc, #420]	@ (80036bc <HAL_TIM_ConfigClockSource+0x21c>)
 8003516:	4293      	cmp	r3, r2
 8003518:	f000 80b1 	beq.w	800367e <HAL_TIM_ConfigClockSource+0x1de>
 800351c:	4a67      	ldr	r2, [pc, #412]	@ (80036bc <HAL_TIM_ConfigClockSource+0x21c>)
 800351e:	4293      	cmp	r3, r2
 8003520:	f200 80b6 	bhi.w	8003690 <HAL_TIM_ConfigClockSource+0x1f0>
 8003524:	4a66      	ldr	r2, [pc, #408]	@ (80036c0 <HAL_TIM_ConfigClockSource+0x220>)
 8003526:	4293      	cmp	r3, r2
 8003528:	f000 80a9 	beq.w	800367e <HAL_TIM_ConfigClockSource+0x1de>
 800352c:	4a64      	ldr	r2, [pc, #400]	@ (80036c0 <HAL_TIM_ConfigClockSource+0x220>)
 800352e:	4293      	cmp	r3, r2
 8003530:	f200 80ae 	bhi.w	8003690 <HAL_TIM_ConfigClockSource+0x1f0>
 8003534:	4a63      	ldr	r2, [pc, #396]	@ (80036c4 <HAL_TIM_ConfigClockSource+0x224>)
 8003536:	4293      	cmp	r3, r2
 8003538:	f000 80a1 	beq.w	800367e <HAL_TIM_ConfigClockSource+0x1de>
 800353c:	4a61      	ldr	r2, [pc, #388]	@ (80036c4 <HAL_TIM_ConfigClockSource+0x224>)
 800353e:	4293      	cmp	r3, r2
 8003540:	f200 80a6 	bhi.w	8003690 <HAL_TIM_ConfigClockSource+0x1f0>
 8003544:	4a60      	ldr	r2, [pc, #384]	@ (80036c8 <HAL_TIM_ConfigClockSource+0x228>)
 8003546:	4293      	cmp	r3, r2
 8003548:	f000 8099 	beq.w	800367e <HAL_TIM_ConfigClockSource+0x1de>
 800354c:	4a5e      	ldr	r2, [pc, #376]	@ (80036c8 <HAL_TIM_ConfigClockSource+0x228>)
 800354e:	4293      	cmp	r3, r2
 8003550:	f200 809e 	bhi.w	8003690 <HAL_TIM_ConfigClockSource+0x1f0>
 8003554:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003558:	f000 8091 	beq.w	800367e <HAL_TIM_ConfigClockSource+0x1de>
 800355c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003560:	f200 8096 	bhi.w	8003690 <HAL_TIM_ConfigClockSource+0x1f0>
 8003564:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003568:	f000 8089 	beq.w	800367e <HAL_TIM_ConfigClockSource+0x1de>
 800356c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003570:	f200 808e 	bhi.w	8003690 <HAL_TIM_ConfigClockSource+0x1f0>
 8003574:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003578:	d03e      	beq.n	80035f8 <HAL_TIM_ConfigClockSource+0x158>
 800357a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800357e:	f200 8087 	bhi.w	8003690 <HAL_TIM_ConfigClockSource+0x1f0>
 8003582:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003586:	f000 8086 	beq.w	8003696 <HAL_TIM_ConfigClockSource+0x1f6>
 800358a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800358e:	d87f      	bhi.n	8003690 <HAL_TIM_ConfigClockSource+0x1f0>
 8003590:	2b70      	cmp	r3, #112	@ 0x70
 8003592:	d01a      	beq.n	80035ca <HAL_TIM_ConfigClockSource+0x12a>
 8003594:	2b70      	cmp	r3, #112	@ 0x70
 8003596:	d87b      	bhi.n	8003690 <HAL_TIM_ConfigClockSource+0x1f0>
 8003598:	2b60      	cmp	r3, #96	@ 0x60
 800359a:	d050      	beq.n	800363e <HAL_TIM_ConfigClockSource+0x19e>
 800359c:	2b60      	cmp	r3, #96	@ 0x60
 800359e:	d877      	bhi.n	8003690 <HAL_TIM_ConfigClockSource+0x1f0>
 80035a0:	2b50      	cmp	r3, #80	@ 0x50
 80035a2:	d03c      	beq.n	800361e <HAL_TIM_ConfigClockSource+0x17e>
 80035a4:	2b50      	cmp	r3, #80	@ 0x50
 80035a6:	d873      	bhi.n	8003690 <HAL_TIM_ConfigClockSource+0x1f0>
 80035a8:	2b40      	cmp	r3, #64	@ 0x40
 80035aa:	d058      	beq.n	800365e <HAL_TIM_ConfigClockSource+0x1be>
 80035ac:	2b40      	cmp	r3, #64	@ 0x40
 80035ae:	d86f      	bhi.n	8003690 <HAL_TIM_ConfigClockSource+0x1f0>
 80035b0:	2b30      	cmp	r3, #48	@ 0x30
 80035b2:	d064      	beq.n	800367e <HAL_TIM_ConfigClockSource+0x1de>
 80035b4:	2b30      	cmp	r3, #48	@ 0x30
 80035b6:	d86b      	bhi.n	8003690 <HAL_TIM_ConfigClockSource+0x1f0>
 80035b8:	2b20      	cmp	r3, #32
 80035ba:	d060      	beq.n	800367e <HAL_TIM_ConfigClockSource+0x1de>
 80035bc:	2b20      	cmp	r3, #32
 80035be:	d867      	bhi.n	8003690 <HAL_TIM_ConfigClockSource+0x1f0>
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d05c      	beq.n	800367e <HAL_TIM_ConfigClockSource+0x1de>
 80035c4:	2b10      	cmp	r3, #16
 80035c6:	d05a      	beq.n	800367e <HAL_TIM_ConfigClockSource+0x1de>
 80035c8:	e062      	b.n	8003690 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80035da:	f000 f9cf 	bl	800397c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80035ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68ba      	ldr	r2, [r7, #8]
 80035f4:	609a      	str	r2, [r3, #8]
      break;
 80035f6:	e04f      	b.n	8003698 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003608:	f000 f9b8 	bl	800397c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	689a      	ldr	r2, [r3, #8]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800361a:	609a      	str	r2, [r3, #8]
      break;
 800361c:	e03c      	b.n	8003698 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800362a:	461a      	mov	r2, r3
 800362c:	f000 f92a 	bl	8003884 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2150      	movs	r1, #80	@ 0x50
 8003636:	4618      	mov	r0, r3
 8003638:	f000 f983 	bl	8003942 <TIM_ITRx_SetConfig>
      break;
 800363c:	e02c      	b.n	8003698 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800364a:	461a      	mov	r2, r3
 800364c:	f000 f949 	bl	80038e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2160      	movs	r1, #96	@ 0x60
 8003656:	4618      	mov	r0, r3
 8003658:	f000 f973 	bl	8003942 <TIM_ITRx_SetConfig>
      break;
 800365c:	e01c      	b.n	8003698 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800366a:	461a      	mov	r2, r3
 800366c:	f000 f90a 	bl	8003884 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2140      	movs	r1, #64	@ 0x40
 8003676:	4618      	mov	r0, r3
 8003678:	f000 f963 	bl	8003942 <TIM_ITRx_SetConfig>
      break;
 800367c:	e00c      	b.n	8003698 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4619      	mov	r1, r3
 8003688:	4610      	mov	r0, r2
 800368a:	f000 f95a 	bl	8003942 <TIM_ITRx_SetConfig>
      break;
 800368e:	e003      	b.n	8003698 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	73fb      	strb	r3, [r7, #15]
      break;
 8003694:	e000      	b.n	8003698 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8003696:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80036a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3710      	adds	r7, #16
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	00100070 	.word	0x00100070
 80036b8:	00100060 	.word	0x00100060
 80036bc:	00100050 	.word	0x00100050
 80036c0:	00100040 	.word	0x00100040
 80036c4:	00100030 	.word	0x00100030
 80036c8:	00100020 	.word	0x00100020

080036cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036e8:	bf00      	nop
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800371c:	b480      	push	{r7}
 800371e:	b085      	sub	sp, #20
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a4c      	ldr	r2, [pc, #304]	@ (8003860 <TIM_Base_SetConfig+0x144>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d017      	beq.n	8003764 <TIM_Base_SetConfig+0x48>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800373a:	d013      	beq.n	8003764 <TIM_Base_SetConfig+0x48>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a49      	ldr	r2, [pc, #292]	@ (8003864 <TIM_Base_SetConfig+0x148>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d00f      	beq.n	8003764 <TIM_Base_SetConfig+0x48>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a48      	ldr	r2, [pc, #288]	@ (8003868 <TIM_Base_SetConfig+0x14c>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d00b      	beq.n	8003764 <TIM_Base_SetConfig+0x48>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a47      	ldr	r2, [pc, #284]	@ (800386c <TIM_Base_SetConfig+0x150>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d007      	beq.n	8003764 <TIM_Base_SetConfig+0x48>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a46      	ldr	r2, [pc, #280]	@ (8003870 <TIM_Base_SetConfig+0x154>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d003      	beq.n	8003764 <TIM_Base_SetConfig+0x48>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a45      	ldr	r2, [pc, #276]	@ (8003874 <TIM_Base_SetConfig+0x158>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d108      	bne.n	8003776 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800376a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	68fa      	ldr	r2, [r7, #12]
 8003772:	4313      	orrs	r3, r2
 8003774:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a39      	ldr	r2, [pc, #228]	@ (8003860 <TIM_Base_SetConfig+0x144>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d023      	beq.n	80037c6 <TIM_Base_SetConfig+0xaa>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003784:	d01f      	beq.n	80037c6 <TIM_Base_SetConfig+0xaa>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a36      	ldr	r2, [pc, #216]	@ (8003864 <TIM_Base_SetConfig+0x148>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d01b      	beq.n	80037c6 <TIM_Base_SetConfig+0xaa>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a35      	ldr	r2, [pc, #212]	@ (8003868 <TIM_Base_SetConfig+0x14c>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d017      	beq.n	80037c6 <TIM_Base_SetConfig+0xaa>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a34      	ldr	r2, [pc, #208]	@ (800386c <TIM_Base_SetConfig+0x150>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d013      	beq.n	80037c6 <TIM_Base_SetConfig+0xaa>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a33      	ldr	r2, [pc, #204]	@ (8003870 <TIM_Base_SetConfig+0x154>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d00f      	beq.n	80037c6 <TIM_Base_SetConfig+0xaa>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a33      	ldr	r2, [pc, #204]	@ (8003878 <TIM_Base_SetConfig+0x15c>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d00b      	beq.n	80037c6 <TIM_Base_SetConfig+0xaa>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a32      	ldr	r2, [pc, #200]	@ (800387c <TIM_Base_SetConfig+0x160>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d007      	beq.n	80037c6 <TIM_Base_SetConfig+0xaa>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a31      	ldr	r2, [pc, #196]	@ (8003880 <TIM_Base_SetConfig+0x164>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d003      	beq.n	80037c6 <TIM_Base_SetConfig+0xaa>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a2c      	ldr	r2, [pc, #176]	@ (8003874 <TIM_Base_SetConfig+0x158>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d108      	bne.n	80037d8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	689a      	ldr	r2, [r3, #8]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4a18      	ldr	r2, [pc, #96]	@ (8003860 <TIM_Base_SetConfig+0x144>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d013      	beq.n	800382c <TIM_Base_SetConfig+0x110>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a1a      	ldr	r2, [pc, #104]	@ (8003870 <TIM_Base_SetConfig+0x154>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d00f      	beq.n	800382c <TIM_Base_SetConfig+0x110>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a1a      	ldr	r2, [pc, #104]	@ (8003878 <TIM_Base_SetConfig+0x15c>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d00b      	beq.n	800382c <TIM_Base_SetConfig+0x110>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a19      	ldr	r2, [pc, #100]	@ (800387c <TIM_Base_SetConfig+0x160>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d007      	beq.n	800382c <TIM_Base_SetConfig+0x110>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4a18      	ldr	r2, [pc, #96]	@ (8003880 <TIM_Base_SetConfig+0x164>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d003      	beq.n	800382c <TIM_Base_SetConfig+0x110>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a13      	ldr	r2, [pc, #76]	@ (8003874 <TIM_Base_SetConfig+0x158>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d103      	bne.n	8003834 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	691a      	ldr	r2, [r3, #16]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	2b01      	cmp	r3, #1
 8003844:	d105      	bne.n	8003852 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	f023 0201 	bic.w	r2, r3, #1
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	611a      	str	r2, [r3, #16]
  }
}
 8003852:	bf00      	nop
 8003854:	3714      	adds	r7, #20
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	40012c00 	.word	0x40012c00
 8003864:	40000400 	.word	0x40000400
 8003868:	40000800 	.word	0x40000800
 800386c:	40000c00 	.word	0x40000c00
 8003870:	40013400 	.word	0x40013400
 8003874:	40015000 	.word	0x40015000
 8003878:	40014000 	.word	0x40014000
 800387c:	40014400 	.word	0x40014400
 8003880:	40014800 	.word	0x40014800

08003884 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003884:	b480      	push	{r7}
 8003886:	b087      	sub	sp, #28
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6a1b      	ldr	r3, [r3, #32]
 8003894:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	f023 0201 	bic.w	r2, r3, #1
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80038ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	011b      	lsls	r3, r3, #4
 80038b4:	693a      	ldr	r2, [r7, #16]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	f023 030a 	bic.w	r3, r3, #10
 80038c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038c2:	697a      	ldr	r2, [r7, #20]
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	693a      	ldr	r2, [r7, #16]
 80038ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	697a      	ldr	r2, [r7, #20]
 80038d4:	621a      	str	r2, [r3, #32]
}
 80038d6:	bf00      	nop
 80038d8:	371c      	adds	r7, #28
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr

080038e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038e2:	b480      	push	{r7}
 80038e4:	b087      	sub	sp, #28
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	60f8      	str	r0, [r7, #12]
 80038ea:	60b9      	str	r1, [r7, #8]
 80038ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6a1b      	ldr	r3, [r3, #32]
 80038f8:	f023 0210 	bic.w	r2, r3, #16
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800390c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	031b      	lsls	r3, r3, #12
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	4313      	orrs	r3, r2
 8003916:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800391e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	011b      	lsls	r3, r3, #4
 8003924:	697a      	ldr	r2, [r7, #20]
 8003926:	4313      	orrs	r3, r2
 8003928:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	693a      	ldr	r2, [r7, #16]
 800392e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	697a      	ldr	r2, [r7, #20]
 8003934:	621a      	str	r2, [r3, #32]
}
 8003936:	bf00      	nop
 8003938:	371c      	adds	r7, #28
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr

08003942 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003942:	b480      	push	{r7}
 8003944:	b085      	sub	sp, #20
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
 800394a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8003958:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800395c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800395e:	683a      	ldr	r2, [r7, #0]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	4313      	orrs	r3, r2
 8003964:	f043 0307 	orr.w	r3, r3, #7
 8003968:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	68fa      	ldr	r2, [r7, #12]
 800396e:	609a      	str	r2, [r3, #8]
}
 8003970:	bf00      	nop
 8003972:	3714      	adds	r7, #20
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800397c:	b480      	push	{r7}
 800397e:	b087      	sub	sp, #28
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
 8003988:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003996:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	021a      	lsls	r2, r3, #8
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	431a      	orrs	r2, r3
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	697a      	ldr	r2, [r7, #20]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	697a      	ldr	r2, [r7, #20]
 80039ae:	609a      	str	r2, [r3, #8]
}
 80039b0:	bf00      	nop
 80039b2:	371c      	adds	r7, #28
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039bc:	b480      	push	{r7}
 80039be:	b085      	sub	sp, #20
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d101      	bne.n	80039d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039d0:	2302      	movs	r3, #2
 80039d2:	e074      	b.n	8003abe <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2202      	movs	r2, #2
 80039e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a34      	ldr	r2, [pc, #208]	@ (8003acc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d009      	beq.n	8003a12 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a33      	ldr	r2, [pc, #204]	@ (8003ad0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d004      	beq.n	8003a12 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a31      	ldr	r2, [pc, #196]	@ (8003ad4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d108      	bne.n	8003a24 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003a18:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8003a2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a21      	ldr	r2, [pc, #132]	@ (8003acc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d022      	beq.n	8003a92 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a54:	d01d      	beq.n	8003a92 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a1f      	ldr	r2, [pc, #124]	@ (8003ad8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d018      	beq.n	8003a92 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a1d      	ldr	r2, [pc, #116]	@ (8003adc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d013      	beq.n	8003a92 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a1c      	ldr	r2, [pc, #112]	@ (8003ae0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d00e      	beq.n	8003a92 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a15      	ldr	r2, [pc, #84]	@ (8003ad0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d009      	beq.n	8003a92 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a18      	ldr	r2, [pc, #96]	@ (8003ae4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d004      	beq.n	8003a92 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a11      	ldr	r2, [pc, #68]	@ (8003ad4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d10c      	bne.n	8003aac <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	68ba      	ldr	r2, [r7, #8]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68ba      	ldr	r2, [r7, #8]
 8003aaa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3714      	adds	r7, #20
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	40012c00 	.word	0x40012c00
 8003ad0:	40013400 	.word	0x40013400
 8003ad4:	40015000 	.word	0x40015000
 8003ad8:	40000400 	.word	0x40000400
 8003adc:	40000800 	.word	0x40000800
 8003ae0:	40000c00 	.word	0x40000c00
 8003ae4:	40014000 	.word	0x40014000

08003ae8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003af0:	bf00      	nop
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b04:	bf00      	nop
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003b18:	bf00      	nop
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003b40:	bf00      	nop
 8003b42:	370c      	adds	r7, #12
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003b54:	bf00      	nop
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003b68:	bf00      	nop
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e042      	b.n	8003c0c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d106      	bne.n	8003b9e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f7fd faa9 	bl	80010f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2224      	movs	r2, #36	@ 0x24
 8003ba2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f022 0201 	bic.w	r2, r2, #1
 8003bb4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d002      	beq.n	8003bc4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 ff66 	bl	8004a90 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f000 fc67 	bl	8004498 <UART_SetConfig>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d101      	bne.n	8003bd4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e01b      	b.n	8003c0c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	685a      	ldr	r2, [r3, #4]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003be2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	689a      	ldr	r2, [r3, #8]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003bf2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f042 0201 	orr.w	r2, r2, #1
 8003c02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f000 ffe5 	bl	8004bd4 <UART_CheckIdleState>
 8003c0a:	4603      	mov	r3, r0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3708      	adds	r7, #8
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b08a      	sub	sp, #40	@ 0x28
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	4613      	mov	r3, r2
 8003c20:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c28:	2b20      	cmp	r3, #32
 8003c2a:	d167      	bne.n	8003cfc <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d002      	beq.n	8003c38 <HAL_UART_Transmit_DMA+0x24>
 8003c32:	88fb      	ldrh	r3, [r7, #6]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d101      	bne.n	8003c3c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e060      	b.n	8003cfe <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	68ba      	ldr	r2, [r7, #8]
 8003c40:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	88fa      	ldrh	r2, [r7, #6]
 8003c46:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	88fa      	ldrh	r2, [r7, #6]
 8003c4e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2221      	movs	r2, #33	@ 0x21
 8003c5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d028      	beq.n	8003cbc <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c6e:	4a26      	ldr	r2, [pc, #152]	@ (8003d08 <HAL_UART_Transmit_DMA+0xf4>)
 8003c70:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c76:	4a25      	ldr	r2, [pc, #148]	@ (8003d0c <HAL_UART_Transmit_DMA+0xf8>)
 8003c78:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c7e:	4a24      	ldr	r2, [pc, #144]	@ (8003d10 <HAL_UART_Transmit_DMA+0xfc>)
 8003c80:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c86:	2200      	movs	r2, #0
 8003c88:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c92:	4619      	mov	r1, r3
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	3328      	adds	r3, #40	@ 0x28
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	88fb      	ldrh	r3, [r7, #6]
 8003c9e:	f7fd fda3 	bl	80017e8 <HAL_DMA_Start_IT>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d009      	beq.n	8003cbc <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2210      	movs	r2, #16
 8003cac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e020      	b.n	8003cfe <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2240      	movs	r2, #64	@ 0x40
 8003cc2:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	3308      	adds	r3, #8
 8003cca:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	e853 3f00 	ldrex	r3, [r3]
 8003cd2:	613b      	str	r3, [r7, #16]
   return(result);
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cda:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	3308      	adds	r3, #8
 8003ce2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ce4:	623a      	str	r2, [r7, #32]
 8003ce6:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce8:	69f9      	ldr	r1, [r7, #28]
 8003cea:	6a3a      	ldr	r2, [r7, #32]
 8003cec:	e841 2300 	strex	r3, r2, [r1]
 8003cf0:	61bb      	str	r3, [r7, #24]
   return(result);
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1e5      	bne.n	8003cc4 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	e000      	b.n	8003cfe <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8003cfc:	2302      	movs	r3, #2
  }
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3728      	adds	r7, #40	@ 0x28
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	0800509f 	.word	0x0800509f
 8003d0c:	08005139 	.word	0x08005139
 8003d10:	080052bf 	.word	0x080052bf

08003d14 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b08a      	sub	sp, #40	@ 0x28
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d28:	2b20      	cmp	r3, #32
 8003d2a:	d137      	bne.n	8003d9c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d002      	beq.n	8003d38 <HAL_UART_Receive_DMA+0x24>
 8003d32:	88fb      	ldrh	r3, [r7, #6]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d101      	bne.n	8003d3c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e030      	b.n	8003d9e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a18      	ldr	r2, [pc, #96]	@ (8003da8 <HAL_UART_Receive_DMA+0x94>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d01f      	beq.n	8003d8c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d018      	beq.n	8003d8c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	e853 3f00 	ldrex	r3, [r3]
 8003d66:	613b      	str	r3, [r7, #16]
   return(result);
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003d6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	461a      	mov	r2, r3
 8003d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d78:	623b      	str	r3, [r7, #32]
 8003d7a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d7c:	69f9      	ldr	r1, [r7, #28]
 8003d7e:	6a3a      	ldr	r2, [r7, #32]
 8003d80:	e841 2300 	strex	r3, r2, [r1]
 8003d84:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d1e6      	bne.n	8003d5a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003d8c:	88fb      	ldrh	r3, [r7, #6]
 8003d8e:	461a      	mov	r2, r3
 8003d90:	68b9      	ldr	r1, [r7, #8]
 8003d92:	68f8      	ldr	r0, [r7, #12]
 8003d94:	f001 f836 	bl	8004e04 <UART_Start_Receive_DMA>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	e000      	b.n	8003d9e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003d9c:	2302      	movs	r3, #2
  }
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3728      	adds	r7, #40	@ 0x28
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	40008000 	.word	0x40008000

08003dac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b0ba      	sub	sp, #232	@ 0xe8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	69db      	ldr	r3, [r3, #28]
 8003dba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003dd2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003dd6:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003dda:	4013      	ands	r3, r2
 8003ddc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003de0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d11b      	bne.n	8003e20 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003de8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dec:	f003 0320 	and.w	r3, r3, #32
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d015      	beq.n	8003e20 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003df4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003df8:	f003 0320 	and.w	r3, r3, #32
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d105      	bne.n	8003e0c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003e00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d009      	beq.n	8003e20 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	f000 8300 	beq.w	8004416 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	4798      	blx	r3
      }
      return;
 8003e1e:	e2fa      	b.n	8004416 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003e20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	f000 8123 	beq.w	8004070 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003e2a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003e2e:	4b8d      	ldr	r3, [pc, #564]	@ (8004064 <HAL_UART_IRQHandler+0x2b8>)
 8003e30:	4013      	ands	r3, r2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d106      	bne.n	8003e44 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003e36:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003e3a:	4b8b      	ldr	r3, [pc, #556]	@ (8004068 <HAL_UART_IRQHandler+0x2bc>)
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	f000 8116 	beq.w	8004070 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003e44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e48:	f003 0301 	and.w	r3, r3, #1
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d011      	beq.n	8003e74 <HAL_UART_IRQHandler+0xc8>
 8003e50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00b      	beq.n	8003e74 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2201      	movs	r2, #1
 8003e62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e6a:	f043 0201 	orr.w	r2, r3, #1
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003e74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e78:	f003 0302 	and.w	r3, r3, #2
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d011      	beq.n	8003ea4 <HAL_UART_IRQHandler+0xf8>
 8003e80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e84:	f003 0301 	and.w	r3, r3, #1
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d00b      	beq.n	8003ea4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2202      	movs	r2, #2
 8003e92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e9a:	f043 0204 	orr.w	r2, r3, #4
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ea8:	f003 0304 	and.w	r3, r3, #4
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d011      	beq.n	8003ed4 <HAL_UART_IRQHandler+0x128>
 8003eb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003eb4:	f003 0301 	and.w	r3, r3, #1
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00b      	beq.n	8003ed4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2204      	movs	r2, #4
 8003ec2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eca:	f043 0202 	orr.w	r2, r3, #2
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003ed4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ed8:	f003 0308 	and.w	r3, r3, #8
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d017      	beq.n	8003f10 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003ee0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ee4:	f003 0320 	and.w	r3, r3, #32
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d105      	bne.n	8003ef8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003eec:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003ef0:	4b5c      	ldr	r3, [pc, #368]	@ (8004064 <HAL_UART_IRQHandler+0x2b8>)
 8003ef2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d00b      	beq.n	8003f10 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2208      	movs	r2, #8
 8003efe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f06:	f043 0208 	orr.w	r2, r3, #8
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003f10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d012      	beq.n	8003f42 <HAL_UART_IRQHandler+0x196>
 8003f1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f20:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00c      	beq.n	8003f42 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003f30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f38:	f043 0220 	orr.w	r2, r3, #32
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	f000 8266 	beq.w	800441a <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003f4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f52:	f003 0320 	and.w	r3, r3, #32
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d013      	beq.n	8003f82 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003f5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f5e:	f003 0320 	and.w	r3, r3, #32
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d105      	bne.n	8003f72 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003f66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d007      	beq.n	8003f82 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d003      	beq.n	8003f82 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f88:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f96:	2b40      	cmp	r3, #64	@ 0x40
 8003f98:	d005      	beq.n	8003fa6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003f9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f9e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d054      	beq.n	8004050 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f001 f813 	bl	8004fd2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fb6:	2b40      	cmp	r3, #64	@ 0x40
 8003fb8:	d146      	bne.n	8004048 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	3308      	adds	r3, #8
 8003fc0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003fc8:	e853 3f00 	ldrex	r3, [r3]
 8003fcc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003fd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003fd4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003fd8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	3308      	adds	r3, #8
 8003fe2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003fe6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003fea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003ff2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003ff6:	e841 2300 	strex	r3, r2, [r1]
 8003ffa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003ffe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1d9      	bne.n	8003fba <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800400c:	2b00      	cmp	r3, #0
 800400e:	d017      	beq.n	8004040 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004016:	4a15      	ldr	r2, [pc, #84]	@ (800406c <HAL_UART_IRQHandler+0x2c0>)
 8004018:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004020:	4618      	mov	r0, r3
 8004022:	f7fd fcb5 	bl	8001990 <HAL_DMA_Abort_IT>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d019      	beq.n	8004060 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800403a:	4610      	mov	r0, r2
 800403c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800403e:	e00f      	b.n	8004060 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f000 fa13 	bl	800446c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004046:	e00b      	b.n	8004060 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f000 fa0f 	bl	800446c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800404e:	e007      	b.n	8004060 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f000 fa0b 	bl	800446c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800405e:	e1dc      	b.n	800441a <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004060:	bf00      	nop
    return;
 8004062:	e1da      	b.n	800441a <HAL_UART_IRQHandler+0x66e>
 8004064:	10000001 	.word	0x10000001
 8004068:	04000120 	.word	0x04000120
 800406c:	0800533f 	.word	0x0800533f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004074:	2b01      	cmp	r3, #1
 8004076:	f040 8170 	bne.w	800435a <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800407a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800407e:	f003 0310 	and.w	r3, r3, #16
 8004082:	2b00      	cmp	r3, #0
 8004084:	f000 8169 	beq.w	800435a <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004088:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800408c:	f003 0310 	and.w	r3, r3, #16
 8004090:	2b00      	cmp	r3, #0
 8004092:	f000 8162 	beq.w	800435a <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2210      	movs	r2, #16
 800409c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040a8:	2b40      	cmp	r3, #64	@ 0x40
 80040aa:	f040 80d8 	bne.w	800425e <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80040bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f000 80af 	beq.w	8004224 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80040cc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80040d0:	429a      	cmp	r2, r3
 80040d2:	f080 80a7 	bcs.w	8004224 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80040dc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0320 	and.w	r3, r3, #32
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	f040 8087 	bne.w	8004202 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004100:	e853 3f00 	ldrex	r3, [r3]
 8004104:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004108:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800410c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004110:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	461a      	mov	r2, r3
 800411a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800411e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004122:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004126:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800412a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800412e:	e841 2300 	strex	r3, r2, [r1]
 8004132:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004136:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1da      	bne.n	80040f4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	3308      	adds	r3, #8
 8004144:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004146:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004148:	e853 3f00 	ldrex	r3, [r3]
 800414c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800414e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004150:	f023 0301 	bic.w	r3, r3, #1
 8004154:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	3308      	adds	r3, #8
 800415e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004162:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004166:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004168:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800416a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800416e:	e841 2300 	strex	r3, r2, [r1]
 8004172:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004174:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004176:	2b00      	cmp	r3, #0
 8004178:	d1e1      	bne.n	800413e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	3308      	adds	r3, #8
 8004180:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004182:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004184:	e853 3f00 	ldrex	r3, [r3]
 8004188:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800418a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800418c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004190:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	3308      	adds	r3, #8
 800419a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800419e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80041a0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80041a4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80041a6:	e841 2300 	strex	r3, r2, [r1]
 80041aa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80041ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1e3      	bne.n	800417a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2220      	movs	r2, #32
 80041b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041c8:	e853 3f00 	ldrex	r3, [r3]
 80041cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80041ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041d0:	f023 0310 	bic.w	r3, r3, #16
 80041d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	461a      	mov	r2, r3
 80041de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80041e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80041e4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80041e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80041ea:	e841 2300 	strex	r3, r2, [r1]
 80041ee:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80041f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1e4      	bne.n	80041c0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041fc:	4618      	mov	r0, r3
 80041fe:	f7fd fb6e 	bl	80018de <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2202      	movs	r2, #2
 8004206:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004214:	b29b      	uxth	r3, r3
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	b29b      	uxth	r3, r3
 800421a:	4619      	mov	r1, r3
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f000 f92f 	bl	8004480 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004222:	e0fc      	b.n	800441e <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800422a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800422e:	429a      	cmp	r2, r3
 8004230:	f040 80f5 	bne.w	800441e <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0320 	and.w	r3, r3, #32
 8004242:	2b20      	cmp	r3, #32
 8004244:	f040 80eb 	bne.w	800441e <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2202      	movs	r2, #2
 800424c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004254:	4619      	mov	r1, r3
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 f912 	bl	8004480 <HAL_UARTEx_RxEventCallback>
      return;
 800425c:	e0df      	b.n	800441e <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800426a:	b29b      	uxth	r3, r3
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004278:	b29b      	uxth	r3, r3
 800427a:	2b00      	cmp	r3, #0
 800427c:	f000 80d1 	beq.w	8004422 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8004280:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004284:	2b00      	cmp	r3, #0
 8004286:	f000 80cc 	beq.w	8004422 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004292:	e853 3f00 	ldrex	r3, [r3]
 8004296:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004298:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800429a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800429e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	461a      	mov	r2, r3
 80042a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80042ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80042ae:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80042b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042b4:	e841 2300 	strex	r3, r2, [r1]
 80042b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80042ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d1e4      	bne.n	800428a <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	3308      	adds	r3, #8
 80042c6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ca:	e853 3f00 	ldrex	r3, [r3]
 80042ce:	623b      	str	r3, [r7, #32]
   return(result);
 80042d0:	6a3b      	ldr	r3, [r7, #32]
 80042d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042d6:	f023 0301 	bic.w	r3, r3, #1
 80042da:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	3308      	adds	r3, #8
 80042e4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80042e8:	633a      	str	r2, [r7, #48]	@ 0x30
 80042ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80042ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042f0:	e841 2300 	strex	r3, r2, [r1]
 80042f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80042f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1e1      	bne.n	80042c0 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2220      	movs	r2, #32
 8004300:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	e853 3f00 	ldrex	r3, [r3]
 800431c:	60fb      	str	r3, [r7, #12]
   return(result);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f023 0310 	bic.w	r3, r3, #16
 8004324:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	461a      	mov	r2, r3
 800432e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004332:	61fb      	str	r3, [r7, #28]
 8004334:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004336:	69b9      	ldr	r1, [r7, #24]
 8004338:	69fa      	ldr	r2, [r7, #28]
 800433a:	e841 2300 	strex	r3, r2, [r1]
 800433e:	617b      	str	r3, [r7, #20]
   return(result);
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1e4      	bne.n	8004310 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2202      	movs	r2, #2
 800434a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800434c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004350:	4619      	mov	r1, r3
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 f894 	bl	8004480 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004358:	e063      	b.n	8004422 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800435a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800435e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00e      	beq.n	8004384 <HAL_UART_IRQHandler+0x5d8>
 8004366:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800436a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d008      	beq.n	8004384 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800437a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f001 f81f 	bl	80053c0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004382:	e051      	b.n	8004428 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004384:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004388:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800438c:	2b00      	cmp	r3, #0
 800438e:	d014      	beq.n	80043ba <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004394:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004398:	2b00      	cmp	r3, #0
 800439a:	d105      	bne.n	80043a8 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800439c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d008      	beq.n	80043ba <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d03a      	beq.n	8004426 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	4798      	blx	r3
    }
    return;
 80043b8:	e035      	b.n	8004426 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80043ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d009      	beq.n	80043da <HAL_UART_IRQHandler+0x62e>
 80043c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d003      	beq.n	80043da <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 ffc9 	bl	800536a <UART_EndTransmit_IT>
    return;
 80043d8:	e026      	b.n	8004428 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80043da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d009      	beq.n	80043fa <HAL_UART_IRQHandler+0x64e>
 80043e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043ea:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d003      	beq.n	80043fa <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 fff8 	bl	80053e8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80043f8:	e016      	b.n	8004428 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80043fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d010      	beq.n	8004428 <HAL_UART_IRQHandler+0x67c>
 8004406:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800440a:	2b00      	cmp	r3, #0
 800440c:	da0c      	bge.n	8004428 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 ffe0 	bl	80053d4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004414:	e008      	b.n	8004428 <HAL_UART_IRQHandler+0x67c>
      return;
 8004416:	bf00      	nop
 8004418:	e006      	b.n	8004428 <HAL_UART_IRQHandler+0x67c>
    return;
 800441a:	bf00      	nop
 800441c:	e004      	b.n	8004428 <HAL_UART_IRQHandler+0x67c>
      return;
 800441e:	bf00      	nop
 8004420:	e002      	b.n	8004428 <HAL_UART_IRQHandler+0x67c>
      return;
 8004422:	bf00      	nop
 8004424:	e000      	b.n	8004428 <HAL_UART_IRQHandler+0x67c>
    return;
 8004426:	bf00      	nop
  }
}
 8004428:	37e8      	adds	r7, #232	@ 0xe8
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop

08004430 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004460:	bf00      	nop
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004474:	bf00      	nop
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	460b      	mov	r3, r1
 800448a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800448c:	bf00      	nop
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004498:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800449c:	b08c      	sub	sp, #48	@ 0x30
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80044a2:	2300      	movs	r3, #0
 80044a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	689a      	ldr	r2, [r3, #8]
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	431a      	orrs	r2, r3
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	431a      	orrs	r2, r3
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	69db      	ldr	r3, [r3, #28]
 80044bc:	4313      	orrs	r3, r2
 80044be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	4baa      	ldr	r3, [pc, #680]	@ (8004770 <UART_SetConfig+0x2d8>)
 80044c8:	4013      	ands	r3, r2
 80044ca:	697a      	ldr	r2, [r7, #20]
 80044cc:	6812      	ldr	r2, [r2, #0]
 80044ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80044d0:	430b      	orrs	r3, r1
 80044d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	68da      	ldr	r2, [r3, #12]
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	430a      	orrs	r2, r1
 80044e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	699b      	ldr	r3, [r3, #24]
 80044ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a9f      	ldr	r2, [pc, #636]	@ (8004774 <UART_SetConfig+0x2dc>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d004      	beq.n	8004504 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	6a1b      	ldr	r3, [r3, #32]
 80044fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004500:	4313      	orrs	r3, r2
 8004502:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800450e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004512:	697a      	ldr	r2, [r7, #20]
 8004514:	6812      	ldr	r2, [r2, #0]
 8004516:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004518:	430b      	orrs	r3, r1
 800451a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004522:	f023 010f 	bic.w	r1, r3, #15
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	430a      	orrs	r2, r1
 8004530:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a90      	ldr	r2, [pc, #576]	@ (8004778 <UART_SetConfig+0x2e0>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d125      	bne.n	8004588 <UART_SetConfig+0xf0>
 800453c:	4b8f      	ldr	r3, [pc, #572]	@ (800477c <UART_SetConfig+0x2e4>)
 800453e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004542:	f003 0303 	and.w	r3, r3, #3
 8004546:	2b03      	cmp	r3, #3
 8004548:	d81a      	bhi.n	8004580 <UART_SetConfig+0xe8>
 800454a:	a201      	add	r2, pc, #4	@ (adr r2, 8004550 <UART_SetConfig+0xb8>)
 800454c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004550:	08004561 	.word	0x08004561
 8004554:	08004571 	.word	0x08004571
 8004558:	08004569 	.word	0x08004569
 800455c:	08004579 	.word	0x08004579
 8004560:	2301      	movs	r3, #1
 8004562:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004566:	e116      	b.n	8004796 <UART_SetConfig+0x2fe>
 8004568:	2302      	movs	r3, #2
 800456a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800456e:	e112      	b.n	8004796 <UART_SetConfig+0x2fe>
 8004570:	2304      	movs	r3, #4
 8004572:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004576:	e10e      	b.n	8004796 <UART_SetConfig+0x2fe>
 8004578:	2308      	movs	r3, #8
 800457a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800457e:	e10a      	b.n	8004796 <UART_SetConfig+0x2fe>
 8004580:	2310      	movs	r3, #16
 8004582:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004586:	e106      	b.n	8004796 <UART_SetConfig+0x2fe>
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a7c      	ldr	r2, [pc, #496]	@ (8004780 <UART_SetConfig+0x2e8>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d138      	bne.n	8004604 <UART_SetConfig+0x16c>
 8004592:	4b7a      	ldr	r3, [pc, #488]	@ (800477c <UART_SetConfig+0x2e4>)
 8004594:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004598:	f003 030c 	and.w	r3, r3, #12
 800459c:	2b0c      	cmp	r3, #12
 800459e:	d82d      	bhi.n	80045fc <UART_SetConfig+0x164>
 80045a0:	a201      	add	r2, pc, #4	@ (adr r2, 80045a8 <UART_SetConfig+0x110>)
 80045a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a6:	bf00      	nop
 80045a8:	080045dd 	.word	0x080045dd
 80045ac:	080045fd 	.word	0x080045fd
 80045b0:	080045fd 	.word	0x080045fd
 80045b4:	080045fd 	.word	0x080045fd
 80045b8:	080045ed 	.word	0x080045ed
 80045bc:	080045fd 	.word	0x080045fd
 80045c0:	080045fd 	.word	0x080045fd
 80045c4:	080045fd 	.word	0x080045fd
 80045c8:	080045e5 	.word	0x080045e5
 80045cc:	080045fd 	.word	0x080045fd
 80045d0:	080045fd 	.word	0x080045fd
 80045d4:	080045fd 	.word	0x080045fd
 80045d8:	080045f5 	.word	0x080045f5
 80045dc:	2300      	movs	r3, #0
 80045de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045e2:	e0d8      	b.n	8004796 <UART_SetConfig+0x2fe>
 80045e4:	2302      	movs	r3, #2
 80045e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045ea:	e0d4      	b.n	8004796 <UART_SetConfig+0x2fe>
 80045ec:	2304      	movs	r3, #4
 80045ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045f2:	e0d0      	b.n	8004796 <UART_SetConfig+0x2fe>
 80045f4:	2308      	movs	r3, #8
 80045f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045fa:	e0cc      	b.n	8004796 <UART_SetConfig+0x2fe>
 80045fc:	2310      	movs	r3, #16
 80045fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004602:	e0c8      	b.n	8004796 <UART_SetConfig+0x2fe>
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a5e      	ldr	r2, [pc, #376]	@ (8004784 <UART_SetConfig+0x2ec>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d125      	bne.n	800465a <UART_SetConfig+0x1c2>
 800460e:	4b5b      	ldr	r3, [pc, #364]	@ (800477c <UART_SetConfig+0x2e4>)
 8004610:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004614:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004618:	2b30      	cmp	r3, #48	@ 0x30
 800461a:	d016      	beq.n	800464a <UART_SetConfig+0x1b2>
 800461c:	2b30      	cmp	r3, #48	@ 0x30
 800461e:	d818      	bhi.n	8004652 <UART_SetConfig+0x1ba>
 8004620:	2b20      	cmp	r3, #32
 8004622:	d00a      	beq.n	800463a <UART_SetConfig+0x1a2>
 8004624:	2b20      	cmp	r3, #32
 8004626:	d814      	bhi.n	8004652 <UART_SetConfig+0x1ba>
 8004628:	2b00      	cmp	r3, #0
 800462a:	d002      	beq.n	8004632 <UART_SetConfig+0x19a>
 800462c:	2b10      	cmp	r3, #16
 800462e:	d008      	beq.n	8004642 <UART_SetConfig+0x1aa>
 8004630:	e00f      	b.n	8004652 <UART_SetConfig+0x1ba>
 8004632:	2300      	movs	r3, #0
 8004634:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004638:	e0ad      	b.n	8004796 <UART_SetConfig+0x2fe>
 800463a:	2302      	movs	r3, #2
 800463c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004640:	e0a9      	b.n	8004796 <UART_SetConfig+0x2fe>
 8004642:	2304      	movs	r3, #4
 8004644:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004648:	e0a5      	b.n	8004796 <UART_SetConfig+0x2fe>
 800464a:	2308      	movs	r3, #8
 800464c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004650:	e0a1      	b.n	8004796 <UART_SetConfig+0x2fe>
 8004652:	2310      	movs	r3, #16
 8004654:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004658:	e09d      	b.n	8004796 <UART_SetConfig+0x2fe>
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a4a      	ldr	r2, [pc, #296]	@ (8004788 <UART_SetConfig+0x2f0>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d125      	bne.n	80046b0 <UART_SetConfig+0x218>
 8004664:	4b45      	ldr	r3, [pc, #276]	@ (800477c <UART_SetConfig+0x2e4>)
 8004666:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800466a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800466e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004670:	d016      	beq.n	80046a0 <UART_SetConfig+0x208>
 8004672:	2bc0      	cmp	r3, #192	@ 0xc0
 8004674:	d818      	bhi.n	80046a8 <UART_SetConfig+0x210>
 8004676:	2b80      	cmp	r3, #128	@ 0x80
 8004678:	d00a      	beq.n	8004690 <UART_SetConfig+0x1f8>
 800467a:	2b80      	cmp	r3, #128	@ 0x80
 800467c:	d814      	bhi.n	80046a8 <UART_SetConfig+0x210>
 800467e:	2b00      	cmp	r3, #0
 8004680:	d002      	beq.n	8004688 <UART_SetConfig+0x1f0>
 8004682:	2b40      	cmp	r3, #64	@ 0x40
 8004684:	d008      	beq.n	8004698 <UART_SetConfig+0x200>
 8004686:	e00f      	b.n	80046a8 <UART_SetConfig+0x210>
 8004688:	2300      	movs	r3, #0
 800468a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800468e:	e082      	b.n	8004796 <UART_SetConfig+0x2fe>
 8004690:	2302      	movs	r3, #2
 8004692:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004696:	e07e      	b.n	8004796 <UART_SetConfig+0x2fe>
 8004698:	2304      	movs	r3, #4
 800469a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800469e:	e07a      	b.n	8004796 <UART_SetConfig+0x2fe>
 80046a0:	2308      	movs	r3, #8
 80046a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046a6:	e076      	b.n	8004796 <UART_SetConfig+0x2fe>
 80046a8:	2310      	movs	r3, #16
 80046aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046ae:	e072      	b.n	8004796 <UART_SetConfig+0x2fe>
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a35      	ldr	r2, [pc, #212]	@ (800478c <UART_SetConfig+0x2f4>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d12a      	bne.n	8004710 <UART_SetConfig+0x278>
 80046ba:	4b30      	ldr	r3, [pc, #192]	@ (800477c <UART_SetConfig+0x2e4>)
 80046bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046c8:	d01a      	beq.n	8004700 <UART_SetConfig+0x268>
 80046ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046ce:	d81b      	bhi.n	8004708 <UART_SetConfig+0x270>
 80046d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046d4:	d00c      	beq.n	80046f0 <UART_SetConfig+0x258>
 80046d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046da:	d815      	bhi.n	8004708 <UART_SetConfig+0x270>
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d003      	beq.n	80046e8 <UART_SetConfig+0x250>
 80046e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046e4:	d008      	beq.n	80046f8 <UART_SetConfig+0x260>
 80046e6:	e00f      	b.n	8004708 <UART_SetConfig+0x270>
 80046e8:	2300      	movs	r3, #0
 80046ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046ee:	e052      	b.n	8004796 <UART_SetConfig+0x2fe>
 80046f0:	2302      	movs	r3, #2
 80046f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046f6:	e04e      	b.n	8004796 <UART_SetConfig+0x2fe>
 80046f8:	2304      	movs	r3, #4
 80046fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046fe:	e04a      	b.n	8004796 <UART_SetConfig+0x2fe>
 8004700:	2308      	movs	r3, #8
 8004702:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004706:	e046      	b.n	8004796 <UART_SetConfig+0x2fe>
 8004708:	2310      	movs	r3, #16
 800470a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800470e:	e042      	b.n	8004796 <UART_SetConfig+0x2fe>
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a17      	ldr	r2, [pc, #92]	@ (8004774 <UART_SetConfig+0x2dc>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d13a      	bne.n	8004790 <UART_SetConfig+0x2f8>
 800471a:	4b18      	ldr	r3, [pc, #96]	@ (800477c <UART_SetConfig+0x2e4>)
 800471c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004720:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004724:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004728:	d01a      	beq.n	8004760 <UART_SetConfig+0x2c8>
 800472a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800472e:	d81b      	bhi.n	8004768 <UART_SetConfig+0x2d0>
 8004730:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004734:	d00c      	beq.n	8004750 <UART_SetConfig+0x2b8>
 8004736:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800473a:	d815      	bhi.n	8004768 <UART_SetConfig+0x2d0>
 800473c:	2b00      	cmp	r3, #0
 800473e:	d003      	beq.n	8004748 <UART_SetConfig+0x2b0>
 8004740:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004744:	d008      	beq.n	8004758 <UART_SetConfig+0x2c0>
 8004746:	e00f      	b.n	8004768 <UART_SetConfig+0x2d0>
 8004748:	2300      	movs	r3, #0
 800474a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800474e:	e022      	b.n	8004796 <UART_SetConfig+0x2fe>
 8004750:	2302      	movs	r3, #2
 8004752:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004756:	e01e      	b.n	8004796 <UART_SetConfig+0x2fe>
 8004758:	2304      	movs	r3, #4
 800475a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800475e:	e01a      	b.n	8004796 <UART_SetConfig+0x2fe>
 8004760:	2308      	movs	r3, #8
 8004762:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004766:	e016      	b.n	8004796 <UART_SetConfig+0x2fe>
 8004768:	2310      	movs	r3, #16
 800476a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800476e:	e012      	b.n	8004796 <UART_SetConfig+0x2fe>
 8004770:	cfff69f3 	.word	0xcfff69f3
 8004774:	40008000 	.word	0x40008000
 8004778:	40013800 	.word	0x40013800
 800477c:	40021000 	.word	0x40021000
 8004780:	40004400 	.word	0x40004400
 8004784:	40004800 	.word	0x40004800
 8004788:	40004c00 	.word	0x40004c00
 800478c:	40005000 	.word	0x40005000
 8004790:	2310      	movs	r3, #16
 8004792:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4aae      	ldr	r2, [pc, #696]	@ (8004a54 <UART_SetConfig+0x5bc>)
 800479c:	4293      	cmp	r3, r2
 800479e:	f040 8097 	bne.w	80048d0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80047a2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80047a6:	2b08      	cmp	r3, #8
 80047a8:	d823      	bhi.n	80047f2 <UART_SetConfig+0x35a>
 80047aa:	a201      	add	r2, pc, #4	@ (adr r2, 80047b0 <UART_SetConfig+0x318>)
 80047ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047b0:	080047d5 	.word	0x080047d5
 80047b4:	080047f3 	.word	0x080047f3
 80047b8:	080047dd 	.word	0x080047dd
 80047bc:	080047f3 	.word	0x080047f3
 80047c0:	080047e3 	.word	0x080047e3
 80047c4:	080047f3 	.word	0x080047f3
 80047c8:	080047f3 	.word	0x080047f3
 80047cc:	080047f3 	.word	0x080047f3
 80047d0:	080047eb 	.word	0x080047eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047d4:	f7fe f984 	bl	8002ae0 <HAL_RCC_GetPCLK1Freq>
 80047d8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80047da:	e010      	b.n	80047fe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047dc:	4b9e      	ldr	r3, [pc, #632]	@ (8004a58 <UART_SetConfig+0x5c0>)
 80047de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80047e0:	e00d      	b.n	80047fe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047e2:	f7fe f90f 	bl	8002a04 <HAL_RCC_GetSysClockFreq>
 80047e6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80047e8:	e009      	b.n	80047fe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80047f0:	e005      	b.n	80047fe <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80047f2:	2300      	movs	r3, #0
 80047f4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80047fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80047fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004800:	2b00      	cmp	r3, #0
 8004802:	f000 8130 	beq.w	8004a66 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800480a:	4a94      	ldr	r2, [pc, #592]	@ (8004a5c <UART_SetConfig+0x5c4>)
 800480c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004810:	461a      	mov	r2, r3
 8004812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004814:	fbb3 f3f2 	udiv	r3, r3, r2
 8004818:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	685a      	ldr	r2, [r3, #4]
 800481e:	4613      	mov	r3, r2
 8004820:	005b      	lsls	r3, r3, #1
 8004822:	4413      	add	r3, r2
 8004824:	69ba      	ldr	r2, [r7, #24]
 8004826:	429a      	cmp	r2, r3
 8004828:	d305      	bcc.n	8004836 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004830:	69ba      	ldr	r2, [r7, #24]
 8004832:	429a      	cmp	r2, r3
 8004834:	d903      	bls.n	800483e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800483c:	e113      	b.n	8004a66 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800483e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004840:	2200      	movs	r2, #0
 8004842:	60bb      	str	r3, [r7, #8]
 8004844:	60fa      	str	r2, [r7, #12]
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800484a:	4a84      	ldr	r2, [pc, #528]	@ (8004a5c <UART_SetConfig+0x5c4>)
 800484c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004850:	b29b      	uxth	r3, r3
 8004852:	2200      	movs	r2, #0
 8004854:	603b      	str	r3, [r7, #0]
 8004856:	607a      	str	r2, [r7, #4]
 8004858:	e9d7 2300 	ldrd	r2, r3, [r7]
 800485c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004860:	f7fb fcda 	bl	8000218 <__aeabi_uldivmod>
 8004864:	4602      	mov	r2, r0
 8004866:	460b      	mov	r3, r1
 8004868:	4610      	mov	r0, r2
 800486a:	4619      	mov	r1, r3
 800486c:	f04f 0200 	mov.w	r2, #0
 8004870:	f04f 0300 	mov.w	r3, #0
 8004874:	020b      	lsls	r3, r1, #8
 8004876:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800487a:	0202      	lsls	r2, r0, #8
 800487c:	6979      	ldr	r1, [r7, #20]
 800487e:	6849      	ldr	r1, [r1, #4]
 8004880:	0849      	lsrs	r1, r1, #1
 8004882:	2000      	movs	r0, #0
 8004884:	460c      	mov	r4, r1
 8004886:	4605      	mov	r5, r0
 8004888:	eb12 0804 	adds.w	r8, r2, r4
 800488c:	eb43 0905 	adc.w	r9, r3, r5
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	469a      	mov	sl, r3
 8004898:	4693      	mov	fp, r2
 800489a:	4652      	mov	r2, sl
 800489c:	465b      	mov	r3, fp
 800489e:	4640      	mov	r0, r8
 80048a0:	4649      	mov	r1, r9
 80048a2:	f7fb fcb9 	bl	8000218 <__aeabi_uldivmod>
 80048a6:	4602      	mov	r2, r0
 80048a8:	460b      	mov	r3, r1
 80048aa:	4613      	mov	r3, r2
 80048ac:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80048ae:	6a3b      	ldr	r3, [r7, #32]
 80048b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80048b4:	d308      	bcc.n	80048c8 <UART_SetConfig+0x430>
 80048b6:	6a3b      	ldr	r3, [r7, #32]
 80048b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048bc:	d204      	bcs.n	80048c8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	6a3a      	ldr	r2, [r7, #32]
 80048c4:	60da      	str	r2, [r3, #12]
 80048c6:	e0ce      	b.n	8004a66 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80048ce:	e0ca      	b.n	8004a66 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	69db      	ldr	r3, [r3, #28]
 80048d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048d8:	d166      	bne.n	80049a8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80048da:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80048de:	2b08      	cmp	r3, #8
 80048e0:	d827      	bhi.n	8004932 <UART_SetConfig+0x49a>
 80048e2:	a201      	add	r2, pc, #4	@ (adr r2, 80048e8 <UART_SetConfig+0x450>)
 80048e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048e8:	0800490d 	.word	0x0800490d
 80048ec:	08004915 	.word	0x08004915
 80048f0:	0800491d 	.word	0x0800491d
 80048f4:	08004933 	.word	0x08004933
 80048f8:	08004923 	.word	0x08004923
 80048fc:	08004933 	.word	0x08004933
 8004900:	08004933 	.word	0x08004933
 8004904:	08004933 	.word	0x08004933
 8004908:	0800492b 	.word	0x0800492b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800490c:	f7fe f8e8 	bl	8002ae0 <HAL_RCC_GetPCLK1Freq>
 8004910:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004912:	e014      	b.n	800493e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004914:	f7fe f8fa 	bl	8002b0c <HAL_RCC_GetPCLK2Freq>
 8004918:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800491a:	e010      	b.n	800493e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800491c:	4b4e      	ldr	r3, [pc, #312]	@ (8004a58 <UART_SetConfig+0x5c0>)
 800491e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004920:	e00d      	b.n	800493e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004922:	f7fe f86f 	bl	8002a04 <HAL_RCC_GetSysClockFreq>
 8004926:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004928:	e009      	b.n	800493e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800492a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800492e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004930:	e005      	b.n	800493e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004932:	2300      	movs	r3, #0
 8004934:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800493c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800493e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004940:	2b00      	cmp	r3, #0
 8004942:	f000 8090 	beq.w	8004a66 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800494a:	4a44      	ldr	r2, [pc, #272]	@ (8004a5c <UART_SetConfig+0x5c4>)
 800494c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004950:	461a      	mov	r2, r3
 8004952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004954:	fbb3 f3f2 	udiv	r3, r3, r2
 8004958:	005a      	lsls	r2, r3, #1
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	085b      	lsrs	r3, r3, #1
 8004960:	441a      	add	r2, r3
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	fbb2 f3f3 	udiv	r3, r2, r3
 800496a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800496c:	6a3b      	ldr	r3, [r7, #32]
 800496e:	2b0f      	cmp	r3, #15
 8004970:	d916      	bls.n	80049a0 <UART_SetConfig+0x508>
 8004972:	6a3b      	ldr	r3, [r7, #32]
 8004974:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004978:	d212      	bcs.n	80049a0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800497a:	6a3b      	ldr	r3, [r7, #32]
 800497c:	b29b      	uxth	r3, r3
 800497e:	f023 030f 	bic.w	r3, r3, #15
 8004982:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004984:	6a3b      	ldr	r3, [r7, #32]
 8004986:	085b      	lsrs	r3, r3, #1
 8004988:	b29b      	uxth	r3, r3
 800498a:	f003 0307 	and.w	r3, r3, #7
 800498e:	b29a      	uxth	r2, r3
 8004990:	8bfb      	ldrh	r3, [r7, #30]
 8004992:	4313      	orrs	r3, r2
 8004994:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	8bfa      	ldrh	r2, [r7, #30]
 800499c:	60da      	str	r2, [r3, #12]
 800499e:	e062      	b.n	8004a66 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80049a6:	e05e      	b.n	8004a66 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80049a8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80049ac:	2b08      	cmp	r3, #8
 80049ae:	d828      	bhi.n	8004a02 <UART_SetConfig+0x56a>
 80049b0:	a201      	add	r2, pc, #4	@ (adr r2, 80049b8 <UART_SetConfig+0x520>)
 80049b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049b6:	bf00      	nop
 80049b8:	080049dd 	.word	0x080049dd
 80049bc:	080049e5 	.word	0x080049e5
 80049c0:	080049ed 	.word	0x080049ed
 80049c4:	08004a03 	.word	0x08004a03
 80049c8:	080049f3 	.word	0x080049f3
 80049cc:	08004a03 	.word	0x08004a03
 80049d0:	08004a03 	.word	0x08004a03
 80049d4:	08004a03 	.word	0x08004a03
 80049d8:	080049fb 	.word	0x080049fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049dc:	f7fe f880 	bl	8002ae0 <HAL_RCC_GetPCLK1Freq>
 80049e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80049e2:	e014      	b.n	8004a0e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049e4:	f7fe f892 	bl	8002b0c <HAL_RCC_GetPCLK2Freq>
 80049e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80049ea:	e010      	b.n	8004a0e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049ec:	4b1a      	ldr	r3, [pc, #104]	@ (8004a58 <UART_SetConfig+0x5c0>)
 80049ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80049f0:	e00d      	b.n	8004a0e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049f2:	f7fe f807 	bl	8002a04 <HAL_RCC_GetSysClockFreq>
 80049f6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80049f8:	e009      	b.n	8004a0e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004a00:	e005      	b.n	8004a0e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004a02:	2300      	movs	r3, #0
 8004a04:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004a0c:	bf00      	nop
    }

    if (pclk != 0U)
 8004a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d028      	beq.n	8004a66 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a18:	4a10      	ldr	r2, [pc, #64]	@ (8004a5c <UART_SetConfig+0x5c4>)
 8004a1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a1e:	461a      	mov	r2, r3
 8004a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a22:	fbb3 f2f2 	udiv	r2, r3, r2
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	085b      	lsrs	r3, r3, #1
 8004a2c:	441a      	add	r2, r3
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a36:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a38:	6a3b      	ldr	r3, [r7, #32]
 8004a3a:	2b0f      	cmp	r3, #15
 8004a3c:	d910      	bls.n	8004a60 <UART_SetConfig+0x5c8>
 8004a3e:	6a3b      	ldr	r3, [r7, #32]
 8004a40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a44:	d20c      	bcs.n	8004a60 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a46:	6a3b      	ldr	r3, [r7, #32]
 8004a48:	b29a      	uxth	r2, r3
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	60da      	str	r2, [r3, #12]
 8004a50:	e009      	b.n	8004a66 <UART_SetConfig+0x5ce>
 8004a52:	bf00      	nop
 8004a54:	40008000 	.word	0x40008000
 8004a58:	00f42400 	.word	0x00f42400
 8004a5c:	0800568c 	.word	0x0800568c
      }
      else
      {
        ret = HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	2201      	movs	r2, #1
 8004a72:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004a82:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3730      	adds	r7, #48	@ 0x30
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004a90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a9c:	f003 0308 	and.w	r3, r3, #8
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d00a      	beq.n	8004aba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	430a      	orrs	r2, r1
 8004ab8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004abe:	f003 0301 	and.w	r3, r3, #1
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00a      	beq.n	8004adc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ae0:	f003 0302 	and.w	r3, r3, #2
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d00a      	beq.n	8004afe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	430a      	orrs	r2, r1
 8004afc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b02:	f003 0304 	and.w	r3, r3, #4
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00a      	beq.n	8004b20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	430a      	orrs	r2, r1
 8004b1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b24:	f003 0310 	and.w	r3, r3, #16
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d00a      	beq.n	8004b42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b46:	f003 0320 	and.w	r3, r3, #32
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d00a      	beq.n	8004b64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	430a      	orrs	r2, r1
 8004b62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d01a      	beq.n	8004ba6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	430a      	orrs	r2, r1
 8004b84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b8e:	d10a      	bne.n	8004ba6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004baa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00a      	beq.n	8004bc8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	430a      	orrs	r2, r1
 8004bc6:	605a      	str	r2, [r3, #4]
  }
}
 8004bc8:	bf00      	nop
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b098      	sub	sp, #96	@ 0x60
 8004bd8:	af02      	add	r7, sp, #8
 8004bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004be4:	f7fc fc3c 	bl	8001460 <HAL_GetTick>
 8004be8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0308 	and.w	r3, r3, #8
 8004bf4:	2b08      	cmp	r3, #8
 8004bf6:	d12f      	bne.n	8004c58 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bf8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004bfc:	9300      	str	r3, [sp, #0]
 8004bfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c00:	2200      	movs	r2, #0
 8004c02:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 f88e 	bl	8004d28 <UART_WaitOnFlagUntilTimeout>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d022      	beq.n	8004c58 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c1a:	e853 3f00 	ldrex	r3, [r3]
 8004c1e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004c20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c26:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c30:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c32:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c34:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004c36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c38:	e841 2300 	strex	r3, r2, [r1]
 8004c3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d1e6      	bne.n	8004c12 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2220      	movs	r2, #32
 8004c48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e063      	b.n	8004d20 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0304 	and.w	r3, r3, #4
 8004c62:	2b04      	cmp	r3, #4
 8004c64:	d149      	bne.n	8004cfa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c66:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004c6a:	9300      	str	r3, [sp, #0]
 8004c6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f000 f857 	bl	8004d28 <UART_WaitOnFlagUntilTimeout>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d03c      	beq.n	8004cfa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c88:	e853 3f00 	ldrex	r3, [r3]
 8004c8c:	623b      	str	r3, [r7, #32]
   return(result);
 8004c8e:	6a3b      	ldr	r3, [r7, #32]
 8004c90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c9e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ca0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ca4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ca6:	e841 2300 	strex	r3, r2, [r1]
 8004caa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d1e6      	bne.n	8004c80 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	3308      	adds	r3, #8
 8004cb8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	e853 3f00 	ldrex	r3, [r3]
 8004cc0:	60fb      	str	r3, [r7, #12]
   return(result);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f023 0301 	bic.w	r3, r3, #1
 8004cc8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	3308      	adds	r3, #8
 8004cd0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004cd2:	61fa      	str	r2, [r7, #28]
 8004cd4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd6:	69b9      	ldr	r1, [r7, #24]
 8004cd8:	69fa      	ldr	r2, [r7, #28]
 8004cda:	e841 2300 	strex	r3, r2, [r1]
 8004cde:	617b      	str	r3, [r7, #20]
   return(result);
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d1e5      	bne.n	8004cb2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2220      	movs	r2, #32
 8004cea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e012      	b.n	8004d20 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2220      	movs	r2, #32
 8004cfe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2220      	movs	r2, #32
 8004d06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3758      	adds	r7, #88	@ 0x58
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	60b9      	str	r1, [r7, #8]
 8004d32:	603b      	str	r3, [r7, #0]
 8004d34:	4613      	mov	r3, r2
 8004d36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d38:	e04f      	b.n	8004dda <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d40:	d04b      	beq.n	8004dda <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d42:	f7fc fb8d 	bl	8001460 <HAL_GetTick>
 8004d46:	4602      	mov	r2, r0
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	69ba      	ldr	r2, [r7, #24]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d302      	bcc.n	8004d58 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d101      	bne.n	8004d5c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004d58:	2303      	movs	r3, #3
 8004d5a:	e04e      	b.n	8004dfa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0304 	and.w	r3, r3, #4
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d037      	beq.n	8004dda <UART_WaitOnFlagUntilTimeout+0xb2>
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	2b80      	cmp	r3, #128	@ 0x80
 8004d6e:	d034      	beq.n	8004dda <UART_WaitOnFlagUntilTimeout+0xb2>
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	2b40      	cmp	r3, #64	@ 0x40
 8004d74:	d031      	beq.n	8004dda <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	69db      	ldr	r3, [r3, #28]
 8004d7c:	f003 0308 	and.w	r3, r3, #8
 8004d80:	2b08      	cmp	r3, #8
 8004d82:	d110      	bne.n	8004da6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2208      	movs	r2, #8
 8004d8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d8c:	68f8      	ldr	r0, [r7, #12]
 8004d8e:	f000 f920 	bl	8004fd2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2208      	movs	r2, #8
 8004d96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e029      	b.n	8004dfa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	69db      	ldr	r3, [r3, #28]
 8004dac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004db0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004db4:	d111      	bne.n	8004dda <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004dbe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004dc0:	68f8      	ldr	r0, [r7, #12]
 8004dc2:	f000 f906 	bl	8004fd2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2220      	movs	r2, #32
 8004dca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e00f      	b.n	8004dfa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	69da      	ldr	r2, [r3, #28]
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	4013      	ands	r3, r2
 8004de4:	68ba      	ldr	r2, [r7, #8]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	bf0c      	ite	eq
 8004dea:	2301      	moveq	r3, #1
 8004dec:	2300      	movne	r3, #0
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	461a      	mov	r2, r3
 8004df2:	79fb      	ldrb	r3, [r7, #7]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d0a0      	beq.n	8004d3a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3710      	adds	r7, #16
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
	...

08004e04 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b096      	sub	sp, #88	@ 0x58
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	4613      	mov	r3, r2
 8004e10:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	68ba      	ldr	r2, [r7, #8]
 8004e16:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	88fa      	ldrh	r2, [r7, #6]
 8004e1c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2222      	movs	r2, #34	@ 0x22
 8004e2c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d02d      	beq.n	8004e96 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e40:	4a40      	ldr	r2, [pc, #256]	@ (8004f44 <UART_Start_Receive_DMA+0x140>)
 8004e42:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e4a:	4a3f      	ldr	r2, [pc, #252]	@ (8004f48 <UART_Start_Receive_DMA+0x144>)
 8004e4c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e54:	4a3d      	ldr	r2, [pc, #244]	@ (8004f4c <UART_Start_Receive_DMA+0x148>)
 8004e56:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e5e:	2200      	movs	r2, #0
 8004e60:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	3324      	adds	r3, #36	@ 0x24
 8004e6e:	4619      	mov	r1, r3
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e74:	461a      	mov	r2, r3
 8004e76:	88fb      	ldrh	r3, [r7, #6]
 8004e78:	f7fc fcb6 	bl	80017e8 <HAL_DMA_Start_IT>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d009      	beq.n	8004e96 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2210      	movs	r2, #16
 8004e86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2220      	movs	r2, #32
 8004e8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e051      	b.n	8004f3a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	691b      	ldr	r3, [r3, #16]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d018      	beq.n	8004ed0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ea6:	e853 3f00 	ldrex	r3, [r3]
 8004eaa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004eac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004eb2:	657b      	str	r3, [r7, #84]	@ 0x54
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	461a      	mov	r2, r3
 8004eba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ebc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ebe:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004ec2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ec4:	e841 2300 	strex	r3, r2, [r1]
 8004ec8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004eca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1e6      	bne.n	8004e9e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	3308      	adds	r3, #8
 8004ed6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eda:	e853 3f00 	ldrex	r3, [r3]
 8004ede:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee2:	f043 0301 	orr.w	r3, r3, #1
 8004ee6:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	3308      	adds	r3, #8
 8004eee:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004ef0:	637a      	str	r2, [r7, #52]	@ 0x34
 8004ef2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004ef6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004ef8:	e841 2300 	strex	r3, r2, [r1]
 8004efc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004efe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d1e5      	bne.n	8004ed0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	3308      	adds	r3, #8
 8004f0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	e853 3f00 	ldrex	r3, [r3]
 8004f12:	613b      	str	r3, [r7, #16]
   return(result);
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	3308      	adds	r3, #8
 8004f22:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004f24:	623a      	str	r2, [r7, #32]
 8004f26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f28:	69f9      	ldr	r1, [r7, #28]
 8004f2a:	6a3a      	ldr	r2, [r7, #32]
 8004f2c:	e841 2300 	strex	r3, r2, [r1]
 8004f30:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d1e5      	bne.n	8004f04 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3758      	adds	r7, #88	@ 0x58
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	08005155 	.word	0x08005155
 8004f48:	08005281 	.word	0x08005281
 8004f4c:	080052bf 	.word	0x080052bf

08004f50 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b08f      	sub	sp, #60	@ 0x3c
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f5e:	6a3b      	ldr	r3, [r7, #32]
 8004f60:	e853 3f00 	ldrex	r3, [r3]
 8004f64:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004f6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	461a      	mov	r2, r3
 8004f74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f78:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f7a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f7e:	e841 2300 	strex	r3, r2, [r1]
 8004f82:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1e6      	bne.n	8004f58 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	3308      	adds	r3, #8
 8004f90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	e853 3f00 	ldrex	r3, [r3]
 8004f98:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004fa0:	633b      	str	r3, [r7, #48]	@ 0x30
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	3308      	adds	r3, #8
 8004fa8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004faa:	61ba      	str	r2, [r7, #24]
 8004fac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fae:	6979      	ldr	r1, [r7, #20]
 8004fb0:	69ba      	ldr	r2, [r7, #24]
 8004fb2:	e841 2300 	strex	r3, r2, [r1]
 8004fb6:	613b      	str	r3, [r7, #16]
   return(result);
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d1e5      	bne.n	8004f8a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2220      	movs	r2, #32
 8004fc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8004fc6:	bf00      	nop
 8004fc8:	373c      	adds	r7, #60	@ 0x3c
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr

08004fd2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fd2:	b480      	push	{r7}
 8004fd4:	b095      	sub	sp, #84	@ 0x54
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fe2:	e853 3f00 	ldrex	r3, [r3]
 8004fe6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004fee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ff8:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ffa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ffc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004ffe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005000:	e841 2300 	strex	r3, r2, [r1]
 8005004:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005008:	2b00      	cmp	r3, #0
 800500a:	d1e6      	bne.n	8004fda <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	3308      	adds	r3, #8
 8005012:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005014:	6a3b      	ldr	r3, [r7, #32]
 8005016:	e853 3f00 	ldrex	r3, [r3]
 800501a:	61fb      	str	r3, [r7, #28]
   return(result);
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005022:	f023 0301 	bic.w	r3, r3, #1
 8005026:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	3308      	adds	r3, #8
 800502e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005030:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005032:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005034:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005036:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005038:	e841 2300 	strex	r3, r2, [r1]
 800503c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800503e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005040:	2b00      	cmp	r3, #0
 8005042:	d1e3      	bne.n	800500c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005048:	2b01      	cmp	r3, #1
 800504a:	d118      	bne.n	800507e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	e853 3f00 	ldrex	r3, [r3]
 8005058:	60bb      	str	r3, [r7, #8]
   return(result);
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	f023 0310 	bic.w	r3, r3, #16
 8005060:	647b      	str	r3, [r7, #68]	@ 0x44
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	461a      	mov	r2, r3
 8005068:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800506a:	61bb      	str	r3, [r7, #24]
 800506c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800506e:	6979      	ldr	r1, [r7, #20]
 8005070:	69ba      	ldr	r2, [r7, #24]
 8005072:	e841 2300 	strex	r3, r2, [r1]
 8005076:	613b      	str	r3, [r7, #16]
   return(result);
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d1e6      	bne.n	800504c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2220      	movs	r2, #32
 8005082:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005092:	bf00      	nop
 8005094:	3754      	adds	r7, #84	@ 0x54
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr

0800509e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800509e:	b580      	push	{r7, lr}
 80050a0:	b090      	sub	sp, #64	@ 0x40
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050aa:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 0320 	and.w	r3, r3, #32
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d137      	bne.n	800512a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80050ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050bc:	2200      	movs	r2, #0
 80050be:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80050c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	3308      	adds	r3, #8
 80050c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050cc:	e853 3f00 	ldrex	r3, [r3]
 80050d0:	623b      	str	r3, [r7, #32]
   return(result);
 80050d2:	6a3b      	ldr	r3, [r7, #32]
 80050d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80050da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	3308      	adds	r3, #8
 80050e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80050e2:	633a      	str	r2, [r7, #48]	@ 0x30
 80050e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80050e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050ea:	e841 2300 	strex	r3, r2, [r1]
 80050ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80050f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d1e5      	bne.n	80050c2 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80050f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	e853 3f00 	ldrex	r3, [r3]
 8005102:	60fb      	str	r3, [r7, #12]
   return(result);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800510a:	637b      	str	r3, [r7, #52]	@ 0x34
 800510c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	461a      	mov	r2, r3
 8005112:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005114:	61fb      	str	r3, [r7, #28]
 8005116:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005118:	69b9      	ldr	r1, [r7, #24]
 800511a:	69fa      	ldr	r2, [r7, #28]
 800511c:	e841 2300 	strex	r3, r2, [r1]
 8005120:	617b      	str	r3, [r7, #20]
   return(result);
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d1e6      	bne.n	80050f6 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005128:	e002      	b.n	8005130 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800512a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800512c:	f7ff f980 	bl	8004430 <HAL_UART_TxCpltCallback>
}
 8005130:	bf00      	nop
 8005132:	3740      	adds	r7, #64	@ 0x40
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}

08005138 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005144:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005146:	68f8      	ldr	r0, [r7, #12]
 8005148:	f7ff f97c 	bl	8004444 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800514c:	bf00      	nop
 800514e:	3710      	adds	r7, #16
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b09c      	sub	sp, #112	@ 0x70
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005160:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0320 	and.w	r3, r3, #32
 800516c:	2b00      	cmp	r3, #0
 800516e:	d171      	bne.n	8005254 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8005170:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005172:	2200      	movs	r2, #0
 8005174:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005178:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800517e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005180:	e853 3f00 	ldrex	r3, [r3]
 8005184:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005186:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005188:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800518c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800518e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	461a      	mov	r2, r3
 8005194:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005196:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005198:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800519a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800519c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800519e:	e841 2300 	strex	r3, r2, [r1]
 80051a2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80051a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d1e6      	bne.n	8005178 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	3308      	adds	r3, #8
 80051b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051b4:	e853 3f00 	ldrex	r3, [r3]
 80051b8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80051ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051bc:	f023 0301 	bic.w	r3, r3, #1
 80051c0:	667b      	str	r3, [r7, #100]	@ 0x64
 80051c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	3308      	adds	r3, #8
 80051c8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80051ca:	647a      	str	r2, [r7, #68]	@ 0x44
 80051cc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80051d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80051d2:	e841 2300 	strex	r3, r2, [r1]
 80051d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80051d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d1e5      	bne.n	80051aa <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	3308      	adds	r3, #8
 80051e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e8:	e853 3f00 	ldrex	r3, [r3]
 80051ec:	623b      	str	r3, [r7, #32]
   return(result);
 80051ee:	6a3b      	ldr	r3, [r7, #32]
 80051f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051f4:	663b      	str	r3, [r7, #96]	@ 0x60
 80051f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	3308      	adds	r3, #8
 80051fc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80051fe:	633a      	str	r2, [r7, #48]	@ 0x30
 8005200:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005202:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005204:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005206:	e841 2300 	strex	r3, r2, [r1]
 800520a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800520c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800520e:	2b00      	cmp	r3, #0
 8005210:	d1e5      	bne.n	80051de <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005212:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005214:	2220      	movs	r2, #32
 8005216:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800521a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800521c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800521e:	2b01      	cmp	r3, #1
 8005220:	d118      	bne.n	8005254 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005222:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	e853 3f00 	ldrex	r3, [r3]
 800522e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f023 0310 	bic.w	r3, r3, #16
 8005236:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005238:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	461a      	mov	r2, r3
 800523e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005240:	61fb      	str	r3, [r7, #28]
 8005242:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005244:	69b9      	ldr	r1, [r7, #24]
 8005246:	69fa      	ldr	r2, [r7, #28]
 8005248:	e841 2300 	strex	r3, r2, [r1]
 800524c:	617b      	str	r3, [r7, #20]
   return(result);
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d1e6      	bne.n	8005222 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005254:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005256:	2200      	movs	r2, #0
 8005258:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800525a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800525c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800525e:	2b01      	cmp	r3, #1
 8005260:	d107      	bne.n	8005272 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005262:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005264:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005268:	4619      	mov	r1, r3
 800526a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800526c:	f7ff f908 	bl	8004480 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005270:	e002      	b.n	8005278 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005272:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005274:	f7fb fea8 	bl	8000fc8 <HAL_UART_RxCpltCallback>
}
 8005278:	bf00      	nop
 800527a:	3770      	adds	r7, #112	@ 0x70
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}

08005280 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800528c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2201      	movs	r2, #1
 8005292:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005298:	2b01      	cmp	r3, #1
 800529a:	d109      	bne.n	80052b0 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80052a2:	085b      	lsrs	r3, r3, #1
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	4619      	mov	r1, r3
 80052a8:	68f8      	ldr	r0, [r7, #12]
 80052aa:	f7ff f8e9 	bl	8004480 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80052ae:	e002      	b.n	80052b6 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80052b0:	68f8      	ldr	r0, [r7, #12]
 80052b2:	f7ff f8d1 	bl	8004458 <HAL_UART_RxHalfCpltCallback>
}
 80052b6:	bf00      	nop
 80052b8:	3710      	adds	r7, #16
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}

080052be <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80052be:	b580      	push	{r7, lr}
 80052c0:	b086      	sub	sp, #24
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ca:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052d2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80052da:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052e6:	2b80      	cmp	r3, #128	@ 0x80
 80052e8:	d109      	bne.n	80052fe <UART_DMAError+0x40>
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	2b21      	cmp	r3, #33	@ 0x21
 80052ee:	d106      	bne.n	80052fe <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80052f8:	6978      	ldr	r0, [r7, #20]
 80052fa:	f7ff fe29 	bl	8004f50 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005308:	2b40      	cmp	r3, #64	@ 0x40
 800530a:	d109      	bne.n	8005320 <UART_DMAError+0x62>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2b22      	cmp	r3, #34	@ 0x22
 8005310:	d106      	bne.n	8005320 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	2200      	movs	r2, #0
 8005316:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800531a:	6978      	ldr	r0, [r7, #20]
 800531c:	f7ff fe59 	bl	8004fd2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005326:	f043 0210 	orr.w	r2, r3, #16
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005330:	6978      	ldr	r0, [r7, #20]
 8005332:	f7ff f89b 	bl	800446c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005336:	bf00      	nop
 8005338:	3718      	adds	r7, #24
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}

0800533e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800533e:	b580      	push	{r7, lr}
 8005340:	b084      	sub	sp, #16
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800534a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2200      	movs	r2, #0
 8005350:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2200      	movs	r2, #0
 8005358:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800535c:	68f8      	ldr	r0, [r7, #12]
 800535e:	f7ff f885 	bl	800446c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005362:	bf00      	nop
 8005364:	3710      	adds	r7, #16
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}

0800536a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800536a:	b580      	push	{r7, lr}
 800536c:	b088      	sub	sp, #32
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	e853 3f00 	ldrex	r3, [r3]
 800537e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005386:	61fb      	str	r3, [r7, #28]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	461a      	mov	r2, r3
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	61bb      	str	r3, [r7, #24]
 8005392:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005394:	6979      	ldr	r1, [r7, #20]
 8005396:	69ba      	ldr	r2, [r7, #24]
 8005398:	e841 2300 	strex	r3, r2, [r1]
 800539c:	613b      	str	r3, [r7, #16]
   return(result);
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d1e6      	bne.n	8005372 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2220      	movs	r2, #32
 80053a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f7ff f83c 	bl	8004430 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053b8:	bf00      	nop
 80053ba:	3720      	adds	r7, #32
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80053c8:	bf00      	nop
 80053ca:	370c      	adds	r7, #12
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80053dc:	bf00      	nop
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80053f0:	bf00      	nop
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800540a:	2b01      	cmp	r3, #1
 800540c:	d101      	bne.n	8005412 <HAL_UARTEx_DisableFifoMode+0x16>
 800540e:	2302      	movs	r3, #2
 8005410:	e027      	b.n	8005462 <HAL_UARTEx_DisableFifoMode+0x66>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2201      	movs	r2, #1
 8005416:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2224      	movs	r2, #36	@ 0x24
 800541e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f022 0201 	bic.w	r2, r2, #1
 8005438:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005440:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2220      	movs	r2, #32
 8005454:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3714      	adds	r7, #20
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr

0800546e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800546e:	b580      	push	{r7, lr}
 8005470:	b084      	sub	sp, #16
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
 8005476:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800547e:	2b01      	cmp	r3, #1
 8005480:	d101      	bne.n	8005486 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005482:	2302      	movs	r3, #2
 8005484:	e02d      	b.n	80054e2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2201      	movs	r2, #1
 800548a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2224      	movs	r2, #36	@ 0x24
 8005492:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f022 0201 	bic.w	r2, r2, #1
 80054ac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	683a      	ldr	r2, [r7, #0]
 80054be:	430a      	orrs	r2, r1
 80054c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 f850 	bl	8005568 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2220      	movs	r2, #32
 80054d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3710      	adds	r7, #16
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}

080054ea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80054ea:	b580      	push	{r7, lr}
 80054ec:	b084      	sub	sp, #16
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
 80054f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d101      	bne.n	8005502 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80054fe:	2302      	movs	r3, #2
 8005500:	e02d      	b.n	800555e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2201      	movs	r2, #1
 8005506:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2224      	movs	r2, #36	@ 0x24
 800550e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f022 0201 	bic.w	r2, r2, #1
 8005528:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	683a      	ldr	r2, [r7, #0]
 800553a:	430a      	orrs	r2, r1
 800553c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 f812 	bl	8005568 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	68fa      	ldr	r2, [r7, #12]
 800554a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2220      	movs	r2, #32
 8005550:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800555c:	2300      	movs	r3, #0
}
 800555e:	4618      	mov	r0, r3
 8005560:	3710      	adds	r7, #16
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
	...

08005568 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005568:	b480      	push	{r7}
 800556a:	b085      	sub	sp, #20
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005574:	2b00      	cmp	r3, #0
 8005576:	d108      	bne.n	800558a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005588:	e031      	b.n	80055ee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800558a:	2308      	movs	r3, #8
 800558c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800558e:	2308      	movs	r3, #8
 8005590:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	0e5b      	lsrs	r3, r3, #25
 800559a:	b2db      	uxtb	r3, r3
 800559c:	f003 0307 	and.w	r3, r3, #7
 80055a0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	0f5b      	lsrs	r3, r3, #29
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	f003 0307 	and.w	r3, r3, #7
 80055b0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80055b2:	7bbb      	ldrb	r3, [r7, #14]
 80055b4:	7b3a      	ldrb	r2, [r7, #12]
 80055b6:	4911      	ldr	r1, [pc, #68]	@ (80055fc <UARTEx_SetNbDataToProcess+0x94>)
 80055b8:	5c8a      	ldrb	r2, [r1, r2]
 80055ba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80055be:	7b3a      	ldrb	r2, [r7, #12]
 80055c0:	490f      	ldr	r1, [pc, #60]	@ (8005600 <UARTEx_SetNbDataToProcess+0x98>)
 80055c2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80055c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80055c8:	b29a      	uxth	r2, r3
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80055d0:	7bfb      	ldrb	r3, [r7, #15]
 80055d2:	7b7a      	ldrb	r2, [r7, #13]
 80055d4:	4909      	ldr	r1, [pc, #36]	@ (80055fc <UARTEx_SetNbDataToProcess+0x94>)
 80055d6:	5c8a      	ldrb	r2, [r1, r2]
 80055d8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80055dc:	7b7a      	ldrb	r2, [r7, #13]
 80055de:	4908      	ldr	r1, [pc, #32]	@ (8005600 <UARTEx_SetNbDataToProcess+0x98>)
 80055e0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80055e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80055e6:	b29a      	uxth	r2, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80055ee:	bf00      	nop
 80055f0:	3714      	adds	r7, #20
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr
 80055fa:	bf00      	nop
 80055fc:	080056a4 	.word	0x080056a4
 8005600:	080056ac 	.word	0x080056ac

08005604 <memset>:
 8005604:	4402      	add	r2, r0
 8005606:	4603      	mov	r3, r0
 8005608:	4293      	cmp	r3, r2
 800560a:	d100      	bne.n	800560e <memset+0xa>
 800560c:	4770      	bx	lr
 800560e:	f803 1b01 	strb.w	r1, [r3], #1
 8005612:	e7f9      	b.n	8005608 <memset+0x4>

08005614 <__libc_init_array>:
 8005614:	b570      	push	{r4, r5, r6, lr}
 8005616:	4d0d      	ldr	r5, [pc, #52]	@ (800564c <__libc_init_array+0x38>)
 8005618:	4c0d      	ldr	r4, [pc, #52]	@ (8005650 <__libc_init_array+0x3c>)
 800561a:	1b64      	subs	r4, r4, r5
 800561c:	10a4      	asrs	r4, r4, #2
 800561e:	2600      	movs	r6, #0
 8005620:	42a6      	cmp	r6, r4
 8005622:	d109      	bne.n	8005638 <__libc_init_array+0x24>
 8005624:	4d0b      	ldr	r5, [pc, #44]	@ (8005654 <__libc_init_array+0x40>)
 8005626:	4c0c      	ldr	r4, [pc, #48]	@ (8005658 <__libc_init_array+0x44>)
 8005628:	f000 f818 	bl	800565c <_init>
 800562c:	1b64      	subs	r4, r4, r5
 800562e:	10a4      	asrs	r4, r4, #2
 8005630:	2600      	movs	r6, #0
 8005632:	42a6      	cmp	r6, r4
 8005634:	d105      	bne.n	8005642 <__libc_init_array+0x2e>
 8005636:	bd70      	pop	{r4, r5, r6, pc}
 8005638:	f855 3b04 	ldr.w	r3, [r5], #4
 800563c:	4798      	blx	r3
 800563e:	3601      	adds	r6, #1
 8005640:	e7ee      	b.n	8005620 <__libc_init_array+0xc>
 8005642:	f855 3b04 	ldr.w	r3, [r5], #4
 8005646:	4798      	blx	r3
 8005648:	3601      	adds	r6, #1
 800564a:	e7f2      	b.n	8005632 <__libc_init_array+0x1e>
 800564c:	080056bc 	.word	0x080056bc
 8005650:	080056bc 	.word	0x080056bc
 8005654:	080056bc 	.word	0x080056bc
 8005658:	080056c0 	.word	0x080056c0

0800565c <_init>:
 800565c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800565e:	bf00      	nop
 8005660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005662:	bc08      	pop	{r3}
 8005664:	469e      	mov	lr, r3
 8005666:	4770      	bx	lr

08005668 <_fini>:
 8005668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800566a:	bf00      	nop
 800566c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800566e:	bc08      	pop	{r3}
 8005670:	469e      	mov	lr, r3
 8005672:	4770      	bx	lr
